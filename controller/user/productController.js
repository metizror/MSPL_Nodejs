

var async = require('async');
var sendResponse = require('../../routes/sendResponse');
var constant = require('../../routes/constant');
var func = require('../../routes/commonfunction');
var consts=require('./../../config/const')
const lib=require('../../lib/NotificationMgr')
var _ = require('underscore');
var something = "Something went wrong";
var client = require('twilio')("AC4b6d9ecd84afd6db7cf9ac5f055d7784","782e67bf1f26170706acd639d757ae08");
var moment = require('moment');

var pushNotifications = require('../../routes/pushNotifications');
var orderFunction = require('../../routes/orderFunction');
var AdminMail = "ops@royo.com";
var crypto = require('crypto')
    algorithm = consts.SERVER.CYPTO.ALGO,
    crypto_password =  consts.SERVER.CYPTO.PWD
var redis =require("redis");
// var redisClient = redis.createClient( {host : '45.232.252.42',
// password: "redis@123"});
var log4js = require('log4js');
var logger = log4js.getLogger();
logger.level = config.get('server.debug_level');
const ExecuteQ=require('../../lib/Execute')
const Universal=require('../../util/Universal')
const homeController = require("./homeController");
const common = require('../../common');
const Execute = require('../../lib/Execute');
const { resolve } = require('path');
var checkUserAccessToken = function(res,accessToken,dbName,callback){
    logger.debug("===dbName====",dbName)
    var sql = " select id from user where access_token = ? ";
    multiConnection[dbName].query(sql, [accessToken], function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg,res,500);
        }
        else {
            if(result.length){
                callback(null, result[0]);
            }else{
                var msg = "invalid access token ";
                return sendResponse.sendErrorMessage(msg,res,401);
            }
        }
    })
}
const filterProducts = function(req,res){
    logger.debug("================entered in filterProducts========",req.headers)
    var productsDetails = {};
    var supplierBranchId = 0;
    var languageId = 0;
    var subcategoryId = 0;
    var countryId = 0;
    var data;
    var areaId;
    var priceType =0;
    var listing = {};
    var radiusFlg = true;    
    var categoiesDataTemp;

    // 2 option mean we are not applying that filter on products;

    logger.debug("========req.body.discount==",req.body);
    var zone_offset=req.body.zone_offset!=undefined && req.body.zone_offset!=="" && req.body.zone_offset!=null?req.body.zone_offset:"+05:30"
    var current_date =moment().utcOffset(zone_offset).format("YYYY-MM-DD")
    logger.debug("=====zone_offset==current_date====",zone_offset,current_date)

    var low_to_high=req.body.low_to_high!=undefined && req.body.low_to_high!=="" && req.body.low_to_high!=null?req.body.low_to_high:2
   
    logger.debug(low_to_high);

    var min_price_range=req.body.min_price_range;
    var max_price_range=req.body.max_price_range;
    var discount=req.body.is_discount!=undefined && req.body.is_discount!=="" && req.body.is_discount!=null && req.body.is_discount!=0 ? req.body.is_discount:2;
    var is_availability=req.body.is_availability!=undefined && req.body.is_availability!=="" && req.body.is_availability!=null && req.body.is_availability==1 ? req.body.is_availability:2;
    var sort_by=req.body.sort_by!=undefined && req.body.sort_by!=="" && req.body.sort_by!=null?req.body.sort_by:2
    var variant_ids=req.body.variant_ids;
    var is_variant=req.body.variant_ids && req.body.variant_ids.length>0?1:2
    var product_name=req.body.product_name!=undefined && req.body.product_name!=="" && req.body.product_name!=null?req.body.product_name:""
    var is_product=req.body.product_name!=undefined && req.body.product_name!=="" && req.body.product_name!=null?1:2;
    var latitude=req.body.latitude!=undefined && req.body.longitude!==""?req.body.latitude:0
    var longitude=req.body.longitude!=undefined && req.body.longitude!==""?req.body.longitude:0
    var supplier_ids=req.body.supplier_ids;
    var is_supplier=req.body.supplier_ids && req.body.supplier_ids.length>0?1:2;
    var is_sub_category=req.body.subCategoryId && req.body.subCategoryId.length>0?1:2;
    var is_brands=req.body.brand_ids && req.body.brand_ids.length>0?1:2;
    var brand_ids=req.body.brand_ids;
    var asc_desc_val="ASC",sort_by_query; 
    var pagination =req.body.offset!=undefined && req.body.limit!=undefined?" limit "+`${req.body.limit}`+" offset "+`${req.body.offset}`:" limit 100";
    logger.debug("==PAGNT=QUERY==",pagination);
    var user_id=0,sql="";;   
    if(low_to_high==1){
        asc_desc_val="DESC";
        sort_by_query="-display_price "+asc_desc_val+",display_price "+asc_desc_val+pagination; 
    }
    else if(low_to_high==0){
                sort_by_query="-display_price "+asc_desc_val+",display_price "+asc_desc_val+pagination; 
    }
    else if(low_to_high==3){
             sort_by_query="-avg_rating "+asc_desc_val+",avg_rating "+asc_desc_val+pagination; 
    }   
    

    async.auto({
        getValues:function(callback){

            if(!(req.body.languageId)){
                var msg = "language id not found";
                return sendResponse.sendErrorMessage(msg,res,400);
            }
           else if(!(req.body.subCategoryId)){
                var msg = "subcategory id not found";
                return sendResponse.sendErrorMessage(msg,res,400);
            }

            else if(req.body && req.body.supplierBranchId && req.body.languageId && req.body.subCategoryId){
                
                supplierBranchId = req.body.supplierBranchId;
                languageId = req.body.languageId;
                subcategoryId = req.body.subCategoryId;
                callback(null);
            } 
            else if(req.body  && req.body.languageId && req.body.subCategoryId){
                languageId = req.body.languageId;
                subcategoryId = req.body.subCategoryId;
                callback(null);
            } 
            else{
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg,res,500);
            }
        },
        getRediusProduct:['getValues',function(callback){
            // var values = [req.headers.authorization];
            if(req.headers.authorization!=undefined && req.headers.authorization!=""){
               checkUserAccessToken(res,req.headers.authorization,req.dbName,function(err,result){
                     if(err){
                            callback(err);
                        }else{
                            user_id = result.id;
                            callback(null);
                        }
                    })
            }
            else{
                callback(null);
            }           
        }],
        getProduct:['getRediusProduct',function(callback){           
                        logger.debug(low_to_high)          

                        logger.debug("is_sub_category,is_variant,is_product,is_availability,discount,is_supplier,is_brands",
                        is_sub_category,is_variant,is_product,is_availability,discount,is_supplier,is_brands)
                        
                        logger.debug("=========+++sort_by_query=================",sort_by_query)
                        if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
                            logger.debug("=========+++ENTERING=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"'"+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius order by "+sort_by_query+" "
                        
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
                           
                                sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                                " price.display_price,s.id as supplier_id,s.logo as supplier_logo,"+
                                " quantity,purchased_quantity,"+
                                " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                                " price.beauty_saloon_price,"+
                                " bp.detailed_sub_category_id,"+
                                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                                " ,price.price,pimage.image_path,"+
                                " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                                " price.price as fixed_price,price.price_type as price1"+
                                " from"+
                                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                                " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                                " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                                "   and c.is_live=1  and p.is_live = 1"+
                                " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+    
                                " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                                " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                                " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                                "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius order by "+sort_by_query+""
    
                            }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
                       
                            logger.debug("=========+++ENTERING==============1===")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and  name like '%"+product_name+"%' order by "+sort_by_query+""
                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%'  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1  order by "+sort_by_query+""
  
                        }

                        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2 && is_availability!=2 && discount!=2 && is_supplier==2 &&  is_brands==2){
                            logger.debug("=========+++ENTERING3==============3===")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%'  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1  order by "+sort_by_query+""

                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2 && is_availability!=2 && discount!=2 && is_supplier!=2 &&  is_brands==2){
                            logger.debug("=========+++ENTERING===============4==")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+") and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%'  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1  order by "+sort_by_query+""
                     
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
                            logger.debug("=========+++ENTERING==============5===")
                            sql ="select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and  name like '%"+product_name+"%' order by "+sort_by_query+""
                            
                            
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
                            logger.debug("=========+++ENTERING================6=")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and  sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and  availability=1 order by "+sort_by_query+""
                            
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount!=2 &&  is_brands==2){
                            logger.debug("=========+++ENTERING888=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and  price.price_type=1 order by "+sort_by_query+""
                            
                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount!=2 &&  is_brands==2){
                            logger.debug("=========+++ENTERING999=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where"+
                            "  c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and  price.price_type=1 order by "+sort_by_query+""
                            
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
                            logger.debug("=========+++ENTERING12121212=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%'  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1  order by "+sort_by_query+""
                            
                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
                            logger.debug("=========IS-DISCOUNT=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where "+
                            " c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%'  GROUP BY product_id,sku having distance<=s.delivery_radius and  price.price_type=1 and availability=1  order by "+sort_by_query+""
                            
                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
                            logger.debug("==========================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where"+
                            "  c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%'  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1  order by "+sort_by_query+"";
                            
                        }

                        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
                            logger.debug("=========+++ENTERING1313131=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where"+
                            "  c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   name like '%"+product_name+"%' order by "+sort_by_query+""
                            
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
                            logger.debug("==avai and discount!==")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1  order by "+sort_by_query+""
                            
                        }

                        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
                            logger.debug("==avai and discount!=product=")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%'  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1  order by "+sort_by_query+""
                            
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2){
                        sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                        " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                        " quantity,purchased_quantity,"+
                        " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                        " price.beauty_saloon_price,"+
                        " bp.detailed_sub_category_id,"+
                        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                        " ,price.price,pimage.image_path,"+
                        " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                        " price.price as fixed_price,price.price_type as price1"+
                        " from"+
                        " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                        "  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                        "  and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                        " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                        " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                        " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                        " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                        "  price.price !=0)) and pml.name like '%"+product_name+"%'  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1   order by "+sort_by_query+""

                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2){
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            "  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%'  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1  order by "+sort_by_query+""
    
                            }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
                            logger.debug("=========+++ENTERING14141414=================")    
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1  order by "+sort_by_query+""

                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
                            logger.debug("=========+++ENTERING1515151=================")                                                
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 order by "+sort_by_query+""

                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount!=2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING1616161=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id where "+
                            " c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   price.price_type=1  order by "+sort_by_query+""
   
                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
                        {
                            logger.debug("========DIS=BRAND=AVAIL==")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id where "+
                            " c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and  availability=1 and price.price_type=1  order by "+sort_by_query+""
   

                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING171717171=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%' GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1   order by "+sort_by_query+""
   

                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING1818181=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%'  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1 order by "+sort_by_query+""
   
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING1818181=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "   and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1  order by "+sort_by_query+""
   
                        }


                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING1919191=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1  order by "+sort_by_query+""


                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING202020=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1  order by "+sort_by_query+""


                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING202020=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%'   GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1   order by "+sort_by_query+""


                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING=2121212================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and  c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius order by "+sort_by_query+""

                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING223232323=================")                                  
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius order by "+sort_by_query+""


                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING223232323=================")                                  
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1 order by "+sort_by_query+""


                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING223232323=================")                                  
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%'  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1  order by "+sort_by_query+""


                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING223232323=================")                                  
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            "  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "   and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1  order by "+sort_by_query+""


                        }
                        // else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands!=2)
                        // {
                            
                        // }
                        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING252525252=================")
                            sql ="select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where  c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius order by "+sort_by_query+""
                            
                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING252525252=================")
                            sql ="select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where  c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 order by "+sort_by_query+""
                            
                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands!=2)
                        {
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detaile12345678_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where "+
                            "   s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1  order by "+sort_by_query+""
   
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands!=2)
                        {
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            "  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "    and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku  order by "+sort_by_query+""
   
                        }
                        

                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING223232323=================")                                  
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and s.id IN("+supplier_ids.join(",")+") and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN ("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku   order by "+sort_by_query+""


                        }

                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands!=2)
                        {
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            "  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "    and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1  order by "+sort_by_query+""
   
                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING223232323=================")                                  
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and s.id IN("+supplier_ids.join(",")+") and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN ("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1  order by "+sort_by_query+""


                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
                        {
                            logger.debug("=========+++ENTERING223232323=================")                                  
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and s.id IN("+supplier_ids.join(",")+") and pvt.variant_id IN("+variant_ids.join(",")+")  and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.brand_id IN ("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1 order by "+sort_by_query+""


                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount!=2 &&  is_brands==2)
                        {
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where "+
                            "   s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and    price.price_type=1   order by "+sort_by_query+""
   

                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
                        {
                            
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where "+
                            "   s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1   order by "+sort_by_query+""
   

                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
                        {
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where"+
                            "   s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 order by "+sort_by_query+""
   
                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
                        {
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where "+
                            "     s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   name like '%"+product_name+"%' order by "+sort_by_query+""
   
                        }
                        else if(is_sub_category==2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
                        {
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where "+
                            "  pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku  order by "+sort_by_query+""
   
                        }
                        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
                        {
                            logger.debug("=========+++ENTERING171717171=================");
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where "+
                            "   s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku  order by "+sort_by_query+""

                        }  
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
                        {
                            logger.debug("=========+++ENTERING171717171=================");
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "    and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1 and price.price_type=1  order by "+sort_by_query+""
                        
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount!=2 &&  is_brands==2)
                        {
                            logger.debug("=========+++ENTERING171717171=================");
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "    and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   price.price_type=1  order by "+sort_by_query+""
                        
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
                        {
                            logger.debug("=========+++ENTERING171717171=================");
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "    and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1  order by "+sort_by_query+""
                        
                        }
                        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
                        {
                            logger.debug("=========+++ENTERING171717171=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "    and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius order by "+sort_by_query+""
   
                        }

                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
                        {
                            logger.debug("=========+++ENTERING171717171=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku  order by "+sort_by_query+""
   

                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount!=2 &&  is_brands==2)
                        {
                            logger.debug("=========+++ENTERING171717171=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   price.price_type=1 order by "+sort_by_query+""
   

                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
                        {
                            logger.debug("=========+++ENTERING171717171=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   price.price_type=1 order by "+sort_by_query+""
   

                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
                        {
                            logger.debug("=========+++ENTERING171717171=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   price.price_type=1 and availability=1  order by "+sort_by_query+""
   

                        }
                        
                        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
                        {
                            logger.debug("=========+++ENTERING171717171=================")
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius and   name like '%"+product_name+"%' order by "+sort_by_query+""
   
                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
                        {
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%' GROUP BY product_id,sku having distance<=s.delivery_radius and   availability=1   order by "+sort_by_query+""
   

                        }
                        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
                        {
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " join product_variants pvt on pvt.parent_id=p.id  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0)) and pml.name like '%"+product_name+"%' GROUP BY product_id,sku having distance<=s.delivery_radius and  price.price_type=1 and availability=1   order by "+sort_by_query+""
   
                        }
                        else{                           
                            sql ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration,"+
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.address as supplier_address,s.logo as supplier_logo,"+
                            " quantity,purchased_quantity,"+
                            " c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                            " price.beauty_saloon_price,"+
                            " bp.detailed_sub_category_id,"+
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                            " ,price.price,pimage.image_path,"+
                            " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                            " price.price as fixed_price,price.price_type as price1"+
                            " from"+
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
                            " where  c.is_live=1  and p.is_live = 1"+
                            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+    
                            " and pml.language_id = "+req.body.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.body.languageId+" and (pimage.default_image = 1"+ 
                            " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                            "  price.price !=0))  GROUP BY product_id,sku having distance<=s.delivery_radius order by "+sort_by_query+""
                                                }
                    // logger.debug(sql);
                    logger.debug("=========in the product controller req.dbName============",req.dbName);
                var statement=multiConnection[req.dbName].query(sql,function(err,result){
                    logger.debug("................err..........................................",statement.sql);
                  
                   if(err){
                         logger.debug("err",err);
                        var msg = "Please select a sub category to proceed";
                        sendResponse.sendErrorMessage(msg,res,500);
                    }else{
                        var adds_on_ar=[],adds_on,final_json={};
                        if(result && result.length>0){
                        for(var i = 0; i< result.length;i++){
                            logger.debug("===BEFOR[i].adds_on====",result[i].adds_on)
                            adds_on=_.groupBy(JSON.parse(result[i].adds_on),"name");
                            _.each(adds_on,function(value,key,object){
                                    final_json.name=key
                                    final_json.value=value
                                    adds_on_ar.push(final_json);
                                    final_json={}                                
                            })
                            // logger.debug("===AFTER[i].adds_on====",result[i].adds_on);
                            result[i].adds_on=adds_on_ar
                            adds_on_ar=[];
                            if(result[i].pricing_type == 1){                              
                                // logger.debug("lnjsdf",typeof(result[i].hourly_price),result[i].hourly_price,result[i]);
                                 result[i].hourly_price =JSON.parse(result[i].hourly_price);
                                //  if(result[i].hourly_price && result[i].hourly_price.length>0){
                                //     result[i].price_type=result[i].price_type;
                                //  }
                                //  else{
                                    result[i].price_type=1;
                                   
                                    //  }
                                //  result[i].fixed_price
                            }else{
                                result[i].price_type=0;                           
                                delete result[i].hourly_price;
                            } 
                            if(i==result.length-1){
                                 listing.product = result;
                                 callback(null);
                            } 
                                                  
                        }     
                    }
                    else{
                        listing.product = result;
                        callback(null);
                    }                 
                        
                    }
                })
            
        }],  
        totalCount:['getProduct',function(cb){        

            var count_query=sql.replace(/\GROUP BY product_id,sku/gi, " ");
            var md_count_query=count_query.replace(/\p.is_product/gi, "count( distinct p.id) as total_product,p.is_product");
           
            var final_count_query=md_count_query.split('limit')[0];      
                 logger.debug("============final_count_query=======",final_count_query)
            var count_st=multiConnection[req.dbName].query(final_count_query,function(err,count_result){  
                logger.debug("============final_count_query=======",count_st.final_count_query)
               if(err){
                   logger.debug("==COUNT==ERR",err)
                    listing.count = 0;
                }else{
                        if(count_result && count_result.length>0){
                            listing.count = count_result[0].total_product;
                            cb(null)
                        }
                        else{
                            listing.count = 0;
                            cb(null)
                        }
                }
            })
            
        }],  

      },function(err,result){
        if(err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg,res,500);
        }else{
            // logger.debug("============listing of filer api=============",listing)
                sendResponse.sendSuccessData(listing, constant.responseMessage.SUCCESS, res,200);

        }
    })
}

function currencyAccCountry(res,countryId,callback){
    var sql = " select c.id,c.conversion_rate ,c.currency_name,c.currency_symbol,c.currency_description from currency_country cc join currency_conversion c ";
    sql += " on cc.currency_conversion_id = c.id where cc.country_id = ? ";

    multiConnection[dbName].query(sql, [countryId], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg,res,500);
        }
        else {
            callback(null, result);
        }
    })

}


function collections(res,product,callback){
    var product = product;
    var length = product.length;
    var data;
    var flag = {};
    var listing =[];
    async.auto({
        getDetailsSubCategory:function(callback){
            data =  _.uniq(_.pluck(product,'detailed_name'));
            callback(null);
        },
        setObject:['getDetailsSubCategory',function(callback){
            if(data.length){
                for(var i = 0; i < data.length;i++){

                    var tmp = [];
                    for(var k = 0;k < length;k++){
                        if(data[i] == product[k].detailed_name){
                            tmp.push(product[k])
                        }
                    }


                    flag.DetailSubName = data[i];

                    flag.product = tmp;
                    for(var k= 0;k<tmp.length;k++){

                        (function(k){
                          flag.product[k].id = tmp[k].product_id;
                        }(k));
                    }
                    listing.push({DetailSubName:data[i],product:tmp});
                    tmp = [];
                }
            }
            callback(null);
        }],
    },function(err,result){
      if(err){
          var msg = "db error :";
          sendResponse.sendErrorMessage(msg,res,500);
      }  else{
          callback(null,listing);
      }
    })
}

const productVariantList=(req,res)=>{
    var variant_id=req.body.variant_id;
    var product_id=req.body.product_id;
    var query="select product.name as product_name,product.product_desc,"+
    "product.measuring_unit,variants.value as variant_value,cat_variants.id as variant_id,cat_variants.name as variant_name,"+
    " product.bar_code,product.id as product_id from product"+ 
    " INNER JOIN product_variants ON product_variants.product_id=product.id"+
    " INNER JOIN variants ON variants.id=product_variants.variant_id"+
    " INNER JOIN cat_variants ON  cat_variants.id=variants.cat_variant_id where product.id=? and cat_variants.id !=? and product.is_deleted=?"
     
    var statememtSql= multiConnection[req.dbName].query(query,[product_id,variant_id,0],function(err,data){
        logger.debug(statememtSql.sql)
        if(err){
            return sendResponse.sendErrorMessage("something went wrong",reply,500);
        }
        else{  
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res,200);
            }
       
    })

}
const productAccToSupplier=async (req,res)=>{

    try{

        var supplierDetails={};
        var userId=await GetUserId(req.headers.authorization,req.dbName)
        let user_type_check = await Universal.getUserPriceType(req.dbName);
        let user_id = req.users && req.users.id!=undefined?req.users.id:0
        let user_details = await ExecuteQ.Query(req.dbName,"select * from user where id= ?",[userId])
        let user_type_id = user_details && user_details.length>0?user_details[0].user_type_id:0
        
        let is_non_veg = req.query.is_non_veg || 0;


        if(user_type_id==undefined || user_type_id=="" || user_type_id==null || user_type_id==0){
            let user_type_details = await ExecuteQ.Query(req.dbName,"select * from user_types limit 1",[]);
            logger.debug("============user_type_details------",user_type_details)            
            if(user_type_details && user_type_details.length>0){
                user_type_id = user_type_details[0].id
            }else{
                user_type_id = 0
            }
        }

        

        let mUnit=await Universal.getMeausringUnit(req.dbName)
        var service_type =await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);
        var day = moment().isoWeekday();
        day=day-1;
        let is_location_disable = req.query.is_location_disable!==undefined?req.query.is_location_disable:0
        
        var pData=await SupplierProductsV1(req,user_type_check,user_type_id,userId,service_type[0].app_type,
            req.query.latitude,req.query.longitude,
            req.query.languageId,
            req.query.supplier_id,
            is_non_veg,
            is_location_disable,
            req.dbName)
        
        let languageId = req.query.languageId || 14;


        var result = await SupplierDetail(languageId,req.query.supplier_id,req.dbName,req.query.latitude,req.query.longitude,1);

        var sql = "select s.is_dine_in,s.id,sb.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.total_reviews,s.rating,sb.id as supplier_branch_id,sb.branch_name as supplier_branch_name, ";
        sql += " sb.address,sml.name,s.logo,s.id,st.is_open as status,st.start_time,st.end_time,s.total_reviews," +
            " s.rating,s.payment_method,sc.commission_package,("+mUnit+" * acos (cos ( radians(" + req.query.latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + req.query.longitude + ") )+ sin ( radians(" + req.query.latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
            " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
        sql += " s.id = sb.supplier_id join supplier_ml " +
            " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id where ";
        sql += " s.id = ? and s.is_live = ? and s.is_active = ? and s.is_deleted =0 and sb.is_live = ? " +
            "and sb.is_deleted = ?  and st.week_id =? GROUP BY s.id,sb.id having distance<sb.delivery_radius ";
        let haveMoreThanOneBranch=await ExecuteQ.Query(req.dbName,sql,[req.query.supplier_id,1,1,1,0,day]);


        var current_time=moment().utcOffset("+05:30").format('YYYY-MM-DD');
        var banner_query = "select s.delivery_radius,s.name as supplier_name,a.id,a.flow_banner_type,cc.type,cc.menu_type,cc.name as category_name, cc.category_order, cc.supplier_placement_level, cc.category_flow,a.category_id, a.banner_type,a.branch_id, a.category_id, IF((select count(*) from categories where parent_id = a.category_id),1,0) as is_subcategory, a.phone_image,"
        banner_query += "a.website_image,a.name, a.supplier_id, a.branch_id,("+mUnit+" * acos (cos (radians("+req.query.latitude+")) * cos(radians(sb.latitude))* cos("
        banner_query += "radians(sb.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(sb.latitude)))) AS distance  from advertisements a "
        banner_query += "left join supplier_branch sb on sb.id = a.branch_id join categories cc on cc.id = a.category_id join supplier s on s.id = a.supplier_id where a.is_active = 1 and a.advertisement_type = 0 and "
        banner_query += " s.id = "+req.query.supplier_id+" and a.is_deleted = ?  and sb.is_deleted = ? and cc.is_live = ? GROUP BY name having s.delivery_radius>=distance ORDER BY a.orders DESC"
        
        let banner_data = await ExecuteQ.Query(req.dbName,banner_query,[0,0,1]);
        logger.debug("==============banner_data==========",banner_data)

        // message_id
        let supplier_tags = await getSupTags(req.dbName,req.query.supplier_id)
        console.log("=================result===========",result);
         if(result && result.length>0){
             
            var len = result.length;
            supplierDetails.is_out_network = (result[0].is_out_network).toString()
            supplierDetails.banner_data = banner_data
            supplierDetails.is_promo_codes = result[0].is_promo_codes
            supplierDetails.latitude = result[0].latitude
            supplierDetails.longitude = result[0].longitude
            supplierDetails.is_scheduled = result[0].is_scheduled
            supplierDetails.is_dine_in = result[0].is_dine_in
            supplierDetails.license_number = result[0].license_number
            supplierDetails.distance = result[0].distance
            supplierDetails.total_rating = result[0].total_rating;
            supplierDetails.home_address = result[0].home_address || "";;
            supplierDetails.branchCount=haveMoreThanOneBranch && haveMoreThanOneBranch.length>0?haveMoreThanOneBranch.length:0
            supplierDetails.phone = result[0].phone
            supplierDetails.id=req.query.supplier_id;
            supplierDetails.timing = result[0].timing || [];
            supplierDetails.supplier_tags = supplier_tags || [];
            supplierDetails.category = result[0].category || [];
            supplierDetails.is_free_delivery = result[0].is_free_delivery || 0;
            supplierDetails.offerValue = result[0].offerValue;
            supplierDetails.logo = result[0].logo || "";
            supplierDetails.email = result[0].email || "";
            supplierDetails.trade_license_no = result[0].trade_license_no || "";
            supplierDetails.total_reviews = result[0].total_reviews || 0;
            supplierDetails.user_request_flag=parseInt(result[0].user_request_flag) || 0
            supplierDetails.supplier_branch_id=parseInt(result[0].supplier_branch_id) || 0
            supplierDetails.rating = result[0].rating || 0;
            supplierDetails.name = result[0].name || "";
            supplierDetails.payment_method = result[0].payment_method || 0;
            supplierDetails.name = result[0].name || "";
            supplierDetails.description = result[0].description || "";
            supplierDetails.about = result[0].uniqueness || "";
            supplierDetails.terms_and_conditions = result[0].terms_and_conditions || "";
            supplierDetails.address = result[0].address || "";
            supplierDetails.delivery_min_time = result[0].delivery_min_time || 0;
            supplierDetails.delivery_max_time = result[0].delivery_max_time || 0;
            supplierDetails.min_order = result[0].min_order  || 0;
            supplierDetails.min_order_delivery = result[0].min_order_delivery || 0;
            supplierDetails.business_start_date = moment( result[0].business_start_date).format("MMMM DD, YYYY") || "";
            supplierDetails.total_order = 0 || 0;
            supplierDetails.delivery_prior_time = result[0].delivery_prior_time || "";
            supplierDetails.urgent_delivery_time = result[0].urgent_delivery_time || "";
            supplierDetails.delivery_charges = result[0].delivery_charges || 0;
            supplierDetails.speciality = result[0].speciality || "";
            supplierDetails.nationality = result[0].nationality || "";
            supplierDetails.facebook_link = result[0].facebook_link || "";
            supplierDetails.linkedin_link = result[0].linkedin_link || "";
            supplierDetails.brand = result[0].brand || "";
            supplierDetails.description=result[0].description || "";
            supplierDetails.onOffComm = result[0].onOffComm || 0
            supplierDetails.is_multi_branch = result[0].is_multi_branch || 0
            supplierDetails.message_id = result[0].message_id || "";
            supplierDetails.user_created_id = result[0].user_created_id || "";
            supplierDetails.supplier_image = await SupplierImage(req.query.language_id,req.query.area_id,req.query.supplier_id,req.dbName);
            // supplierDetails.message_id = ""
            supplierDetails.ratingAndReviews = await getSupplierReview(req.dbName,req.query.supplier_id)
           // supplierDetails.is_variant = await ExecuteQ.query(req.dbName,'SELECT IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant FROM product p',[0]);
            supplierDetails.Favourite = await SupplierFavourite(userId,req.query.supplier_id,req.dbName);        
         
        }
        else{
            supplierDetails={}
        }
        sendResponse.sendSuccessData({product:pData.product_data,count:pData.count,supplier_detail:supplierDetails}, constant.responseMessage.SUCCESS, res, 200);
    }
    catch(err){
        logger.error(err)
        console.log(`Error in supplier product list ${err}`);
        return sendResponse.sendErrorMessage(err,res,400);
    }
}

var getSupplierReview = async function (dbName, supplierId) {
    return new Promise(async(resolve, reject) => {
        try {
            var sql = "select sr.id,sr.comment,sr.rating,u.firstname,u.user_image from supplier_rating sr join user u on sr.user_id = u.id " +
                " where sr.supplier_id = ? and sr.is_deleted = ? order by sr.id DESC ";
            let result = await ExecuteQ.Query(dbName, sql, [supplierId, 0])
            resolve(result)
        } catch (error) {
            logger.debug("==================", error)
            resolve([])
        }
    })
}

const getSupTags=(dbName,supId)=>{
    return new Promise(async (resolve,reject)=>{
        let sql = "SELECT st.name,st.tag_image,st.id,st.created_at from supplier_assigned_tags "
        sql+= " sat join supplier_tags st on st.id = sat.tag_id where sat.supplier_id=?"
        let data=await ExecuteQ.Query(dbName,sql,[supId])
        resolve(data);
    })
}


const productAccToSupplierV1=async (req,res)=>{
    try{
        var supplierDetails={};
        var userId=await GetUserId(req.headers.authorization,req.dbName);
        let user_type_check = await Universal.getUserPriceType(req.dbName);
        let userLoyalityLevleIds=[],loyalitPointDiscountAmount=0,
        loyalityLevelDiscountAmount=0,
        perProductLoyalityDiscount=0
        let user_id = req.users && req.users.id!=undefined?req.users.id:0
        let user_details = await ExecuteQ.Query(req.dbName,"select * from user where id= ?",[userId])
        
        let user_type_id = user_details && user_details.length>0?user_details[0].user_type_id:0

        let category_id = req.query.category_id!==undefined && req.query.category_id!=="" &&
        req.query.category_id!==null && req.query.category_id!==0?req.query.category_id:0
        let offset = req.body.offset || "+5:30"
        if(user_type_id==undefined || user_type_id=="" || user_type_id==null || user_type_id==0){
            let user_type_details = await ExecuteQ.Query(req.dbName,"select * from user_types limit 1",[]);
            logger.debug("============user_type_details------",user_type_details)            
            if(user_type_details && user_type_details.length>0){
                user_type_id = user_type_details[0].id
            }else{
                user_type_id = 0
            }
        }

        let is_non_veg = req.query.is_non_veg || 0;

        let mUnit=await Universal.getMeausringUnit(req.dbName)
        var service_type =await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);
        var day = moment().isoWeekday();
        day=day-1;
        logger.debug("====================category_id==========",category_id)

        var pData=await SupplierProductsV2(req,user_type_check,
            user_type_id,userId,
            service_type[0].app_type,req.query.latitude,
            req.query.longitude,req.query.languageId,
            req.query.supplier_id,req.dbName,category_id,is_non_veg)

        var result=await SupplierDetail(req.query.languageId,req.query.supplier_id,req.dbName,req.query.latitude,req.query.longitude,1);
        var sql = "select s.is_dine_in,s.id,sb.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,  ( SELECT  count(is_approved) as total_reviews   FROM  (    select   is_approved  from supplier_rating where  supplier_id = "+req.query.supplier_id+" and is_approved = 0) as total_reviews )as total_reviews, sb.id as supplier_branch_id,sb.branch_name as supplier_branch_name, ";
        sql += " sb.address,sml.name,s.logo,s.id,st.is_open as status,st.start_time,st.end_time," +
            " (SELECT avg(rating) as rating FROM (select rating from supplier_rating where supplier_id="+req.query.supplier_id+" and is_approved=0 order by id desc limit 50) as rating) as rating,s.payment_method,sc.commission_package,("+mUnit+" * acos (cos ( radians(" + req.query.latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + req.query.longitude + ") )+ sin ( radians(" + req.query.latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
            " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
        sql += " s.id = sb.supplier_id join supplier_ml " +
            " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id where ";
        sql += " s.id = ? and s.is_live = ? and s.is_active = ? and s.is_deleted =0 and sb.is_live = ? and sml.language_id = ? " +
            "and sb.is_deleted = ?  and st.week_id =? GROUP BY s.id,sb.id having distance<sb.delivery_radius ";
        let haveMoreThanOneBranch=await ExecuteQ.Query(req.dbName,sql,[req.query.supplier_id,1,1,1,14,0,day]);
       
        var current_time=moment().utcOffset(offset).format('YYYY-MM-DD');
        var banner_query = "select s.delivery_radius,s.name as supplier_name,a.id,a.flow_banner_type,cc.type,cc.menu_type,cc.name as category_name, cc.category_order, cc.supplier_placement_level, cc.category_flow,a.category_id, a.banner_type,a.branch_id, a.category_id, IF((select count(*) from categories where parent_id = a.category_id),1,0) as is_subcategory, a.phone_image,"
        banner_query += "a.website_image,a.name, a.supplier_id, a.branch_id,("+mUnit+" * acos (cos (radians("+req.query.latitude+")) * cos(radians(sb.latitude))* cos("
        banner_query += "radians(sb.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(sb.latitude)))) AS distance  from advertisements a "
        banner_query += "left join supplier_branch sb on sb.id = a.branch_id join categories cc on cc.id = a.category_id join supplier s on s.id = a.supplier_id where a.is_active = 1 and a.advertisement_type = 0 and "
        banner_query += " s.id = "+req.query.supplier_id+" and a.is_deleted = ?   and ((DATE(a.start_date) <= '"+current_time+"' and DATE(a.end_date) >= '"+current_time+"') or( DATE(a.start_date) = '0000-00-00' and DATE(a.end_date) = '0000-00-00' )) and sb.is_deleted = ? and cc.is_live = ? GROUP BY name having s.delivery_radius>=distance ORDER BY a.orders DESC"
        
        let banner_data = await ExecuteQ.Query(req.dbName,banner_query,[0,0,1]);
        // logger.debug("==============banner_data==========",banner_data)
        let supplier_tags = await getSupTags(req.dbName,req.query.supplier_id)

        if(result && result.length>0){


            var len = result.length;
            // s.latitude,s.longitude,
            supplierDetails.is_out_network = result[0].is_out_network
            supplierDetails.banner_data = banner_data
            supplierDetails.latitude = result[0].latitude
            supplierDetails.longitude = result[0].longitude
            supplierDetails.is_promo_codes = result[0].is_promo_codes
            supplierDetails.is_scheduled = result[0].is_scheduled
            supplierDetails.is_dine_in = result[0].is_dine_in
            supplierDetails.supplier_tags = supplier_tags || [];
            supplierDetails.category = result[0].category || [];
            supplierDetails.total_rating = result[0].total_rating
            supplierDetails.license_number = result[0].license_number
            supplierDetails.branchCount=haveMoreThanOneBranch && haveMoreThanOneBranch.length>0?haveMoreThanOneBranch.length:0
            supplierDetails.phone = result[0].phone
            supplierDetails.id=req.query.supplier_id;
            supplierDetails.timing = result[0].timing || [];
            supplierDetails.logo = result[0].logo || "";
            supplierDetails.is_free_delivery = result[0].is_free_delivery || 0;

            supplierDetails.email = result[0].email || "";
            supplierDetails.trade_license_no = result[0].trade_license_no || "";
            supplierDetails.total_reviews = result[0].total_reviews || 0;
            supplierDetails.user_request_flag=parseInt(result[0].user_request_flag) || 0
            supplierDetails.supplier_branch_id=parseInt(result[0].supplier_branch_id) || 0
            supplierDetails.rating = result[0].rating || 0;
            supplierDetails.name = result[0].name || "";
            supplierDetails.payment_method = result[0].payment_method || 0;
            supplierDetails.name = result[0].name || "";
            supplierDetails.description = result[0].description || "";
            supplierDetails.about = result[0].uniqueness || "";
            supplierDetails.terms_and_conditions = result[0].terms_and_conditions || "";
            supplierDetails.address = result[0].address || "";
            supplierDetails.delivery_min_time = result[0].delivery_min_time || 0;
            supplierDetails.delivery_max_time = result[0].delivery_max_time || 0;
            supplierDetails.min_order = result[0].min_order  || 0;
            supplierDetails.min_order_delivery = result[0].min_order_delivery || 0;
            supplierDetails.business_start_date = moment( result[0].business_start_date).format("MMMM DD, YYYY") || "";
            supplierDetails.total_order = 0 || 0;
            supplierDetails.delivery_prior_time = result[0].delivery_prior_time || "";
            supplierDetails.urgent_delivery_time = result[0].urgent_delivery_time || "";
            supplierDetails.delivery_charges = result[0].delivery_charges || 0;
            supplierDetails.speciality = result[0].speciality || "";
            supplierDetails.nationality = result[0].nationality || "";
            supplierDetails.facebook_link = result[0].facebook_link || "";
            supplierDetails.linkedin_link = result[0].linkedin_link || "";
            supplierDetails.brand = result[0].brand || "";
            supplierDetails.description=result[0].description || "";
            supplierDetails.onOffComm = result[0].onOffComm || 0
            supplierDetails.is_multi_branch = result[0].is_multi_branch || 0
            supplierDetails.message_id = result[0].message_id || "";
            supplierDetails.user_created_id = result[0].user_created_id || "";
            supplierDetails.supplier_image = await SupplierImage(req.query.language_id,req.query.area_id,req.query.supplier_id,req.dbName);
            supplierDetails.message_id = ""
            supplierDetails.ratingAndReviews = await getSupplierReview(req.dbName,req.query.supplier_id)

            supplierDetails.Favourite = await SupplierFavourite(userId,req.query.supplier_id,req.dbName);        
        }
        else{
            supplierDetails={}
        }


        sendResponse.sendSuccessData({product:pData.product_data,count:pData.count,supplier_detail:supplierDetails}, constant.responseMessage.SUCCESS, res, 200);
    }
    catch(err){
        // logger.error(err)

        console.log("==========er===========",err)
        return sendResponse.sendErrorMessage(err,res,400);
    }
}

const productAccToSupplierV2 = async (req,res)=>{
    try{
        var supplierDetails={};
        var userId=await GetUserId(req.headers.authorization,req.dbName);
        let user_type_check = await Universal.getUserPriceType(req.dbName);

        let search = req.query.search || "";

        let userLoyalityLevleIds=[],loyalitPointDiscountAmount=0,
        loyalityLevelDiscountAmount=0,
        perProductLoyalityDiscount=0
        let user_id = req.users && req.users.id!=undefined?req.users.id:0
        // let offset = req.query.offset==undefined?"+05:30":req.query.offset
        let user_details = await ExecuteQ.Query(req.dbName,"select * from user where id= ?",[userId])
        
        let user_type_id = user_details && user_details.length>0?user_details[0].user_type_id:0

        let category_id = req.query.category_id!==undefined && req.query.category_id!=="" &&
        req.query.category_id!==null && req.query.category_id!==0?req.query.category_id:0
        let offset = req.body.offset || "+5:30"
        if(user_type_id==undefined || user_type_id=="" || user_type_id==null || user_type_id==0){
            let user_type_details = await ExecuteQ.Query(req.dbName,"select * from user_types limit 1",[]);
            logger.debug("============user_type_details------",user_type_details)            
            if(user_type_details && user_type_details.length>0){
                user_type_id = user_type_details[0].id
            }else{
                user_type_id = 0
            }
        }

        let is_non_veg = req.query.is_non_veg || 0;

        let mUnit=await Universal.getMeausringUnit(req.dbName)
        var service_type =await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);
        var day = moment().isoWeekday();
        day=day-1;
        logger.debug("====================category_id==========",category_id)
        var pData=await SupplierProductsV3(req,user_type_check,
            user_type_id,userId,
            service_type[0].app_type,req.query.latitude,
            req.query.longitude,req.query.languageId,
            req.query.supplier_id,req.dbName,category_id,is_non_veg,search)
        var result=await SupplierDetail(req.query.languageId,req.query.supplier_id,req.dbName,req.query.latitude,req.query.longitude,1);
        var sql = "select s.is_dine_in,s.id,sb.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.total_reviews,s.rating,sb.id as supplier_branch_id,sb.branch_name as supplier_branch_name, ";
        sql += " sb.address,sml.name,s.logo,s.id,st.is_open as status,st.start_time,st.end_time,s.total_reviews," +
            " s.rating,s.payment_method,sc.commission_package,("+mUnit+" * acos (cos ( radians(" + req.query.latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + req.query.longitude + ") )+ sin ( radians(" + req.query.latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
            " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
        sql += " s.id = sb.supplier_id join supplier_ml " +
            " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id where ";
        sql += " s.id = ? and s.is_live = ? and s.is_active = ? and s.is_deleted =0 and sb.is_live = ? and sml.language_id = ? " +
            "and sb.is_deleted = ?  and st.week_id =? GROUP BY s.id,sb.id having distance<sb.delivery_radius ";
        let haveMoreThanOneBranch=await ExecuteQ.Query(req.dbName,sql,[req.query.supplier_id,1,1,1,14,0,day]);
       
        var current_time=moment().utcOffset(offset).format('YYYY-MM-DD');
        var banner_query = "select s.delivery_radius,s.name as supplier_name,a.id,a.flow_banner_type,cc.type,cc.menu_type,cc.name as category_name, cc.category_order, cc.supplier_placement_level, cc.category_flow,a.category_id, a.banner_type,a.branch_id, a.category_id, IF((select count(*) from categories where parent_id = a.category_id),1,0) as is_subcategory, a.phone_image,"
        banner_query += "a.website_image,a.name, a.supplier_id, a.branch_id,("+mUnit+" * acos (cos (radians("+req.query.latitude+")) * cos(radians(sb.latitude))* cos("
        banner_query += "radians(sb.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(sb.latitude)))) AS distance  from advertisements a "
        banner_query += "left join supplier_branch sb on sb.id = a.branch_id join categories cc on cc.id = a.category_id join supplier s on s.id = a.supplier_id where a.is_active = 1 and a.advertisement_type = 0 and "
        banner_query += " s.id = "+req.query.supplier_id+" and a.is_deleted = ?   and ((DATE(a.start_date) <= '"+current_time+"' and DATE(a.end_date) >= '"+current_time+"') or( DATE(a.start_date) = '0000-00-00' and DATE(a.end_date) = '0000-00-00' )) and sb.is_deleted = ? and cc.is_live = ? GROUP BY name having s.delivery_radius>=distance ORDER BY a.orders DESC"
        
        let banner_data = await ExecuteQ.Query(req.dbName,banner_query,[0,0,1]);
        // logger.debug("==============banner_data==========",banner_data)
        let supplier_tags = await getSupTags(req.dbName,req.query.supplier_id)

        if(result && result.length>0){


            var len = result.length;
            // s.latitude,s.longitude,
            supplierDetails.is_out_network = result[0].is_out_network
            supplierDetails.banner_data = banner_data
            supplierDetails.latitude = result[0].latitude
            supplierDetails.longitude = result[0].longitude
            supplierDetails.is_promo_codes = result[0].is_promo_codes
            supplierDetails.is_scheduled = result[0].is_scheduled
            supplierDetails.is_dine_in = result[0].is_dine_in
            supplierDetails.supplier_tags = supplier_tags || [];
            supplierDetails.category = result[0].category || [];
            supplierDetails.total_rating = result[0].total_rating
            supplierDetails.license_number = result[0].license_number
            supplierDetails.branchCount=haveMoreThanOneBranch && haveMoreThanOneBranch.length>0?haveMoreThanOneBranch.length:0
            supplierDetails.phone = result[0].phone
            supplierDetails.id=req.query.supplier_id;
            supplierDetails.timing = result[0].timing || [];
            supplierDetails.logo = result[0].logo || "";
            supplierDetails.is_free_delivery = result[0].is_free_delivery || 0;

            supplierDetails.email = result[0].email || "";
            supplierDetails.trade_license_no = result[0].trade_license_no || "";
            supplierDetails.total_reviews = result[0].total_reviews || 0;
            supplierDetails.user_request_flag=parseInt(result[0].user_request_flag) || 0
            supplierDetails.supplier_branch_id=parseInt(result[0].supplier_branch_id) || 0
            supplierDetails.rating = result[0].rating || 0;
            supplierDetails.name = result[0].name || "";
            supplierDetails.payment_method = result[0].payment_method || 0;
            supplierDetails.name = result[0].name || "";
            supplierDetails.description = result[0].description || "";
            supplierDetails.about = result[0].uniqueness || "";
            supplierDetails.terms_and_conditions = result[0].terms_and_conditions || "";
            supplierDetails.address = result[0].address || "";
            supplierDetails.delivery_min_time = result[0].delivery_min_time || 0;
            supplierDetails.delivery_max_time = result[0].delivery_max_time || 0;
            supplierDetails.min_order = result[0].min_order  || 0;
            supplierDetails.min_order_delivery = result[0].min_order_delivery || 0;
            supplierDetails.business_start_date = moment( result[0].business_start_date).format("MMMM DD, YYYY") || "";
            supplierDetails.total_order = 0 || 0;
            supplierDetails.delivery_prior_time = result[0].delivery_prior_time || "";
            supplierDetails.urgent_delivery_time = result[0].urgent_delivery_time || "";
            supplierDetails.delivery_charges = result[0].delivery_charges || 0;
            supplierDetails.speciality = result[0].speciality || "";
            supplierDetails.nationality = result[0].nationality || "";
            supplierDetails.facebook_link = result[0].facebook_link || "";
            supplierDetails.linkedin_link = result[0].linkedin_link || "";
            supplierDetails.brand = result[0].brand || "";
            supplierDetails.description=result[0].description || "";
            supplierDetails.onOffComm = result[0].onOffComm || 0
            supplierDetails.is_multi_branch = result[0].is_multi_branch || 0
            supplierDetails.message_id = result[0].message_id || "";
            supplierDetails.user_created_id = result[0].user_created_id || "";
            supplierDetails.supplier_image = await SupplierImage(req.query.language_id,req.query.area_id,req.query.supplier_id,req.dbName);
            supplierDetails.message_id = ""
            supplierDetails.ratingAndReviews = await getSupplierReview(req.dbName,req.query.supplier_id)

            supplierDetails.Favourite = await SupplierFavourite(userId,req.query.supplier_id,req.dbName);        
        }
        else{
            supplierDetails={}
        }


        sendResponse.sendSuccessData({product:pData.product_data,count:pData.count,supplier_detail:supplierDetails}, constant.responseMessage.SUCCESS, res, 200);
    }
    catch(err){
        logger.error(err)
        return sendResponse.sendErrorMessage(err,res,400);
    }
}

const productAccToSupplierBranch=async (req,res)=>{
    try{
        
        var supplierDetails={};
        var userId=await GetUserId(req.headers.authorization,req.dbName)
        let user_type_check = await Universal.getUserPriceType(req.dbName);
        let user_id = req.users && req.users.id!=undefined?req.users.id:0
        let user_details = await ExecuteQ.Query(req.dbName,"select * from user where id= ?",[userId])
        let user_type_id = user_details && user_details.length>0?user_details[0].user_type_id:0
      
        if(user_type_id==undefined || user_type_id=="" || user_type_id==null || user_type_id==0){
            let user_type_details = await ExecuteQ.Query(req.dbName,"select * from user_types limit 1",[]);
            logger.debug("============user_type_details------",user_type_details)            
            if(user_type_details && user_type_details.length>0){
                user_type_id = user_type_details[0].id
            }else{
                user_type_id = 0
            }
        }
        let is_non_veg = req.query.is_non_veg || 0;
        var service_type =await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);
        let mUnit=await Universal.getMeausringUnit(req.dbName);
        var product_data=await SupplierBranchProducts(user_type_check,user_type_id,userId,service_type[0].app_type,req.query.latitude,req.query.longitude,req.query.languageId,req.query.supplier_id,req.query.supplier_branch_id,req.dbName,is_non_veg)
        var result=await SupplierBranchDetail(14,req.query.supplier_id,req.query.supplier_branch_id,req.dbName,);
        var day = moment().isoWeekday();
        day=day-1;
        var sql = "select s.id,sb.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.total_reviews,s.rating,sb.id as supplier_branch_id,sb.branch_name as supplier_branch_name, ";
        sql += " sb.address,sml.name,s.logo,s.id,st.is_open as status,st.start_time,st.end_time,s.total_reviews," +
            " s.rating,s.payment_method,sc.commission_package,("+mUnit+" * acos (cos ( radians(" + req.query.latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + req.query.longitude + ") )+ sin ( radians(" + req.query.latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
            " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
        sql += " s.id = sb.supplier_id join supplier_ml " +
            " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id where ";
        sql += " s.id = ? and s.is_live = ? and s.is_active = ? and s.is_deleted =0 and sb.is_live = ? and sml.language_id = ? " +
            "and sb.is_deleted = ?  and st.week_id =? GROUP BY s.id,sb.id having distance<sb.delivery_radius ";
        let haveMoreThanOneBranch=await ExecuteQ.Query(req.dbName,sql,[req.query.supplier_id,1,1,1,14,0,day]);

         if(result && result.length>0){

            var len = result.length;
            supplierDetails.id=req.query.supplier_id;
            supplierDetails.supplier_tags = result[0].supplier_tags || [];
            supplierDetails.timing = result[0].timing || [];
            supplierDetails.logo = result[0].logo || "";
            supplierDetails.is_scheduled = result[0].is_scheduled;
            supplierDetails.is_dine_in = result[0].is_dine_in;
            supplierDetails.email = result[0].email || "";
            supplierDetails.branchCount=haveMoreThanOneBranch && haveMoreThanOneBranch.length>0?haveMoreThanOneBranch.length:0
            supplierDetails.trade_license_no = result[0].trade_license_no || "";
            supplierDetails.total_reviews = result[0].total_reviews || 0;
            supplierDetails.user_request_flag=parseInt(result[0].user_request_flag) || 0
            supplierDetails.supplier_branch_id=parseInt(result[0].supplier_branch_id) || 0
            supplierDetails.rating = result[0].rating || 0;
            supplierDetails.name = result[0].name || "";
            supplierDetails.payment_method = result[0].payment_method || 0;
            supplierDetails.name = result[0].name || "";
            supplierDetails.description = result[0].description || "";
            supplierDetails.about = result[0].uniqueness || "";
            supplierDetails.terms_and_conditions = result[0].terms_and_conditions || "";
            supplierDetails.address = result[0].address || "";
            supplierDetails.delivery_min_time = result[0].delivery_min_time || 0;
            supplierDetails.delivery_max_time = result[0].delivery_max_time || 0;
            supplierDetails.min_order = result[0].min_order  || 0;
            supplierDetails.min_order_delivery = result[0].min_order_delivery || 0;
            supplierDetails.business_start_date = moment( result[0].business_start_date).format("MMMM DD, YYYY") || "";
            supplierDetails.total_order = 0 || 0;
            supplierDetails.delivery_prior_time = result[0].delivery_prior_time || "";
            supplierDetails.urgent_delivery_time = result[0].urgent_delivery_time || "";
            supplierDetails.delivery_charges = result[0].delivery_charges || 0;
            supplierDetails.speciality = result[0].speciality || "";
            supplierDetails.nationality = result[0].nationality || "";
            supplierDetails.facebook_link = result[0].facebook_link || "";
            supplierDetails.linkedin_link = result[0].linkedin_link || "";
            supplierDetails.brand = result[0].brand || "";
            supplierDetails.description=result[0].description || "";
            supplierDetails.onOffComm = result[0].onOffComm || 0
            supplierDetails.is_multi_branch = result[0].is_multi_branch || 0
            supplierDetails.supplier_image = await SupplierImage(req.query.language_id,req.query.area_id,req.query.supplier_id,req.dbName);
            
            supplierDetails.Favourite = await SupplierFavourite(userId,req.query.supplier_id,req.dbName);        
        }
        else{
            supplierDetails={}
        }
        sendResponse.sendSuccessData({product:product_data,supplier_detail:supplierDetails}, constant.responseMessage.SUCCESS, res, 200);
    }
    catch(err){
        logger.error(err)
        return sendResponse.sendErrorMessage(err,res,400);
    }
}
const SupplierProductsV2=  async (req,user_type_check,user_type_id,user_id,
    service_type,latitude,longitude,languageId,
    supplierId,dbName,categoryId,is_non_veg)=>{

    logger.debug("============categoryId========",categoryId)

    let userLoyalityLevleIds=[],loyalitPointDiscountAmount=0,
    loyalityLevelDiscountAmount=0,
    perProductLoyalityDiscount=0

    let isPagination=req.query.limit || 0;
    let limit=req.query.limit || 10;
    let offset=req.query.offset || 0

    let category_wise_query = ""
    let in_out_zero_price_check = " and  price.price != 0  ";

    let in_out_setting_data = await ExecuteQ.Query(dbName,
        "select `key`, value from tbl_setting where `key`=?",["enable_in_out_network"]);

    let hideOutOfStockProduct = await ExecuteQ.Query(dbName,
            "select `key`, value from tbl_setting where `key`=? and value=1",["hide_out_of_stock_product"]);
    let outOfStockCheck = "";

    if(hideOutOfStockProduct && hideOutOfStockProduct.length>0){
        outOfStockCheck = "and p.quantity>p.purchased_quantity"
    }
    
    if(in_out_setting_data && in_out_setting_data.length>0){
        if(parseInt(in_out_setting_data[0].value)>0){
            in_out_zero_price_check = ""
        }
    }

    if(parseInt(categoryId)!==0){
        let cateIds=[]
        let subCateData=await ExecuteQ.Query(dbName,`select id,parent_id from categories where parent_id!=? and is_deleted=?`,[0,0])
        if(subCateData && subCateData.length>0){
            let subIds=Universal.getNestedChildrenIds(subCateData,categoryId);
            logger.debug("=====subIds==>>",subIds);
            if(subIds && subIds.length>0){
                cateIds=subIds;
            }
            else{
                cateIds.push(categoryId)
            }
        }
        else{
            cateIds.push(categoryId)
        }   
        logger.debug("====================cateIds====",cateIds,cateIds.join())
        category_wise_query = "and p.category_id IN("+cateIds.join()+")"
    }

    logger.debug("=========category_wise_query=======",category_wise_query)
    let mUnit=await Universal.getMeausringUnit(dbName);
if(service_type==1){
    radius_check_query="having temp1.distance<=temp1.delivery_radius"
}else{
    radius_check_query=""
}
let user_type_condition_one = ""
let user_type_condition_two = ""

logger.debug("====service_type=======check_user_type====",service_type,user_type_check)
if(service_type==1 || service_type==2){
    if(user_type_check && user_type_check.length>0){
        user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
        user_type_condition_two = " and price.user_type_id="+user_type_id+" "
    }
}
logger.debug("===========user_type_condition_one========",user_type_condition_one,user_type_condition_two)
let count_sql=""
let countResult=[]

let nonVegCheck = "";

if(parseInt(is_non_veg)>0){

    if(parseInt(is_non_veg)==1){
        nonVegCheck = " and p.is_non_veg=1 ";
    }else if(parseInt(is_non_veg)==2){
        nonVegCheck = " and p.is_non_veg=2 ";
    }

}


let currentUtcTime = moment.utc().format('HH:mm:ss');

let todayUtcDate = moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'));
const weekday = todayUtcDate.day();

let categoryTimeCheck = " and sc.start_time>='"+currentUtcTime+"' and sc.end_time<='"+currentUtcTime+"' and sc.weekday="+weekday+" "

 categoryTimeCheck = " "


let totalProductCounts=0;
return new Promise(async (resolve,reject)=>{
    try{
        let orderBySql="temp1.product_id Asc,temp1.order_no Asc"
        let categorySData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["category_sequence","1"]);
        if(categorySData && categorySData.length>0){
            orderBySql="temp1.order_no Asc,temp1.order_no Asc"
        }
        
        // orderBySql = "";

    if(isPagination!=0){
        sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        // sql = "select temp.* from (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+

        "   price.display_price, sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+
        " p.is_supplier_product_approved,p.is_appointment,bp.category_id as parent_category_id,s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

        " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
        "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
        // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
        "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
        " where s.id IN("+supplierId+") "+categoryTimeCheck+" "+category_wise_query+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
        " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
        " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
        "  "+in_out_zero_price_check+")) UNION ALL  SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        " price.display_price, sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+
        " p.is_supplier_product_approved, p.is_appointment, bp.category_id as parent_category_id, s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

        " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
        "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,price.price_type  ,"+
        "  price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
        // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
        "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
        " where s.id IN("+supplierId+")  "+categoryTimeCheck+" "+category_wise_query+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
        " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
        " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
        "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC limit "+limit+" offset "+offset+") as temp"
        // GROUP BY product_id,sku "+radius_check_query+" order by "+orderBySql+", -display_price ASC,display_price ASC limit "+limit+" offset "+offset+"
     
        // count_sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        // "   price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        // " quantity,purchased_quantity,"+
        // " p.is_supplier_product_approved,bp.category_id as parent_category_id, s.is_out_network,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

        // " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
        // "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        // " ,p.purchase_limit,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        // " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        // " price.beauty_saloon_price,"+
        // " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
        // " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        // " ,price.price,pimage.image_path,"+
        // " pml.measuring_unit,price.price_type  ,"+
        // " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
        // " from"+
        // " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        // " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        // " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        // "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
        // // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
        // "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
        // " where s.id IN("+supplierId+")  "+categoryTimeCheck+" "+category_wise_query+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
        // " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        // " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
        // " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        // " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
        // "  "+in_out_zero_price_check+")) UNION ALL   SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        // " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        // " quantity,purchased_quantity,"+
        // " p.is_supplier_product_approved,bp.category_id as parent_category_id, s.is_out_network,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

        // " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
        // "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        // " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        // " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        // " price.beauty_saloon_price,"+
        // " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
        // " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        // " ,price.price,pimage.image_path,"+
        // " p.purchase_limit,pml.measuring_unit,price.price_type  ,"+
        // "  price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
        // " from"+
        // " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        // " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        // " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        // "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
        // // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
        // "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
        // " where s.id IN("+supplierId+")  "+categoryTimeCheck+" "+category_wise_query+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
        // " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        // " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
        // " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        // " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 "+
        // "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
        count_sql = "select COUNT(*) as totalProduct FROM product p JOIN supplier_branch_product bp on bp.product_id=p.id join supplier_branch sbb on sbb.id = bp.supplier_branch_id JOIN product_pricing price on price.product_id=p.id JOIN supplier s on s.id=sbb.supplier_id JOIN categories c on c.id=bp.category_id join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )"+
        " where s.id IN("+supplierId+") "+categoryTimeCheck+" and  c.is_live=1   and p.is_live = 1"+
        " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        "  and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1  and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
        "  "+in_out_zero_price_check+"))"
        countResult=await ExecuteQ.QueryV1(req,dbName,count_sql,[]);
        totalProductCounts=countResult && countResult.length>0?countResult[0].totalProduct:0
       
    }
    else{
        sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        // sql = "select temp.* from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        "  price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+
        " p.is_supplier_product_approved, p.is_appointment,bp.category_id as parent_category_id, s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

        " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
        "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        "  p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
        // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
        "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
        " where s.id IN("+supplierId+") "+category_wise_query+"  "+categoryTimeCheck+" and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
        " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
        " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
        "  "+in_out_zero_price_check+")) UNION ALL  SELECT ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        " price.display_price, sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+
        " bp.category_id as parent_category_id, s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

        " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
        "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " p.is_supplier_product_approved, p.is_appointment,p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc,"+
        "  price.price,pimage.image_path,"+
        " pml.measuring_unit,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
        // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
        "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
        " where s.id IN("+supplierId+") "+category_wise_query+"  "+categoryTimeCheck+" and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
        " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
        " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
        "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
        countResult=await ExecuteQ.Query(dbName,sql,[]);
        totalProductCounts=countResult.length;
    }

    let result=await ExecuteQ.Query(dbName,sql,[]);

    
    //  result = await getProductVariants(req.dbName,result);


    logger.debug("====user_id===user_id=====user_id=======",user_id);

    if(parseInt(user_id)!==0){
            
        var user_data=await ExecuteQ.Query(req.dbName,
            `select total_loyality_amount,used_loyality_amount,
            id,loyalty_points from user where access_token = ?`,
            [req.headers.authorization]);
   
        let isLoyalityPointEnable=await ExecuteQ.Query(req.dbName,
            "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
            ["is_loyality_enable","1"]);

        if(isLoyalityPointEnable && isLoyalityPointEnable.length>0){


                
                let loyalityLevelData=await Universal.getUserLoyalityLevelData(req.dbName,
                    user_data[0].id);
              
                loyalitPointDiscountAmount=parseFloat(user_data[0].total_loyality_amount)-parseFloat(user_data[0].used_loyality_amount);
                
                let loyalityLevelCateData=[]
                if(loyalityLevelData && loyalityLevelData.length>0){
                    for await( const[index,i] of loyalityLevelData.entries()){
                        userLoyalityLevleIds.push(i.id)
                    }
                    loyalityLevelCateData=await ExecuteQ.Query(req.dbName,
                        `select id,discount_price,price_type,category_id,supplier_id
                         from loyality_level_category_assignment where 
                         loyality_level_id IN (?)`,[userLoyalityLevleIds]);
                }
               
                 let productData=result
                logger.debug("=====productData==>",productData)
                if(loyalityLevelCateData && loyalityLevelCateData.length>0){

                    for await(const [ind,j] of loyalityLevelCateData.entries()){
                        perProductLoyalityDiscount=0;
                        if(productData && productData.length>0){

                            for await (const [index,i] of productData.entries()){
                                logger.debug("========j.category_id==============",
                                j.category_id,
                                i.parent_category_id,
                                j.supplier_id,
                                i.supplier_id,
                                req.query.supplier_id)

                                if(parseInt(j.category_id)==parseInt(i.parent_category_id)
                                
                                 && parseInt(j.supplier_id)==req.query.supplier_id){
                                    
                                    if(j.price_type==1){
                                        perProductLoyalityDiscount=parseFloat(i.price)*parseFloat(j.discount_price)/100
                                    }
                                    else{
                                        perProductLoyalityDiscount=parseFloat(j.discount_price)
                                    }
                                
                                    loyalityLevelDiscountAmount=loyalityLevelDiscountAmount+perProductLoyalityDiscount

                                    logger.debug("==perProductLoyalityDiscount==loyalityLevelDiscountAmount=>>",
                                    perProductLoyalityDiscount,
                                    loyalityLevelDiscountAmount)

                                    i.perProductLoyalityDiscount=perProductLoyalityDiscount
                                }
                            }
                        }
                    }
                }
                // pData.product_data=productData
                // if(productList && productList.length>0){
                //     for await( const [index,i] of productList.entries()){

                //     }
                // }

        }
    }




    // logger.debug('=================result================1========',result)

    // let stmt = multiConnection[dbName].query(sql,async function(err,result){
    //     logger.debug("0000000000000 =======================supplier prodcuts listing======",stmt.sql)
    //     // logger.debug("==ERR==",err)  
    //     // logger.debug("================result============",result)

    //         var final_json={},product_data=[];
    //         if(err){
    //             reject(err)
    //         }
    //         else{
                // logger.debug("=====result=-=========",result)
                var final_json={},product_data=[];
                if(result && result.length>0){

                   var m_data=await ModifiedData(result)
                //    logger.debug('======m_data====m_data=======m_datam_data1========',m_data)

                //    logger.debug("=====m_data=-=========",m_data)
                    // result[i].adds_on=result[i].adds_on && result[i].adds_on.length>0?JSON.parse(result[i].adds_on):[]
                   var data=_.groupBy(m_data,"sub_category_name");
                //    logger.debug("====AFTER GRUOp by==>>",data)
                   let detailsName = []
                   let categoryId=0
                   let subCatName = ""
                //    console.log("###################3 ",JSON.stringify(data))
                for await (let [key, value] of Object.entries(data)) {
                    // _.each(data,async function(value,key,object){
                        // console.log("key key key key key key key key key ",key )

                         subCatName = key;
                         let age_limit = 0;
                        if((value && value.length>0)){
                            for(const [index,i] of value.entries()){
                                categoryId=i.main_category
                                //if(parseInt(i.detailed_sub_category_id)!=parseInt(i.branch_sub_category_id)){
                                if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0")){
                                    let cData=await ExecuteQ.Query(dbName,`select cml.name,ct.age_limit from categories ct 
                                    join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
                                    if(cData && cData.length>0 && (cData[0] && cData[0].name != key)){
                                        detailsName.push({name:cData[0].name,detailed_sub_category_id:i.detailed_sub_category_id});
                                    }
                                    if(i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0"){
                                        subCatName = key;
                                    }
                                    age_limit = cData[0].age_limit;
                                }else if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="1")){
                                    let cData=await ExecuteQ.Query(dbName,`select cml.name,ct.age_limit from categories ct 
                                    join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
                                    if(cData && cData.length>0 && (cData[0] && cData[0].name != key)){
                                        subCatName = cData[0].name;
                                    }
                                    age_limit = cData[0].age_limit;
                                }
                            }
                        }
                        
                            // logger.debug("===============",final_json)
                            //final_json.sub_cat_name=key;
                            final_json.sub_cat_name=subCatName;
                            final_json.category_id=categoryId;
                            final_json.detailed_category_name=detailsName;
                            final_json.value=value
                            final_json.age_limit = age_limit
                            product_data.push(final_json);
                            // logger.debug("+===========final json after===========",product_data)
                            detailsName=[]
                            final_json={}
                            // let allkeys = Object.keys(object)
                            // let last_key = allkeys[allkeys.length-1]
                            // if(key==last_key){
                            //     resolve({"product_data":product_data,"count":countResult.length})
                            //     // resolve(product_data)
                            // }
                        
                    // })
                        }
                        // logger.debug('======product_data====product_data=======product_data=====111111111===',product_data)

                        resolve({"product_data":product_data,"count":totalProductCounts})
                }else{
                    final_json.sub_cat_name="";
                    final_json.detailed_category_name=[];
                    final_json.value=[]
                    product_data.push(final_json);
                    // logger.debug('======product_data====product_data=======product_data=====222222222===',product_data)

                    resolve({"product_data":product_data,"count":totalProductCounts})
                }
    //         }
    // })
            }catch(Err){
                console.log("==================errrr========1====",Err);
                reject(Err)
            }
})
}

const SupplierProductsV3 =  async (req,user_type_check,user_type_id,user_id,
    service_type,latitude,longitude,languageId,
    supplierId,dbName,categoryId,is_non_veg,search)=>{

    logger.debug("============categoryId========",categoryId)

    let searchCheck  = " and pml.name like '%" + search + "%' ";

    let userLoyalityLevleIds=[],loyalitPointDiscountAmount=0,
    loyalityLevelDiscountAmount=0,
    perProductLoyalityDiscount=0

    let isPagination=req.query.limit || 0;
    let limit=req.query.limit || 10;
    let offset=req.query.offset || 0

    let category_wise_query = ""
    let in_out_zero_price_check = " and  price.price != 0  ";

    let in_out_setting_data = await ExecuteQ.Query(dbName,
        "select `key`, value from tbl_setting where `key`=?",["enable_in_out_network"]);

    let hideOutOfStockProduct = await ExecuteQ.Query(dbName,
            "select `key`, value from tbl_setting where `key`=? and value=1",["hide_out_of_stock_product"]);
    let outOfStockCheck = "";

    if(hideOutOfStockProduct && hideOutOfStockProduct.length>0){
        outOfStockCheck = "and p.quantity>p.purchased_quantity"
    }
    
    if(in_out_setting_data && in_out_setting_data.length>0){
        if(parseInt(in_out_setting_data[0].value)>0){
            in_out_zero_price_check = ""
        }
    }


    if(parseInt(categoryId)!==0){
        let cateIds=[]
        let subCateData=await ExecuteQ.Query(dbName,`select id,parent_id from categories where parent_id!=? and is_deleted=?`,[0,0])
        if(subCateData && subCateData.length>0){
            let subIds=Universal.getNestedChildrenIds(subCateData,categoryId);
            logger.debug("=====subIds==>>",subIds);
            if(subIds && subIds.length>0){
                cateIds=subIds;
            }
            else{
                cateIds.push(categoryId)
            }
        }
        else{
            cateIds.push(categoryId)
        }   
        logger.debug("====================cateIds====",cateIds,cateIds.join())
        category_wise_query = "and p.category_id IN("+cateIds.join()+")"
    }

    logger.debug("=========category_wise_query=======",category_wise_query)
    let mUnit=await Universal.getMeausringUnit(dbName);
if(service_type==1){
    radius_check_query="having temp1.distance<=temp1.delivery_radius"
}else{
    radius_check_query=""
}
let user_type_condition_one = ""
let user_type_condition_two = ""

logger.debug("====service_type=======check_user_type====",service_type,user_type_check)
if(service_type==1 || service_type==2){
    if(user_type_check && user_type_check.length>0){
        user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
        user_type_condition_two = " and price.user_type_id="+user_type_id+" "
    }
}
logger.debug("===========user_type_condition_one========",user_type_condition_one,user_type_condition_two)
let count_sql=""
let countResult=[]

let nonVegCheck = "";

if(parseInt(is_non_veg)>0){

    if(parseInt(is_non_veg)==1){
        nonVegCheck = " and p.is_non_veg=1 ";
    }else if(parseInt(is_non_veg)==2){
        nonVegCheck = " and p.is_non_veg=2 ";
    }

}


let currentUtcTime = moment.utc().format('HH:mm:ss');

let todayUtcDate = moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'));
const weekday = todayUtcDate.day();

let categoryTimeCheck = " and sc.start_time>='"+currentUtcTime+"' and sc.end_time<='"+currentUtcTime+"' and sc.weekday="+weekday+" "

 categoryTimeCheck = " "



return new Promise(async (resolve,reject)=>{
    try{
        let orderBySql="temp1.product_id Asc,temp1.order_no Asc"
        let categorySData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["category_sequence","1"]);
        if(categorySData && categorySData.length>0){
            orderBySql="temp1.order_no Asc,temp1.order_no Asc"
        }

    if(isPagination!=0){
        sql = "select temp.* "+
        // ",IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant "+
        
        " from (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        "   price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+
        " p.is_supplier_product_approved,p.is_appointment,bp.category_id as parent_category_id,s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

        " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
        "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
        // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
        "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
        " where s.id IN("+supplierId+") "+categoryTimeCheck+" "+category_wise_query+" and is_supplier_product_approved=1  and c.is_live=1  and p.is_live = 1"+
        " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
        " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
        "  "+in_out_zero_price_check+")) UNION ALL  SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+
        " p.is_supplier_product_approved, p.is_appointment, bp.category_id as parent_category_id, s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

        " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
        "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,price.price_type  ,"+
        "  price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
        // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
        "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
        " where s.id IN("+supplierId+")  "+categoryTimeCheck+" "+category_wise_query+" and is_supplier_product_approved=1 and c.is_live=1  and p.is_live = 1"+
        " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
        " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
        "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC limit "+limit+" offset "+offset+") as temp"
        // GROUP BY product_id,sku "+radius_check_query+" order by "+orderBySql+", -display_price ASC,display_price ASC limit "+limit+" offset "+offset+"
        count_sql = "select temp.* "+
        
        // " ,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant "+
        
        " from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        "   price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+
        " p.is_supplier_product_approved,bp.category_id as parent_category_id, s.is_out_network,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

        " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
        "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,p.purchase_limit,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
        // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
        "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
        " where s.id IN("+supplierId+")  "+categoryTimeCheck+" "+category_wise_query+" and is_supplier_product_approved=1 and c.is_live=1  and p.is_live = 1"+
        " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
        " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
        "  "+in_out_zero_price_check+")) UNION ALL   SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+
        " p.is_supplier_product_approved,bp.category_id as parent_category_id, s.is_out_network,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+


            " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
            "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,price.price_type  ,"+
            "  price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
            // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
            "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
            " where s.id IN("+supplierId+") "+categoryTimeCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
            " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
            " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
            " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
            "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
            countResult=await ExecuteQ.QueryV1(req,dbName,count_sql,[]);
        }
        else{
            sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id or questions.category_id = temp.detailed_sub_category_id ),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            "  p.is_allergy_product,price.display_price,c.age_limit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " bp.category_id as parent_category_id, p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,p.calories,c.is_dine,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+
        " from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        "  price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+
        " p.is_supplier_product_approved, p.is_appointment,bp.category_id as parent_category_id, s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

        " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
        "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        "  p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
        // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
        "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
        " where s.id IN("+supplierId+")  "+categoryTimeCheck+" and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
        " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        " and pml.language_id = "+languageId+" "+outOfStockCheck+" "+searchCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
        " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
        "  "+in_out_zero_price_check+")) UNION ALL  SELECT ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " bp.category_id as parent_category_id, s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

        " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
        "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " p.is_supplier_product_approved, p.is_appointment, p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc,"+
        "  price.price,pimage.image_path,"+
        " pml.measuring_unit,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
        // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
        "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
        " where s.id IN("+supplierId+")  "+categoryTimeCheck+" and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
        " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        " and pml.language_id = "+languageId+" "+outOfStockCheck+" "+searchCheck+"  and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
        " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
        "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
        countResult=await ExecuteQ.Query(dbName,sql,[]);
    }

    let result=await ExecuteQ.Query(dbName,sql,[]);

    
     result = await getProductVariants(req.dbName,result);


    logger.debug("====user_id===user_id=====user_id=======",user_id);

    if(parseInt(user_id)!==0){
            
        var user_data=await ExecuteQ.Query(req.dbName,
            `select total_loyality_amount,used_loyality_amount,
            id,loyalty_points from user where access_token = ?`,
            [req.headers.authorization]);
   
        let isLoyalityPointEnable=await ExecuteQ.Query(req.dbName,
            "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
            ["is_loyality_enable","1"]);

        if(isLoyalityPointEnable && isLoyalityPointEnable.length>0){


                
                let loyalityLevelData=await Universal.getUserLoyalityLevelData(req.dbName,
                    user_data[0].id);
              
                loyalitPointDiscountAmount=parseFloat(user_data[0].total_loyality_amount)-parseFloat(user_data[0].used_loyality_amount);
                
                let loyalityLevelCateData=[]
                if(loyalityLevelData && loyalityLevelData.length>0){
                    for await( const[index,i] of loyalityLevelData.entries()){
                        userLoyalityLevleIds.push(i.id)
                    }
                    loyalityLevelCateData=await ExecuteQ.Query(req.dbName,
                        `select id,discount_price,price_type,category_id,supplier_id
                         from loyality_level_category_assignment where 
                         loyality_level_id IN (?)`,[userLoyalityLevleIds]);
                }
               
                 let productData=result
                logger.debug("=====productData==>",productData)
                if(loyalityLevelCateData && loyalityLevelCateData.length>0){

                    for await(const [ind,j] of loyalityLevelCateData.entries()){
                        perProductLoyalityDiscount=0;
                        if(productData && productData.length>0){

                            for await (const [index,i] of productData.entries()){
                                logger.debug("========j.category_id==============",
                                j.category_id,
                                i.parent_category_id,
                                j.supplier_id,
                                i.supplier_id,
                                req.query.supplier_id)

                                if(parseInt(j.category_id)==parseInt(i.parent_category_id)
                                
                                 && parseInt(j.supplier_id)==req.query.supplier_id){
                                    
                                    if(j.price_type==1){
                                        perProductLoyalityDiscount=parseFloat(i.price)*parseFloat(j.discount_price)/100
                                    }
                                    else{
                                        perProductLoyalityDiscount=parseFloat(j.discount_price)
                                    }
                                
                                    loyalityLevelDiscountAmount=loyalityLevelDiscountAmount+perProductLoyalityDiscount

                                    logger.debug("==perProductLoyalityDiscount==loyalityLevelDiscountAmount=>>",
                                    perProductLoyalityDiscount,
                                    loyalityLevelDiscountAmount)

                                    i.perProductLoyalityDiscount=perProductLoyalityDiscount
                                }
                            }
                        }
                    }
                }
                // pData.product_data=productData
                // if(productList && productList.length>0){
                //     for await( const [index,i] of productList.entries()){

                //     }
                // }

        }
    }




    // logger.debug('=================result================1========',result)

    // let stmt = multiConnection[dbName].query(sql,async function(err,result){
    //     logger.debug("0000000000000 =======================supplier prodcuts listing======",stmt.sql)
    //     // logger.debug("==ERR==",err)  
    //     // logger.debug("================result============",result)

    //         var final_json={},product_data=[];
    //         if(err){
    //             reject(err)
    //         }
    //         else{
                // logger.debug("=====result=-=========",result)
                var final_json={},product_data=[];
                if(result && result.length>0){

                   var m_data=await ModifiedData(result)
                //    logger.debug('======m_data====m_data=======m_datam_data1========',m_data)

                //    logger.debug("=====m_data=-=========",m_data)
                    // result[i].adds_on=result[i].adds_on && result[i].adds_on.length>0?JSON.parse(result[i].adds_on):[]
                   var data=_.groupBy(m_data,"sub_category_name");
                //    logger.debug("====AFTER GRUOp by==>>",data)
                   let detailsName = []
                   let categoryId=0
                   let subCatName = ""
                //    console.log("###################3 ",JSON.stringify(data))
                for await (let [key, value] of Object.entries(data)) {
                    // _.each(data,async function(value,key,object){
                        // console.log("key key key key key key key key key ",key )

                         subCatName = key;
                         let age_limit = 0;
                        if((value && value.length>0)){
                            for(const [index,i] of value.entries()){
                                categoryId=i.main_category
                                //if(parseInt(i.detailed_sub_category_id)!=parseInt(i.branch_sub_category_id)){
                                if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0")){
                                    let cData=await ExecuteQ.Query(dbName,`select cml.name,ct.age_limit from categories ct 
                                    join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
                                    if(cData && cData.length>0 && (cData[0] && cData[0].name != key)){
                                        detailsName.push({name:cData[0].name,detailed_sub_category_id:i.detailed_sub_category_id});
                                    }
                                    if(i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0"){
                                        subCatName = key;
                                    }
                                    age_limit = cData[0].age_limit;
                                }else if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="1")){
                                    let cData=await ExecuteQ.Query(dbName,`select cml.name,ct.age_limit from categories ct 
                                    join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
                                    if(cData && cData.length>0 && (cData[0] && cData[0].name != key)){
                                        subCatName = cData[0].name;
                                    }
                                    age_limit = cData[0].age_limit;
                                }
                            }
                        }
                        
                            // logger.debug("===============",final_json)
                            //final_json.sub_cat_name=key;
                            final_json.sub_cat_name=subCatName;
                            final_json.category_id=categoryId;
                            final_json.detailed_category_name=detailsName;
                            final_json.value=value
                            final_json.age_limit = age_limit
                            product_data.push(final_json);
                            // logger.debug("+===========final json after===========",product_data)
                            detailsName=[]
                            final_json={}
                            // let allkeys = Object.keys(object)
                            // let last_key = allkeys[allkeys.length-1]
                            // if(key==last_key){
                            //     resolve({"product_data":product_data,"count":countResult.length})
                            //     // resolve(product_data)
                            // }
                        
                    // })
                        }
                        // logger.debug('======product_data====product_data=======product_data=====111111111===',product_data)

                        resolve({"product_data":product_data,"count":countResult.length})
                }else{
                    final_json.sub_cat_name="";
                    final_json.detailed_category_name=[];
                    final_json.value=[]
                    product_data.push(final_json);
                    // logger.debug('======product_data====product_data=======product_data=====222222222===',product_data)

                    resolve({"product_data":product_data,"count":countResult.length})
                }
    //         }
    // })
            }catch(Err){
                reject(Err)
            }
})
}

// const SupplierProductsV1=async (req,user_type_check,user_type_id,
//     user_id,service_type,latitude,longitude,
//     languageId,supplierId,is_non_veg,is_location_disable,dbName)=>{
//     let isPagination=req.query.limit || 0;
//     let limit=req.query.limit || 10;
//     let offset=req.query.offset || 0

//     let userLoyalityLevleIds=[],loyalitPointDiscountAmount=0,
//     loyalityLevelDiscountAmount=0,
//     perProductLoyalityDiscount=0


//     let mUnit=await Universal.getMeausringUnit(dbName);
// if(service_type==1){
//     radius_check_query="having temp1.distance<=temp1.delivery_radius"
// }else{
//     radius_check_query=""
// }

// if(parseInt(is_location_disable)==1){
//     radius_check_query="";
// }
// let user_type_condition_one = ""
// let user_type_condition_two = ""

// logger.debug("====service_type=======check_user_type====",service_type,user_type_check)

// let in_out_zero_price_check = " and  price.price != 0  ";

// let in_out_setting_data = await ExecuteQ.Query(dbName,
//     "select `key`, value from tbl_setting where `key`=?",["enable_in_out_network"]);

// if(in_out_setting_data && in_out_setting_data.length>0){
//     if(parseInt(in_out_setting_data[0].value)>0){
//         in_out_zero_price_check = ""
//     }
// }

// if(service_type==1 || service_type==2){
//     if(user_type_check && user_type_check.length>0){
//         user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
//         user_type_condition_two = " and price.user_type_id="+user_type_id+" "
//     }
// }
// logger.debug("===========user_type_condition_one========",user_type_condition_one,user_type_condition_two)
// let count_sql=""
// let countResult=[]





// let currentUtcTime = moment.utc().format('HH:mm:ss');

// let todayUtcDate = moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'));
// const weekday = todayUtcDate.day();
// let categoryTimeCheck = " and sc.start_time<='"+currentUtcTime+"' and sc.end_time>='"+currentUtcTime+"' and sc.weekday="+weekday+" "
//  categoryTimeCheck = " "


// return new Promise(async (resolve,reject)=>{
//     try{
//         let orderBySql="temp1.order_no Asc,temp1.product_id Asc"
//         let productSequece=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["product_sequence","1"]); 
//         let categorySData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["category_sequence","1"]);
//         if(categorySData && categorySData.length>0){
//             orderBySql="temp1.order_no Asc,temp1.order_no Asc"
//         }
//         orderBySql=productSequece && productSequece.length>0?"temp1.product_id asc":orderBySql;
        
//         if(isPagination!=0){
//             console.log('hete')
//             sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//             "   p.is_allergy_product,price.display_price,c.age_limit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " bp.category_id as parent_category_id, p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,p.calories,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.is_dine,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") "+categoryTimeCheck+" "+
//             " and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 "+
//             "  "+in_out_zero_price_check+")) UNION ALL  SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//             " p.is_allergy_product,price.display_price,c.age_limit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " bp.category_id as parent_category_id, p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,p.calories,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.is_dine,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             "  price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") "+categoryTimeCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//             "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC limit "+limit+" offset "+offset+") as temp"
//             // GROUP BY product_id,sku "+radius_check_query+" order by "+orderBySql+", -display_price ASC,display_price ASC limit "+limit+" offset "+offset+"
//             count_sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//             "   p.is_allergy_product,price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " bp.category_id as parent_category_id, p.payment_after_confirmation,p.calories,c.is_quantity,c.icon as cate_icon,c.is_liquor,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") "+categoryTimeCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//             "  "+in_out_zero_price_check+")) UNION ALL   SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//             " p.is_allergy_product,price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " bp.category_id as parent_category_id, p.payment_after_confirmation,p.calories,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             "  price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") "+categoryTimeCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//             "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
//             countResult=await ExecuteQ.QueryV1(req,dbName,count_sql,[]);
//         }
//         else{
//             sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//             "  p.is_allergy_product,price.display_price,c.age_limit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " bp.category_id as parent_category_id, p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,p.calories,c.is_dine,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") "+categoryTimeCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//             "  "+in_out_zero_price_check+")) UNION ALL  SELECT ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//             " p.is_allergy_product,price.display_price,c.age_limit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " bp.category_id as parent_category_id, p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,p.calories,c.is_dine,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,c.is_liquor,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc,"+
//             "  price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") "+categoryTimeCheck+"  and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//             "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
//             countResult=await ExecuteQ.QueryV1(req,dbName,sql,[]);
//         }
//         let result=await ExecuteQ.QueryV1(req,dbName,sql,[]);



//     logger.debug("====user_id===user_id=====user_id=======",user_id);

//     if(parseInt(user_id)!==0){
            
//         var user_data=await ExecuteQ.Query(req.dbName,
//             `select total_loyality_amount,used_loyality_amount,
//             id,loyalty_points from user where access_token = ?`,
//             [req.headers.authorization]);
   
//         let isLoyalityPointEnable=await ExecuteQ.Query(req.dbName,
//             "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
//             ["is_loyality_enable","1"]);

//         if(isLoyalityPointEnable && isLoyalityPointEnable.length>0){


                
//                 let loyalityLevelData=await Universal.getUserLoyalityLevelData(req.dbName,
//                     user_data[0].id);
              
//                 loyalitPointDiscountAmount=parseFloat(user_data[0].total_loyality_amount)-parseFloat(user_data[0].used_loyality_amount);
                
//                 let loyalityLevelCateData=[]
//                 if(loyalityLevelData && loyalityLevelData.length>0){
//                     for await( const[index,i] of loyalityLevelData.entries()){
//                         userLoyalityLevleIds.push(i.id)
//                     }
//                     loyalityLevelCateData=await ExecuteQ.Query(req.dbName,
//                         `select id,discount_price,price_type,category_id,supplier_id
//                          from loyality_level_category_assignment where 
//                          loyality_level_id IN (?)`,[userLoyalityLevleIds]);
//                 }
               
//                  let productData=result
//                 logger.debug("=====productData==>",productData)
//                 if(loyalityLevelCateData && loyalityLevelCateData.length>0){

//                     for await(const [ind,j] of loyalityLevelCateData.entries()){
//                         perProductLoyalityDiscount=0;
//                         if(productData && productData.length>0){

//                             for await (const [index,i] of productData.entries()){
//                                 logger.debug("========j.category_id==============",
//                                 j.category_id,
//                                 i.parent_category_id,
//                                 j.supplier_id,
//                                 i.supplier_id,
//                                 req.query.supplier_id)

//                                 if(parseInt(j.category_id)==parseInt(i.parent_category_id)
                                
//                                  && parseInt(j.supplier_id)==req.query.supplier_id){
                                    
//                                     if(j.price_type==1){
//                                         perProductLoyalityDiscount=parseFloat(i.price)*parseFloat(j.discount_price)/100
//                                     }
//                                     else{
//                                         perProductLoyalityDiscount=parseFloat(j.discount_price)
//                                     }
                                
//                                     loyalityLevelDiscountAmount=loyalityLevelDiscountAmount+perProductLoyalityDiscount

//                                     logger.debug("==perProductLoyalityDiscount==loyalityLevelDiscountAmount=>>",
//                                     perProductLoyalityDiscount,
//                                     loyalityLevelDiscountAmount)

//                                     i.perProductLoyalityDiscount=perProductLoyalityDiscount
//                                 }
//                             }
//                         }
//                     }
//                 }
//                 // pData.product_data=productData
//                 // if(productList && productList.length>0){
//                 //     for await( const [index,i] of productList.entries()){

//                 //     }
//                 // }

//         }
//     }



//     // logger.debug('=================result================1========',result)
//     // let stmt = multiConnection[dbName].query(sql,async function(err,result){
//     //     logger.debug("0000000000000 =======================supplier prodcuts listing======",stmt.sql)
//     //     // logger.debug("==ERR==",err)  
//     //     // logger.debug("================result============",result)

//     //         var final_json={},product_data=[];
//     //         if(err){
//     //             reject(err)
//     //         }
//     //         else{
//                 // logger.debug("=====result=-=========",result)
//                 var final_json={},product_data=[];
//                 if(result && result.length>0){

//                    var m_data=await ModifiedData(result)
//                 //    logger.debug('=================m_data===========m_data========',m_data)

//                 //    logger.debug("=====m_data=-=========",m_data)
//                     // result[i].adds_on=result[i].adds_on && result[i].adds_on.length>0?JSON.parse(result[i].adds_on):[]
//                    var data=_.groupBy(m_data,"sub_category_name");
//                 //    logger.debug('====data=============data===========data========',data)

//                 //    logger.debug("====AFTER GRUOp by==>>",data)
//                    let detailsName = []
//                    let categoryId=0
//                    let subCatName = ""
//                    let subCatIds = [];
//                    for await (let [key, value] of Object.entries(data)) {
//                         for (const [index,i] of value.entries()){
//                             subCatIds.push(i.detailed_sub_category_id);
//                         }
//                     }
                    
//                     let cDatass=await ExecuteQ.Query(dbName,`select cml.name, ct.id  from categories ct 
//                     join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id IN (?)`,[languageId, subCatIds])
                    
                
//                 for await (let [key, value] of Object.entries(data)) {
//                     // _.each(data,async function(value,key,object){
//                         // console.log("key key key key key key key key key ",key )

//                          subCatName = key;

//                         if((value && value.length>0)){
//                             for(const [index,i] of value.entries()){

//                                 categoryId=i.main_category
//                                 // if(parseInt(i.detailed_sub_category_id)!=parseInt(i.branch_sub_category_id)){
//                                 if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0")){
//                                     // let cData=await ExecuteQ.Query(dbName,`select cml.name from categories ct 
//                                     // join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
//                                     for(const [categIndex,categ] of cDatass.entries()) {
//                                         if (categ.id == i.detailed_sub_category_id) {
//                                             if(categ && (categ && categ.name != key)) {
//                                                 detailsName.push({name:categ.name,detailed_sub_category_id:i.detailed_sub_category_id});
//                                             }
//                                         }
//                                     }

//                                     if(i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0"){
//                                         subCatName = key;   
//                                     }
//                                 } else if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="1")){
                                 
//                                     // let cData=await ExecuteQ.Query(dbName,`select cml.name from categories ct 
//                                     // join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
//                                     for(const [categIndex,categ] of cDatass.entries()) {
//                                         if (categ.id == i.detailed_sub_category_id) {
//                                             if(categ && (categ.name != key)){
//                                                 subCatName = categ.name;
//                                             }
//                                         }
//                                     }
//                                 }
//                             }
//                         // }
//                         }
                        
//                             // logger.debug("===============",final_json)
//                             //final_json.sub_cat_name=key;
//                             final_json.sub_cat_name=subCatName;
//                             final_json.category_id=categoryId;
//                             final_json.detailed_category_name=detailsName;
//                             final_json.sub_cat_image=value && value.length>0?value[0].cate_image:""
//                             final_json.sub_cat_icon=value && value.length>0?value[0].cate_icon:""
//                             final_json.value=value

//                             product_data.push(final_json);
//                             // logger.debug("+===========final json after===========",product_data)
//                             detailsName=[]
//                             final_json={}
//                             // let allkeys = Object.keys(object)
//                             // let last_key = allkeys[allkeys.length-1]
//                             // if(key==last_key){
//                             //     resolve({"product_data":product_data,"count":countResult.length})
//                             //     // resolve(product_data)
//                             // }
                        
//                     // })
//                         }
//                         logger.debug('===="product_data":product_data======="product_data":product_data====11111111=====',product_data)

//                         resolve({"product_data":product_data,"count":countResult.length})
//                 }else{
//                     final_json.sub_cat_name="";
//                     final_json.detailed_category_name=[];
//                     final_json.value=[]
//                     product_data.push(final_json);
//                     logger.debug('===="product_data":product_data======="product_data":product_data===2222222222======',product_data)

//                     resolve({"product_data":product_data,"count":countResult.length})
//                 }
//     //         }
//     // })
//             }catch(Err){
//                 reject(Err)
//             }
// })
// }

/** by mukesh  */
const SupplierProductsV1=async (req,user_type_check,user_type_id,
    user_id,service_type,latitude,longitude,
    languageId,supplierId,is_non_veg,is_location_disable,dbName)=>{

    let isPagination=req.query.limit || 0;
    let limit=req.query.limit || 10;
    let offset=req.query.offset || 0

    let userLoyalityLevleIds=[],loyalitPointDiscountAmount=0,
    loyalityLevelDiscountAmount=0,
    perProductLoyalityDiscount=0


    let mUnit=await Universal.getMeausringUnit(dbName);
if(service_type==1){
    radius_check_query="having temp1.distance<=temp1.delivery_radius"
}else{
    radius_check_query=""
}

if(parseInt(is_location_disable)==1){
    radius_check_query="";
}
let user_type_condition_one = ""
let user_type_condition_two = ""

logger.debug("====service_type=======check_user_type====",service_type,user_type_check)

let in_out_zero_price_check = " and  price.price != 0  ";

let in_out_setting_data = await ExecuteQ.Query(dbName,
    "select `key`, value from tbl_setting where `key`=?",["enable_in_out_network"]);

if(in_out_setting_data && in_out_setting_data.length>0){
    if(parseInt(in_out_setting_data[0].value)>0){
        in_out_zero_price_check = ""
    }
}

if(service_type==1 || service_type==2){
    if(user_type_check && user_type_check.length>0){
        user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
        user_type_condition_two = " and price.user_type_id="+user_type_id+" "
    }
}
logger.debug("===========user_type_condition_one========",user_type_condition_one,user_type_condition_two)
let count_sql=""
let countResult=[]





let currentUtcTime = moment.utc().format('HH:mm:ss');

let todayUtcDate = moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'));
const weekday = todayUtcDate.day();
let categoryTimeCheck = " and sc.start_time<='"+currentUtcTime+"' and sc.end_time>='"+currentUtcTime+"' and sc.weekday="+weekday+" "
 categoryTimeCheck = " "

 let nonVegCheck = "";

 if(parseInt(is_non_veg)>0){
     if(parseInt(is_non_veg)==1){
         nonVegCheck = " and p.is_non_veg=1 ";
     }else if(parseInt(is_non_veg)==2){
         nonVegCheck = " and p.is_non_veg=2 ";
     }
 }

return new Promise(async (resolve,reject)=>{
    
    try{
        let orderBySql="temp1.order_no Asc,temp1.product_id Asc,"
        let productSequece=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["product_sequence","1"]); 
        let categorySData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["category_sequence","1"]);
        let order_no_sequence=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["order_number_sequence","1"]);

        let maincategorySData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["is_main_category_sequence_wise","1"]);


        if(categorySData && categorySData.length>0){
            orderBySql="temp1.order_no Asc,temp1.order_no Asc,"
        }
        orderBySql = "";
        orderBySql=productSequece && productSequece.length>0?"temp1.product_id asc,temp1.product_order_no asc, ":orderBySql;
        orderBySql=maincategorySData && maincategorySData.length>0?"temp1.sequence_no asc, ":orderBySql;
        orderBySql=order_no_sequence && order_no_sequence.length>0?"ISNULL(temp1.order_no), temp1.order_no ASC,temp1.product_order_no asc ,":orderBySql;
        
        

        let gradeQuery="";
        let gradeSettingKeys=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["enable_grading","1"])
        if(gradeSettingKeys && gradeSettingKeys.length>0){
            gradeQuery="p.grade as product_grade,"
        }

        let stockNumberQuery="";
        let stockNumberettingKeys=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["enable_stock_number","1"])
        if(stockNumberettingKeys && stockNumberettingKeys.length>0){
            stockNumberQuery="p.stock_number as unique_no,"
        }


        
        if(isPagination!=0){
            console.log('hete')
            sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id and questions.isDelete=0 ),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"display_price\": \"', display_price, '\",','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,"+gradeQuery+ " "+stockNumberQuery+" p.is_product,p.duration,"+
            "   p.tax_exempt,  p.is_allergy_product,price.display_price,c.age_limit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.is_out_network ,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " bp.category_id as parent_category_id,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.sequence_no,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

            " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
            "c.order_instructions,p.cart_image_upload,c.is_dine,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1,bp.order_no as product_order_no  , IFNULL((select (order_no) from supplier_category where supplier_category.category_id = c.id and supplier_category.supplier_id = "+supplierId+" and supplier_category.sub_category_id = 0 and supplier_category.detailed_sub_category_id = 0 group by supplier_category.supplier_id,supplier_category.category_id limit 1),(select (order_no) from supplier_category where supplier_category.sub_category_id = c.id and supplier_category.supplier_id = "+supplierId+" and supplier_category.detailed_sub_category_id = 0 group by supplier_category.supplier_id,supplier_category.category_id limit 1))  as order_no      "+
            " from"+
            // " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " supplier_branch_product bp join categories c on  bp.detailed_sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+

            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id       join supplier_category sc on (sc.category_id = bp.category_id and sc.supplier_id = s.id)           "+
            // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
            // "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
            " where s.id IN("+supplierId+") "+categoryTimeCheck+" "+
            " and is_supplier_product_approved=1 and c.is_live=1 and p.is_live = 1"+
            " "+nonVegCheck+"and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
            " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
            " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
            " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 "+
            "  "+in_out_zero_price_check+")) UNION ALL  SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"display_price\": \"', display_price, '\", ','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,"+gradeQuery+" "+stockNumberQuery+" p.is_product,p.duration,"+
            "  p.tax_exempt, p.is_allergy_product,price.display_price,c.age_limit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.is_out_network, s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " bp.category_id as parent_category_id,p.item_unavailable, p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.sequence_no,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

            " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
            "c.order_instructions,p.cart_image_upload,c.is_dine,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,price.price_type  ,"+
            "  price.price as fixed_price,price.price_type as price1,bp.order_no as product_order_no  , IFNULL((select (order_no) from supplier_category where supplier_category.category_id = c.id and supplier_category.supplier_id = "+supplierId+" and supplier_category.sub_category_id = 0 and supplier_category.detailed_sub_category_id = 0 group by supplier_category.supplier_id,supplier_category.category_id limit 1),(select (order_no) from supplier_category where supplier_category.sub_category_id = c.id and supplier_category.supplier_id = "+supplierId+" and supplier_category.detailed_sub_category_id = 0 group by supplier_category.supplier_id,supplier_category.category_id limit 1))  as order_no"+
            " from"+
            // " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " supplier_branch_product bp join categories c on  bp.detailed_sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
          
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id     join supplier_category sc on (sc.category_id = bp.category_id and sc.supplier_id = s.id)        "+
            // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
            // "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
            " where s.id IN("+supplierId+") "+categoryTimeCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
            ""+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
            " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
            " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
            " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
            "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+" -temp1.display_price ASC,temp1.display_price ASC limit "+limit+" offset "+offset+") as temp"
            // GROUP BY product_id,sku "+radius_check_query+" order by "+orderBySql+", -display_price ASC,display_price ASC limit "+limit+" offset "+offset+"
            count_sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id  and questions.isDelete=0 ),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id ,"+gradeQuery+" "+stockNumberQuery+" p.is_product,p.duration,"+
            "   p.is_allergy_product,price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.is_out_network, s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " bp.category_id as parent_category_id, p.payment_after_confirmation,p.calories,c.is_quantity,c.icon as cate_icon,c.is_liquor,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

            " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
            "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1,bp.order_no as product_order_no , (select (order_no) from supplier_category where supplier_category.category_id = c.id and supplier_category.supplier_id = "+supplierId+" and supplier_category.sub_category_id = 0 and supplier_category.detailed_sub_category_id = 0 group by supplier_category.supplier_id,supplier_category.category_id limit 1)  as order_no     "+
            " from"+
            
            
            // " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " supplier_branch_product bp join categories c on  bp.detailed_sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            
            
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id  join supplier_category sc on (sc.category_id = bp.category_id and sc.supplier_id = s.id)"+
            // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
            // "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
            " where s.id IN("+supplierId+") "+categoryTimeCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
            ""+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
            " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
            " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
            " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
            "  "+in_out_zero_price_check+")) UNION ALL   SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,"+gradeQuery+" "+stockNumberQuery+" p.is_product,p.duration,"+
            " p.is_allergy_product,price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.is_out_network, s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " bp.category_id as parent_category_id, p.payment_after_confirmation,p.calories,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

            " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
            "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,price.price_type  ,"+
            "  price.price as fixed_price,price.price_type as price1,bp.order_no as product_order_no  , (select (order_no) from supplier_category where supplier_category.category_id = c.id and supplier_category.supplier_id = "+supplierId+" and supplier_category.sub_category_id = 0 and supplier_category.detailed_sub_category_id = 0 group by supplier_category.supplier_id,supplier_category.category_id limit 1)  as order_no     "+
            " from"+
            // " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            

            " supplier_branch_product bp join categories c on  bp.detailed_sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+

            
            
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id join supplier_category sc on (sc.category_id = bp.category_id and sc.supplier_id = s.id)    "+
            // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
            // "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
            " where s.id IN("+supplierId+") "+categoryTimeCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
            ""+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
            " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
            " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
            " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
            "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by  -temp1.display_price ASC,temp1.display_price ASC) as temp"
            countResult=await ExecuteQ.QueryV1(req,dbName,count_sql,[]);
        }
        else{
            sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id  and questions.isDelete=0 ),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"display_price\": \"', display_price, '\",','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id, "+gradeQuery+" "+stockNumberQuery+" p.is_product,p.duration,"+
            "   p.tax_exempt, p.is_allergy_product,price.display_price,c.age_limit,sbb.delivery_radius,sbb.latitude,sbb.longitude, s.is_out_network, s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " bp.category_id as parent_category_id, p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,p.calories,c.is_dine,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.sequence_no,c.is_liquor,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

            " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
            "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1,bp.order_no as product_order_no,IFNULL((select (order_no) from supplier_category where supplier_category.category_id = c.id and supplier_category.supplier_id = "+supplierId+" and supplier_category.sub_category_id = 0 and supplier_category.detailed_sub_category_id = 0 group by supplier_category.supplier_id,supplier_category.category_id limit 1),(select (order_no) from supplier_category where supplier_category.sub_category_id = c.id and supplier_category.supplier_id = "+supplierId+" and supplier_category.detailed_sub_category_id = 0 group by supplier_category.supplier_id,supplier_category.category_id limit 1))  as order_no  "+
            " from"+
            // " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
           

            " supplier_branch_product bp join categories c on  bp.detailed_sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+

           
           
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id  "+
            // " join supplier_category sc on (sc.category_id = bp.category_id and sc.supplier_id = s.id)   "+
            // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
            "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id or sc.category_id=c.id  ) )" + 
            " where s.id IN("+supplierId+") "+categoryTimeCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
            ""+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
            " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
            " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
            " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
            "  "+in_out_zero_price_check+")) UNION ALL  SELECT ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"display_price\": \"', display_price, '\",','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,"+gradeQuery+" "+stockNumberQuery+" p.is_product,p.duration,"+
            "  p.tax_exempt, p.is_allergy_product,price.display_price,c.age_limit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.is_out_network, s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " bp.category_id as parent_category_id, p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,p.calories,c.is_dine,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,c.sequence_no,c.is_liquor,cml.name as sub_category_name,p.category_id as category_id,"+

            " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
            "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc,"+
            "  price.price,pimage.image_path,"+
            " pml.measuring_unit,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1,bp.order_no as product_order_no  , IFNULL((select (order_no) from supplier_category where supplier_category.category_id = c.id and supplier_category.supplier_id = "+supplierId+" and supplier_category.sub_category_id = 0 and supplier_category.detailed_sub_category_id = 0 group by supplier_category.supplier_id,supplier_category.category_id limit 1),(select (order_no) from supplier_category where supplier_category.sub_category_id = c.id and supplier_category.supplier_id = "+supplierId+" and supplier_category.detailed_sub_category_id = 0 group by supplier_category.supplier_id,supplier_category.category_id limit 1))  as order_no  "+
            " from"+
            // " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " supplier_branch_product bp join categories c on  bp.detailed_sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
           
           
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id "+
            //   "join supplier_category sc on (sc.category_id = bp.category_id and sc.supplier_id = s.id)     "+
            // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
            // "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
            "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id or sc.category_id=c.id  ) )" + 

            " where s.id IN("+supplierId+") "+categoryTimeCheck+"  and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
            ""+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
            " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
            " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
            " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
            "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+" -temp1.display_price ASC,temp1.display_price ASC) as temp"
            countResult=await ExecuteQ.QueryV1(req,dbName,sql,[]);
        }
        let result=await ExecuteQ.QueryV1(req,dbName,sql,[]);


        console.log(result,"productresult,sql",sql);



   
    if(parseInt(user_id)!==0){
            
        var user_data=await ExecuteQ.Query(req.dbName,
            `select total_loyality_amount,used_loyality_amount,
            id,loyalty_points from user where access_token = ?`,
            [req.headers.authorization]);
   
        let isLoyalityPointEnable=await ExecuteQ.Query(req.dbName,
            "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
            ["is_loyality_enable","1"]);

        if(isLoyalityPointEnable && isLoyalityPointEnable.length>0){


                
                let loyalityLevelData=await Universal.getUserLoyalityLevelData(req.dbName,
                    user_data[0].id);
              
                loyalitPointDiscountAmount=parseFloat(user_data[0].total_loyality_amount)-parseFloat(user_data[0].used_loyality_amount);
                
                let loyalityLevelCateData=[]
                if(loyalityLevelData && loyalityLevelData.length>0){
                    for await( const[index,i] of loyalityLevelData.entries()){
                        userLoyalityLevleIds.push(i.id)
                    }
                    loyalityLevelCateData=await ExecuteQ.Query(req.dbName,
                        `select id,discount_price,price_type,category_id,supplier_id
                         from loyality_level_category_assignment where 
                         loyality_level_id IN (?)`,[userLoyalityLevleIds]);
                }
               
                 let productData=result
                logger.debug("=====productData==>",productData)
                if(loyalityLevelCateData && loyalityLevelCateData.length>0){

                    for await(const [ind,j] of loyalityLevelCateData.entries()){
                        perProductLoyalityDiscount=0;
                        if(productData && productData.length>0){

                            for await (const [index,i] of productData.entries()){
                                logger.debug("========j.category_id==============",
                                j.category_id,
                                i.parent_category_id,
                                j.supplier_id,
                                i.supplier_id,
                                req.query.supplier_id)

                                if(parseInt(j.category_id)==parseInt(i.parent_category_id)
                                
                                 && parseInt(j.supplier_id)==req.query.supplier_id){
                                    
                                    if(j.price_type==1){
                                        perProductLoyalityDiscount=parseFloat(i.price)*parseFloat(j.discount_price)/100
                                    }
                                    else{
                                        perProductLoyalityDiscount=parseFloat(j.discount_price)
                                    }
                                
                                    loyalityLevelDiscountAmount=loyalityLevelDiscountAmount+perProductLoyalityDiscount

                                    logger.debug("==perProductLoyalityDiscount==loyalityLevelDiscountAmount=>>",
                                    perProductLoyalityDiscount,
                                    loyalityLevelDiscountAmount)

                                    i.perProductLoyalityDiscount=perProductLoyalityDiscount
                                }
                            }
                        }
                    }
                }
                

        }
    }

                var final_json={},product_data=[];
                if(result && result.length>0){
                   var m_data=await ModifiedData(result)
                   var data=_.groupBy(m_data,"sub_category_name");
                
                   let detailsName = []
                   let categoryId=0
                   let subCatName = ""
                   let subCatIds = [];
                   for await (let [key, value] of Object.entries(data)) {
                        for (const [index,i] of value.entries()){
                            subCatIds.push(i.detailed_sub_category_id);
                        }
                    }
                    
                    let cDatass=await ExecuteQ.Query(dbName,`select cml.name, ct.id  from categories ct 
                    join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id IN (?)`,[languageId, subCatIds])
                    
                
                for await (let [key, value] of Object.entries(data)) {
                    
                         subCatName = key;

                        if((value && value.length>0)){
                            for(const [index,i] of value.entries()){
                                categoryId=i.main_category
                                if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0")){
                                     for(const [categIndex,categ] of cDatass.entries()) {
                                        if (categ.id == i.detailed_sub_category_id) {
                                            if(categ && (categ && categ.name != key)) {
                                                detailsName.push({name:categ.name,detailed_sub_category_id:i.detailed_sub_category_id});
                                            }
                                        }
                                    }

                                    if(i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0"){
                                        subCatName = key;   
                                    }
                                } else if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="1")){
                                    console.log("herer")
                                    for(const [categIndex,categ] of cDatass.entries()) {
                                        if (categ.id == i.detailed_sub_category_id) {
                                            if(categ && (categ.name != key)){
                                                subCatName = categ.name;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                            final_json.sub_cat_name=subCatName;
                            final_json.category_id=categoryId;
                            final_json.detailed_category_name=detailsName;
                            final_json.sub_cat_image=value && value.length>0?value[0].cate_image:""
                            final_json.sub_cat_icon=value && value.length>0?value[0].cate_icon:""
                            final_json.value=value;
                            console.log(final_json,"final_jsonfinal_jsonfinal_json")
                            product_data.push(final_json);
                            detailsName=[]
                            final_json={};
                        }
                        resolve({"product_data":product_data,"count":countResult.length})
                }else{
                    final_json.sub_cat_name="";
                    final_json.detailed_category_name=[];
                    final_json.value=[]
                    product_data.push(final_json);
                    resolve({"product_data":product_data,"count":countResult.length})
                }
    
            }catch(Err){ console.log(Err,"ErrErrErrErrErrErrErrErr")
                reject(Err)
            }
})
}




// const SupplierProductsV3 =  async (req,user_type_check,user_type_id,user_id,
//     service_type,latitude,longitude,languageId,
//     supplierId,dbName,categoryId,is_non_veg,search)=>{

//     logger.debug("============categoryId========",categoryId)

//     let userLoyalityLevleIds=[],loyalitPointDiscountAmount=0,
//     loyalityLevelDiscountAmount=0,
//     perProductLoyalityDiscount=0

//     let isPagination=req.query.limit || 0;
//     let limit=req.query.limit || 10;
//     let offset=req.query.offset || 0

//     let category_wise_query = ""
//     let in_out_zero_price_check = " and  price.price != 0  ";

//     let in_out_setting_data = await ExecuteQ.Query(dbName,
//         "select `key`, value from tbl_setting where `key`=?",["enable_in_out_network"]);

//     let hideOutOfStockProduct = await ExecuteQ.Query(dbName,
//             "select `key`, value from tbl_setting where `key`=? and value=1",["hide_out_of_stock_product"]);
//     let outOfStockCheck = "";

//     if(hideOutOfStockProduct && hideOutOfStockProduct.length>0){
//         outOfStockCheck = "and p.quantity>p.purchased_quantity"
//     }
    
//     if(in_out_setting_data && in_out_setting_data.length>0){
//         if(parseInt(in_out_setting_data[0].value)>0){
//             in_out_zero_price_check = ""
//         }
//     }

//     if(parseInt(categoryId)!==0){
//         let cateIds=[]
//         let subCateData=await ExecuteQ.Query(dbName,`select id,parent_id from categories where parent_id!=? and is_deleted=?`,[0,0])
//         if(subCateData && subCateData.length>0){
//             let subIds=Universal.getNestedChildrenIds(subCateData,categoryId);
//             logger.debug("=====subIds==>>",subIds);
//             if(subIds && subIds.length>0){
//                 cateIds=subIds;
//             }
//             else{
//                 cateIds.push(categoryId)
//             }
//         }
//         else{
//             cateIds.push(categoryId)
//         }   
//         logger.debug("====================cateIds====",cateIds,cateIds.join())
//         category_wise_query = "and p.category_id IN("+cateIds.join()+")"
//     }

//     logger.debug("=========category_wise_query=======",category_wise_query)
//     let mUnit=await Universal.getMeausringUnit(dbName);
// if(service_type==1){
//     radius_check_query="having temp1.distance<=temp1.delivery_radius"
// }else{
//     radius_check_query=""
// }
// let user_type_condition_one = ""
// let user_type_condition_two = ""

// logger.debug("====service_type=======check_user_type====",service_type,user_type_check)
// if(service_type==1 || service_type==2){
//     if(user_type_check && user_type_check.length>0){
//         user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
//         user_type_condition_two = " and price.user_type_id="+user_type_id+" "
//     }
// }
// logger.debug("===========user_type_condition_one========",user_type_condition_one,user_type_condition_two)
// let count_sql=""
// let countResult=[]

// let nonVegCheck = "";

// if(parseInt(is_non_veg)>0){

//     if(parseInt(is_non_veg)==1){
//         nonVegCheck = " and p.is_non_veg=1 ";
//     }else if(parseInt(is_non_veg)==2){
//         nonVegCheck = " and p.is_non_veg=2 ";
//     }

// }

// let searchCheck = " and pml.name like '%"+search+"%' ";


// return new Promise(async (resolve,reject)=>{
//     try{
//         let orderBySql="temp1.product_id Asc,temp1.order_no Asc"
//         let categorySData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["category_sequence","1"]);
//         if(categorySData && categorySData.length>0){
//             orderBySql="temp1.order_no Asc,temp1.order_no Asc"
//         }

//     if(isPagination!=0){
//         sql = "select temp.* "+
//         // " IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant "+
//         " from (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration, "+
//         "   price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//         " quantity,purchased_quantity,"+
//         " p.is_supplier_product_approved,p.is_appointment,bp.category_id as parent_category_id,s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//         " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
//         "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//         " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//         " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//         " price.beauty_saloon_price,"+
//         " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//         " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//         " ,price.price,pimage.image_path,"+
//         " pml.measuring_unit,price.price_type  ,"+
//         " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//         " from"+
//         " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//         " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//         " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//         "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//         // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//         "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
//         " where s.id IN("+supplierId+") "+category_wise_query+" "+searchCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//         " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//         " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//         " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//         " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//         "  "+in_out_zero_price_check+")) UNION ALL  SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//         " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//         " quantity,purchased_quantity,"+
//         " p.is_supplier_product_approved,p.is_appointment, bp.category_id as parent_category_id, s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//         " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
//         "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//         " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//         " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//         " price.beauty_saloon_price,"+
//         " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//         " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//         " ,price.price,pimage.image_path,"+
//         " pml.measuring_unit,price.price_type  ,"+
//         "  price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//         " from"+
//         " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//         " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//         " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//         "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//         // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//         "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
//         " where s.id IN("+supplierId+") "+category_wise_query+" "+searchCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//         " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//         " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//         " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//         " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//         "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC limit "+limit+" offset "+offset+") as temp"
//         // GROUP BY product_id,sku "+radius_check_query+" order by "+orderBySql+", -display_price ASC,display_price ASC limit "+limit+" offset "+offset+"
        
//         count_sql = "select temp.* " +
//         // " IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant "+
//         " from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//         "   price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//         " quantity,purchased_quantity,"+
//         " p.is_supplier_product_approved,bp.category_id as parent_category_id, s.is_out_network,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//         " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
//         "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//         " ,p.purchase_limit,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//         " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//         " price.beauty_saloon_price,"+
//         " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//         " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//         " ,price.price,pimage.image_path,"+
//         " pml.measuring_unit,price.price_type  ,"+
//         " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//         " from"+
//         " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//         " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//         " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//         "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//         // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//         "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
//         " where s.id IN("+supplierId+") "+category_wise_query+" "+searchCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//         " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//         " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//         " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//         " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//         "  "+in_out_zero_price_check+")) UNION ALL   SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//         " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//         " quantity,purchased_quantity,"+
//         " p.is_supplier_product_approved,bp.category_id as parent_category_id, s.is_out_network,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//         " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
//         "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//         " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//         " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//         " price.beauty_saloon_price,"+
//         " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//         " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//         " ,price.price,pimage.image_path,"+
//         " p.purchase_limit,pml.measuring_unit,price.price_type  ,"+
//         "  price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//         " from"+
//         " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//         " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//         " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//         "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//         // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//         "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
//         " where s.id IN("+supplierId+") "+category_wise_query+" "+searchCheck+" and is_supplier_product_approved=1 and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//         " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//         " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//         " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//         " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 "+
//         "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
//         countResult=await ExecuteQ.Query(dbName,count_sql,[]);
//     }
//     else{
//         sql = "select temp.* "+
//         // " IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant "+
//         " from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//         "  price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//         " quantity,purchased_quantity,"+
//         " p.is_supplier_product_approved, p.is_appointment,bp.category_id as parent_category_id, s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//         " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
//         "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//         " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//         " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//         " price.beauty_saloon_price,"+
//         "  p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//         " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//         " ,price.price,pimage.image_path,"+
//         " pml.measuring_unit,price.price_type  ,"+
//         " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//         " from"+
//         " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//         " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//         " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//         "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//         // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//         "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
//         " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//         " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//         " and pml.language_id = "+languageId+" "+outOfStockCheck+" "+searchCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//         " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//         " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//         "  "+in_out_zero_price_check+")) UNION ALL  SELECT ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(id)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//         " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//         " quantity,purchased_quantity,"+
//         " bp.category_id as parent_category_id, s.is_out_network,p.item_unavailable,p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//         " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
        
//         "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//         " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//         " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//         " price.beauty_saloon_price,"+
//         " p.is_supplier_product_approved, p.is_appointment, p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//         " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc,"+
//         "  price.price,pimage.image_path,"+
//         " pml.measuring_unit,price.price_type  ,"+
//         " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//         " from"+
//         " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//         " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//         " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(id) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//         "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//         // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//         "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
//         " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//         " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//         " and pml.language_id = "+languageId+" "+outOfStockCheck+" "+searchCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//         " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//         " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//         "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
//         countResult=await ExecuteQ.Query(dbName,sql,[]);
//     }

//     let result=await ExecuteQ.Query(dbName,sql,[]);



//     logger.debug("====user_id===user_id=====user_id=======",user_id);

//     if(parseInt(user_id)!==0){
            
//         var user_data=await ExecuteQ.Query(req.dbName,
//             `select total_loyality_amount,used_loyality_amount,
//             id,loyalty_points from user where access_token = ?`,
//             [req.headers.authorization]);
   
//         let isLoyalityPointEnable=await ExecuteQ.Query(req.dbName,
//             "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
//             ["is_loyality_enable","1"]);

//         if(isLoyalityPointEnable && isLoyalityPointEnable.length>0){


                
//                 let loyalityLevelData=await Universal.getUserLoyalityLevelData(req.dbName,
//                     user_data[0].id);
              
//                 loyalitPointDiscountAmount=parseFloat(user_data[0].total_loyality_amount)-parseFloat(user_data[0].used_loyality_amount);
                
//                 let loyalityLevelCateData=[]
//                 if(loyalityLevelData && loyalityLevelData.length>0){
//                     for await( const[index,i] of loyalityLevelData.entries()){
//                         userLoyalityLevleIds.push(i.id)
//                     }
//                     loyalityLevelCateData=await ExecuteQ.Query(req.dbName,
//                         `select id,discount_price,price_type,category_id,supplier_id
//                          from loyality_level_category_assignment where 
//                          loyality_level_id IN (?)`,[userLoyalityLevleIds]);
//                 }
               
//                  let productData=result
//                 logger.debug("=====productData==>",productData)
//                 if(loyalityLevelCateData && loyalityLevelCateData.length>0){

//                     for await(const [ind,j] of loyalityLevelCateData.entries()){
//                         perProductLoyalityDiscount=0;
//                         if(productData && productData.length>0){

//                             for await (const [index,i] of productData.entries()){
//                                 logger.debug("========j.category_id==============",
//                                 j.category_id,
//                                 i.parent_category_id,
//                                 j.supplier_id,
//                                 i.supplier_id,
//                                 req.query.supplier_id)

//                                 if(parseInt(j.category_id)==parseInt(i.parent_category_id)
                                
//                                  && parseInt(j.supplier_id)==req.query.supplier_id){
                                    
//                                     if(j.price_type==1){
//                                         perProductLoyalityDiscount=parseFloat(i.price)*parseFloat(j.discount_price)/100
//                                     }
//                                     else{
//                                         perProductLoyalityDiscount=parseFloat(j.discount_price)
//                                     }
                                
//                                     loyalityLevelDiscountAmount=loyalityLevelDiscountAmount+perProductLoyalityDiscount

//                                     logger.debug("==perProductLoyalityDiscount==loyalityLevelDiscountAmount=>>",
//                                     perProductLoyalityDiscount,
//                                     loyalityLevelDiscountAmount)

//                                     i.perProductLoyalityDiscount=perProductLoyalityDiscount
//                                 }
//                             }
//                         }
//                     }
//                 }

//         }
//     }



//                 var final_json={},product_data=[];
//                 if(result && result.length>0){

//                    var m_data=await ModifiedData(result)
//                    var data=_.groupBy(m_data,"sub_category_name");
//                    let detailsName = []
//                    let categoryId=0
//                    let subCatName = ""
//                 for await (let [key, value] of Object.entries(data)) {

//                          subCatName = key;
//                          let age_limit = 0;
//                         if((value && value.length>0)){
//                             for(const [index,i] of value.entries()){
//                                 categoryId=i.main_category
//                                 if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0")){
//                                     let cData=await ExecuteQ.Query(dbName,`select cml.name,ct.age_limit from categories ct 
//                                     join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
//                                     if(cData && cData.length>0 && (cData[0] && cData[0].name != key)){
//                                         detailsName.push({name:cData[0].name,detailed_sub_category_id:i.detailed_sub_category_id});
//                                     }
//                                     if(i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0"){
//                                         subCatName = key;
//                                     }
//                                     age_limit = cData[0].age_limit
//                                 }else if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="1")){
//                                     let cData=await ExecuteQ.Query(dbName,`select cml.name,ct.age_limit from categories ct 
//                                     join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
//                                     if(cData && cData.length>0 && (cData[0] && cData[0].name != key)){
//                                         subCatName = cData[0].name;
//                                     }
//                                     age_limit = cData[0].age_limit
//                                 }
//                             }
//                         }
                        
//                             final_json.sub_cat_name=subCatName;
//                             final_json.category_id=categoryId;
//                             final_json.detailed_category_name=detailsName;
//                             final_json.value=value;
//                             final_json.age_limit = age_limit;
//                             product_data.push(final_json);
//                             detailsName=[]
//                             final_json={}
//                         }
//                         resolve({"product_data":product_data,"count":countResult.length})
//                 }else{
//                     final_json.sub_cat_name="";
//                     final_json.detailed_category_name=[];
//                     final_json.value=[]
//                     product_data.push(final_json);
//                     // logger.debug('======product_data====product_data=======product_data=====222222222===',product_data)

//                     resolve({"product_data":product_data,"count":countResult.length})
//                 }
//     //         }
//     // })
//             }catch(Err){
//                 reject(Err)
//             }
// })
// }

// const SupplierProductsV1=async (req,user_type_check,user_type_id,
//     user_id,service_type,latitude,
//     longitude,languageId,
//     supplierId,is_non_veg,
//     dbName)=>{

//     let isPagination=req.query.limit || 0;
//     let limit=req.query.limit || 10;
//     let offset=req.query.offset || 0
//     let mUnit=await Universal.getMeausringUnit(dbName);

// if(service_type==1){
//     radius_check_query="having temp1.distance<=temp1.delivery_radius"
// }else{
//     radius_check_query=""
// }

// let user_type_condition_one = ""
// let user_type_condition_two = ""

// logger.debug("====service_type=======check_user_type====",service_type,user_type_check)

// let in_out_zero_price_check = " and  price.price != 0  ";

// let in_out_setting_data = await ExecuteQ.Query(dbName,
//     "select `key`, value from tbl_setting where `key`=?",["enable_in_out_network"]);

// if(in_out_setting_data && in_out_setting_data.length>0){
//     if(parseInt(in_out_setting_data[0].value)>0){
//         in_out_zero_price_check = ""
//     }
// }

// if(service_type==1 || service_type==2){
//     if(user_type_check && user_type_check.length>0){
//         user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
//         user_type_condition_two = " and price.user_type_id="+user_type_id+" "
//     }
// }
// logger.debug("===========user_type_condition_one========",user_type_condition_one,user_type_condition_two)
// let count_sql=""
// let countResult=[]

// let hideOutOfStockProduct = await ExecuteQ.Query(dbName,
//     "select `key`, value from tbl_setting where `key`=? and value=1",["hide_out_of_stock_product"]);
// let outOfStockCheck = "";

// if(hideOutOfStockProduct && hideOutOfStockProduct.length>0){
// outOfStockCheck = "and p.quantity>p.purchased_quantity"
// }

//     let nonVegCheck = "";

//     if(parseInt(is_non_veg)>0){

//         if(parseInt(is_non_veg)==1){
//             nonVegCheck = " and p.is_non_veg=1 ";
//         }else if(parseInt(is_non_veg)==2){
//             nonVegCheck = " and p.is_non_veg=2 ";
//         }

//     }


// return new Promise(async (resolve,reject)=>{
//     try{
//         let orderBySql="temp1.product_id Asc,temp1.order_no Asc"
//         let categorySData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["category_sequence","1"]);
//         if(categorySData && categorySData.length>0){
//             orderBySql="temp1.order_no Asc,temp1.order_no Asc"
//         }
//         if(isPagination!=0){
//             sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.item_unavailable,p.duration,"+
//             "   price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.is_out_network,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.is_dine,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 "+
//             "  "+in_out_zero_price_check+")) UNION ALL  SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.item_unavailable,p.duration,"+
//             " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.is_out_network,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.is_dine,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             "  price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//             "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC limit "+limit+" offset "+offset+") as temp"
//             // GROUP BY product_id,sku "+radius_check_query+" order by "+orderBySql+", -display_price ASC,display_price ASC limit "+limit+" offset "+offset+"
//             count_sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//             "   price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             "  "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//             "  "+in_out_zero_price_check+")) UNION ALL   SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
//             " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             "  price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//             "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
//             countResult=await ExecuteQ.QueryV1(req,dbName,count_sql,[]);
//         }
//         else{
//             sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.item_unavailable,p.duration,"+
//             "  price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.is_out_network,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_dine,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//             "  "+in_out_zero_price_check+")) UNION ALL  SELECT ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.item_unavailable,p.duration,"+
//             " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.is_out_network,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             " p.purchase_limit,p.is_subscription_required,p.payment_after_confirmation,c.is_dine,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc,"+
//             "  price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " "+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0  "+
//             "  "+in_out_zero_price_check+"))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
//             countResult=await ExecuteQ.QueryV1(req,dbName,sql,[]);
//         }
//         let result=await ExecuteQ.QueryV1(req,dbName,sql,[]);

//     logger.debug('=================result================1========',result)
//     // let stmt = multiConnection[dbName].query(sql,async function(err,result){
//     //     logger.debug("0000000000000 =======================supplier prodcuts listing======",stmt.sql)
//     //     // logger.debug("==ERR==",err)  
//     //     // logger.debug("================result============",result)

//     //         var final_json={},product_data=[];
//     //         if(err){
//     //             reject(err)
//     //         }
//     //         else{
//                 // logger.debug("=====result=-=========",result)
//                 var final_json={},product_data=[];
//                 if(result && result.length>0){

//                    var m_data=await ModifiedData(result)
//                    logger.debug('=================m_data===========m_data========',m_data)

//                 //    logger.debug("=====m_data=-=========",m_data)
//                     // result[i].adds_on=result[i].adds_on && result[i].adds_on.length>0?JSON.parse(result[i].adds_on):[]
//                    var data=_.groupBy(m_data,"sub_category_name");
//                    logger.debug('====data=============data===========data========',data)

//                 //    logger.debug("====AFTER GRUOp by==>>",data)
//                    let detailsName = []
//                    let categoryId=0
//                    let subCatName = ""
//                 //    console.log("###################3 ",JSON.stringify(data))
//                 for await (let [key, value] of Object.entries(data)) {
//                     // _.each(data,async function(value,key,object){
//                         // console.log("key key key key key key key key key ",key )

//                          subCatName = key;

//                         if((value && value.length>0)){
//                             for(const [index,i] of value.entries()){
//                                 categoryId=i.main_category
//                                 //if(parseInt(i.detailed_sub_category_id)!=parseInt(i.branch_sub_category_id)){
//                                 if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0")){
//                                     let cData=await ExecuteQ.Query(dbName,`select cml.name from categories ct 
//                                     join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
//                                     if(cData && cData.length>0 && (cData[0] && cData[0].name != key)){
//                                         detailsName.push({name:cData[0].name,detailed_sub_category_id:i.detailed_sub_category_id});
//                                     }
//                                     if(i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0"){
//                                         subCatName = key;
//                                     }
//                                 }else if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="1")){
//                                     let cData=await ExecuteQ.Query(dbName,`select cml.name from categories ct 
//                                     join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
//                                     if(cData && cData.length>0 && (cData[0] && cData[0].name != key)){
//                                         subCatName = cData[0].name;
//                                     }
//                                 }
//                             }
//                         }
                        
//                             // logger.debug("===============",final_json)
//                             //final_json.sub_cat_name=key;
//                             final_json.sub_cat_name=subCatName;
//                             final_json.category_id=categoryId;
//                             final_json.detailed_category_name=detailsName;
//                             final_json.sub_cat_image=value && value.length>0?value[0].cate_image:""
//                             final_json.sub_cat_icon=value && value.length>0?value[0].cate_icon:""
//                             final_json.value=value

//                             product_data.push(final_json);
//                             // logger.debug("+===========final json after===========",product_data)
//                             detailsName=[]
//                             final_json={}
//                             // let allkeys = Object.keys(object)
//                             // let last_key = allkeys[allkeys.length-1]
//                             // if(key==last_key){
//                             //     resolve({"product_data":product_data,"count":countResult.length})
//                             //     // resolve(product_data)
//                             // }
                        
//                     // })
//                         }
//                         logger.debug('===="product_data":product_data======="product_data":product_data====11111111=====',product_data)

//                         resolve({"product_data":product_data,"count":countResult.length})
//                 }else{
//                     final_json.sub_cat_name="";
//                     final_json.detailed_category_name=[];
//                     final_json.value=[]
//                     product_data.push(final_json);
//                     logger.debug('===="product_data":product_data======="product_data":product_data===2222222222======',product_data)

//                     resolve({"product_data":product_data,"count":countResult.length})
//                 }
//     //         }
//     // })
//             }catch(Err){
//                 reject(Err)
//             }
// })
// }
const SupplierProducts=(req,user_type_check,user_type_id,user_id,service_type,latitude,longitude,languageId,supplierId,dbName)=>{
    let isPagination=req.query.limit || 0;
    let limit=req.query.limit || 10;
    let offset=req.query.offset || 0
   
//     // logger.debug("=====languageId,areaId,supplierId,dbName===",languageId,supplierId,dbName);
//     if(service_type==1){
//         radius_check_query="having distance<=sbb.delivery_radius"
//     }else{
//         radius_check_query=""
//     }
//     let user_type_condition_one = ""
//     let user_type_condition_two = ""

//     logger.debug("====service_type=======check_user_type====",service_type,user_type_check)
//     if(service_type==1 || service_type==2){
//         if(user_type_check && user_type_check.length>0){
//             user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
//             user_type_condition_two = " and price.user_type_id="+user_type_id+" "
//         }
//     }
// logger.debug("===========user_type_condition_one========",user_type_condition_one,user_type_condition_two)


//     return new Promise(async (resolve,reject)=>{
//             try{
        
//             var sql ="select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,p.is_product,p.duration,"+
//             " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             "IF((select count(*) from product_favourite where product_favourite.product_id = p.id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1)> 0, 1, 0) as is_favourite, " +
//             " p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

//             " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
            
//             "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " bp.detailed_sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
//             // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id or sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
//             " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
//             "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" order by sc.order_no Asc,bp.order_no Asc, -display_price ASC,display_price ASC"
//             let result=await ExecuteQ.Query(dbName,sql,[]);
//             // let stmt = multiConnection[dbName].query(sql,async function(err,result){
//             //     logger.debug("0000000000000 =======================supplier prodcuts listing======",stmt.sql)
//             //     // logger.debug("==ERR==",err)  
//             //     // logger.debug("================result============",result)

//             //         var final_json={},product_data=[];
//             //         if(err){
//             //             reject(err)
//             //         }
//             //         else{
//                         // logger.debug("=====result=-=========",result)
//                         var final_json={},product_data=[];
//                         if(result && result.length>0){

//                            var m_data=await ModifiedData(result)
//                         //    logger.debug("=====m_data=-=========",m_data)
//                             // result[i].adds_on=result[i].adds_on && result[i].adds_on.length>0?JSON.parse(result[i].adds_on):[]
//                            var data=_.groupBy(m_data,"sub_category_name");
//                            logger.debug("====AFTER GRUOp by==>>",data)
//                            let detailsName = []
//                            let subCatName = ""
//                            console.log("###################3 ",JSON.stringify(data))
//                             _.each(data,async function(value,key,object){
//                                 console.log("key key key key key key key key key ",key )


//                                 if((value && value.length>0)){
//                                     for(const [index,i] of value.entries()){
//                                         if(parseInt(i.detailed_sub_category_id)!=parseInt(i.branch_sub_category_id)){
//                                         // if(i.n_level_menu_type=="0"){
//                                             let cData=await ExecuteQ.Query(dbName,`select cml.name from categories ct 
//                                             join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
//                                             if(cData && cData.length>0 && (cData[0] && cData[0].name != key)){
//                                                 detailsName.push({name:cData[0].name,detailed_sub_category_id:i.detailed_sub_category_id});
//                                             }
//                                         }
//                                         // if(i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0"){
//                                         //     subCatName = key;
//                                         // }
//                                     }
//                                 }
                                
//                                     logger.debug("===============",final_json)
//                                     //final_json.sub_cat_name=key;
//                                     final_json.sub_cat_name=key;
//                                     final_json.detailed_category_name=detailsName;
//                                     final_json.value=value
//                                     product_data.push(final_json);
//                                     logger.debug("+===========final json after===========",product_data)
//                                     detailsName=[]
//                                     final_json={}
//                                     let allkeys = Object.keys(object)
//                                     let last_key = allkeys[allkeys.length-1]
//                                     if(key==last_key){
//                                         resolve(product_data)
//                                     }
                                
//                             })
//                         }else{
//                             final_json.sub_cat_name="";
//                             final_json.detailed_category_name=[];
//                             final_json.value=[]
//                             product_data.push(final_json);
//                             resolve(product_data)
//                         }
//             //         }
//             // })
//                     }catch(Err){
//                         reject(Err)
//                     }
//     })
// }

if(service_type==1){
    radius_check_query="having temp1.distance<=temp1.delivery_radius"
}else{
    radius_check_query=""
}
let user_type_condition_one = ""
let user_type_condition_two = ""

logger.debug("====service_type=======check_user_type====",service_type,user_type_check)
if(service_type==1 || service_type==2){
    if(user_type_check && user_type_check.length>0){
        user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
        user_type_condition_two = " and price.user_type_id="+user_type_id+" "
    }
}
logger.debug("===========user_type_condition_one========",user_type_condition_one,user_type_condition_two)
let count_sql=""
let countResult=[];

return new Promise(async (resolve,reject)=>{
    try{
        let mUnit=await Universal.getMeausringUnit(dbName)
        let orderBySql="temp1.product_id Asc,temp1.order_no Asc"
        let categorySData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["category_sequence","1"]);
        if(categorySData && categorySData.length>0){
            orderBySql="temp1.order_no Asc,temp1.order_no Asc"
        }
if(isPagination!=0){
    sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
    " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
    " quantity,purchased_quantity,"+
    " p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

    " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
    
    "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
    " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
    " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
    " price.beauty_saloon_price,"+
    " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
    " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
    " ,price.price,pimage.image_path,"+
    " pml.measuring_unit,price.price_type  ,"+
    " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
    " from"+
    " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
    " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
    " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
    "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
    // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
    "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
    " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
    " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
    " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
    " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
    " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
    "  price.price !=0)) UNION ALL  SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
    " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
    " quantity,purchased_quantity,"+
    " p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

    " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
    
    "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
    " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
    " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
    " price.beauty_saloon_price,"+
    " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
    " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
    " ,price.price,pimage.image_path,"+
    " pml.measuring_unit,price.price_type  ,"+
    " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
    " from"+
    " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
    " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
    " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
    "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
    // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
    "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
    " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
    " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
    " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
    " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
    " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
    "  price.price !=0))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC limit "+limit+" offset "+offset+") as temp"
    // GROUP BY product_id,sku "+radius_check_query+" order by "+orderBySql+", -display_price ASC,display_price ASC limit "+limit+" offset "+offset+"
    count_sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
    " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
    " quantity,purchased_quantity,"+
    " p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

    " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
    
    "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
    " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
    " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
    " price.beauty_saloon_price,"+
    " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
    " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
    " ,price.price,pimage.image_path,"+
    " pml.measuring_unit,price.price_type  ,"+
    " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
    " from"+
    " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
    " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
    " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
    "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
    // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
    "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
    " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
    " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
    " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
    " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
    " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
    "  price.price !=0)) UNION ALL   SELECT (select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
    " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
    " quantity,purchased_quantity,"+
    " p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

    " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
    
    "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
    " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
    " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
    " price.beauty_saloon_price,"+
    " bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
    " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
    " ,price.price,pimage.image_path,"+
    " pml.measuring_unit,price.price_type  ,"+
    " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
    " from"+
    " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
    " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
    " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
    "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
    // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
    "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
    " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
    " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
    " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
    " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
    " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
    "  price.price !=0))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
    countResult=await ExecuteQ.Query(dbName,count_sql,[]);
}
else{
    sql = "select temp.*,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id), 1, 0) as is_variant from  (select * from (select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
    " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
    " quantity,purchased_quantity,"+
    " p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

    " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
    
    "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
    " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
    " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
    " price.beauty_saloon_price,"+
    " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
    " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
    " ,price.price,pimage.image_path,"+
    " pml.measuring_unit,price.price_type  ,"+
    " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
    " from"+
    " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
    " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
    " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
    "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
    // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
    "  join supplier_category sc on (sc.supplier_id = s.id and (sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
    " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
    " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
    " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
    " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
    " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
    "  price.price !=0)) UNION ALL  SELECT ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
    " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
    " quantity,purchased_quantity,"+
    " p.payment_after_confirmation,c.is_quantity,c.icon as cate_icon,c.image as cate_image,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,"+

    " (SELECT menu_type from categories where id=p.category_id) n_level_menu_type, (SELECT menu_type from categories where id=(SELECT parent_id from categories where id=p.category_id)) n_1_level_menu_type, (SELECT parent_id from categories where id=p.category_id) n_1_level_category_id,"+
    
    "c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
    " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
    " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
    " price.beauty_saloon_price,"+
    " p.is_allergy_product,p.allergy_description, bp.category_id as main_category,bp.detailed_sub_category_id,bp.sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
    " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
    " ,price.price,pimage.image_path,"+
    " pml.measuring_unit,price.price_type  ,"+
    " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
    " from"+
    " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
    " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
    " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
    "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
    // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
    "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id ) )" + 
    " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1  and p.is_live = 1"+
    " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
    " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
    " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
    " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
    "  price.price !=0))) as temp1 GROUP BY temp1.product_id,temp1.sku "+radius_check_query+" order by "+orderBySql+", -temp1.display_price ASC,temp1.display_price ASC) as temp"
     countResult=await ExecuteQ.Query(dbName,sql,[]);
}
    let result=await ExecuteQ.Query(dbName,sql,[]);

    
    // let stmt = multiConnection[dbName].query(sql,async function(err,result){
    //     logger.debug("0000000000000 =======================supplier prodcuts listing======",stmt.sql)
    //     // logger.debug("==ERR==",err)  
    //     // logger.debug("================result============",result)

    //         var final_json={},product_data=[];
    //         if(err){
    //             reject(err)
    //         }
    //         else{
                // logger.debug("=====result=-=========",result)
                var final_json={},product_data=[];
                if(result && result.length>0){

                   var m_data=await ModifiedData(result)
                //    logger.debug("=====m_data=-=========",m_data)
                    // result[i].adds_on=result[i].adds_on && result[i].adds_on.length>0?JSON.parse(result[i].adds_on):[]
                   var data=_.groupBy(m_data,"sub_category_name");
                //    logger.debug("====AFTER GRUOp by==>>",data)
                   let detailsName = []
                   let categoryId=0
                   let subCatName = ""
                //    console.log("###################3 ",JSON.stringify(data))
                for await (let [key, value] of Object.entries(data)) {
                    // _.each(data,async function(value,key,object){
                        // console.log("key key key key key key key key key ",key )

                         subCatName = key;

                        if((value && value.length>0)){
                            for(const [index,i] of value.entries()){
                                categoryId=i.main_category
                                //if(parseInt(i.detailed_sub_category_id)!=parseInt(i.branch_sub_category_id)){
                                if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0")){
                                    let cData=await ExecuteQ.Query(dbName,`select cml.name from categories ct 
                                    join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
                                    if(cData && cData.length>0 && (cData[0] && cData[0].name != key)){
                                        detailsName.push({name:cData[0].name,detailed_sub_category_id:i.detailed_sub_category_id});
                                    }
                                    if(i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="0"){
                                        subCatName = key;
                                    }
                                }else if((i.n_level_menu_type=="0") && (i.n_1_level_category_id!="0" && i.n_1_level_menu_type=="1")){
                                    let cData=await ExecuteQ.Query(dbName,`select cml.name from categories ct 
                                    join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
                                    if(cData && cData.length>0 && (cData[0] && cData[0].name != key)){
                                        subCatName = cData[0].name;
                                    }
                                }
                            }
                        }
                        
                            // logger.debug("===============",final_json)
                            //final_json.sub_cat_name=key;
                            final_json.sub_cat_name=subCatName;
                            final_json.category_id=categoryId;
                            final_json.detailed_category_name=detailsName;
                            final_json.value=value
                            product_data.push(final_json);
                            // logger.debug("+===========final json after===========",product_data)
                            detailsName=[]
                            final_json={}
                            // let allkeys = Object.keys(object)
                            // let last_key = allkeys[allkeys.length-1]
                            // if(key==last_key){
                            //     resolve({"product_data":product_data,"count":countResult.length})
                            //     // resolve(product_data)
                            // }
                        
                    // })
                        }
                        
                        resolve({"product_data":product_data,"count":countResult.length})
                }else{
                    final_json.sub_cat_name="";
                    final_json.detailed_category_name=[];
                    final_json.value=[]
                    product_data.push(final_json);
                    resolve({"product_data":product_data,"count":countResult.length})
                }
    //         }
    // })
            }catch(Err){
                reject(Err)
            }
})
}

// const SupplierProducts=(user_type_check,user_type_id,user_id,service_type,latitude,longitude,languageId,supplierId,dbName)=>{

//     // logger.debug("=====languageId,areaId,supplierId,dbName===",languageId,supplierId,dbName);
//     if(service_type==1){
//         radius_check_query="having distance<=sbb.delivery_radius"
//     }else{
//         radius_check_query=""
//     }
//     let user_type_condition_one = ""
//     let user_type_condition_two = ""

//     logger.debug("====service_type=======check_user_type====",service_type,user_type_check)
//     if(service_type==1 || service_type==2){
//         if(user_type_check && user_type_check.length>0){
//             user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
//             user_type_condition_two = " and price.user_type_id="+user_type_id+" "
//         }
//     }
// logger.debug("===========user_type_condition_one========",user_type_condition_one,user_type_condition_two)


//     return new Promise((resolve,reject)=>{


        
//             var sql ="select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(6371 * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,p.is_product,p.duration,"+
//             " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
//             " quantity,purchased_quantity,"+
//             "IF((select count(*) from product_favourite where product_favourite.product_id = p.id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1)> 0, 1, 0) as is_favourite, " +
//             " p.payment_after_confirmation,c.icon as cate_icon,c.image as cate_image,c.is_quantity,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,c.order_instructions,p.cart_image_upload,p.payment_after_confirmation,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
//             " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
//             " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
//             " price.beauty_saloon_price,"+
//             " bp.detailed_sub_category_id,"+
//             " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
//             " ,price.price,pimage.image_path,"+
//             " pml.measuring_unit,price.price_type  ,"+
//             " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
//             " from"+
//             " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
//             " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
//             " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
//             "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id and sbb.is_head_branch=1 join supplier s on s.id = sbb.supplier_id"+
//             /*// "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + */
//             "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id or sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
//             " where s.id IN("+supplierId+") and c.is_live=1 and c.is_live=1 and bp.detailed_sub_category_id != 0 and p.is_live = 1"+
//             " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
//             " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
//             " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
//             " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
//             "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" order by sc.order_no Asc,bp.order_no Asc, -display_price ASC,display_price ASC"
//             let stmt = multiConnection[dbName].query(sql,async function(err,result){
//                 logger.debug("=======================supplier prodcuts listing======",stmt.sql)
//                 // logger.debug("==ERR==",err)  
//                 // logger.debug("================result============",result)
//                     if(err){
//                         reject(err)
//                     }
//                     else{
//                         var final_json={},product_data=[];
//                         if(result && result.length>0){
//                            var m_data=await ModifiedData(result)
//                             // result[i].adds_on=result[i].adds_on && result[i].adds_on.length>0?JSON.parse(result[i].adds_on):[]
//                            var data=_.groupBy(m_data,"sub_category_name");
//                            logger.debug("====AFTER GRUOp by==>>",data)
//                            let detailsName = []
//                             //  _.each(data,async function(value,key,object){
//                              for await (let [key, value] of Object.entries(data)) {

//                                 if((value && value.length>0)){
//                                     for await (const [index,i] of value.entries()){
//                                         if(parseInt(i.detailed_sub_category_id)!=parseInt(i.branch_sub_category_id)){
//                                             let cData=await ExecuteQ.Query(dbName,`select cml.name from categories ct 
//                                             join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
//                                             if(cData && cData.length>0){
//                                                 detailsName.push({name:cData[0].name,detailed_sub_category_id:i.detailed_sub_category_id});
//                                             }
//                                     }
//                                 }
//                                 }
                                
//                                 /*// _.each(value,function(element, index, list){
//                                     // element.adds_on=element.adds_on && element.adds_on.length>0?JSON.parse(element.adds_on):[]
//                                     // logger.debug("=value[index]==",element,index)*/
//                                     logger.debug("===============",final_json)
//                                     final_json.sub_cat_name=key;
//                                     final_json.detailed_category_name=detailsName;
//                                     final_json.sub_cat_image=value && value.length>0?value[0].cate_image:""
//                                     final_json.sub_cat_icon=value && value.length>0?value[0].cate_icon:""
//                                     final_json.value=value
//                                     product_data.push(final_json);
//                                     logger.debug("+===========final json after===========",product_data)
//                                     detailsName=[]
//                                     final_json={}
//                                     /*// let allkeys = Object.keys(object)
//                                     // let last_key = allkeys[allkeys.length-1]
//                                     // if(key==last_key){
//                                     //     resolve(product_data)
//                                     // }
//                                 // })
                                
//                             // })*/
//                                 }
//                                 resolve(product_data)
//                         }
//                         else{
//                             resolve(product_data)
//                         }
//                         // logger.debug("===Menu List Data==",product_data);
                       
//                     }
//             })
//     })
// }


const SupplierBranchProducts= async  (user_type_check,user_type_id,user_id,service_type,latitude,longitude,languageId,supplierId,supplierBranchId,dbName,is_non_veg)=>{

    // logger.debug("=====languageId,areaId,supplierId,dbName===",languageId,supplierId,dbName);
    if(service_type==1){
        radius_check_query="having distance<=sbb.delivery_radius"
    }else{
        radius_check_query=""
    }
    let user_type_condition_one = ""
    let user_type_condition_two = ""

    logger.debug("====service_type=======check_user_type====",service_type,user_type_check)
    if(service_type==1 || service_type==2){
        if(user_type_check && user_type_check.length>0){
            user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
            user_type_condition_two = " and price.user_type_id="+user_type_id+" "
        }
    }


    let hideOutOfStockProduct = await Execute.Query(dbName,
        "select `key`, value from tbl_setting where `key`=? and value=1",
        ["hide_out_of_stock_product"]);
let outOfStockCheck = "";

if(hideOutOfStockProduct && hideOutOfStockProduct.length>0){
    outOfStockCheck = "and p.quantity>p.purchased_quantity"
}
    let nonVegCheck = "";
if(parseInt(is_non_veg)>0){
    if(parseInt(is_non_veg)==1){
        nonVegCheck = " and p.is_non_veg=1 ";
    }else if(parseInt(is_non_veg)==2){
        nonVegCheck = " and p.is_non_veg=2 ";
    }
}

    return new Promise(async (resolve,reject)=>{

        try{
            
            let mUnit=await Universal.getMeausringUnit(dbName);
            var sql ="select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,p.avg_rating,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            "IF((select count(*) from product_favourite where product_favourite.product_id = p.id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1)> 0, 1, 0) as is_favourite, " +
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,cml.name as sub_category_name,p.category_id as category_id,c.order_instructions,p.cart_image_upload,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,bp.sub_category_id as branch_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1,sc.order_no,bp.order_no as product_order_no"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+
            // "  join supplier_category sc on (sc.category_id = c.id and sc.supplier_id=s.id ) " + 
            "  join supplier_category sc on (sc.supplier_id = s.id and (sc.category_id = c.id or sc.sub_category_id = c.id or sc.detailed_sub_category_id = c.id ) )" + 
            " where s.id IN("+supplierId+") "+
            " and sbb.id IN("+ connection.escape(supplierBranchId) +") " +
            " "+outOfStockCheck+"  and  c.is_live=1 and c.is_live=1 and bp.detailed_sub_category_id != 0 and p.is_live = 1"+
            ""+nonVegCheck+" and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
            " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and (pimage.default_image = 1"+ 
            " or pimage.imageOrder =1) and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
            " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" order by sc.order_no Asc,bp.order_no Asc, -display_price ASC,display_price ASC"
            let stmt = multiConnection[dbName].query(sql,async function(err,result){
                logger.debug("=======================supplier prodcuts listing======",stmt.sql)
                // logger.debug("==ERR==",err)  
                // logger.debug("================result============",result)
                    if(err){
                        reject(err)
                    }
                    else{
                        // logger.debug("=====result=-=========",result)
                        var final_json={},product_data=[];
                        if(result && result.length>0){

                           var m_data=await ModifiedData(result)
                        //    logger.debug("=====m_data=-=========",m_data)
                            // result[i].adds_on=result[i].adds_on && result[i].adds_on.length>0?JSON.parse(result[i].adds_on):[]
                           var data=_.groupBy(m_data,"sub_category_name")
                        //    logger.debug("=====after===m_data=-========",m_data)
                           let detailsName=[];
                            _.each(data,async function(value,key,object){

                                    if((value && value.length>0)){
                                        for(const [index,i] of value.entries()){
                                            if(parseInt(i.detailed_sub_category_id)!=parseInt(i.branch_sub_category_id)){
                                                let cData=await ExecuteQ.Query(dbName,`select cml.name from categories ct 
                                                join categories_ml cml on cml.category_id=ct.id where cml.language_id=? and ct.id=?`,[languageId,i.detailed_sub_category_id])
                                                if(cData && cData.length>0){
                                                    detailsName.push({name:cData[0].name,detailed_sub_category_id:i.detailed_sub_category_id});
                                                }
                                        }
                                    }
                                    }
                                // _.each(value,function(element, index, list){
                                    // element.adds_on=element.adds_on && element.adds_on.length>0?JSON.parse(element.adds_on):[]
                                    // logger.debug("=value[index]==",element,index)
                                    logger.debug("===============",final_json)
                                    final_json.sub_cat_name=key;
                                    final_json.sub_cat_image=value && value.length>0?value[0].cate_image:""
                                    final_json.sub_cat_icon=value && value.length>0?value[0].cate_icon:""
                                    final_json.detailed_category_name=detailsName;
                                    final_json.value=value
                                    product_data.push(final_json);
                                    logger.debug("+===========final json after===========",product_data)
                                    detailsName=[]
                                    final_json={}
                                    let allkeys = Object.keys(object)
                                    let last_key = allkeys[allkeys.length-1]
                                    if(key==last_key){
                                        resolve(product_data)
                                    }
                                // })
                                
                            })
                            logger.debug("=====product_data=-==product_data=======",product_data)
                        }else{
                            logger.debug("===Menu List Data==",product_data);
                            resolve(product_data)
                        }
                    }
            })
        }catch(Err){
            reject(Err)
        }
    })
}
const ModifiedData=(data)=>{
    return new Promise((resolve,reject)=>{
    var adds_on_ar=[],adds_on,final_json={};
      for(var i=0;i<data.length;i++){
        if(data[i].pricing_type == 1){
             data[i].hourly_price =JSON.parse(data[i].hourly_price);
             data[i].price_type=1
        }else{
            data[i].price_type=0;                           
            delete data[i].hourly_price;
        }

        logger.debug("======data[i].adds_on===",data[i].adds_on);
        
        if(data[i].adds_on!=undefined && data[i].adds_on && data[i].adds_on.length>0){
            console.log("==========data[i].adds_on===========",data[i].adds_on)
                adds_on=_.groupBy(JSON.parse(data[i].adds_on),"name");
                _.each(adds_on,function(value,key,object){
                        final_json.name=key
                        final_json.value=value
                        final_json.addon_limit= value[0].addon_limit
                        final_json.is_mandatory = value[0].is_mandatory
                        adds_on_ar.push(final_json);
                        final_json={}                                
                })
        }
        data[i].adds_on=adds_on_ar
        adds_on_ar=[]
        logger.debug("==data[i].adds_on=",data[i].p_id,data[i].adds_on)
        if(i==data.length-1){
            resolve(data)
        }  
      }
    })
}
const GetUserId=(token,dbName)=>{

    return new Promise((resolve,reject)=>{
    
    if(token!=undefined && token!=""){
        var sql = " select id from user where access_token = ? ";
        multiConnection[dbName].query(sql, [token], function (err, result) {
            if(err) {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg,reply,500);
            }
            else{
                if(result.length){
                    id = result[0].id;
                    //logger.debug("ddddd",id,result);
                    resolve(id);
                }else{
                    resolve(0);
                }
            }
        })
    }
    else{
        resolve(0)
    }
    })

}
const SupplierFavourite=(userId,supplierId,dbName)=>{
    return new Promise(async (resolve,reject)=>{    
        try{             
            var sql = " select id from user_favourite where supplier_id = ? and user_id = ? and is_delete = 0";
            let result=await ExecuteQ.Query(dbName,sql,[supplierId,userId])
           
                    if(result.length){
                        resolve(1);
                    }else{
                        resolve(0);
                    }
                }
                catch(Err){
                     var msg = "some thing went wrong ";
                    sendResponse.sendErrorMessage(msg,reply,500);
                }
             
           
   })

}
const SupplierImage=(languageId,areaId,supplierId,dbName)=>{
    return new Promise(async (resolve,reject)=>{
        try{
                var sql = "select image_path from supplier_image where supplier_id = ? and is_deleted = ? ";
                let result=await ExecuteQ.Query(dbName,sql,[supplierId,0])
                
                        var temp = [];
                        var len = result.length;
                        if(result.length){
                            for(var i = 0; i < len;i++){
                                (function(i){
                                    if(result[i].image_path != null){
                                        temp.push(result[i].image_path);
                                    }
                                    if(i == (len -1)){
                                        resolve(temp);
                                    }
                                }(i));
                            }
                        }else{
                            resolve(temp);
                        }
                
                    }
                    catch(Err){
                        reject(Err);
                    }
            })
                
}
const SupplierDetail=(languageId,supplierId,dbName,latitude,longitude,limit)=>{
    return new Promise(async(resolve,reject)=>{
        try{
        let mUnit=await Universal.getMeausringUnit(dbName);

    //  var sql = " select sbd.min_order,sbd.delivery_charges,sbd.charges_below_min_order,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.supplier_image," +
    //     "s.logo,s.business_start_date,s.rating,s.total_reviews,s.status,s.email,s.trade_license_no,s.urgent_type,s.urgent_price,s.is_urgent,s.total_reviews, " +
    //     " s.rating,s.payment_method,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address" +
    //     "  from supplier s join supplier_ml sml on s.id = sml.supplier_id join supplier_branch sb on s.id = sb.supplier_id " +
    //     " join supplier_category sc on sc.supplier_id = s.id join supplier_delivery_areas sbd on sbd.supplier_id = s.id" +
    //     " where s.id = ? and sml.language_id  = ?  and sbd.area_id =? GROUP BY sbb.id";
    let final_data=[];
    // var sql = " select (SELECT message_id FROM `chats` WHERE (`send_to_type`='ADMIN' or `send_by_type`='ADMIN') and (send_by=s.user_created_id or send_to=s.user_created_id) and (`send_to_type`='SUPPLIER' or `send_by_type`='SUPPLIER') order by c_id desc limit 1) as message_id,s.user_created_id,s.is_dine_in,sb.id as supplier_branch_id,s.license_number,s.phone,s.user_request_flag,sc.onOffComm,s.speciality,s.nationality,s.facebook_link,s.linkedin_link,s.brand,s.speciality,s.description,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.is_sponser as is_multi_branch,s.delivery_max_time,s.urgent_delivery_time,s.supplier_image," +
    var sql = " select (SELECT message_id FROM `chats` WHERE (send_by=s.user_created_id or send_to=s.user_created_id) and (`send_to_type`='SUPPLIER' or `send_by_type`='SUPPLIER') order by c_id desc limit 1) as message_id,s.user_created_id,s.is_dine_in,sb.id as supplier_branch_id,s.license_number,s.phone,s.user_request_flag,sc.onOffComm,s.speciality,s.nationality,s.facebook_link,s.linkedin_link,s.brand,s.speciality,s.description,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.is_sponser as is_multi_branch,s.delivery_max_time,s.urgent_delivery_time,s.supplier_image," +
       
    "   s.offerValue,s.is_out_network,s.home_address,s.is_scheduled, s.logo,s.business_start_date,(SELECT avg(rating) as rating FROM (select rating from supplier_rating where supplier_id=? order by id desc limit 50) as rating) as rating,s.total_reviews,s.status,s.email,s.trade_license_no,s.urgent_type,s.urgent_price,s.is_urgent,s.total_reviews, " +
       " ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,   (SELECT count(*) from supplier_rating where supplier_id=s.id) as total_rating,s.rating,s.payment_method,sml.name,sml.uniqueness,sml.terms_and_conditions,sml.address," +
       " if((select Count(*) from supplier_branch where supplier_branch.supplier_id="+connection.escape(supplierId)+" and supplier_branch.is_deleted=0)>1,1,0) as is_multi_branchs " +
       "  from supplier s join supplier_ml sml on s.id = sml.supplier_id join supplier_branch sb on s.id = sb.supplier_id " +
       " join supplier_category sc on sc.supplier_id = s.id " +
       " where s.id = ? and sml.language_id  = ?";
       let column = [supplierId,supplierId,languageId];
       if (limit) {
        // sql = " select (SELECT message_id FROM `chats` WHERE (`send_to_type`='ADMIN' or `send_by_type`='ADMIN') and (send_by=s.user_created_id or send_to=s.user_created_id) and (`send_to_type`='SUPPLIER' or `send_by_type`='SUPPLIER') order by c_id desc limit 1) as message_id,s.user_created_id,s.is_dine_in,sb.id as supplier_branch_id,s.license_number,s.phone,s.user_request_flag,sc.onOffComm,s.speciality,s.nationality,s.facebook_link,s.linkedin_link,s.brand,s.speciality,s.description,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.is_sponser as is_multi_branch,s.delivery_max_time,s.urgent_delivery_time,s.supplier_image," +
        sql = " select (SELECT message_id FROM `chats` WHERE  (send_by=s.user_created_id or send_to=s.user_created_id) and (`send_to_type`='SUPPLIER' or `send_by_type`='SUPPLIER') order by c_id desc limit 1) as message_id,s.user_created_id,s.is_dine_in,sb.id as supplier_branch_id,s.license_number,s.phone,s.user_request_flag,sc.onOffComm,s.speciality,s.home_address,s.nationality,s.facebook_link,s.linkedin_link,s.brand,s.speciality,s.description,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.is_sponser as is_multi_branch,s.delivery_max_time,s.urgent_delivery_time,s.supplier_image," +
        
        "   s.offerValue,s.is_out_network,s.is_scheduled, s.logo,s.business_start_date,(SELECT avg(rating) as rating FROM (select rating from supplier_rating where supplier_id=? order by id desc limit 50) as rating) as rating,s.total_reviews,s.status,s.email,s.trade_license_no,s.urgent_type,s.urgent_price,s.is_urgent,s.total_reviews, " +
        " ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,   (SELECT count(*) from supplier_rating where supplier_id=s.id) as total_rating,s.rating,s.payment_method,sml.name,sml.uniqueness,sml.terms_and_conditions,sml.address," +
        " if((select Count(*) from supplier_branch where supplier_branch.supplier_id="+connection.escape(supplierId)+" and supplier_branch.is_deleted=0)>1,1,0) as is_multi_branchs " +
        "  from supplier s join supplier_ml sml on s.id = sml.supplier_id join supplier_branch sb on s.id = sb.supplier_id " +
        " join supplier_category sc on sc.supplier_id = s.id " +
        " where s.id = ? and sml.language_id  = ? LIMIT ?";
         column = [supplierId,supplierId,languageId, limit];
    }

       let result =await ExecuteQ.Query(dbName,sql,column)
           
               if(result && result.length){
                   for(const [index,i] of result.entries()){
                           i.timing =i && i.timings?JSON.parse(i.timings):[];
                           i.supplier_tags=i && i.supplier_tags?JSON.parse(i.supplier_tags):[]
                           i.timing=await getSupTiming(dbName,supplierId);
                           final_data.push(i);
                           if(index==result.length-1)
                           {
                               resolve(final_data)
                           }
                   }
               }
               else{
                   resolve([])
               }
    
    }
    catch(Err){
        resolve([])
    }
   })

}



/**old supplier detail  function */
// const SupplierDetail=(languageId,supplierId,dbName,latitude,longitude)=>{
//     return new Promise(async(resolve,reject)=>{
//         let mUnit=await Universal.getMeausringUnit(dbName);
//         let chatEnableCheck = await ExecuteQ.Query(dbName,
//             "select `key`,value from tbl_setting where `key`=? and value='1'",
//             ["chat_enable"])
        
//         let messageIdSubQuery = "";

//         if(chatEnableCheck && chatEnableCheck.length>0){
//             messageIdSubQuery = " (SELECT message_id FROM `chats` WHERE (`send_to_type`='ADMIN' or `send_by_type`='ADMIN') and (send_by=s.user_created_id or send_to=s.user_created_id) and (`send_to_type`='SUPPLIER' or `send_by_type`='SUPPLIER') order by c_id desc limit 1) as message_id, "
//         }
        
//     //  var sql = " select sbd.min_order,sbd.delivery_charges,sbd.charges_below_min_order,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.supplier_image," +
//     //     "s.logo,s.business_start_date,s.rating,s.total_reviews,s.status,s.email,s.trade_license_no,s.urgent_type,s.urgent_price,s.is_urgent,s.total_reviews, " +
//     //     " s.rating,s.payment_method,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address" +
//     //     "  from supplier s join supplier_ml sml on s.id = sml.supplier_id join supplier_branch sb on s.id = sb.supplier_id " +
//     //     " join supplier_category sc on sc.supplier_id = s.id join supplier_delivery_areas sbd on sbd.supplier_id = s.id" +
//     //     " where s.id = ? and sml.language_id  = ?  and sbd.area_id =? GROUP BY sbb.id";
   
//     let final_data=[];

//      var sql = " select  "+messageIdSubQuery+" s.user_created_id,s.is_dine_in,sb.id as supplier_branch_id,s.license_number,s.phone,s.user_request_flag,sc.onOffComm,s.speciality,s.nationality,s.facebook_link,s.linkedin_link,s.brand,s.speciality,s.description,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.is_sponser as is_multi_branch,s.delivery_max_time,s.urgent_delivery_time,s.supplier_image," +
//         " s.latitude,s.longitude,  s.id, s.is_out_network,s.is_scheduled, s.logo,s.business_start_date,(SELECT avg(rating) as rating FROM (select rating from supplier_rating where supplier_id=? order by id desc limit 50) as rating) as rating,s.total_reviews,s.status,s.email,s.trade_license_no,s.urgent_type,s.urgent_price,s.is_urgent,s.total_reviews, " +
//         " ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,   (SELECT count(*) from supplier_rating where supplier_id=s.id) as total_rating,s.rating,s.payment_method,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
//         " if((select Count(*) from supplier_branch where supplier_branch.supplier_id="+connection.escape(supplierId)+" and supplier_branch.is_deleted=0)>1,1,0) as is_multi_branchs, " +
//         "if((select count(pc.id) from promoCode pc where  pc.isActive = 0 and pc.isDeleted = 0 and (DATE(pc.startDate) <= CURDATE() and 		  DATE(pc.endDate) >= CURDATE()) and supplierId=s.id  group by          pc.promoCode limit 1)>0,1,0) as is_promo_codes "+
//         "  from supplier s join supplier_ml sml on s.id = sml.supplier_id join supplier_branch sb on s.id = sb.supplier_id " +
//         " join supplier_category sc on sc.supplier_id = s.id " +
//         " where s.id = ? and sml.language_id  = ?";

//        var st=multiConnection[dbName].query(sql, [supplierId,supplierId,14], async function (err, result) {
//             logger.debug("******************err************result.............",st.sql);
//             if (err) {
//                reject(err)
//             }
//             else {                
//                 if(result && result.length){
//                     // let catData = [];
//                     for(const [index,i] of result.entries()){
//                             // logger.debug("=====",result[i].categories)
//                             // catData=result[i].categories
//                             // i.category =i && i.categories?JSON.parse(catData):[];
//                             i.category = await supplierCategory(i.id,languageId,dbName);
//                             i.timing =i && i.timings?JSON.parse(i.timings):[];
//                             i.supplier_tags=i && i.supplier_tags?JSON.parse(i.supplier_tags):[]
//                             i.timing=await getSupTiming(dbName,supplierId);
//                             final_data.push(i);
//                             if(index==result.length-1)
//                             {
//                                 resolve(final_data)
//                             }
//                     }
//                 }
//                 else{
//                     resolve([])
//                 }
//             }
//         })
//     })

// }

var supplierCategory = async function(supplierId,languageId, dbName){
    try{
        return new Promise(async(resolve,reject)=>{
            var sql = "select c.image,c.supplier_placement_level,sc.category_id,cml.name as category_name,cml.description,c.order,c.category_flow from supplier_category sc join categories_ml cml on sc.category_id = cml.category_id " +
            " join categories c on c.id = sc.category_id " +
            " where sc.supplier_id = ? and cml.language_id=? and c.is_live=1 and c.is_deleted=0  GROUP BY c.id";
            let stmt = multiConnection[dbName].query(sql, [supplierId,languageId], function (err, result) {
            logger.debug("=============stmtsql=================",stmt.sql,result)
            if (err) {
                resolve([]);
            } else {
                resolve(result);            }
        })
        })
}
catch(Err){
    // var msg = "db error";
    resolve([]);
}
}



const SupplierBranchDetail=(languageId,supplierId,supplierBranchId,dbName)=>{
    return new Promise((resolve,reject)=>{

    //  var sql = " select sbd.min_order,sbd.delivery_charges,sbd.charges_below_min_order,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.supplier_image," +
    //     "s.logo,s.business_start_date,s.rating,s.total_reviews,s.status,s.email,s.trade_license_no,s.urgent_type,s.urgent_price,s.is_urgent,s.total_reviews, " +
    //     " s.rating,s.payment_method,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address" +
    //     "  from supplier s join supplier_ml sml on s.id = sml.supplier_id join supplier_branch sb on s.id = sb.supplier_id " +
    //     " join supplier_category sc on sc.supplier_id = s.id join supplier_delivery_areas sbd on sbd.supplier_id = s.id" +
    //     " where s.id = ? and sml.language_id  = ?  and sbd.area_id =? GROUP BY sbb.id";
    let final_data=[];

    
     var sql = " select sb.id as supplier_branch_id,s.is_scheduled,s.is_dine_in,s.user_request_flag,sc.onOffComm,s.speciality,s.nationality,s.facebook_link,s.linkedin_link,s.brand,s.speciality,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.supplier_image," +
        "sb.logo,s.business_start_date,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"close_week_id\": \"', st.close_week_id, '\",','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = s.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at,  '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = s.id )  as supplier_tags,(SELECT avg(rating) as rating FROM (select rating from supplier_rating where supplier_id=? order by id desc limit 50) as rating) as rating,s.total_reviews,s.status,s.email,s.trade_license_no,s.urgent_type,s.urgent_price,s.is_urgent,s.total_reviews, " +
        " s.rating,s.payment_method,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sb.address," +
        " if((select Count(*) from supplier_branch where supplier_branch.supplier_id="+connection.escape(supplierId)+
        " and supplier_branch.id="+connection.escape(supplierBranchId)+
        " and supplier_branch.is_deleted=0)>1,1,0) as is_multi_branch " +
        "  from supplier s join supplier_ml sml on s.id = sml.supplier_id join supplier_branch sb on s.id = sb.supplier_id " +
        " join supplier_category sc on sc.supplier_id = s.id " +
        " where s.id = ? and sml.language_id  = ?";
        sql +=" and sb.id="+connection.escape(supplierBranchId);
       var st=multiConnection[dbName].query(sql, [supplierId,supplierId,languageId], async function (err, result) {
            console.log("******************err************result.............",st.sql);
            if (err) {
               reject(err)
            }
            else {                
                if(result && result.length){
                    for(const [index,i] of result.entries()){

                             i.timing=await getSupTiming(dbName,supplierId);
                          //  i.timing =i && i.timings?JSON.parse(i.timings):[];
                            i.supplier_tags=i && i.supplier_tags?JSON.parse(i.supplier_tags):[]
                            final_data.push(i);
                            if(index==result.length-1)
                            {
                                resolve(final_data)
                            }
                    }
                }
                else{
                    resolve([])
                }
            }
        })
    })

}
const getSupTiming=(dbName,supId)=>{
    return new Promise(async (resolve,reject)=>{
        let sql = "select week_id,start_time,end_time,is_open, close_week_id from supplier_timings where supplier_id = ?";
        let data=await ExecuteQ.Query(dbName,sql,[supId])
        resolve(data);
    })
}
const productFavUnFav=async (req,res)=>{
    try{
        logger.debug("=BODY=",req.body,req.users,req.dbName)
        var favData=await ProductFavData(req.users.id,req.body.product_id,req.dbName)
        if(favData && favData.length>0){
            await ProductUpdateFavouriteStatus(req.users.id,req.body.product_id,req.body.status,req.dbName);
        }
        else{            
            await ProductFavourite(req.users.id,req.body.product_id,req.dbName);
        }
        sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, res, 200);
    }
    catch(err){    
        logger.debug("====ERR!==",err);
        return sendResponse.sendErrorMessage(err,res,400);
    }
}
const ProductFavData=async(user_id,product_id,dbName)=>{
    return new Promise((resolve,reject)=>{
        var sqlQuery="select `id` from `product_favourite` where `user_id`=? and `product_id`=?"
        var st=multiConnection[dbName].query(sqlQuery,[user_id,product_id],(err,data)=>{
            logger.debug(st.sql)
            if(err){
                reject("Something Went Wrong")
            }
            else{
                logger.debug("============DATA!===",data);
                resolve(data)
            }
        })
    })

}
/**
 * @desc used for favourite product listing
 * @param {*Object} req 
 * @param {*Object} res 
 */
const productFavList=async (req,res)=>{
    try{        
        let user_type_check = await  Universal.getUserPriceType(req.dbName);
    
        logger.debug("=======user_type_check=========",user_type_check,user_type_check.length)
        var user_id=await GetUserId(req.headers.authorization,req.dbName)
        logger.debug("=======userrrrrrrr iddddddd=========",user_id)
        let user_details = await ExecuteQ.Query(req.dbName,"select * from user where id= ?",[user_id])
        let user_type_id = user_details && user_details.length>0?user_details[0].user_type_id:0
        if(user_type_id==undefined || user_type_id=="" || user_type_id==null || user_type_id==0){
            let user_type_details = await ExecuteQ.Query(req.dbName,"select * from user_types limit 1",[]);
            logger.debug("============user_type_details------",user_type_details)            
            if(user_type_details && user_type_details.length>0){
                user_type_id = user_type_details[0].id
            }else{
                user_type_id = 0
            }
        }


        var data= await ProductFavouriteList(req.users.id,req.query.product_id,
            req.query.language_id,req.dbName,user_type_id,user_type_check);        
         sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
    }
    catch(err){    
        logger.debug(err)
        return sendResponse.sendErrorMessage(err,res,400);
    }
}
/**
 * @desc used for listing an user favourite products
 * @param {*Int} user_id 
 * @param {*Int} product_id 
 * @param {*Int} language_id 
 * @param {*Int} area_id 
 * @param {*String} dbName 
 */
const ProductFavouriteList=(user_id,product_id,language_id,dbName,user_type_id,user_type_check)=>{
        
    let user_type_condition_one = ""
    let user_type_condition_two = ""
    
if(user_type_check  && user_type_check.length>0){
     user_type_condition_one = "and pc.user_type_id="+user_type_id+" "
     user_type_condition_two = "and price.user_type_id="+user_type_id+" "
}

    return new Promise(async (resolve,reject)=>{

    try{
     var sqlQuery ="select p.avg_rating,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant, "+
        " p.id as product_id,p.is_product,p.duration,"+
        "IF((select count(*) from product_favourite where product_favourite.product_id = p.id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1)> 0, 1, 0) as is_favourite, " +
        " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+
        " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " bp.detailed_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id join product_favourite pf on pf.product_id=p.id"+ 
        " where pf.user_id IN("+parseInt(user_id)+") and pf.status=1 and "+
        "   c.is_live=1  and p.is_live = 1"+
        "  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
        " and pml.language_id = "+language_id+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+language_id+" and (pimage.default_image = 1"+ 
        " or pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
        " and DATE(price.end_date) >= CURDATE() "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
        "  price.price !=0))  GROUP BY product_id,sku"
        let data=await ExecuteQ.Query(dbName,sqlQuery,[])
        //    var statement= multiConnection[dbName].query(sqlQuery,(err,data)=>{
    //     logger.debug(statement.sql,err);    
    //     if(err){
    //             reject("Something Went Wrong")
    //         }
    //         else{
                for(var i = 0; i< data.length;i++){
                    if(data[i].pricing_type == 1){  
                         data[i].hourly_price =JSON.parse(data[i].hourly_price);                        
                         data[i].price_type=1;
                        
                    }else{
                        data[i].price_type=0;                     
                        delete data[i].hourly_price;
                    }

                    if(!(JSON.parse(data[i].adds_on) && JSON.parse(data[i].adds_on>0))){
                        data[i].adds_on = JSON.parse(data[i].adds_on)
                    }
                }
                resolve(data)
        //     }
        // })
    }
    catch(Err){
        reject(Err)
    }

    })
}
/**
 * @desc used for making an favourite of product by user
 * @param {*Int} user_id 
 * @param {*Int} product_id 
 * @param {*Int} status 
 * @param {*String} dbName 
 */
const ProductFavourite=(user_id,product_id,dbName)=>{
    return new Promise((resolve,reject)=>{
        var sqlQuery="insert into `product_favourite` (`user_id`,`product_id`,`status`) values (?)"
        multiConnection[dbName].query(sqlQuery,[[user_id,product_id,1]],(err,data)=>{
           logger.debug("=ERRR!==",err);
            if(err){
                reject("Something Went Wrong")
            }
            else{
                resolve()
            }
        })
    })
}
/**
 * @desc used for making an unfavourite/unfavourite of product
 * @param {*Int} user_id 
 * @param {*Int} product_id 
 * @param {*String} dbName 
 */
const ProductUpdateFavouriteStatus=(user_id,product_id,status,dbName)=>{
    return new Promise((resolve,reject)=>{
            var sqlQuery="update `product_favourite` set `status`=? where `user_id`=? and `product_id`=?"
            multiConnection[dbName].query(sqlQuery,[parseInt(status),user_id,product_id],(err,data)=>{
                if(err){
                    reject("Something Went Wrong")
                }
                else{
                    resolve()
                }
            })
    })
}

const productAddsOn=async (req,res)=>{
    try{
        var product_id=parseInt(req.query.product_id);
        var final_data=[]
        var adds_on_data=await ExecuteQ.Query(req.dbName,"select pr.is_multiple,pr.min_adds_on,pr.max_adds_on,pr.name,pr.id,"+
        "CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"name\": \"', pdt.name, '\", ','\"id\": \"', pdt.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=? where pr.product_id=? and pr.is_deleted=?  group by pr.id",            
        [0,product_id,0])
        if(adds_on_data && adds_on_data.length>0){
            for(const i of adds_on_data){
                final_data.push(
                    {
                    "is_multiple":i.is_multiple,
                    "min_adds_on":i.min_adds_on,
                    "max_adds_on":i.max_adds_on,
                    "name":i.name,
                    "id":i.id,
                    "types":JSON.parse(i.bData)
                    }
                    )
            } 
        }
        sendResponse.sendSuccessData(final_data, constant.responseMessage.SUCCESS, res, 200);
    }   
    catch(err){    
        logger.debug(err)
        return sendResponse.sendErrorMessage(err,res,400);
    }

}
/**
 * @description used for show most booked product
 * @param {*Object} req 
 * @param {*Object} res 
 */
const popularProduct=async (req,res)=>{

    logger.debug("======",req.query)
    var zone_offset=req.query.zone_offset!=undefined && req.query.zone_offset!=="" && req.query.zone_offset!=null?req.query.zone_offset:"+05:30"
    var flow_type=req.query.type!=undefined && req.query.type!=="" && req.query.type!=null?req.query.type:0
    let categoryId=req.query.categoryId!=undefined && req.query.categoryId!=="" && req.query.categoryId!=null?req.query.categoryId:0;
    let limit=parseInt(req.query.limit);
    let offset=parseInt(req.query.offset);
    let radius_check_query
    let planQuery="";
    let subScriptionData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["is_subscription_plan","1"])
    planQuery=subScriptionData && subScriptionData.length>0?" and ss.status='active' and ss.is_approved=1 ":""

    var service_type = await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);
    let user_type_check = await  Universal.getUserPriceType(req.dbName);
    let categoryIds=[];
    let parentIds=await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);

    logger.debug("=======user_type_check=========",user_type_check,user_type_check.length)
    var user_id=await GetUserId(req.headers.authorization,req.dbName)
    logger.debug("=======userrrrrrrr iddddddd=========",user_id)
    let user_details = await ExecuteQ.Query(req.dbName,"select * from user where id= ?",[user_id])
    let user_type_id = user_details && user_details.length>0?user_details[0].user_type_id:0
    if(user_type_id==undefined || user_type_id=="" || user_type_id==null || user_type_id==0){
        let user_type_details = await ExecuteQ.Query(req.dbName,"select * from user_types limit 1",[]);
        logger.debug("============user_type_details------",user_type_details)            
        if(user_type_details && user_type_details.length>0){
            user_type_id = user_type_details[0].id
        }else{
            user_type_id = 0
        }
    }
    logger.debug("=================user_type_id============",user_type_id)
    if(req.service_type==1 || req.service_type==8 || req.service_type==11){
        radius_check_query="having IFNULL(distance,0)<=s.delivery_radius"
    }else{
        radius_check_query="having IFNULL(distance,0)<=5000000"
    }

    let user_type_condition_one = ""
    let user_type_condition_two = ""
    
if(user_type_check  && user_type_check.length>0){
     user_type_condition_one = "and pc.user_type_id="+user_type_id+" "
     user_type_condition_two = "and price.user_type_id="+user_type_id+" "
}

let latitude = req.query.latitude !==undefined?req.query.latitude:0;
let longitude = req.query.longitude !==undefined?req.query.longitude:0;


    var current_date =moment().utcOffset(zone_offset).format("YYYY-MM-DD")
    return new Promise(async (resolve,reject)=>{
             let w_sql,sql;
            let mUnit=await Universal.getMeausringUnit(req.dbName);


            if(categoryId==0){

                
                     sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id or questions.category_id = temp.detailed_sub_category_id and questions.isDelete=0 limit 1),1,0 ) as is_question,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite from (select  p.category_id as categories_id, p.tax_exempt, p.item_unavailable,p.sub_category_id,p.id as product_id,p.avg_rating,(select count(*) from order_prices join product prd on prd.id=order_prices.product_id where  order_prices.product_id=p.id) as total_orders,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
                    " price.display_price,s.is_out_network,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
                    " s.address as supplier_address,bp.category_id as parent_category_id,p.quantity,p.purchased_quantity,"+
                    " p.cart_image_upload,p.is_appointment, p.payment_after_confirmation,c.is_quantity,c.order_instructions,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                    " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                    " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                    " price.beauty_saloon_price,"+
                    " bp.detailed_sub_category_id,"+
                    " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                    " ,price.price,pimage.image_path,"+
                    " pml.measuring_unit,s.self_pickup,s.delivery_radius,price.price_type  ,"+
                    " price.price as fixed_price,price.price_type as price1"+
                    " from"+
                    " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                    " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                    " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                    "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
                    " where  c.is_live=1 and c.is_deleted=0  and p.is_live = 1"+
                    " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+    
                    ""+planQuery+" and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
                    " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                    " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                    "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by total_orders DESC,avg_rating DESC  limit "+limit+" offset "+offset+") as temp "

                    w_sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1) > 0, 1, 0) as is_product_adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id  or questions.category_id = temp.detailed_sub_category_id and questions.isDelete=0  limit 1) > 0,1,0 ) as is_question from (select  p.category_id as categories_id,p.tax_exempt, p.item_unavailable,p.sub_category_id,p.id as product_id,p.avg_rating,(select count(*) from order_prices join product prd on prd.id=order_prices.product_id where  order_prices.product_id=p.id) as total_orders,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
                     " price.display_price,s.is_out_network,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
                     " s.address as supplier_address,p.quantity,p.purchased_quantity,"+
                     " bp.category_id as parent_category_id,p.cart_image_upload,p.is_appointment,p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                     " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                     " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                     " price.beauty_saloon_price,"+
                     " bp.detailed_sub_category_id,"+
                     " price.price,pimage.image_path,"+
                     " pml.measuring_unit,s.self_pickup,s.delivery_radius,price.price_type  ,"+
                     " price.price as fixed_price,price.price_type as price1"+
                     " from"+
                     " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                     " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                     " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                     "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id"+ 
                     " where  c.is_live=1 and c.is_deleted=0  and p.is_live = 1"+
                     " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0"+    
                     ""+planQuery+" and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
                     " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                     " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                     "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" limit 20) as temp "
            }
            else{
                sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id  or questions.category_id = temp.detailed_sub_category_id and questions.isDelete=0  limit 1),1,0 ) as is_question,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite from (select  p.category_id as categories_id, p.tax_exempt, p.item_unavailable,p.sub_category_id,p.id as product_id,p.avg_rating,(select count(*) from order_prices join product prd on prd.id=order_prices.product_id where  order_prices.product_id=p.id) as total_orders,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
                " price.display_price,s.is_out_network,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
                " s.address as supplier_address,p.quantity,p.cart_image_upload,p.purchased_quantity,"+
                " bp.category_id as parent_category_id,p.is_appointment,p.payment_after_confirmation,c.is_quantity,c.order_instructions,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                " price.beauty_saloon_price,"+
                " bp.detailed_sub_category_id,"+
                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                " ,price.price,pimage.image_path,"+
                " pml.measuring_unit,s.self_pickup,s.delivery_radius,price.price_type  ,"+
                " price.price as fixed_price,price.price_type as price1"+
                " from"+
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
                " where  c.is_live=1 and c.id="+categoryId+" and c.is_deleted=0  and p.is_live = 1"+
                " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0"+    
                ""+planQuery+" and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
                " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by total_orders DESC,avg_rating DESC limit "+limit+" offset "+offset+") as temp "


                w_sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1) > 0, 1, 0) as is_product_adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id or questions.category_id = temp.detailed_sub_category_id limit 1) > 0,1,0 ) as is_question from (select  p.category_id as categories_id, p.tax_exempt, p.sub_category_id,p.id as product_id,p.avg_rating,(select count(*) from order_prices join product prd on prd.id=order_prices.product_id where  order_prices.product_id=p.id) as total_orders,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
                " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
                " bp.category_id as parent_category_id,s.address as supplier_address,p.quantity,p.purchased_quantity"+

                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                " price.beauty_saloon_price,"+
                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                " ,price.price,pimage.image_path,"+
                " pml.measuring_unit,s.self_pickup,bp.detailed_sub_category_id,s.delivery_radius,price.price_type  ,"+
                " price.price as fixed_price,price.price_type as price1"+
                " from"+
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id"+ 
                " where  c.is_live=1 and c.id="+categoryId+" and c.is_deleted=0  and p.is_live = 1"+
                " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0"+    
                ""+planQuery+" and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
                " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" limit 20) as temp "
            }
      
        var adds_on_ar=[],adds_on,final_json={},result=[],total_product=0;
        if(parseInt(req.service_type)!=1){
            result=await ExecuteQ.Query(req.dbName,sql,[]);
            total_product=await ExecuteQ.Query(req.dbName,w_sql,[])
            let enableSupplierTiming=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["sendSupplierDataInProductFilterationApi","1"])
            let enableCategoryGeofence = await ExecuteQ.Query(req.dbName,
                "select `key`, value from tbl_setting where `key`=? and value='1'",
                ["enable_geofence_wise_categories"])
            if(enableCategoryGeofence && enableCategoryGeofence.length>0){
                let finalResult = [];
                if(result && result.length>0){

                    for(const [index,i] of result.entries()){
                        let products = await Universal.checkLocationWiseCategories(req.dbName,
                             latitude, longitude,i.parent_category_id)
                
                            if (products && products.length > 0) {
                                finalResult.push(i);
                            }
                    }
                    console.log("=finalResult==>>",finalResult)
                    result = finalResult;
                }

                if(total_product && total_product.length>0){
                    let finalResult = [];
                    for(const [index,i] of total_product.entries()){
                        let productsCount = await Universal.checkLocationWiseCategories(req.dbName,
                             latitude, longitude,i.parent_category_id)
                
                            if (productsCount && productsCount.length > 0) {
                                finalResult.push(i);
                            }
                    }
                    total_product = finalResult;
                    console.log("=total_product==>>",total_product)
                }
            }
            console.log("===Presult===>>=",result)
            if(result && result.length>0){
                for(var i = 0; i< result.length;i++){                   
                    adds_on=_.groupBy(JSON.parse(result[i].adds_on),"name");
                    _.each(adds_on,function(value,key,object){
                            final_json.name=key
                            final_json.value=value
                            adds_on_ar.push(final_json);
                            final_json={}                                
                    })                  
                    result[i].adds_on=adds_on_ar
                    adds_on_ar=[];
                    if(result[i].pricing_type == 1){                              
                           result[i].hourly_price =JSON.parse(result[i].hourly_price);                      
                            result[i].price_type=1;                           
                         
                    }else{
                        result[i].price_type=0;                           
                        delete result[i].hourly_price;
                    } 
                    if(i==result.length-1){
                        if(enableSupplierTiming && enableSupplierTiming.length>0){
                            let supplierTimmings = await getSuppliersWithTimmings(result,req.dbName)

                            sendResponse.sendSuccessData({"product":result,
                            "supplierTimmings":supplierTimmings,
                            "count":total_product.length}, 
                            constant.responseMessage.SUCCESS, res, 200);
                        }
                        else{
                        sendResponse.sendSuccessData({"product":result,"count":total_product.length}, constant.responseMessage.SUCCESS, res, 200);
                        }
                    }                                           
                }     
            }
            else{
                
            let supplierTimmings = await getSuppliersWithTimmings(result,req.dbName)

                sendResponse.sendSuccessData({"product":result,
                "supplierTimmings":supplierTimmings,
                "count":0}, 
                constant.responseMessage.SUCCESS, res, 200);
                // sendResponse.sendSuccessData({"product":[],"count":0}, constant.responseMessage.SUCCESS, res, 200);
            }
        }
        // let result=[]
        // let total_product=[]
        
        else{
            let supplierTimmings = await getSuppliersWithTimmings(result,req.dbName)
            sendResponse.sendSuccessData({"product":result,
            "supplierTimmings":supplierTimmings,
            "count":0},
             constant.responseMessage.SUCCESS, res, 200);
            // sendResponse.sendSuccessData({"product":[],"count":0}, constant.responseMessage.SUCCESS, res, 200);
        }
          
    })

}

function getSuppliersWithTimmings(final_products,dbName){
    return new Promise(async(resolve,reject)=>{
        let suppliersTimmings = [];
        if(final_products && final_products.length>0){
            const uniqSupplierIds = final_products.map((rec)=> rec.supplier_id);  

            let suppliersTimmingsData = await Execute.Query(dbName,`select is_open,week_id,start_time,end_time,supplier_id from supplier_timings where supplier_id IN(${uniqSupplierIds.join(",")})`,[]);
            
            if(suppliersTimmingsData && suppliersTimmingsData.length>0){
                let groupingSupplierData = _.groupBy(suppliersTimmingsData,"supplier_id");
      
                for(key in groupingSupplierData){
                    let tempObj = {
                        supplierId : key,
                        supplierTimmings : groupingSupplierData[key]
                    }
                    suppliersTimmings.push(tempObj)
                   // console.log("----------",final[key])
                }
            }
            resolve(suppliersTimmings)
        }else{
            resolve(suppliersTimmings)
        }
    })
}

/**
 * @description used for show most booked product
 * @param {*Object} req 
 * @param {*Object} res 
 */
const popularProductV1=async (req,res)=>{

    logger.debug("======",req.query)
    var zone_offset=req.query.zone_offset!=undefined && req.query.zone_offset!=="" && req.query.zone_offset!=null?req.query.zone_offset:"+05:30"
    var flow_type=req.query.type!=undefined && req.query.type!=="" && req.query.type!=null?req.query.type:0
    let categoryId=req.query.categoryId!=undefined && req.query.categoryId!=="" && req.query.categoryId!=null?req.query.categoryId:0;
    let limit=parseInt(req.query.limit);
    let offset=parseInt(req.query.offset);
    let radius_check_query
    let planQuery="";
    let subScriptionData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["is_subscription_plan","1"])
    planQuery=subScriptionData && subScriptionData.length>0?" and ss.status='active'":""

    var service_type = await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);
    let user_type_check = await  Universal.getUserPriceType(req.dbName);
    let categoryIds=[];
    let parentIds=await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);

    logger.debug("=======user_type_check=========",user_type_check,user_type_check.length)
    var user_id=await GetUserId(req.headers.authorization,req.dbName)
    logger.debug("=======userrrrrrrr iddddddd=========",user_id)
    let user_details = await ExecuteQ.Query(req.dbName,"select * from user where id= ?",[user_id])
    let user_type_id = user_details && user_details.length>0?user_details[0].user_type_id:0
    if(user_type_id==undefined || user_type_id=="" || user_type_id==null || user_type_id==0){
        let user_type_details = await ExecuteQ.Query(req.dbName,"select * from user_types limit 1",[]);
        logger.debug("============user_type_details------",user_type_details)            
        if(user_type_details && user_type_details.length>0){
            user_type_id = user_type_details[0].id
        }else{
            user_type_id = 0
        }
    }
    logger.debug("=================user_type_id============",user_type_id)
    if(req.service_type==1 || req.service_type==8){
        radius_check_query="having IFNULL(distance,0)<=s.delivery_radius"
    }else{
        radius_check_query="having IFNULL(distance,0)<=5000000"
    }

    let user_type_condition_one = ""
    let user_type_condition_two = ""
    
if(user_type_check  && user_type_check.length>0){
     user_type_condition_one = "and pc.user_type_id="+user_type_id+" "
     user_type_condition_two = "and price.user_type_id="+user_type_id+" "
}


let hideOutOfStockProduct = await ExecuteQ.Query(req.dbName,
    "select `key`, value from tbl_setting where `key`=? and value=1",["hide_out_of_stock_product"]);
  let outOfStockCheck = "";
  
  if(hideOutOfStockProduct && hideOutOfStockProduct.length>0){
  outOfStockCheck = "and p.quantity>p.purchased_quantity"
  }

    var current_date =moment().utcOffset(zone_offset).format("YYYY-MM-DD")

    let latitude = req.query.latitude !==undefined?req.query.latitude:0;
    let longitude = req.query.longitude !==undefined?req.query.longitude:0;
    
    return new Promise(async (resolve,reject)=>{
             let w_sql,sql;
             let enable_zone_geofence = await Execute.Query(
                req.dbName,
                " select `key`, value from tbl_setting where `key`=? and value=1",
                ["enable_zone_geofence"]);

               let  zone_wise_check=`,`;
             if(enable_zone_geofence && enable_zone_geofence.length>0){
                radius_check_query = " having is_under_zone>0 ";
                zone_wise_check = `,IF((select st_contains(coordinates,point(${latitude},${longitude})) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone, `;
            }
            
            let mUnit=await Universal.getMeausringUnit(req.dbName);
            if(categoryId==0){
                     sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id limit 1),1,0 ) as is_question,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite from (select  p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.id as product_id,p.avg_rating,(select count(*) from order_prices join product prd on prd.id=order_prices.product_id where  order_prices.product_id=p.id) as total_orders,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
                    " bp.category_id as parent_category_id,price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time "+zone_wise_check+" s.logo as supplier_logo,"+
                    " p.quantity,p.purchased_quantity,"+
                    " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                    " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                    " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                    " price.beauty_saloon_price,"+
                    " bp.detailed_sub_category_id,"+
                    " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                    " ,price.price,pimage.image_path,"+
                    " pml.measuring_unit,s.self_pickup,s.delivery_radius,price.price_type  ,"+
                    " price.price as fixed_price,price.price_type as price1"+
                    " from"+
                    " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                    " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                    " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                    "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
                    " where  c.is_live=1 and c.is_deleted=0  and p.is_live = 1"+
                    " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+    
                    ""+planQuery+" and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 "+outOfStockCheck+" and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
                    " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                    " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                    "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by total_orders DESC,avg_rating DESC  limit "+limit+" offset "+offset+") as temp "

                    w_sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1) > 0, 1, 0) as is_product_adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id limit 1) > 0,1,0 ) as is_question from (select  p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.id as product_id,p.avg_rating,(select count(*) from order_prices join product prd on prd.id=order_prices.product_id where  order_prices.product_id=p.id) as total_orders,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
                     " price.display_price "+zone_wise_check+" s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
                     " bp.category_id as parent_category_id,p.quantity,p.purchased_quantity,"+
                     " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                     " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                     " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                     " price.beauty_saloon_price,"+
                     " bp.detailed_sub_category_id,"+
                     " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                     " ,price.price,pimage.image_path,"+
                     " pml.measuring_unit,s.self_pickup,s.delivery_radius,price.price_type  ,"+
                     " price.price as fixed_price,price.price_type as price1"+
                     " from"+
                     " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                     " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                     " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                     "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id"+ 
                     " where  c.is_live=1 and c.is_deleted=0  and p.is_live = 1"+
                     " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+outOfStockCheck+"  "+    
                     ""+planQuery+" and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
                     " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                     " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                     "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" limit 20) as temp "
            }
            else{
                sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id limit 1),1,0 ) as is_question,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite from (select  p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.id as product_id,p.avg_rating,(select count(*) from order_prices join product prd on prd.id=order_prices.product_id where  order_prices.product_id=p.id) as total_orders,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
                " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
                " p.quantity,p.purchased_quantity,"+
                " bp.category_id as parent_category_id,p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                " price.beauty_saloon_price,"+
                " bp.detailed_sub_category_id,"+
                " bar_code "+zone_wise_check+" sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                " ,price.price,pimage.image_path,"+
                " pml.measuring_unit,s.self_pickup,s.delivery_radius,price.price_type  ,"+
                " price.price as fixed_price,price.price_type as price1"+
                " from"+
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
                " where  c.is_live=1 and c.id="+categoryId+" and c.is_deleted=0  and p.is_live = 1"+
                " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+outOfStockCheck+" "+    
                ""+planQuery+" and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
                " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by total_orders DESC,avg_rating DESC limit "+limit+" offset "+offset+") as temp "

                w_sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1) > 0, 1, 0) as is_product_adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id limit 1) > 0,1,0 ) as is_question from (select  p.category_id as categories_id,p.sub_category_id,p.id as product_id,p.avg_rating,(select count(*) from order_prices join product prd on prd.id=order_prices.product_id where  order_prices.product_id=p.id) as total_orders,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
                " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
                " bp.category_id as parent_category_id,p.quantity,p.purchased_quantity,"+
                " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                " price.beauty_saloon_price,"+
                " bp.detailed_sub_category_id,"+
                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                " ,price.price,pimage.image_path,"+
                " pml.measuring_unit "+zone_wise_check+" s.self_pickup,s.delivery_radius,price.price_type  ,"+
                " price.price as fixed_price,price.price_type as price1"+
                " from"+
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id"+ 
                " where  c.is_live=1 and c.id="+categoryId+" and c.is_deleted=0  and p.is_live = 1"+
                " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+outOfStockCheck+"  "+    
                ""+planQuery+" and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
                " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" limit 20) as temp "
            }
      
        var adds_on_ar=[],adds_on,final_json={},result=[],total_product=0;

            result=await ExecuteQ.Query(req.dbName,sql,[]);

            total_product = await ExecuteQ.Query(req.dbName,w_sql,[])

            let enableCategoryGeofence = await ExecuteQ.Query(req.dbName,
                "select `key`, value from tbl_setting where `key`=? and value='1'",
                ["enable_geofence_wise_categories"])
            if(enableCategoryGeofence && enableCategoryGeofence.length>0){
                let finalResult = [];
                if(result && result.length>0){
                    for(const [index,i] of result.entries()){
                        let products = await Universal.checkLocationWiseCategories(req.dbName,
                             latitude, longitude,i.parent_category_id)
                
                            if (products && products.length > 0) {
                                finalResult.push(i);
                            }
                    }
                    result = finalResult;
                }

                if(total_product && total_product.length>0){
                    let finalResult = [];
                    for(const [index,i] of total_product.entries()){
                        let productsCount = await Universal.checkLocationWiseCategories(req.dbName,
                             latitude, longitude,i.parent_category_id)
                
                            if (productsCount && productsCount.length > 0) {
                                finalResult.push(i);
                            }
                    }
                    total_product = finalResult;
                }
            }
            

            

            if(result && result.length>0){
                for(var i = 0; i< result.length;i++){                   
                    adds_on=_.groupBy(JSON.parse(result[i].adds_on),"name");
                    _.each(adds_on,function(value,key,object){
                            final_json.name=key
                            final_json.value=value
                            adds_on_ar.push(final_json);
                            final_json={}                                
                    })                  
                    result[i].adds_on=adds_on_ar
                    adds_on_ar=[];
                    if(result[i].pricing_type == 1){                              
                           result[i].hourly_price =JSON.parse(result[i].hourly_price);                      
                            result[i].price_type=1;                           
                         
                    }else{
                        result[i].price_type=0;                           
                        delete result[i].hourly_price;
                    } 
                    if(i==result.length-1){
                        sendResponse.sendSuccessData({"product":result,"count":total_product.length}, constant.responseMessage.SUCCESS, res, 200);
                        // sendResponse.sendSuccessData({"product":[],"count":0}, constant.responseMessage.SUCCESS, res, 200);
    
                    }                                           
                }     
            }
            else{
                sendResponse.sendSuccessData({"product":result,"count":0}, constant.responseMessage.SUCCESS, res, 200);
                // sendResponse.sendSuccessData({"product":[],"count":0}, constant.responseMessage.SUCCESS, res, 200);
            }
        // let result=[]
        // let total_product=[]
        
          
    })

}

/**
 * @description used for viewing an product by user
 * @param {*Object} req 
 * @param {*Object} res 
 */
const viewProductByUser=async (req,res)=>{
    try{
        let productId=req.body.productId;
        await ExecuteQ.Query(req.dbName,`delete from recent_view_history where user_id=? and product_id=?`,[req.users.id,productId]);
        await ExecuteQ.Query(req.dbName,`insert into recent_view_history(user_id,product_id) values(?,?)`,[req.users.id,productId])
        sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, res, 200);
    }catch(Err){
        logger.debug(Err)
        return sendResponse.sendErrorMessage(Err,res,400);
    }
}

const gerUserId=(dbName,authorization,languageId)=>{
    return new Promise(async (resolve,reject)=>{
        if(authorization!=undefined && authorization!=""){
            var userId=await Universal.getCustomerIdByAccessToken(dbName,authorization,languageId)
            resolve(userId)
        }
        else{
            resolve(0)
        }
    })
}
/**
 * @description used for filered query
 * @param {*Int} service_type 
 * @param {*String} max_price_range 
 * @param {*String} min_price_range 
 */
const getPriceQuery=(service_type,max_price_range,min_price_range)=>{
    let sqlQuery="and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""
    return new Promise(async (resolve,reject)=>{
        try{
            let sqlQuery=service_type==8?"":"and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""
            resolve(sqlQuery)
        }
        catch(Err){
            logger.debug("=======getPriceQuery====")
            resolve(sqlQuery)
        }
    })
}


const getFileredQuery=async (
    isRadiusEnable,
    mUnit,
    service_type,user_type_check,user_type_id,
    need_agent,
    where_clause,
    current_date,languageId,variant_ids,supplier_ids,brand_ids,
    sort_by_query,is_sub_category,is_variant,is_product,is_availability,
    discount, is_supplier,is_brands,max_price_range,min_price_range,
    product_name,user_id,latitude,
    longitude,subcategoryId,enable_food_varients,
    enable_zone_geofence,supplierBranchId,zipcodeQuery)=>{
        


    product_name = product_name.replace(/'/g,"\\'")
    logger.debug
    let radius_check_query;
    // having distance<=s.delivery_radius
    let user_type_condition_one = ""
    let user_type_condition_two = ""

    // let priceQuery = "";

    // if(parseInt(supplierBranchId)!==0){
    //     priceQuery += ` sbb.id=${supplierBranchId} `;
    // }
    // console.log("====priceQuery==1>>",pQuery);

    let priceQuery = await getPriceQuery(service_type,max_price_range,min_price_range);
    // console.log("====pQuery==>>",pQuery);

    // priceQuery += pQuery;

      if(parseInt(supplierBranchId)!==0 && parseInt(service_type)!==8){
         priceQuery += ` and sbb.id=${supplierBranchId} `;
     }

    console.log("====priceQuery==2>>",priceQuery);

 

    if(service_type==1 || isRadiusEnable==1){
        radius_check_query="having distance<=sbb.delivery_radius"
    }else{
        radius_check_query="having distance<=5000000"
    }

    logger.debug("====service_type=======check_user_type====",service_type,user_type_check)
    if(service_type==1 || service_type==2){
        if(user_type_check && user_type_check.length>0){
            user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
            user_type_condition_two = " and price.user_type_id="+user_type_id+" "
        }
    }

    logger.debug("===========user_type_condition_one========",user_type_condition_one,user_type_condition_two)

    let product_variants_join = "";
    let variant_join = "";
    let cat_variant_join = "";
    let product_like_condition = `and pml.name like '%${product_name}%'`;

    
    if(enable_food_varients && enable_food_varients.length>0){
        product_variants_join = ` left join product_variants pvt on pvt.product_id = p.id `
        variant_join = ` left join variants vts on vts.id = pvt.variant_id `
        cat_variant_join = ` left join cat_variants cvt on cvt.id = vts.cat_variant_id `

        product_like_condition = ` and(
            pml.name like '%${product_name}%'
           or vts.value like '%${product_name}%'
           or cvt.name like '%${product_name}%'
           ) `
    }

    let extraProductKeys = " p.is_allergy_product,p.allergy_description,p.is_appointment,";
    
    let zone_wise_check = "";

    if(enable_zone_geofence && enable_zone_geofence.length>0){
        
        radius_check_query = " having is_under_zone>0 ";
        zone_wise_check = ` IF((select st_contains(coordinates,point(${latitude},${longitude})) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone, `;
    
    }


  

    console.log(is_sub_category, "is_sub_category", is_variant,"is_variant", is_product ,"is_product",is_supplier ,"is_supplier", is_availability,"is_availability",discount,"discount" ,is_brands,"productcheck")

 
    return new Promise((resolve,reject)=>{
        
        if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
                " price.display_price,bp.category_id as parent_category_id,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+" p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"   where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+") and c.is_deleted=0 and c.is_live=1  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+    
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"'"+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp "
        
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
           
                sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
                " price.display_price,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.logo as supplier_logo,"+
                " quantity,purchased_quantity,"+
                " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                " price.beauty_saloon_price,"+
                " bp.detailed_sub_category_id,"+zone_wise_check+""+
                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                " ,price.price,pimage.image_path,"+
                " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                " price.price as fixed_price,price.price_type as price1"+
                " from"+
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
                " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                "   and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
                " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+
                " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
                " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"

            }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
       
            logger.debug("=========+++ENTERING==============1===")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+
            " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and  name like '%"+product_name+"%' order by "+sort_by_query+") as temp"
        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"    and availability=1  order by "+sort_by_query+") as temp"

        }

        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2 && is_availability!=2 && discount!=2 && is_supplier==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING3==============3===")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2 && is_availability!=2 && discount!=2 && is_supplier!=2 &&  is_brands==2){
            logger.debug("=========+++ENTERING===============4==")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+") and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"
      
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING==============5===")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id, ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and  name like '%"+product_name+"%' order by "+sort_by_query+") as temp"
            
            
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING================6=")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and "+zipcodeQuery+" s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and  availability=1 order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount!=2 &&  is_brands==2){
            logger.debug("=========+++ENTERING888=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and  price.price_type=1 order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount!=2 &&  is_brands==2){
            logger.debug("=========+++ENTERING999=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and  price.price_type=1 order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING12121212=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+" where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
            logger.debug("=========IS-DISCOUNT=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+" where "+
            "  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+" and  price.price_type=1 and availability=1  order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
            logger.debug("==========================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+" where"+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp";
            
        }

        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING1313131=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and   name like '%"+product_name+"%' order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
            logger.debug("==avai and discount!==")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"
            
        }

        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
            logger.debug("==avai and discount!=product=")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+" where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2){
        sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
        " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+
        " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " bp.detailed_sub_category_id,"+zone_wise_check+""+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
        " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
        "  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
        " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
        " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
        " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
        " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
        "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1   order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2){
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"

            }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
            logger.debug("=========+++ENTERING14141414=================")    
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING1515151=================")                                                
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and  "+zipcodeQuery+" bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 order by "+sort_by_query+") as temp"

        }


        // else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2 && is_zipcode != 2){
        //     logger.debug("=======MYCONDITION==")                                                
        //     sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        //     " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
        //     " quantity,purchased_quantity,"+zone_wise_check+""+
        //     " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        //     " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        //     " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        //     " price.beauty_saloon_price,"+
        //     " bp.detailed_sub_category_id,"+
        //     " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        //     " ,price.price,pimage.image_path,"+
        //     " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
        //     " price.price as fixed_price,price.price_type as price1"+
        //     " from"+
        //     " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        //     " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        //     " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        //     "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
        //     " "+product_variants_join+"  where"+
        //     "  pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
        //     " and p.parent_id=0 and s.zip_code="+zip_code+"  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
        //     " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
        //     " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
        //     " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
        //     "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 order by "+sort_by_query+") as temp"

        // }









        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING1616161=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" where "+
            "  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and   price.price_type=1  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("========DIS=BRAND=AVAIL==")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" where "+
            "  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and  availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   "+product_like_condition+" GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1   order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING1818181=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1 order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING1818181=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "   and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"

        }


        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING1919191=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING202020=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING202020=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))    "+product_like_condition+"   GROUP BY product_id,sku "+radius_check_query+"   and availability=1   order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING=2121212================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1 order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            "  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "   and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"


        }
        // is_sub_category,is_variant,is_product,is_availability,discount,is_supplier,is_brands 1 2 1 1 2 2 1
        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
                " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
                " quantity,purchased_quantity,"+
                " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+
                " price.beauty_saloon_price,"+
                " bp.detailed_sub_category_id,"+zone_wise_check+""+
                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                " ,price.price,pimage.image_path,"+
                " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
                " price.price as fixed_price,price.price_type as price1"+
                " from"+
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+
                " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
                "   and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
                " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
                " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
                " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"


        }
        // else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands!=2)
        // {
            
        // }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING252525252=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING252525252=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id, ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detaile12345678_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "   s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            "  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "    and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku  order by "+sort_by_query+") as temp"

        }
        

        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and s.id IN("+supplier_ids.join(",")+") and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.brand_id IN ("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku   order by "+sort_by_query+") as temp"


        }

        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            "  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "    and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and s.id IN("+supplier_ids.join(",")+") and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.brand_id IN ("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and s.id IN("+supplier_ids.join(",")+") and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN ("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1 order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount!=2 &&  is_brands==2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "   s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and    price.price_type=1   order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
        {
            
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "   s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1   order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            "   s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "     s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and   name like '%"+product_name+"%' order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category==2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where "+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================");
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "   s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku  order by "+sort_by_query+") as temp"

        }  
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================");
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "    and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"
        
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount!=2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================");
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "    and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and   price.price_type=1  order by "+sort_by_query+") as temp"
        
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================");
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "    and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"
        
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "    and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"

        }

        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount!=2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and   price.price_type=1 order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and   price.price_type=1 order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and   price.price_type=1 and availability=1  order by "+sort_by_query+") as temp"


        }
        
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and   name like '%"+product_name+"%' order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0  "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+" GROUP BY product_id,sku "+radius_check_query+"   and availability=1   order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
        {

            console.log("=========+++ENTERING1717171717=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where bp.detailed_sub_category_id IN("+subcategoryId.join(",")+")"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+")  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+" GROUP BY product_id,sku "+radius_check_query+" and  price.price_type=1 and availability=1   order by "+sort_by_query+") as temp "

        }
        else{                           
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.calories,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " "+extraProductKeys+"p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0 ))   GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"
         }
         resolve(sql)

    })
}
const getFileredQueryByCategory=(
    isRadiusEnable,
    mUnit,
    service_type,
    user_type_check,user_type_id,
    need_agent,
    where_clause,
    current_date,languageId,variant_ids,supplier_ids,brand_ids,
    sort_by_query,is_sub_category,is_variant,is_product,is_availability,
    discount, is_supplier,is_brands,max_price_range,min_price_range,
    product_name,user_id,latitude,longitude,subcategoryId,categoryId,
    enable_food_varients,enable_zone_geofence)=>{
        
    product_name = product_name.replace(/'/g,"\\'")
    let radius_check_query;
    let user_type_condition_one = ""
    let user_type_condition_two = ""
    // having distance<=s.delivery_radius

    
    

    if(service_type==1 ){
        radius_check_query="having distance<=sbb.delivery_radius"
    }else{
        radius_check_query="having distance<=5000000"
    }
    
    if(service_type==1 && service_type==2){
        if(user_type_check && user_type_check>0){
            user_type_condition_one = " and pc.user_type_id="+user_type_id+" "
            user_type_condition_two = " and price.user_type_id="+user_type_id+" "
        }
    }


    let product_variants_join = "";
    let variant_join = "";
    let cat_variant_join = "";
    let product_like_condition = `and pml.name like '%${product_name}%'`;

    if(enable_food_varients && enable_food_varients.length>0){
        product_variants_join = ` left join product_variants pvts on pvts.product_id = p.id `
        variant_join = ` left join variants vts on vts.id = pvts.variant_id `
        cat_variant_join = ` left join cat_variants cvt on cvt.id = vts.cat_variant_id `

        product_like_condition = ` and(
             pml.name like '%${product_name}%'
            or vts.value like '%${product_name}%'
            or cvt.name like '%${product_name}%'
            )`
    }

    let zone_wise_check = "";

    if(enable_zone_geofence && enable_zone_geofence.length>0){
        radius_check_query = " having is_under_zone>0 ";
        zone_wise_check = ` IF((select st_contains(coordinates,point("+latitude+","+longitude+")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone, `;
    }
    // let branchIdCondition = ""

    // if(parseInt(supplierBranchId)!==0){
    //     branchIdCondition += ` and sbb.id = ${supplierBranchId} `;
    // }


    return new Promise((resolve,reject)=>{

        if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
            
            logger.debug("=========+++ENTERING=================")

            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
                " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id, "+zone_wise_check+""+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "   pvt.variant_id IN("+variant_ids.join(",")+") and c.is_deleted=0 and c.is_live=1  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+" and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+    
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"'"+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp "
        
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
           
                sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
                " price.display_price,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.logo as supplier_logo,"+
                " quantity,purchased_quantity,"+zone_wise_check+""+
                " c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                " price.beauty_saloon_price,"+
                " bp.detailed_sub_category_id,"+
                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                " ,price.price,pimage.image_path,"+
                " pml.measuring_unit,s.delivery_radius,price.price_type  ,"+
                " price.price as fixed_price,price.price_type as price1"+
                " from"+
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
                " where"+
                "   and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
                " and p.parent_id=0 and bp.category_id="+categoryId+" and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+
                " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
                " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"

            }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
       
            logger.debug("=========+++ENTERING==============1===")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where "+
            "   pvt.variant_id IN("+variant_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+
            " and pml.language_id = "+languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and  name like '%"+product_name+"%' order by "+sort_by_query+") as temp"
        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+" where "+
            "   pvt.variant_id IN("+variant_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  CURDATE() "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"    and availability=1  order by "+sort_by_query+") as temp"

        }

        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2 && is_availability!=2 && discount!=2 && is_supplier==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING3==============3===")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where "+
            "  pvt.variant_id IN("+variant_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2 && is_availability!=2 && discount!=2 && is_supplier!=2 &&  is_brands==2){
            logger.debug("=========+++ENTERING===============4==")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where "+
            "   pvt.variant_id IN("+variant_ids.join(",")+") and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"
     
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING==============5===")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and  name like '%"+product_name+"%' order by "+sort_by_query+") as temp"
            
            
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING================6=")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            "  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+priceQuery+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and  availability=1 order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount!=2 &&  is_brands==2){
            logger.debug("=========+++ENTERING888=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and  price.price_type=1 order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount!=2 &&  is_brands==2){
            logger.debug("=========+++ENTERING999=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and  price.price_type=1 order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING12121212=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+" where "+
            "    c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0)) "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
            logger.debug("=========IS-DISCOUNT=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            "  "+product_variants_join+" "+variant_join+" "+cat_variant_join+" where "+
            "  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0)) "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+" and  price.price_type=1 and availability=1  order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
            logger.debug("==========================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+" where"+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0)) "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp";
            
        }

        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING1313131=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and   name like '%"+product_name+"%' order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
            logger.debug("==avai and discount!==")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"
            
        }

        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
            logger.debug("==avai and discount!=product=")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where "+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2){
        sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
        " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
        " quantity,purchased_quantity,"+zone_wise_check+""+
        " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " bp.detailed_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
        "  "+product_variants_join+" "+variant_join+" "+cat_variant_join+" where"+
        "  s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
        " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
        " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
        " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
        " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
        "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1   order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2){
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where"+
            "  s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"

            }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands==2){
            logger.debug("=========+++ENTERING14141414=================")    
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands==2){
            logger.debug("=========+++ENTERING1515151================sqs    qd  =")                                                
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 order by "+sort_by_query+") as temp"

        }


        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING1616161=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" where "+
            "  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and   price.price_type=1  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("========DIS=BRAND=AVAIL==")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" where "+
            "  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and  availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"   "+variant_join+" "+cat_variant_join+" where"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+" GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1   order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING1818181=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  "+variant_join+" "+cat_variant_join+"  where"+
            "   pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0)) "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1 order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING1818181=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"

        }


        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING1919191=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING202020=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING202020=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where"+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"   GROUP BY product_id,sku "+radius_check_query+"   and availability=1   order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING=2121212================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+"  having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where "+
            " pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1 order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  "+variant_join+" "+cat_variant_join+"  where"+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            "  where"+
            "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"


        }
        // is_sub_category,is_variant,is_product,is_availability,discount,is_supplier,is_brands 1 2 1 1 2 2 1
        else if(is_sub_category!=2 && is_variant==2 && is_product!=2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
                " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
                " quantity,purchased_quantity,"+zone_wise_check+""+
                " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+
                " price.beauty_saloon_price,"+
                " bp.detailed_sub_category_id,"+
                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                " ,price.price,pimage.image_path,"+
                " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
                " price.price as fixed_price,price.price_type as price1"+
                " from"+
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+
                " "+product_variants_join+" "+variant_join+" "+cat_variant_join+"  where"+
                "   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
                " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
                " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
                " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                "  price.price !=0))  "+product_like_condition+"  GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING252525252=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0)) GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier==2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING252525252=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 order by "+sort_by_query+") as temp"
            
        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detaile12345678_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "   s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            "  where"+
            "   s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku  order by "+sort_by_query+") as temp"

        }
        

        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  s.id IN("+supplier_ids.join(",")+") and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.brand_id IN ("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku   order by "+sort_by_query+") as temp"


        }

        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            "  where"+
            "    s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.brand_id IN("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  s.id IN("+supplier_ids.join(",")+") and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.brand_id IN ("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands!=2)
        {
            logger.debug("=========+++ENTERING223232323=================")                                  
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  s.id IN("+supplier_ids.join(",")+") and pvt.variant_id IN("+variant_ids.join(",")+")  and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.brand_id IN ("+brand_ids.join(",")+") and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1 order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount!=2 &&  is_brands==2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "   s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and    price.price_type=1   order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
        {
            
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "   s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1   order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            "   s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+"   and availability=1 order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category==2 && is_variant==2 && is_product!=2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "     s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and   name like '%"+product_name+"%' order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category==2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where "+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku  order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category==2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================");
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            "   s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku  order by "+sort_by_query+") as temp"

        }  
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================");
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            "  s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+"   and availability=1 and price.price_type=1  order by "+sort_by_query+") as temp"
        
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount!=2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================");
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where "+
            " s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" and   price.price_type=1  order by "+sort_by_query+") as temp"
        
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================");
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            " s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+"   and availability=1  order by "+sort_by_query+") as temp"
        
        }
        else if(is_sub_category!=2 && is_variant==2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where"+
            "  s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"

        }

        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku  order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability==2 && discount!=2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where "+
            " pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and   price.price_type=1 order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,  ("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and   price.price_type=1 order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product==2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where"+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1)   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0)) GROUP BY product_id,sku "+radius_check_query+" and   price.price_type=1 and availability=1  order by "+sort_by_query+") as temp"


        }
        
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability==2 && discount==2 &&  is_brands==2)
        {
            logger.debug("=========+++ENTERING171717171=================")
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  where "+
            " pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  GROUP BY product_id,sku "+radius_check_query+" and   name like '%"+product_name+"%' order by "+sort_by_query+") as temp"

        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount==2 &&  is_brands==2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  "+variant_join+" "+cat_variant_join+"  where"+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+") and  c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and bp.category_id="+categoryId+"   and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+" GROUP BY product_id,sku "+radius_check_query+"   and availability=1   order by "+sort_by_query+") as temp"


        }
        else if(is_sub_category!=2 && is_variant!=2 && is_product!=2  && is_supplier!=2 && is_availability!=2 && discount!=2 &&  is_brands==2)
        {
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " "+product_variants_join+"  "+variant_join+" "+cat_variant_join+"  where"+
            "  pvt.variant_id IN("+variant_ids.join(",")+")  and s.id IN("+supplier_ids.join(",")+")  and p.is_live = 1"+
            " and (p.parent_id=0 or is_variant=1) and bp.category_id="+categoryId+" and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))  "+product_like_condition+" GROUP BY product_id,sku "+radius_check_query+" and  price.price_type=1 and availability=1   order by "+sort_by_query+") as temp"

        }
        else{                           
            sql ="select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\",','\"addon_limit\": \"', pr.addon_limit,'\",','\"is_mandatory\": \"', pr.is_mandatory,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = "+user_id+" and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where  questions.category_id =temp.categories_id  or questions.category_id = temp.detailed_sub_category_id   ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.product_id), 1, 0) as is_variant from (select p.avg_rating,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.parent_id,p.interval_flag,p.interval_value,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(sbb.latitude))* cos(radians(sbb.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(sbb.latitude)))) AS distance,p.id as product_id,p.is_product,p.duration,"+
            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,bp.category_id as parent_category_id,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo,"+
            " quantity,purchased_quantity,"+zone_wise_check+""+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,s.base_delivery_charges,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where   c.is_live=1  and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and p.category_id="+categoryId+"  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  and price.price<="+parseInt(max_price_range)+" and price.price>="+parseInt(min_price_range)+""+
            " and pml.language_id = "+languageId+" "+where_clause+" and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0))   GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query+") as temp"
         }
         resolve(sql)

    })
}
const getBookedProduct=(dbName,offset,booking_from_date,booking_to_date)=>{
    var b_from_date=moment(booking_from_date).utcOffset(offset).format('YYYY-MM-DD HH:mm:ss')
    var to_date=moment(booking_to_date).utcOffset(offset).format('YYYY-MM-DD HH:mm:ss'),ids=[]
    return new Promise(async (resolve,reject)=>{
        try{
            var bSql="select `orp`.`product_id`,`ors`.`id` from `orders` `ors` join `order_prices` `orp` on `orp`.`order_id`=`ors`.`id` join `product` `p` on `p`.`id`=`orp`.`product_id` where `p`.`quantity`>`p`.`purchased_quantity` AND (`ors`.`schedule_date`<='"+b_from_date+"' and `ors`.`shipped_on`>='"+b_from_date+"') OR (`ors`.`schedule_date`<='"+to_date+"' and `ors`.`shipped_on`>='"+to_date+"')"
            var booked_data= await ExecuteQ.Query(dbName,bSql,[]);
            logger.debug("=====BOOKED-DATA!===>",booked_data);
            for(const i of booked_data){
                    ids.push(i.product_id)
            }
            resolve(ids)
        }
        catch(Err){
            logger.debug("====+ERR!==",Err);
            reject(Err)
        }
    })
}
const filteList=(booked_ids,products)=>{
    return new Promise((resolve,reject)=>{
          let s_data=_.filter(products, (v) => _.indexOf(booked_ids, v.product_id) === -1)
          resolve(s_data)
    })
}
/**
 * @desc used for filteration an product and Option 2 Means we are not applying that filter during an filteration of products
 * @param {*Object} req 
 * @param {*Object} res 
 */
const filterProductsV1 = async function(req,res){

    let supplierBranchId = req.body.supplierBranchId || 0;
    var languageId = 0;
    var subcategoryId = 0;
    var countryId = 0;
    var priceType =0;
    // 2 option mean we are not applying that filter on products;
    // let supplierBranchId = req.body.supplierBranchId || 0;
    var zone_offset=req.body.zone_offset!=undefined && req.body.zone_offset!=="" && req.body.zone_offset!=null?req.body.zone_offset:"+05:30"
    var current_date =moment().utcOffset(zone_offset).format("YYYY-MM-DD");
    var low_to_high=req.body.low_to_high!=undefined && req.body.low_to_high!=="" && req.body.low_to_high!=null?req.body.low_to_high:2
    var min_price_range=req.body.min_price_range;
    var max_price_range=req.body.max_price_range;
    var discount=req.body.is_discount!=undefined && req.body.is_discount!=="" && req.body.is_discount!=null && req.body.is_discount!=0 ? req.body.is_discount:2;
    var is_availability=req.body.is_availability!=undefined && req.body.is_availability!=="" && req.body.is_availability!=null && req.body.is_availability==1 ? req.body.is_availability:2;
    var sort_by=req.body.sort_by!=undefined && req.body.sort_by!=="" && req.body.sort_by!=null?req.body.sort_by:2
    var variant_ids=req.body.variant_ids;
    var is_variant=req.body.variant_ids && req.body.variant_ids.length>0?1:2
    var product_name=req.body.product_name!=undefined && req.body.product_name!=="" && req.body.product_name!=null?req.body.product_name:""
    var is_product=req.body.product_name!=undefined && req.body.product_name!=="" && req.body.product_name!=null?1:2;
    var latitude=req.body.latitude!=undefined && req.body.longitude!==""?req.body.latitude:0;
    var longitude=req.body.longitude!=undefined && req.body.longitude!==""?req.body.longitude:0;
    var need_agent=req.body.need_agent!=undefined && req.body.need_agent!==""?req.body.need_agent:0;
    var supplier_ids=req.body.supplier_ids;
    var is_supplier=req.body.supplier_ids && req.body.supplier_ids.length>0?1:2;
    var is_sub_category=req.body.subCategoryId && req.body.subCategoryId.length>0?1:2;
    var is_brands=req.body.brand_ids && req.body.brand_ids.length>0?1:2;
    var brand_ids=req.body.brand_ids;
    var asc_desc_val="ASC",sort_by_query; 
    var pagination =req.body.offset!=undefined && req.body.limit!=undefined?" limit "+`${req.body.limit}`+" offset "+`${req.body.offset}`:" limit 100";
    var user_id=0,sql="";   
    let category_id=req.body.categoryId!=undefined?parseInt(req.body.categoryId):0

    let zip_code=req.body.zip_code ;

    let zipcodeQuery="";
    let supplier_branch_id=req.body.supplier_branch_id

    let zipKeys=await Execute.Query(req.dbName,"select `key` , value from tbl_setting where `key` =? and value=1",["enable_zipcode"]);
    if(zipKeys && zipKeys.length>0){
        if(zip_code !=null && zip_code!=""){
            zipcodeQuery=" s.zip_code="+zip_code+" and "
        }
        
    }

    let enable_food_varients = await Execute.Query(req.dbName,
        " select `key`, value from tbl_setting where `key`=? and value=1",["enable_food_varients"])

    let enable_zone_geofence = await Execute.Query(
        req.dbName,
        " select `key`, value from tbl_setting where `key`=? and value=1",
        ["enable_zone_geofence"])
    
        let enableProductOrder = await Execute.Query(
            req.dbName,
            " select `key`, value from tbl_setting where `key`=? and value=1",
            ["enableProductOrder"])
        

    if(low_to_high==1){
        
        asc_desc_val="DESC";

        if(enableProductOrder && enableProductOrder.length>0){
            asc_desc_val = "ASC"
        }

        sort_by_query="-fixed_price "+asc_desc_val+",fixed_price "+asc_desc_val+pagination; 
    }
    else if(low_to_high==0){

        sort_by_query="-fixed_price "+asc_desc_val+",fixed_price "+asc_desc_val+pagination; 
    }
    else if(low_to_high==3){
             sort_by_query="-avg_rating "+asc_desc_val+",avg_rating "+asc_desc_val+pagination; 
    }
    else{
        asc_desc_val="DESC";

        if(enableProductOrder && enableProductOrder.length>0){
            asc_desc_val = "ASC"
        }

        sort_by_query="-p.id "+asc_desc_val+",p.id "+asc_desc_val+pagination; 
    }
    logger.debug("===bodyParams=>zone_offset=>current_date=>pagination=>low_to_high==",req.body,zone_offset,current_date,pagination,low_to_high)
    var not_avail_ids;
    var booking_to_date=req.body.booking_to_date!=undefined && req.body.booking_to_date!=""?req.body.booking_to_date:new Date();
    var booking_from_date=req.body.booking_from_date!=undefined && req.body.booking_from_date!=""?req.body.booking_from_date:new Date();

    logger.debug("is_sub_category,is_variant,is_product,is_availability,discount,is_supplier,is_brands",
        is_sub_category,is_variant,is_product,is_availability,discount,is_supplier,is_brands)
    let query;

    var service_type =await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);

    let user_type_check = await  Universal.getUserPriceType(req.dbName);
    logger.debug("=======user_type_check=========",user_type_check,user_type_check.length)
     user_id = req.users && req.users.id!=undefined?req.users.id:0;
     if(req.headers.authorization!==undefined){
        user_id = await GetUserId2(req.headers.authorization,req.dbName)
    }
    let user_details = await ExecuteQ.Query(req.dbName,"select * from user where id= ?",[user_id])
    let user_type_id = user_details && user_details.length>0?user_details[0].user_type_id:0
    if(user_type_id==undefined || user_type_id=="" || user_type_id==null || user_type_id==0){
        let user_type_details = await ExecuteQ.Query(req.dbName,"select * from user_types limit 1",[]);
        logger.debug("============user_type_details------",user_type_details)            
        if(user_type_details && user_type_details.length>0){
            user_type_id = user_type_details[0].id
        }else{
            user_type_id = 1
        }
    }
    let planQuery="";
    let subScriptionData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["is_subscription_plan","1"])
    planQuery=subScriptionData && subScriptionData.length>0?" and ss.status='active'":""
    let radiusFlagData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["is_radius_enable","1"]);
    let isRadiusEnable=radiusFlagData && radiusFlagData.length>0?1:0;

    logger.debug("=================user_type_id============",user_type_id)


    // let planQuery="";

    // let subScriptionData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["is_subscription_plan","1"])

    // planQuery=subScriptionData && subScriptionData.length>0?" and ss.status='active' and ss.is_approved=1 ":" "




    return new Promise(async (resolve,reject)=>{
        try{
            var day_diff=await Universal.getDayDiff(booking_from_date,booking_to_date,zone_offset);
            var hour_diff=await Universal.getHourDiff(booking_from_date,booking_to_date,zone_offset);

          
            
            let mUnit=await Universal.getMeausringUnit(req.dbName);
            var screen_flow =await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);
            var booked_ids=await getBookedProduct(req.dbName,zone_offset,booking_from_date,booking_to_date)
            let branchCheck = ``
            if(parseInt(supplierBranchId)!==0){
                branchCheck = ` sbb.id=${supplierBranchId} `;
            }


            var where_clause=day_diff==1?" "+branchCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and interval_flag=1":"and sbb.is_deleted=0 and sbb.is_live=1 and interval_flag=0"
            where_clause=subScriptionData && subScriptionData.length>0?where_clause+" and ss.status='active' and ss.is_approved=1 ":where_clause
            logger.debug("==hour_diff:=>=whereClause:=>",hour_diff,where_clause);
            // user_id=await gerUserId(req.headers.authorization);
            var user_sql = "select id from user where access_token = ? ";

            var user_data=await ExecuteQ.Query(req.dbName,user_sql,[req.headers.authorization]);
            if(user_data && user_data.length>0){
                user_id=user_data[0].id
            }
            if(category_id>0){
                query = await getFileredQueryByCategory(
                    isRadiusEnable,
                    mUnit,
                    screen_flow[0].app_type,
                    user_type_check,
                    user_type_id,
                    need_agent,
                    where_clause,current_date,req.body.languageId,variant_ids,
                    supplier_ids,brand_ids,sort_by_query,is_sub_category,is_variant,is_product,
                    is_availability,discount,is_supplier,is_brands,max_price_range,
                    min_price_range,product_name,user_id,latitude,longitude,
                    req.body.subCategoryId,
                    category_id,
                    enable_food_varients,
                    enable_zone_geofence
                    
                    )  
            }
            else{
                query = await getFileredQuery(
                    isRadiusEnable,
                    mUnit,
                    screen_flow[0].app_type,
                    user_type_check,user_type_id,
                    need_agent,
                    where_clause,current_date,req.body.languageId,variant_ids,
                    supplier_ids,brand_ids,sort_by_query,is_sub_category,is_variant,is_product,
                    is_availability,discount,is_supplier,is_brands,max_price_range,
                    min_price_range,product_name,user_id,latitude,longitude,
                    req.body.subCategoryId,
                    enable_food_varients,
                    enable_zone_geofence,
                    supplierBranchId,zipcodeQuery)
            }

            if(req.dbName == "vubzi_0618"){

                query = query.replace(  "and   price.price !=0", "");
            }

            if(req.dbName == "etiamm_0874"){
                query = query.replace(  "join product_image pimage", " left JOIN product_image pimage");

                query = query.replace(  "and ( pimage.imageOrder =1)", "");
            }
            
            
            var queryResult=await ExecuteQ.Query(req.dbName,query,[]);
            
            var afterModifResult=await modifyResult(queryResult,day_diff,hour_diff,screen_flow);
            //Only for Rental case 5
            if(screen_flow && screen_flow.length>0 &&  screen_flow[0].app_type==5){
                not_avail_ids=booked_ids.concat(afterModifResult.not_available_ids);
            }
            else{
                not_avail_ids=[]
                booked_ids=[]
                afterModifResult.not_available_ids=[]
            }
            let productLists=await filteList(not_avail_ids,afterModifResult.result);
            let final_products=await filterWithLoyality(req,user_data,productLists);

            var productCount=await totalProductCount(req.dbName,query,booked_ids,afterModifResult.not_available_ids,not_avail_ids);    

            console.log("========final_products=======final_products=====",final_products)

            // let finalProd = await getProductVariants(req.dbName,final_products);

            console.log("========productCount=======productCount=22222222222222====")
            let suppliersTimmings = [];
             const settingDataKeys = await func.getSettingDataKeyAndValue(req.dbName, ['sendSupplierDataInProductFilterationApi']);
            settingDataKeys.keyAndValue.sendSupplierDataInProductFilterationApi = !!settingDataKeys.keyAndValue.sendSupplierDataInProductFilterationApi;

            if(final_products && settingDataKeys.keyAndValue.sendSupplierDataInProductFilterationApi === true && final_products.length>0 ){
                // console.log('==============",)
                const uniqSupplierIds = final_products.map((rec)=> rec.supplier_branch_id ); 

                console.log("=======uniqSupplierIds======",uniqSupplierIds);
                
                if(uniqSupplierIds && uniqSupplierIds.length>0){
                    let suppliersTimmingsData = await Execute.Query(req.dbName,
                    `select st.is_open,st.week_id,st.start_time,st.end_time,st.supplier_id from supplier_timings st
                    join supplier_branch sb on sb.supplier_id = st.supplier_id
                    where sb.id IN(${uniqSupplierIds.join(",")})`,[]);
                
                    if(suppliersTimmingsData && suppliersTimmingsData.length>0){
                        let groupingSupplierData = _.groupBy(suppliersTimmingsData,"supplier_id");
              
                        for(key in groupingSupplierData){
                            let tempObj = {
                                supplierId : key,
                                supplierTimmings : groupingSupplierData[key]
                            }
                            suppliersTimmings.push(tempObj)
                           // console.log("----------",final[key])
                        }
                    }
                }
            }

            var service_type =await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);

           final_products.app_type= service_type[0].app_type
                if(supplier_branch_id && supplier_branch_id!=undefined && supplier_branch_id!=null)
                {
                    final_products = final_products.filter(item => item.supplier_branch_id == supplier_branch_id)
                }

            const response = {product:final_products,count:productCount,suppliersTimmings:suppliersTimmings};

            

        //    if(settingDataKeys.keyAndValue.sendSupplierDataInProductFilterationApi === true){
        //     const supplierIds = final_products.map((rec)=> rec.supplier_id);            
        //     // supplier_data = await homeController.supplierResponseSameResponse(req,supplierIds,req.body.languageId,req.dbName)
        //     let final_supplier_data=await homeController.SupplierWithTimingV1(req.dbName,supplierIds);

        //     response.supplier = final_supplier_data;
        //    }


     
            sendResponse.sendSuccessData(response, constant.responseMessage.SUCCESS, res, 200);
        }
        catch(Err){
            logger.debug("==ER!==",Err)
            return sendResponse.sendErrorMessage(Err,res,400);
        }
    })
}





/**
 * @description used for filter every product with loyality discount
 */
const filterWithLoyality=(req,user_data,productList)=>{
    return new Promise(async (resolve,reject)=>{
     let productData=productList;
     let userLoyalityLevleIds=[]
     let loyalityLevelDiscountAmount=0
     let perProductLoyalityDiscount=0

     if(user_data && user_data.length>0){
    
    let loyalitPointDiscountAmount=0;
    let loyalityLevelData=await Universal.getUserLoyalityLevelData(req.dbName,user_data[0].id);
     loyalitPointDiscountAmount=parseFloat(user_data[0].total_loyality_amount)-parseFloat(user_data[0].used_loyality_amount);
    
    let loyalityLevelCateData=[]
    if(loyalityLevelData && loyalityLevelData.length>0){
        for await( const[index,i] of loyalityLevelData.entries()){
            userLoyalityLevleIds.push(i.id)
        }
        loyalityLevelCateData=await ExecuteQ.Query(req.dbName,`select id,discount_price,price_type,category_id,supplier_id from loyality_level_category_assignment where loyality_level_id IN (?)`,[userLoyalityLevleIds]);
    }
     
    // logger.debug("=====productData==>",productData)
    if(loyalityLevelCateData && loyalityLevelCateData.length>0){
        for await(const [ind,j] of loyalityLevelCateData.entries()){
            perProductLoyalityDiscount=0;

            if(productData && productData.length>0){

                for await (const [index,i] of productList.entries()){
                    
                    if(parseInt(j.category_id)==parseInt(i.parent_category_id) && parseInt(j.supplier_id)==i.supplier_id){
                        
                        if(j.price_type==1){
                            perProductLoyalityDiscount=parseFloat(i.price)*parseFloat(j.discount_price)/100
                        }
                        else{
                            perProductLoyalityDiscount=parseFloat(j.discount_price)
                        }
                    
                        loyalityLevelDiscountAmount=loyalityLevelDiscountAmount+perProductLoyalityDiscount
                        logger.debug("==perProductLoyalityDiscount==loyalityLevelDiscountAmount=>>",perProductLoyalityDiscount,loyalityLevelDiscountAmount)
                        productData[index].perProductLoyalityDiscount=perProductLoyalityDiscount
                    }
                }
            }
        }
    }
    }
    resolve(productData)
})

}
const modifyResult=(result,required_day,required_hour,screen_flow)=>{
    logger.debug("===ScreenFlow:=>",screen_flow);
    return new Promise((resolve,reject)=>{
        var adds_on_ar=[],adds_on,final_json={},price_varies,available_flag=false,not_available_id=[];
        if(result && result.length>0){

            for(var i = 0; i< result.length;i++){

                    adds_on=_.groupBy(JSON.parse(result[i].adds_on),"name");

                    _.each(adds_on,function(value,key,object){
                            final_json.name=key
                            final_json.value=value
                            adds_on_ar.push(final_json);
                            final_json={}                                
                    })
                    result[i].adds_on=adds_on_ar;
                    result[i].perProductLoyalityDiscount=0;
                    result[i].required_day=required_day;
                    result[i].required_hour=required_hour;
                    logger.debug("= result[i].adds_on=adds_on_ar=IsArray=AdsOnArray", result[i].adds_on,adds_on_ar,Array.isArray(result[i].adds_on),Array.isArray(adds_on_ar))                    
                    adds_on_ar=[];
                    if(result[i].pricing_type == 1){
                        result[i].hourly_price =JSON.parse(result[i].price);
                        // if(screen_flow && screen_flow.length>0 && screen_flow[0].app_type==5)
                        // {
                            result[i].price_type=1;
                            price_varies = result[i].hourly_price
                            // logger.debug("======PRICE_VARIES==",price_varies);
                            if(price_varies && price_varies.length>0){
                                // [{"min_hour":"1","max_hour":"1","price_per_hour":"300"},
                                // {"min_hour":"2","max_hour":"2","price_per_hour":"300"}
                                // {"min_hour":"3","max_hour":"180","price_per_hour":"300"}]
                                _.each(price_varies,function(j){
                                    logger.debug("==:required_hour=:required_day:=min_hour:=:max_hour=",required_hour,required_day,j.min_hour,j.max_hour);
                                  if(required_day>=1){
                                        if(required_day==j.min_hour && required_day==j.max_hour){
                                            available_flag=true
                                        }
                                    }
                                    else{
                                        if(required_hour==j.min_hour/60 && required_hour==j.max_hour/60){
                                            available_flag=true
                                        }
                                    }
                                })
                                if(available_flag==false){
                                    not_available_id.push(result[i].product_id)
                                    // result.splice(i,1)
                                }
                                available_flag=false;
                            }                                          
                        // }

                        
                        
                    }else{
                        result[i].price_type=0;                           
                        delete result[i].hourly_price;
                    } 
                 
                    if(i==result.length-1 || result.length<=0){
                        resolve({result:result,not_available_ids:not_available_id});
                    }                    
        }
    }
    else{
        resolve([])
    }
})
}

const totalProductCount=(dbName,sql,booked_ids,not_available_ids,booked_product_ids)=>{
    return new Promise(async (resolve,reject)=>{
            // var count_query=sql.replace(/\GROUP BY product_id,sku/gi, " ");
            // var md_count_query=count_query.replace(/\p.is_product/gi, "count( distinct p.id) as total_product,p.is_product");
            logger.debug("======sql==>>",sql)
            var final_count_query=sql.includes("DESC")==true?sql.split('DESC')[0]:sql.split('ASC')[0];
            final_count_query=final_count_query+") as temp " 
            final_count_query=final_count_query.replace("p.avg_rating","COUNT(DISTINCT p.id) as totalProductCount, p.avg_rating")
            final_count_query=final_count_query.replace("GROUP BY product_id,sku","")
            if((booked_ids && booked_ids.length>0) || (not_available_ids && not_available_ids.length>0)){
                // var booked_product_ids=booked_ids.concat(not_available_ids);
                logger.debug("=booked_product_ids=====booked_ids===not_available_ids=",booked_product_ids,booked_ids,not_available_ids);
                // if(booked_product_ids.length>1){
                //     booked_product_ids=booked_product_ids[0]
                // }
                var md_count_query=final_count_query.replace(/\and p.parent_id=0/gi, "and p.parent_id=0 and p.id NOT IN ("+booked_product_ids.join(",")+")");
                final_count_query=md_count_query.split('limit')[0]
            }
            logger.debug("===final_count_query==>",final_count_query);
            var countQueryData=await  ExecuteQ.Query(dbName,final_count_query,[]);
            let totalCountProduct=countQueryData && countQueryData.length>0?countQueryData[0].totalProductCount:0
            logger.debug("==count=>>",countQueryData.length);
            resolve(totalCountProduct)
 
    })
}



var  getProductsList = function(dbName,res,product_ids,user_type_check,user_type_id){
    return new Promise(async(resolve,reject)=>{
        let result;
        let m_data;
        let user_type_condition = " "
        let user_type_condition_two = ""
        if(user_type_check && user_type_check.length>0){
            user_type_condition = " and pp.user_type_id = "+ user_type_id+ " "
            user_type_condition_two = " and pc.user_type_id= "+user_type_id+" "
        }

        console.log("=======================list=========",product_ids)

        
           var day = moment().isoWeekday();
           day=day-1; var day = moment().isoWeekday();
           day=day-1;

            var sql = "select pp.user_type_id,IF((select count(*)  from questions where questions.category_id =p.category_id or questions.category_id =p.sub_category_id or questions.category_id =p.detailed_sub_category_id ) > 0,1,0 ) as is_question,sbp.category_id as parent_category_id,s.distance_value,s.is_scheduled,s.delivery_max_time,s.delivery_min_time,s.id as supplier_id,s.name as supplier_name,s.self_pickup,s.delivery_charge_tax,s.delivery_charge_tax_type,s.latitude, s.longitude, s.radius_price, pp.id as price_id, (select CONCAT('[', GROUP_CONCAT( JSON_OBJECT( 'week_id', week_id, 'start_time', start_time,'end_time',end_time,'is_open',is_open,'close_week_id',close_week_id ) ), ']') from supplier_timings st where st.supplier_id=s.id) as supplier_timings, ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,if(pp.display_price=pp.price,0,1) AS discount,pi.image_path,p.id as product_id,p.name as product_name,p.product_desc,p.category_id,p.quantity,p.purchase_limit,p.purchased_quantity,"
                sql += " s.commission,p.tax_exempt, p.cart_image_upload, c.is_liquor, IF(EXISTS(select id from supplier_timings st where st.is_open = 1 and st.supplier_id=s.id and st.week_id = "+day+") , 1, 0) as is_open,s.vat_value,s.offerValue,s.is_vat_applicable, s.table_booking_discount, s.is_free_delivery,p.is_appointment, s.is_user_service_charge_flat, s.base_delivery_charges,s.user_service_charge, s.is_user_service_charge_flat,s.is_own_delivery,p.duration,p.avg_rating,p.is_product,p.created_at,p.price_unit,"
                sql +="pp.pricing_type,pp.delivery_charges,pp.handling as handling_admin,pp.handling_supplier,pp.price_type,pp.actual_price,pp.price,pp.tax_type,pp.tax_value,pp.price as fixed_price,pp.display_price as display_price,pp.gst_price as gst_price from product_pricing pp join ";
                sql += "product p on pp.product_id = p.id and pp.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=p.id and pc.is_deleted=0 "+user_type_condition_two+" having counter>1) , 1, 0) join product_image pi on p.id=pi.product_id join supplier_branch_product sbp on p.id = sbp.product_id join supplier_branch sb on sb.id = sbp.supplier_branch_id join  supplier s on s.id = sb.supplier_id  join categories c on  sbp.category_id = c.id   where p.id IN (?) and  (pi.imageOrder =1) and pp.is_deleted=0 "+user_type_condition+" and p.is_deleted=0 group by price_id"
                try{
                     result = await  ExecuteQ.Query(dbName,sql,[product_ids])
                     if(result.length){
                        if(result && result.length>0){

                            m_data=await modifyResult(result,0,0,0)
                        }
                        // logger.debug("===Menu List Data==",product_data);
                        resolve(m_data)
                    }else{
                        resolve({})
                    }
                }catch(err){
                    logger.debug("=======err in get product list=---==========",err)
                    reject(err)
                }
    })
}




const checkProductList = async (req,res)=>{
    var product_ids = req.body.product_ids;
    var offset = req.body.offset ? req.body.offset : '05:30'
    let productList = [],userId=0,referalAmount=0;
    let region_delivery = 0;

    try{
        var user_id = 0;
        if(req.headers.authorization!==undefined){
            user_id = await GetUserId2(req.headers.authorization,req.dbName)
        }
        let user_type_check = await  Universal.getUserPriceType(req.dbName);
        
        let userDetails = await ExecuteQ.Query(req.dbName,"select * from user where id = ?",[user_id])
        let user_type_id  = 0
        if(userDetails && userDetails.length>0){
            user_type_id = userDetails[0].user_type_id
        }
        if(user_type_id==undefined || user_type_id=="" || user_type_id==null || user_type_id==0){
          let user_type_details = await ExecuteQ.Query(req.dbName,"select * from user_types limit 1",[]);
          logger.debug("============user_type_details------",user_type_details)            
          if(user_type_details && user_type_details.length>0){
              user_type_id = user_type_details[0].id
          }else{
              user_type_id = 0
          }
      } 
      if(product_ids){
        productList = await getProductsList(req.dbName,res,product_ids,user_type_check,user_type_id);
        var user_data=await ExecuteQ.Query(req.dbName,`select id from user where access_token = ?`,[req.headers.authorization]);
        if(user_data && user_data.length>0){
            userId=user_data[0].id;
            referalAmount=await Universal.getUserLeftReferralAmount(req.dbName,userId);
        }
        let tips = await getTipsDetails(req.dbName)
        productList.tips = tips
        productList.referralAmount=referalAmount;
        // supplier_product_ids
        let latitude = req.body.latitude==undefined?0:req.body.latitude
        let longitude = req.body.longitude==undefined?0:req.body.longitude


        logger.debug("-=============proudct list---------",productList.result,tips)
       


        let gateway_user_query = "select payment_gateways from user_types where id=? "
        let user_type_gateways = await ExecuteQ.Query(req.dbName,gateway_user_query,[user_type_id])

        let paymentGateways = await Universal.checkLocationPaymentGateway(req.dbName,latitude,longitude)
        if(paymentGateways && paymentGateways.length>0){
            productList.payment_gateways = paymentGateways[0].payment_gateways
        }else{
            productList.payment_gateways = user_type_gateways[0].payment_gateways
        }
        logger.debug("+=========productList.payment_gateways-======",productList.payment_gateways)
        if(productList.payment_gateways!==null){
            if(productList.payment_gateways && productList.payment_gateways.length>0 ){
                productList.payment_gateways = productList.payment_gateways.split("#")
            }
        }else{
            productList.payment_gateways = []
        }

        if(productList.result && productList.result.length>0){
            for(const [index,i] of productList.result.entries()){
                let area_wise_result = await Universal.checkLocationwiseTaxAndpaymentGateway(req.dbName,i.supplier_id,latitude,longitude)
                logger.debug("=========area_wise_reslt ========",area_wise_result)                    
                if(area_wise_result && area_wise_result.length>0){
                    i.handling_admin = area_wise_result[0].tax
                    i.payment_gateways = area_wise_result[0].payment_gateways
                    i.delivery_charges = area_wise_result[0].delivery_charges
                    region_delivery = area_wise_result[0].delivery_charges
                }                    
            }
        }
     }
         else{
            productList = {}
         }  
         productList.region_delivery_charge = region_delivery
         sendResponse.sendSuccessData(productList, constant.responseMessage.SUCCESS, res,200);

    }catch(err){
        logger.debug("==ER!==",err)
        return sendResponse.sendErrorMessage(err,res,400);
    
    }
    
        
}


const checkProductListV1 = async (req,res)=>{


    var product_ids = req.body.product_ids;
    var offset = req.body.offset ? req.body.offset : '05:30'
    let productList = [],userId=0,referalAmount=0;
    let userLoyalityLevleIds=[],loyalitPointDiscountAmount=0,
                    loyalityLevelDiscountAmount=0,
                    perProductLoyalityDiscount=0
    let region_delivery = 0;
    let min_order_distance_wise = [];
    let latitude = req.body.latitude==undefined?0:req.body.latitude
    let longitude = req.body.longitude==undefined?0:req.body.longitude
    
    let vehicle_cat_id = req.body.vehicle_cat_id || 0;

    let supplier_delivery_types = []
    let order_type_wise_gateways = []
    let is_dine_in=0;
    let supplier_weight_wise_delivery_charge = []
    let loyalty_points  = 0;
    try{
        let supplierIds = []
        var user_id = 0;
        if(req.headers.authorization!==undefined){
            user_id = await GetUserId2(req.headers.authorization,req.dbName)
        }
        let admin_customized_commission=await Universal.getKeysValue(["is_customized_commision_enable"],req.dbName);
        let admin_customized_commission_data=await Universal.adminCustomizedCommission(req.dbName,admin_customized_commission);
        
        let user_type_check = await  Universal.getUserPriceType(req.dbName);

        let weightCheckData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["is_product_weight","1"]);

        let enable_base_delivery_charge_on_vehicle_cat=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["enable_base_delivery_charge_on_vehicle_cat","1"])
       
        let totalOrderWeight=0,totalProductsWeight=0;
        
        let userDetails = await ExecuteQ.Query(req.dbName,"select * from user where id = ?",[user_id])
        let user_type_id  = 0;

        if(userDetails && userDetails.length>0){
            user_type_id = userDetails[0].user_type_id;
           
        }

        if(user_type_id==undefined || user_type_id=="" || user_type_id==null || user_type_id==0){
          let user_type_details = await ExecuteQ.Query(req.dbName,"select * from user_types limit 1",[]);
          logger.debug("============user_type_details------",user_type_details)            
          if(user_type_details && user_type_details.length>0){
              user_type_id = user_type_details[0].id
          }else{
              user_type_id = 0
          }
      } 

      if(product_ids){

        
        productList = await getProductsList(req.dbName,res,product_ids,user_type_check,user_type_id);
        
        var user_data=await ExecuteQ.Query(req.dbName,`select total_loyality_amount,used_loyality_amount,id,loyalty_points from user where access_token = ?`,[req.headers.authorization]);
       
        if(user_data && user_data.length>0){
            loyalty_points = user_data[0].loyalty_points
            userId=user_data[0].id;
            referalAmount=await Universal.getUserLeftReferralAmount(req.dbName,userId);

            let isLoyalityPointEnable=await ExecuteQ.Query(req.dbName,
                "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
                ["is_loyality_enable","1"]);

            if(isLoyalityPointEnable && isLoyalityPointEnable.length>0){

                    

                    let loyalityLevelData=await Universal.getUserLoyalityLevelData(req.dbName,user_data[0].id);
                    loyalitPointDiscountAmount=parseFloat(user_data[0].total_loyality_amount)-parseFloat(user_data[0].used_loyality_amount);
                    
                    let loyalityLevelCateData=[]
                    if(loyalityLevelData && loyalityLevelData.length>0){
                        for await( const[index,i] of loyalityLevelData.entries()){
                            userLoyalityLevleIds.push(i.id)
                        }
                        loyalityLevelCateData=await ExecuteQ.Query(req.dbName,`select id,discount_price,price_type,category_id,supplier_id from loyality_level_category_assignment where loyality_level_id IN (?)`,[userLoyalityLevleIds]);
                    }
                   
                     let productData=productList.result;
                    logger.debug("=====productData==>",productData)
                    if(loyalityLevelCateData && loyalityLevelCateData.length>0){

                        for await(const [ind,j] of loyalityLevelCateData.entries()){
                            perProductLoyalityDiscount=0;
                            if(productData && productData.length>0){

                                for await (const [index,i] of productData.entries()){
                                    
                                    if(parseInt(j.category_id)==parseInt(i.parent_category_id) && parseInt(j.supplier_id)==i.supplier_id){
                                        
                                        if(j.price_type==1){
                                            perProductLoyalityDiscount=parseFloat(i.price)*parseFloat(j.discount_price)/100
                                        }
                                        else{
                                            perProductLoyalityDiscount=parseFloat(j.discount_price)
                                        }
                                    
                                        loyalityLevelDiscountAmount=loyalityLevelDiscountAmount+perProductLoyalityDiscount
                                        logger.debug("==perProductLoyalityDiscount==loyalityLevelDiscountAmount=>>",perProductLoyalityDiscount,loyalityLevelDiscountAmount)
                                        productData[index].perProductLoyalityDiscount=perProductLoyalityDiscount
                                    }
                                }
                            }
                        }
                    }
                    productList.result=productData
                    // if(productList && productList.length>0){
                    //     for await( const [index,i] of productList.entries()){

                    //     }
                    // }

            }
        }
        let tips = await getTipsDetails(req.dbName)
        productList.tips = tips
        productList.referralAmount=referalAmount;
        productList.loyalityLevelDiscountAmount=loyalityLevelDiscountAmount
        productList.loyalitPointDiscountAmount=loyalitPointDiscountAmount;
        // supplier_product_ids
        productList.loyalty_points = loyalty_points;
        logger.debug("-=============proudct list---------",productList.result,tips);
        let gateway_user_query = "select payment_gateways from user_types where id=? "
        let user_type_gateways = await ExecuteQ.Query(req.dbName,gateway_user_query,[user_type_id]);
        let paymentGateways = await Universal.checkLocationPaymentGateway(req.dbName,latitude,longitude)
        if(paymentGateways && paymentGateways.length>0){
            productList.payment_gateways = paymentGateways[0].payment_gateways
        }else{
            productList.payment_gateways = user_type_gateways && user_type_gateways.length>0?user_type_gateways[0].payment_gateways:null
        }
        logger.debug("+=========productList.payment_gateways-======",productList.payment_gateways)
        if(productList.payment_gateways!==null){
            if(productList.payment_gateways && productList.payment_gateways.length>0 ){
                productList.payment_gateways = productList.payment_gateways.split("#")
            }
        }else{
            productList.payment_gateways = []
        }
        let isUserSubscriptionEnabled = await Universal.isUserSubscriptionEnabled(req.dbName);
        var current_datetime = moment().utcOffset(offset).format('YYYY-MM-DD HH:mm:ss');
        if(isUserSubscriptionEnabled=="1"){
            let userSubscription = await ExecuteQ.Query(req.dbName,"select us.id,us.start_date,us.end_date,us.subscription_plan_id, usp.*, uspb.benefit_id,usb.title as benefit_title, usb.description as benefit_description, usb.benefit_id as benefit_unique_id, usb.benefit_type from user_subscription us join user_subscription_plans usp on us.subscription_plan_id=usp.id join user_subscription_plan_benefits uspb on us.subscription_plan_id=uspb.plan_id join user_subscription_benefits usb on uspb.benefit_id=usb.id where user_id=? and status='1' and is_deleted='0' and is_cancelled='0' and ('"+current_datetime+"' > start_date and '"+current_datetime+"' < end_date) and usp.is_blocked='0'",[user_id]);
            if(userSubscription[0]){       
                console.log("11111111111111111111111")    
                var benefits = [];
                for(var i = 0; i< userSubscription.length; i++){
                    benefits.push({
                        benefit_id:userSubscription[i].benefit_id,
                        benefit_type:userSubscription[i].benefit_type,
                        benefit_title:userSubscription[i].benefit_title,
                        benefit_description:userSubscription[i].benefit_description,
                        benefit_unique_id:userSubscription[i].benefit_unique_id
                    })
                }
                
                productList.userSubscriptionData = {
                    title :userSubscription[0].title,
                    description :userSubscription[0].description,
                    start_date :userSubscription[0].start_date,
                    end_date :userSubscription[0].end_date,
                    min_order_amount:userSubscription[0].min_order_amount,
                    benefits:benefits
                }
                console.log("22222222222222222222222222222",productList)    
            }
        }
        console.log("3333333333333333333333333333333333")   
        let is_enabled_multiple_base_delivery_charges = await Universal.isEnabledMultipleBaseDeliveryCharges(req.dbName)
        
        
        let suppliers_delivery_companies = []

        if(productList.result && productList.result.length>0){
            for(const [index,i] of productList.result.entries()){
                supplierIds.push(i.supplier_id);

                supplier_weight_wise_delivery_charge = await Universal.getSupplierWeightWiseDeliveryCharge(req.dbName,i.supplier_id)
                supplier_delivery_types = await Universal.getSupplierDeliveryTypes(req.dbName,i.supplier_id);
                min_order_distance_wise = await Universal.getSupplierDistanceWiseMinOrder(req.dbName,i.supplier_id);
                order_type_wise_gateways = await Universal.getOrderTypeWisePaymentGateways(req.dbName,i.supplier_id)
                totalProductsWeight=totalProductsWeight+parseInt(i.duration)
                let area_wise_result = await Universal.checkLocationwiseTaxAndpaymentGateway(req.dbName,i.supplier_id,latitude,longitude)
                
                logger.debug("=========area_wise_reslt ========",area_wise_result)                    
                if(area_wise_result && area_wise_result.length>0){
                    i.handling_admin = area_wise_result[0].tax
                    i.payment_gateways = area_wise_result[0].payment_gateways
                    i.delivery_charges = area_wise_result[0].delivery_charges
                    region_delivery = area_wise_result[0].delivery_charges
                }
                let supplierDetails = await ExecuteQ.Query(req.dbName,
                    " select id,local_currency,currency_exchange_rate,is_dine_in,is_counter_self_service from supplier where id=? ",
                    [i.supplier_id]);
                    i.local_currency = supplierDetails[0].local_currency;
                    i.currency_exchange_rate=supplierDetails[0].currency_exchange_rate;     
                    is_dine_in=supplierDetails[0].is_dine_in;
                    productList.is_dine_in = supplierDetails[0].is_dine_in   
                    productList.is_counter_self_service = supplierDetails[0].is_counter_self_service          

                if (is_enabled_multiple_base_delivery_charges[0] && is_enabled_multiple_base_delivery_charges[0].value == "1") {
                    let base_delivery_charges_data = await ExecuteQ.Query(req.dbName, "select base_delivery_charges,distance_value from supplier_delivery_charges where supplier_id = ? ", [i.supplier_id])
                    if (base_delivery_charges_data && base_delivery_charges_data.length > 0) {
                        if (base_delivery_charges_data[0].base_delivery_charges == null && 
                            base_delivery_charges_data[0].distance_value == null) {
                            i.base_delivery_charges_array = [];

                        } else {
                            i.base_delivery_charges_array = base_delivery_charges_data;

                        }

                    }
                }
            }

        }
        // let totalOrderWeight=0;
        if(weightCheckData && weightCheckData.length>0){
            let totalWeightData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=?",["max_order_weight"]);
            if(totalWeightData && totalWeightData.length>0){
                totalOrderWeight=parseInt(totalWeightData[0].value)
            }
            logger.debug("===totalProductsWeight==totalOrderWeight==",totalProductsWeight,totalOrderWeight)
            if(totalProductsWeight>totalOrderWeight){
                return sendResponse.sendErrorMessage("order weight should be less than "+totalOrderWeight+"",res,400);
            }
        }
        }
      else{
            productList = {}
        }  
        productList.suppliers_delivery_companies = await Universal.getSupplierDeliveryCompanies(req.dbName,supplierIds)
        productList.supplier_timing = await getAllSupTiming(req.dbName,supplierIds);
        
         productList.is_own_delivery  = productList.result && productList.result.length>0?productList.result[0].is_own_delivery:"0"
         productList.order_type_wise_gateways=order_type_wise_gateways
         productList.supplier_delivery_types = supplier_delivery_types
         productList.supplier_weight_wise_delivery_charge = supplier_weight_wise_delivery_charge
         productList.min_order_distance_wise = min_order_distance_wise
         productList.region_delivery_charge = region_delivery
         productList.is_dine_in = is_dine_in
         productList.customized_commission_data=admin_customized_commission_data;

        if(enable_base_delivery_charge_on_vehicle_cat && enable_base_delivery_charge_on_vehicle_cat.length>0){
    

            let mUnit = await Universal.getMeausringUnit(req.dbName);
          
            logger.debug("===mUnit=====>>", mUnit);
            let apiKey = await Universal.getGoogleApiKey(req.dbName);
            
            // console.log(productList.result,"kaaaaaaaaaaaak")
            console.log(productList.result[0].latitude,"ksdkvcsdvbk")
            let matrixData = await Universal.getDistanceMatrix(latitude,longitude,productList.result[0].latitude,productList.result[0].longitude, apiKey);
            
            console.log("----------------",matrixData,"=========",productList.result[0]);
            
            let finaldistance = (matrixData.distanceValue) / 1000; 
            
            console.log("===mUnit=======mUnit====",mUnit)
            
            finaldistance = parseFloat(mUnit) == 3959 ? finaldistance * 0.621371 : finaldistance
            
            console.log("===mUnit==finaldistance=====mUnit====",finaldistance)

            finaldistance = parseFloat(finaldistance)

            let finalresult =  0; 
            
            let common = require('../../common/agent')
            
            let getAgentDbData=await common.GetAgentDbInformation(req.dbName); 
            let agentConnection=await common.RunTimeAgentConnection(getAgentDbData);
    
            finalresult =  await calculateAverageDeliveryCharge(agentConnection,finaldistance,vehicle_cat_id);
            
            productList.estimated_delivery_charge = finalresult;
            
            
   
        }

         
         sendResponse.sendSuccessData(productList, constant.responseMessage.SUCCESS, res,200);

    }catch(err){
        logger.debug("==ER!==",err)
        console.log("==ER!==",err)

        return sendResponse.sendErrorMessage(err,res,400);
    
    }
    
        
}

const calculateAverageDeliveryCharge = (dbName, distance, vehicle_cat_id=0 ) => {
    return new Promise(async (resolve, reject) => {
        try {
            let estimated_delivery_charge = 0;
            // let res1 = await ExecuteQ.QueryAgent(dbName,

            //      `SELECT AVG ( ALL base_delivery_charge )  as base_delivery_charge_average,
            //       AVG ( ALL delivery_charge_per_km ) as delivery_charge_per_km_average
            //       FROM cbl_user_categories`,

            //     [])

            let res1 = await ExecuteQ.QueryAgent(dbName,`SELECT  base_delivery_charge  as base_delivery_charge_average,
            delivery_charge_per_km as delivery_charge_per_km_average
            FROM cbl_user_categories where id=${vehicle_cat_id}`,[])

            estimated_delivery_charge = parseFloat(estimated_delivery_charge)
            res1[0].delivery_charge_per_km_average = parseFloat(res1[0].delivery_charge_per_km_average)
            res1[0].base_delivery_charge_average = parseFloat(res1[0].base_delivery_charge_average)
            estimated_delivery_charge = (res1[0].delivery_charge_per_km_average * distance) + res1[0].base_delivery_charge_average;

            resolve(estimated_delivery_charge)
        }
        catch (err) {
            logger.debug("============err======", err)
            reject()
        }
    })
}


const GetUserId2=(token,dbName)=>{

    return new Promise((resolve,reject)=>{
    
    if(token!=undefined && token!=""){
        var sql = " select id from user where access_token = ? ";
        multiConnection[dbName].query(sql, [token], function (err, result) {
            if(err) {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg,reply,500);
            }
            else{
                if(result.length){
                    id = result[0].id;
                    //logger.debug("ddddd",id,result);
                    resolve(id);
                }else{
                    resolve(0);
                }
            }
        })
    }
    else{
        resolve(0)
    }
    })

}

function getTipsDetails(dbName){
    return new Promise(async(resolve,reject)=>{
        try{
            let sql = "select * from agent_tips";
            let result = await ExecuteQ.Query(dbName,sql,[]);
            let tips = result.map(tip=>{
                return tip.price;
            })
            resolve(tips)
        }catch(err){
            logger.debug("==========errrr===========",err)
            // reject(err)
            resolve([])
        }
    })
}

const productByTagsName=async (req,res)=>{
    logger.debug("======",req.query)
    var zone_offset=req.query.zone_offset!=undefined && req.query.zone_offset!=="" && req.query.zone_offset!=null?req.query.zone_offset:"+05:30"
    let limit=parseInt(req.query.limit);
    let offset=parseInt(req.query.offset);
    let categoryId=req.query.categoryId!=undefined && req.query.categoryId!=""?req.query.categoryId:0
    let tags=req.query.tags;
    let radius_check_query,user_id=0;
    var user_sql = "select id from user where access_token = ? ";
    let sql,w_sql;
    var user_data=await ExecuteQ.Query(req.dbName,user_sql,[req.headers.authorization]);

    if(user_data && user_data.length>0){
        user_id=user_data[0].id
    }
    // having distance<=s.delivery_radius
    if(req.service_type==1 ){
        radius_check_query="having distance<=sbb.delivery_radius"
    }else{
        radius_check_query="having distance<=5000000"
    }

    let mUnit=await Universal.getMeausringUnit(req.dbName)
    var current_date =moment().utcOffset(zone_offset).format("YYYY-MM-DD");

    return new Promise(async (resolve,reject)=>{
    if(categoryId==0){
        sql ="select temp.*,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant from (select  p.category_id as categories_id,p.item_unavailable,p.sub_category_id,IF(EXISTS(select questions.id  from questions where questions.category_id =p.sub_category_id limit 1),1,0 ) as is_question,p.id as product_id,p.avg_rating,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1),1,0) as is_favourite, ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
        " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " p.quantity,p.purchased_quantity,"+        
        " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " bp.detailed_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,sbb.delivery_radius,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
        " where  c.is_live=1 and c.is_deleted=0  and p.is_live = 1"+
        " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+    
        " and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
        " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
        " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
        "  price.price !=0)) and pml.name like '"+tags+"%' GROUP BY product_id,sku "+radius_check_query+" limit "+limit+" offset "+offset+") as temp "

        sql ="select temp.*,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant from (select p.category_id as categories_id,p.item_unavailable,p.sub_category_id,IF(EXISTS(select questions.id  from questions where questions.category_id =p.sub_category_id limit 1),1,0 ) as is_question,p.id as product_id,p.avg_rating,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1),1,0) as is_favourite, ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
        " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
        " p.quantity,p.purchased_quantity,"+        
        " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
        " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
        " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
        " price.beauty_saloon_price,"+
        " bp.detailed_sub_category_id,"+
        " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
        " ,price.price,pimage.image_path,"+
        " pml.measuring_unit,sbb.delivery_radius,price.price_type  ,"+
        " price.price as fixed_price,price.price_type as price1"+
        " from"+
        " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
        " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
        " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
        "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
        " where  c.is_live=1 and c.is_deleted=0  and p.is_live = 1"+
        " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+    
        " and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
        " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
        " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
        "  price.price !=0)) and pml.name like '"+tags+"%' GROUP BY product_id,sku "+radius_check_query+") as temp"
    }
        else{
            sql ="select temp.*,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant from (select p.category_id as categories_id,p.item_unavailable,p.sub_category_id,IF(EXISTS(select questions.id  from questions where questions.category_id =p.sub_category_id limit 1 ),1,0 ) as is_question,p.id as product_id,p.avg_rating,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1),1,0) as is_favourite,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
            " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
            " p.quantity,p.purchased_quantity,"+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id"+ 
            " where  c.is_live=1 and  c.id="+categoryId+" and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+    
            " and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0)) and pml.name like '"+tags+"%' GROUP BY product_id,sku "+radius_check_query+" limit "+limit+" offset "+offset+" ) as temp"
    
            w_sql ="select temp.*,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant from (select p.category_id as categories_id,p.item_unavailable,p.sub_category_id,IF(EXISTS(select questions.id  from questions where questions.category_id =p.sub_category_id limit 1 ),1,0 ) as is_question,p.id as product_id,p.avg_rating,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1),1,0) as is_favourite,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,("+mUnit+" * acos (cos (radians("+req.query.latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+req.query.longitude+")) + sin (radians("+req.query.latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
            " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
            " p.quantity,p.purchased_quantity,"+
            " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
            " price.beauty_saloon_price,"+
            " bp.detailed_sub_category_id,"+
            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
            " ,price.price,pimage.image_path,"+
            " pml.measuring_unit,sbb.delivery_radius,price.price_type  ,"+
            " price.price as fixed_price,price.price_type as price1"+
            " from"+
            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
            " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 having counter>1) , 1, 0) "+
            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
            " where  c.is_live=1 and  c.id="+categoryId+" and c.is_deleted=0  and p.is_live = 1"+
            " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0  "+    
            " and pml.language_id = "+req.query.languageId+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+req.query.languageId+" and ("+
            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
            " and DATE(price.end_date) >= '"+current_date+"') or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
            "  price.price !=0)) and pml.name like '"+tags+"%' GROUP BY product_id,sku "+radius_check_query+") as temp"
            
        }
        var adds_on_ar=[],adds_on,final_json={};
        let result=await ExecuteQ.Query(req.dbName,sql,[]);
        let totalProductData=await ExecuteQ.Query(req.dbName,w_sql,[])
        if(result && result.length>0){
            for(var i = 0; i< result.length;i++){                   
                adds_on=_.groupBy(JSON.parse(result[i].adds_on),"name");
                _.each(adds_on,function(value,key,object){
                        final_json.name=key
                        final_json.value=value
                        adds_on_ar.push(final_json);
                        final_json={}                                
                })                  
                result[i].adds_on=adds_on_ar
                adds_on_ar=[];
                if(result[i].pricing_type == 1){                              
                       result[i].hourly_price =JSON.parse(result[i].hourly_price);                      
                        result[i].price_type=1;                           
                     
                }else{
                    result[i].price_type=0;                           
                    delete result[i].hourly_price;
                } 
                if(i==result.length-1){
                    sendResponse.sendSuccessData({"product":result,"count":totalProductData.length}, constant.responseMessage.SUCCESS, res, 200);
                }                                           
            }     
        }
        else{
            sendResponse.sendSuccessData({"product":result,"count":0}, constant.responseMessage.SUCCESS, res, 200);
        }
                
    })
    // sendResponse.sendSuccessData({"product":[],"count":0}, constant.responseMessage.SUCCESS, res, 200);


}
const supplierByProduct=async(req,res)=>{
    try{
        logger.debug("==req.query===",req.body)
        let productName=req.body.productName;
        let languageId=req.body.languageId;
        let longitude=req.body.longitude;
        let latitude=req.body.latitude;
        let categoryId=req.body.categoryId!=undefined && req.body.categoryId!=""?req.body.categoryId:0;
        let sql,supplierData;
        let mUnit=await Universal.getMeausringUnit(req.dbName);
        if(categoryId==0){
         sql=`select s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,
        s.status,s.payment_method,s.rating,s.total_reviews, sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,
        sml.address,("+mUnit+" * acos (cos (radians(?))* cos(radians(s.latitude))* cos(radians(s.longitude) - 
        radians(?)) + sin (radians(?)) * sin(radians(s.latitude)))) AS distance  from supplier s  
        join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id =  
        s.id join supplier_timings st  on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id 
        join supplier_branch_product sbp ON sbp.supplier_branch_id=sbb.id JOIN product p on p.id=sbp.original_product_id where  sml.language_id = ? and s.is_deleted = 0 
        and s.is_live = 1 and s.is_active = 1 and  sbb.is_live = 1 and sbb.is_deleted = 0 and p.name IN (?)  GROUP BY 
        s.id having distance<=delivery_radius order by s.id desc`
        supplierData=await ExecuteQ.Query(req.dbName,sql,[latitude,longitude,latitude,languageId,productName]);
        sendResponse.sendSuccessData({"supplier":supplierData}, constant.responseMessage.SUCCESS, res, 200);

       }
       else{
        sql=`select s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,
        s.status,s.payment_method,s.rating,s.total_reviews, sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,
        sml.address,("+mUnit+" * acos (cos (radians(?))* cos(radians(s.latitude))* cos(radians(s.longitude) - 
        radians(?)) + sin (radians(?)) * sin(radians(s.latitude)))) AS distance  from supplier s  
        join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id =  
        s.id join supplier_timings st  on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id 
        join supplier_branch_product sbp ON sbp.supplier_branch_id=sbb.id JOIN product p on p.id=sbp.original_product_id where  sml.language_id = ? and s.is_deleted = 0 
        and s.is_live = 1 and s.is_active = 1 and  sbb.is_live = 1 and sbb.is_deleted = 0 and p.name IN (?) and p.category_id=?  GROUP BY 
        s.id having distance<=delivery_radius order by s.id desc`
        supplierData=await ExecuteQ.Query(req.dbName,sql,[latitude,longitude,latitude,languageId,productName,categoryId]);
        sendResponse.sendSuccessData({"supplier":supplierData}, constant.responseMessage.SUCCESS, res, 200);
       }
     
    }
    catch(err){
        logger.debug("==ER!==",err);
        return sendResponse.sendErrorMessage(err,res,400);
    }

}
/**
 * @desc used for listing an recent viewed products
 * @param {*Object} req 
 * @param {*Object} res 
 */
const recentHistory=async(req,res)=>{
    try{
        logger.debug("==req.query===",req.body);
        let languageId=req.query.languageId || 14;
        let longitude=req.query.longitude || 0.0;
        let latitude=req.query.latitude || 0.0;
        let categoryId=req.query.categoryId!=undefined && req.query.categoryId!=""?req.query.categoryId:0;
        let recentData=await mostViewAndLikedProduct(req,res,languageId,
            req.dbName,categoryId,latitude,longitude);
       


       
       
       
        sendResponse.sendSuccessData({"recentActivity":recentData}, constant.responseMessage.SUCCESS, res, 200);
    }
    catch(err){
        logger.debug("==ER!==",err);
        return sendResponse.sendErrorMessage(err,res,400);
    }

}
async function mostViewAndLikedProduct(req,res,languageId,dbName,categoryId,latitude,longitude){
    // logger.debug("====getAllDefaultCatProduct=====");
    return new Promise(async (resolve,reject)=>{
            try{
                let planQuery="";
                let subScriptionData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["is_subscription_plan","1"])
                planQuery=subScriptionData && subScriptionData.length>0?"and ss.status='active'":""


                var zone_offset=req.body.offset!=undefined && req.body.offset!=="" && req.body.offset!=null?req.query.offset:"+05:30"
                var current_date =moment().utcOffset(zone_offset).format("YYYY-MM-DD")
                let sort_by_query="-tmp.fixed_price ASC,tmp.fixed_price ASC limit 100"; 
                let radius_check_query="";
                let user_type_condition_one = ""
                let user_type_condition_two = ""
                let user_type_check = await  Universal.getUserPriceType(dbName);
                logger.debug("====service_type=======check_user_type====",user_type_check)
                if(req.service_type==1 || req.service_type==2){
                    radius_check_query="having tmp.distance<=tmp.delivery_radius"
                    if(user_type_check && user_type_check.length>0){
                        user_type_condition_one = " and pc.user_type_id="+  +" "
                        user_type_condition_two = " and price.user_type_id="+user_type_id+" "
                    }
                }
                else{
                    radius_check_query="having tmp.distance<=5000000"
                }


                let hideOutOfStockProduct = await ExecuteQ.Query(dbName,
                    "select `key`, value from tbl_setting where `key`=? and value=1",["hide_out_of_stock_product"]);
                  let outOfStockCheck = "";
                  
                  if(hideOutOfStockProduct && hideOutOfStockProduct.length>0){
                  outOfStockCheck = "and p.quantity>p.purchased_quantity"
                  }


                let mUnit=await Universal.getMeausringUnit(dbName);
                var user_id=await GetUserId(req.headers.authorization,req.dbName);
                sql ="SELECT * from (select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id  or questions.category_id = temp.detailed_sub_category_id  limit 1),1,0 ) as is_question,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite from (select rvh.id as r_view_id, p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.id as product_id,p.avg_rating,0 as total_orders,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
                " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
                " p.quantity,p.purchased_quantity,"+
                " bp.category_id as parent_category_id,p.payment_after_confirmation,c.order_instructions,c.is_quantity,c.is_agent,c.agent_list,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                " price.beauty_saloon_price,"+
                " bp.detailed_sub_category_id,"+
                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                " ,price.price,pimage.image_path,"+
                " pml.measuring_unit,s.self_pickup,s.delivery_radius,price.price_type  ,"+
                " price.price as fixed_price,price.price_type as price1"+
                " from"+
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id  join recent_view_history rvh on rvh.product_id=p.id"+ 
                " where   rvh.user_id="+user_id+" and c.is_live=1 and c.is_deleted=0  and p.is_live = 1"+
                " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
                ""+planQuery+"and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
                " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                "  price.price !=0)) limit 50) as temp UNION ALL select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id  or questions.category_id = temp.detailed_sub_category_id  limit 1),1,0 ) as is_question,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id="+user_id+" and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite from (select  0 as r_view_id,p.category_id as categories_id,p.item_unavailable,p.sub_category_id,p.id as product_id,p.avg_rating,(select count(*) from order_prices join product prd on prd.id=order_prices.product_id where  order_prices.product_id=p.id) as total_orders,("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+"))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration,"+
                " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo,"+
                " p.quantity,p.purchased_quantity,"+
                " bp.category_id as parent_category_id,p.payment_after_confirmation,c.order_instructions,c.is_quantity,c.is_agent,c.agent_list,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name"+
                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id,"+
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,"+                            
                " price.beauty_saloon_price,"+
                " bp.detailed_sub_category_id,"+
                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc"+
                " ,price.price,pimage.image_path,"+
                " pml.measuring_unit,s.self_pickup,s.delivery_radius,price.price_type  ,"+
                " price.price as fixed_price,price.price_type as price1"+
                " from"+
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p"+
                " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = "+
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 "+user_type_condition_one+" having counter>1) , 1, 0) "+
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "+ 
                " where  c.is_live=1 and c.is_deleted=0  and p.is_live = 1"+
                " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 "+    
                ""+planQuery+" and pml.language_id = "+languageId+" "+outOfStockCheck+" and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= "+languageId+" and ("+
                " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '"+current_date+"' "+
                " and DATE(price.end_date) >= '"+current_date+"' "+user_type_condition_two+") or (price.price_type = 0 "+user_type_condition_two+")) and ((price.pricing_type=1) or(price.pricing_type=0 and "+
                "  price.price !=0)) limit 50) as temp) as t GROUP BY t.product_id,t.sku having t.distance<=t.delivery_radius order by t.r_view_id DESC,t.is_favourite DESC,t.total_orders DESC limit 50";
                let result=await ExecuteQ.Query(dbName,sql,[]);
                let modifyResult=await Universal.modifyProductResult(result,0,0,0)

                let enableCategoryGeofence = await ExecuteQ.Query(dbName,
                    "select `key`, value from tbl_setting where `key`=? and value='1'",
                    ["enable_geofence_wise_categories"])
                if(enableCategoryGeofence && enableCategoryGeofence.length>0){
                    let finalResult = [];
                    if(modifyResult && modifyResult.length>0){
                        for(const [index,i] of modifyResult.entries()){
                            let products = await Universal.checkLocationWiseCategories(req.dbName,
                                 latitude, longitude,i.parent_category_id)
                    
                                if (products && products.length > 0) {
                                    finalResult.push(i);
                                }
                        }
                        modifyResult = finalResult;
                    }
                }



                resolve(modifyResult);
            }
            catch(Err){
                logger.debug("===Err!=",Err)
                resolve([])
            }
    })
}

const getAllSupTiming=(dbName,supIds)=>{
   
    try{
        if(supIds){
            return Promise.all(supIds.map( async item => { 

                 var myArray =await  supplierData(dbName,item);
                
                  return Promise.resolve(myArray);
                     
                 } ));
            } else{
                resolve([]);
            }

    }catch(e){
        logger.debug("===========err=======",e)
        resolve([]);
    }

}


const supplierData = async (dbName, supId) => {  

    let sql = `select name from supplier where id = ?`;
    let supdata = await ExecuteQ.Query(dbName,sql,[supId]);
    var name = '';
    if(supdata && supdata.length>0){
        name = supdata[0].name;
    }

    let sql2 = `select supplier_id, week_id,start_time,end_time,is_open,close_week_id from supplier_timings where supplier_id = ?`;
    let data=await ExecuteQ.Query(dbName,sql2,[supId]);
    var dataSup = {};
    dataSup[supId] =  { "name": name,"data": data};
    return dataSup
}

module.exports={
    recentHistory:recentHistory,
    viewProductByUser:viewProductByUser,
    supplierByProduct:supplierByProduct,
    productByTagsName:productByTagsName,
    filterProductsV1:filterProductsV1,
    popularProduct:popularProduct,
    popularProductV1:popularProductV1,
    productAddsOn:productAddsOn,
    productAccToSupplier:productAccToSupplier,
    productAccToSupplierV1:productAccToSupplierV1,
    productAccToSupplierV2:productAccToSupplierV2,
    productAccToSupplierBranch:productAccToSupplierBranch,
    filterProducts:filterProducts,
    productVariantList:productVariantList,
    productFavUnFav:productFavUnFav,
    productFavList:productFavList,
    checkProductList:checkProductList,
    checkProductListV1:checkProductListV1,
    productAccToSupplierV2:productAccToSupplierV2,
    getAllSupTiming:getAllSupTiming
}