var async = require('async');
var sendResponse = require('./sendResponse');
var constant = require('./constant');
var func = require('./commonfunction');
var consts = require('./../config/const')
const lib = require('../lib/NotificationMgr')
const smsManager = require('../lib/smsManager')
var _ = require('underscore');
var something = "Something went wrong";
var moment = require('moment');
var pushNotifications = require('./pushNotifications');
var orderFunction = require('./orderFunction');
var AdminMail = "ops@royo.com";
const uploadMgr = require('../lib/UploadMgr')
var log4js = require('log4js');
const xml2js = require('xml2js');
var logger = log4js.getLogger();
var chunk = require('chunk');
// const { config } = require('process');
config = require('config')
logger.level = "debug";
var randomize = require('randomatic');
var request = require('request');
var crypto = require('crypto')
algorithm = consts.SERVER.CYPTO.ALGO,
    crypto_password = consts.SERVER.CYPTO.PWD
const runTimeDbConnection = require('./runTimeDbConnection')
const agent = require('../common/agent')
const paymentController = require('../controller/user/paymentController')
const Universal = require('../util/Universal')
const common = require('../common/agent')
var web_request = require('request');
//var AdminMail = "mohit.codebrew@gmail.com"
//var AdminMail = "pargat@code-brew.com"
const promoCntrl = require('../controller/user/promoController')
var emailTemp = require('./email');
const ExecuteQ = require('../lib/Execute')
var redis = require("redis");
var randomstring = require("randomstring");
const squareConnect = require('square-connect');
const Execute = require('../lib/Execute');

const accessToken = 'EAAAEB_t4xg_YkrKMPzMWvQiCcyUHP59ZEh9suLWk4B7AALJr8LSsIXeEVHiu2fX';

// Set Square Connect credentials and environment
const defaultClient = squareConnect.ApiClient.instance;

// Configure OAuth2 access token for authorization: oauth2
const oauth2 = defaultClient.authentications['oauth2'];
oauth2.accessToken = accessToken;

// Set 'basePath' to switch between sandbox env and production env
// sandbox: https://connect.squareupsandbox.com
// production: https://connect.squareup.com
// defaultClient.basePath = 'https://connect.squareupsandbox.com';
// logger.debug("=====COnfi",config.get("server.redis.host"))
var redisClient = redis.createClient({
    host: config.get("server.redis.host")
    // password: "redis@123"
});
var redisClient = redis.createClient();



var categoryRadisArray = 1;
var supplierRadisArray = 1;
var productRadisArray = 1;
var supplierDetailsRadis = 1;
var subCategoryDetailsRadis = 1;

/*var Memcacheds = require('elasticache-client');*/
//var memcachedClient = new Memcached('testing.hflmlj.cfg.usw2.cache.amazonaws.com:11211',{update_time: 1000*2, autodiscovery: true});


//console.log("......memcachedClient.........",memcachedClient);

/*memcachedClient.set('foo', 'bar', 10, function (err) { 
    console.log("............sfgbhbgfnfhngf");
});



memcachedClient.gets('foo', function (err, data) {
    
    console.log("............................err...........",data);
    /!*
    memcached.cas('foo', 'bar', data.cas, 10, function (err) {
        console.log(".........................................");
    } );*!/
});*/



/*var sms = require('sms-sending');*/
/*
 * ------------------------------------------------------
 * Get tab 1 information of supplier profile
 * Output: supplier tab 1 information
 * ------------------------------------------------------
 */

/*
redisClient.set("foo_rand000000000000", "OKdfhgdjhgfjghjghjghkjhkjgkmhjkjgk");

redisClient.get("foo_rand000000000000", function (err, reply) {
    console.log(reply.toString()); // Will print `OK`
});

*/

/*
redisClient.hmset("categoires", "22222", "ddsvfdsvg");*/
exports.getAllCategory = function (req, res) {

    var tempFlag = false;
    var countryID;
    var areaId;
    var accessToken;
    if (req.body.areaId) {
        areaId = req.body.areaId;
    } else {
        areaId = 0;
    }

    if (req.body.countryId) {
        countryID = req.body.countryId;
    } else {
        countryID = 1;
    }
    accessToken = req.body.accessToken;
    var categoryArray = {};
    var languageId = 0;
    var supplierEnglishList;
    var categoiesDataTemp = {};
    var supplierArabicList;
    var status_supplier = 0;
    var temp_data;
    var temp_data_arabic;
    //console.log("kbjsdf",req.body);
    if (req.headers.secretdbkey != undefined && req.headers.secretdbkey != "") {
        var decipher = crypto.createDecipher(algorithm, crgetScheduleOrders(ypto_password))
        var decDbName = decipher.update(req.headers.secretdbkey, 'hex', 'utf8')
        decDbName += decipher.final('utf8');
        console.log("==DB_NAME==", decDbName)
        dbConnection = multiConnection[decDbName]
    }
    else {
        dbConnection = connection
    }


    async.auto({
        getRedus: function (callback) {
            var sql = "select onOff,reset from cache "
            multiConnection[req.dbName].query(sql, [], function (err, result) {

                console.log("........err....gggggg..........result........", err, result);


                if (err) {
                    callback(err)
                }
                else {
                    result = result[0];
                    console.log(".***********parse**********************", parseInt(result.reset));
                    result.reset = parseInt(result.reset)
                    if (result.onOff == 1) {
                        tempFlag = false;
                        callback(null);
                    } else if (result.reset == 0) {

                        console.log("...........result.reset.................", result.reset);

                        redisClient.expire("categoires", 1);
                        redisClient.expire("supplierlist", 1);
                        redisClient.expire("supplierDetails", 1);
                        redisClient.expire("subCategories", 1);
                        redisClient.expire("productList", 1);
                        tempFlag = false;
                        var sql = "update cache set reset = ?  where 1";
                        multiConnection[req.dbName].query(sql, [1], function (err, result) {
                            console.log("......err......resultupdate.", err, result);
                            tempFlag = false;
                            callback(null);

                        })
                    } else {
                        redisClient.HGET("categoires", areaId, function (err, obj) {

                            console.dir(obj)
                            if (obj != null) {
                                console.log(".............in true........................");
                                categoiesDataTemp = obj;
                                tempFlag = true;
                                callback(null);
                            } else {
                                console.log(".............in false........................");
                                tempFlag = false;
                                callback(null);
                            }
                        });
                    }
                }

            })
        },

        getEnglishCategory: ['getRedus', function (callback) {

            if (tempFlag == false) {
                languageId = 14; /// set static language id
                categoryListing(req.dbName, res, languageId, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.english = result;
                        console.log("111");
                        callback(null, result);
                    }
                })
            } else {
                callback(null);
            }


        }],
        getCategory: ['getRedus', function (callback) {

            if (tempFlag == false) {
                languageId = 15; /// set static language id
                categoryListing(req.dbName, res, languageId, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.arabic = result;
                        console.log("222");
                        callback(null, result);
                    }
                })
            } else {
                callback(null)
            }


        }],
        getLanguage: ['getRedus', function (callback) {

            if (tempFlag == false) {
                languageLists(req.dbName, res, dbConnection, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.languageList = result;
                        console.log("333");
                        callback(null, result);
                    }
                })
            } else {
                callback(null);
            }


        }],

        top_banner: ['getRedus', function (callback) {

            if (tempFlag == false) {
                getFrontAd(req.dbName, res, areaId, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.topBanner = result
                        console.log("555");
                        callback(null)
                    }
                })
            } else {
                callback(null)
            }

        }],
        getEnglishOffer: ['getRedus', function (callback) {
            if (tempFlag == false) {
                getOffer(req.dbName, res, 14, areaId, user_id, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.offerEnglish = result;
                        console.log("666");
                        callback(null);
                    }
                })
            } else {
                callback(null);
            }

        }],
        getArabicOffer: ['getRedus', function (callback) {

            if (tempFlag == false) {
                getOffer(req.dbName, res, 15, areaId, user_id, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.offerArabic = result;
                        console.log("777");
                        callback(null);
                    }
                })
            } else {
                callback(null);
            }


        }],
        getArabicSupplier: ['getRedus', function (callback) {

            if (tempFlag == false) {
                getRecommended(0, req.dbName, res, 15, areaId, dbConnection, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        supplierArabicList = result;
                        categoryArray.SupplierInArabic = result;
                        console.log("8888");
                        callback(null);
                    }
                })
            } else {
                callback(null);
            }


        }],
        getEnglishSupplier: ['getRedus', function (callback) {
            if (tempFlag == false) {
                getRecommended(0, req.dbName, res, 14, areaId, dbConnection, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        supplierEnglishList = result;
                        categoryArray.SupplierInEnglish = result;
                        console.log("999");
                        callback(null);
                    }
                })
            } else {
                callback(null);
            }


        }],
        supplierArabicCategory: ['getRedus', 'getArabicSupplier', function (callback) {

            if (tempFlag == false) {
                var len = supplierArabicList.length;
                if (len == 0) {
                    console.log("00000");
                    callback(null);
                }
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        supplierCategory(req.dbName, res, supplierArabicList[i].id, 15, function (err, result) {
                            if (err) {
                                callback(err);
                            } else {
                                supplierArabicList[i].category = [];
                                var leng = result.length;
                                for (var j = 0; j < leng; j++) {
                                    (function (j) {
                                        supplierArabicList[i].category.push(result[j]);
                                    }(j));
                                }
                                //temp.push({supplier:supplierList[i],category:result});
                                if (i == (len - 1)) {
                                    categoryArray.SupplierInArabic = supplierArabicList;
                                    console.log("00000");
                                    callback(null);
                                }
                            }
                        })
                    }(i));
                }
            } else {
                callback(null);
            }



        }],
        supplierEnglishCategory: ['getRedus', 'getEnglishSupplier', function (callback) {

            if (tempFlag == false) {
                var len = supplierEnglishList.length;
                if (len == 0) {
                    console.log("1001001");
                    callback(null);
                }
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        supplierCategory(req.dbName, res, supplierEnglishList[i].id, 14, function (err, result) {
                            if (err) {
                                callback(err);
                            } else {
                                supplierEnglishList[i].category = [];
                                var leng = result.length;
                                for (var j = 0; j < leng; j++) {
                                    (function (j) {
                                        supplierEnglishList[i].category.push(result[j]);
                                    }(j));
                                }
                                //temp.push({supplier:supplierList[i],category:result});
                                if (i == (len - 1)) {
                                    categoryArray.SupplierInEnglish = supplierEnglishList;
                                    console.log("8989891");
                                    callback(null);
                                }
                            }
                        })
                    }(i));
                }
            } else {
                callback(null)
            }



        }],

    }, function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            if (tempFlag == true) {

                categoiesDataTemp = JSON.parse(categoiesDataTemp);


                if (categoryRadisArray == 0) {
                    console.log(".......categoryRadisArray.....", categoryRadisArray);
                    redisClient.expire("categoires", 5);
                    categoryRadisArray = 1;
                }
                console.log("**************cache**********************");
                sendResponse.sendSuccessData(categoiesDataTemp, constant.responseMessage.SUCCESS, res, 200);
            } else {
                categoryArray = JSON.stringify(categoryArray);
                categoryArray = JSON.parse(categoryArray);


                redisClient.hmset("categoires", areaId, JSON.stringify(categoryArray));


                console.log("**************live**********************");
                sendResponse.sendSuccessData(categoryArray, constant.responseMessage.SUCCESS, res, 200);
            }

        }
    })
}


exports.getAllCountry = function (req, res) {
    var data = {};
    // var languageId = req.body.languageId;
    async.auto({
        getEnglishCountry: function (callback) {
            countryLists(req.dbName, res, 14, function (err, result) {
                if (err) {
                    var msg = "db error :";
                    sendResponse.sendErrorMessage(msg, res, 500);
                } else {
                    data.englishList = result;
                    callback(null, result);
                }
            })
        },
        getArabicCountry: function (callback) {
            countryLists(req.dbName, res, 15, function (err, result) {
                if (err) {
                    var msg = "db error :";
                    sendResponse.sendErrorMessage(msg, res, 500);
                } else {
                    data.arabicList = result;
                    callback(null, result);
                }
            })
        }
    }, function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}


const getUrwayKeys = (dbName) => {
    let key_object = {};
    return new Promise(async (resolve, reject) => {
        try {
            logger.debug("=========dbName======2======", dbName)

            let data = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=? or `key`=? or `key`=?", [
                "urway_user",
                "urway_password",
                "urway_merchent_key"
            ])
            logger.debug("=--------data---------", data)

            if (data && data.length > 0) {
                for (const [index, i] of data.entries()) {
                    key_object[i.key] = i.value
                }
                resolve(key_object)
            }
            else {
                resolve(key_object)
            }
        }
        catch (e) {
            resolve({})
        }
    })
}


const createPaymentFunction = async (dbName, paymentToken, customerId, basic_auth, amount, currency) => {
    let header = {
        Authorization: `Basic ${basic_auth}`,
        'Content-Type': `application/json`
    };

    let Obj = {

        "totalAmount": {
            "amount": amount,
            "currency": currency
        }



    };

    //  let baseURL = (process.env.NODE_ENV == 'prod') ? 'https://pg.paymaya.com' : 'https://pg-sandbox.paymaya.com'; 
    let baseURL = 'https://pg-sandbox.paymaya.com';
    console.log("==paymaya==baseURL====>>", baseURL)
    console.log("==payulatam==baseURL====>>", baseURL)
    let options = {
        method: 'POST',
        url: `${baseURL}/payments/v1/customers/${customerId}/cards/${paymentToken}/payments`,
        body: Obj,
        headers: header,
        json: true
    };

    let result = await requestApi(options);
    return result;
}

exports.getCity = function (req, res) {
    var data = {};
    var countryId = 0;
    var languageId = 0;
    async.auto({
        getCountryId: function (callback) {

            if (!(req.body.countryId)) {
                var msg = "country id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }

            if (req && req.body.countryId) {
                countryId = req.body.countryId;
                // languageId = req.body.languageId;
                callback();
            } else {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        },
        getEnglishCity: ['getCountryId', function (callback) {
            cityLists(req.dbName, res, countryId, 14, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    if (result.length) {
                        data.englistList = result;
                    }
                    callback(null, result);
                }
            })
        }],
        getArabicCity: ['getCountryId', function (callback) {
            cityLists(req.dbName, res, countryId, 15, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    if (result.length) {
                        data.arabicList = result;
                    }
                    callback(null, result);
                }
            })
        }],
        countryData: ['getCountryId', function (callback) {
            currencyAccCountry(req.dbName, res, countryId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    if (result.length) {
                        data.currency_name = result[0].currency_name;
                        data.currency_symbol = result[0].currency_symbol;
                        data.currency_id = result[0].id;
                    } else {
                        data.currency_name = "AED";
                        data.currency_symbol = "AED";
                        data.currency_id = 1;
                    }
                    callback(null);
                }
            })
        }]


    }, function (err, result) {
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}

exports.getArea = function (req, res) {
    var data = {};
    var cityIds = 0;
    var languageId = 0;
    var accessToken = 0;
    var zoneId = [];
    if (req.headers.secretdbkey != undefined && req.headers.secretdbkey != "") {
        var decipher = crypto.createDecipher(algorithm, crypto_password)
        var decDbName = decipher.update(req.headers.secretdbkey, 'hex', 'utf8')
        decDbName += decipher.final('utf8');
        console.log("==DB_NAME==", decDbName)
        dbConnection = multiConnection[decDbName]
    }
    else {
        dbConnection = connection
    }
    async.auto({
        getCityIds: function (callback) {
            if (!(req.body.zoneId)) {
                var msg = "zone id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }

            /* if(!(req.body.languageId)){
                 var msg = "langauge id not found";
                 return sendResponse.sendErrorMessage(msg,res,400);
             }
 */
            if (req && req.body.zoneId) {
                // console.log("kbhcdjhbds",req.body.zoneId,req.body.languageId);
                cityIds = req.body.zoneId;
                accessToken = req.body.accessToken;
                callback();
            } else {
                var msg = "something went wrong ";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        },
        getZoneIds: ['getCityIds', function (callback) {
            var sql = "select zo.id from zone zo where zo.is_live = ? and zo.is_deleted = ? and zo.city_id IN(" + cityIds + ")";
            // console.log("ssss",sql);
            multiConnection[req.dbName].query(sql, [1, 0], function (err, result) {
                if (err) {
                    var msg = "something went wrong";
                    sendResponse.sendErrorMessage(msg, res, 500);
                }
                else {
                    if (result.length) {
                        for (var i = 0; i < result.length; i++) {
                            (function (i) {
                                zoneId.push(result[i].id);
                                if (i == result.length - 1) {
                                    callback(null);
                                }
                            }(i))
                        }
                    }
                    else {
                        callback(null);
                    }
                }

            })

        }],
        getEnglisharea: ['getZoneIds', function (callback) {
            areaLists(req.dbName, res, zoneId, 14, function (err, result) {

                if (err) {
                    callback(err);
                } else {
                    data.englistList = result;
                    callback(null, result);
                }
            })
        }],
        getArabicarea: ['getZoneIds', function (callback) {
            areaLists(req.dbName, res, zoneId, 15, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    data.arabicList = result;
                    callback(null, result);
                }
            })
        }],
        getAddress: ['getArabicarea', function (callback) {
            if (accessToken) {
                addressList(req.dbName, res, accessToken, zoneId, function (err, result) {
                    if (err) {
                        callback(err)
                    }
                    else {
                        if (result != null) {

                            data.address = result;
                            callback(null)
                        } else {
                            data.address = [];
                            callback(null)

                        }
                    }
                })
            }
            else {
                data.address = [];
                callback(null)
            }
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}

exports.getAllCountry1 = function (req, res) {
    var data, final = [];
    var languageId = req.body.languageId != undefined && req.body.languageId != "" ? req.body.languageId : 14;
    async.auto({
        getAllCountry: function (callback) {
            countryListsMl(req.dbName, res, function (err, result) {
                if (err) {
                    var msg = "db error :";
                    sendResponse.sendErrorMessage(msg, res, 500);
                } else {
                    data = result;
                    console.log("===========", data);
                    callback(null, result);
                }
            })
        },
        getArabicCountry: ['getAllCountry', function (callback) {
            var groupingIds = _.groupBy(data, "id"), json = {};
            _.mapObject(groupingIds, function (val, key) {
                json.id = key,
                    json.names = val
                final.push(json)
                json = {}
            })
            callback(null, final);
        }]
    }, function (err, result) {
        console.log(err);
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(final, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}


exports.getCity1 = function (req, res) {
    var data, final = [], currency = {};
    var countryId = 0;
    var languageId = req.body.languageId != undefined && req.body.languageId != "" ? req.body.languageId : 14;
    async.auto({
        getCountryId: function (callback) {

            if (!(req.body.countryId)) {
                var msg = "country id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }

            if (req && req.body.countryId) {
                countryId = req.body.countryId;
                // languageId = req.body.languageId;
                callback();
            } else {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        },
        getEnglishCity: ['getCountryId', function (callback) {
            cityListsMl(req.dbName, res, countryId, languageId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    if (result.length) {
                        data = result;
                    }
                    callback(null, result);
                }
            })
        }],
        getArabicCity: ['getEnglishCity', function (callback) {
            var groupingIds = _.groupBy(data, "id"), json = {};
            _.mapObject(groupingIds, function (val, key) {
                json.id = key,
                    json.names = val
                final.push(json)
                json = {}
            })
            callback(null, final);
        }],
        countryData: ['getArabicCity', function (callback) {

            currencyAccCountry(req.dbName, res, countryId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    if (result.length) {
                        currency.currency_name = result[0].currency_name;
                        currency.currency_symbol = result[0].currency_symbol;
                        currency.currency_id = result[0].id;
                    } else {
                        currency.currency_name = "AED";
                        currency.currency_symbol = "AED";
                        currency.currency_id = 1;
                    }
                    callback(null);
                }
            })
        }]


    }, function (err, result) {
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData({ cityData: final, currencyData: currency }, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}

exports.getArea1 = function (req, res) {
    var data = [], address, finalVariantArray = [], after_group;
    var cityIds = 0;
    var languageId = 0;
    var accessToken = 0;
    var zoneId = [];
    var languageId = req.body.languageId != undefined && req.body.languageId != "" ? req.body.languageId : 14;
    if (req.headers.secretdbkey != undefined && req.headers.secretdbkey != "") {
        var decipher = crypto.createDecipher(algorithm, crypto_password)
        var decDbName = decipher.update(req.headers.secretdbkey, 'hex', 'utf8')
        decDbName += decipher.final('utf8');
        console.log("==DB_NAME==", decDbName)
        dbConnection = multiConnection[decDbName]
    }
    else {
        dbConnection = connection
    }
    async.auto({
        getCityIds: function (callback) {
            if (!(req.body.zoneId)) {
                var msg = "zone id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }

            /* if(!(req.body.languageId)){
                 var msg = "langauge id not found";
                 return sendResponse.sendErrorMessage(msg,res,400);
             }
 */
            if (req && req.body.zoneId) {
                // console.log("kbhcdjhbds",req.body.zoneId,req.body.languageId);
                cityIds = req.body.zoneId;
                accessToken = req.body.accessToken;
                callback();
            } else {
                var msg = "something went wrong ";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        },
        getZoneIds: ['getCityIds', function (callback) {
            var sql = "select zo.id from zone zo where zo.is_live = ? and zo.is_deleted = ? and zo.city_id IN(" + cityIds + ")";
            // console.log("ssss",sql);
            multiConnection[req.dbName].query(sql, [1, 0], function (err, result) {
                if (err) {
                    var msg = "something went wrong";
                    sendResponse.sendErrorMessage(msg, res, 500);
                }
                else {
                    if (result.length) {
                        for (var i = 0; i < result.length; i++) {
                            (function (i) {
                                zoneId.push(result[i].id);
                                if (i == result.length - 1) {
                                    callback(null);
                                }
                            }(i))
                        }
                    }
                    else {
                        callback(null);
                    }
                }

            })

        }],
        getArabicarea: ['getZoneIds', function (callback) {
            areaListsMl(req.dbName, res, zoneId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    data = result;
                    callback(null, result);
                }
            })
        }],
        getDAta: ['getArabicarea', function (callback) {
            after_group = _.groupBy(data, "id"), json_variant = {}
            _.mapObject(after_group, function (val, key) {
                json_variant.id = key,
                    json_variant.names = val
                finalVariantArray.push(json_variant)
                json_variant = {}
            })
            callback(null, {});
        }],
        getAddress: ['getDAta', function (callback) {
            if (accessToken) {
                addressList(req.dbName, res, accessToken, zoneId, function (err, result) {
                    if (err) {
                        callback(err)
                    }
                    else {
                        if (result != null) {
                            address = result;
                            callback(null)
                        } else {
                            address = [];
                            callback(null);
                        }
                    }
                })
            }
            else {
                address = [];
                callback(null)
            }
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData({ areaData: finalVariantArray, addressData: address }, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}



exports.getZone = function (req, res) {
    var data = {};
    var cityId = 0;
    var languageId = 0;
    async.auto({
        getCityId: function (callback) {

            if (!(req.body.cityId)) {
                var msg = "city id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            if (!(req.body.languageId)) {
                var msg = "language id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }


            if (req && req.body.cityId) {
                cityId = req.body.cityId;
                languageId = req.body.languageId;
                callback();
            } else {
                var msg = "something went wrong ";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        },
        getZone: ['getCityId', function (callback) {
            zoneLists(req.dbName, res, cityId, languageId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    data.list = result;
                    callback(null, result);
                }
            })
        }],
    }, function (err, result) {
        if (err) {
            var msg = something;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}



exports.getAllLanguage = function (req, res) {
    var languageList;
    async.auto({
        getLanguage: function (callback) {
            languageLists(req.dbName, res, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    languageList = result;
                    callback(null, result);
                }
            })
        }
    }, function (err, result) {
        if (err) {
            var msg = something;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(languageList, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}

exports.supplierDetails = function (req, res) {
    var supplierDetails = {};
    var supplierId;
    var languageId;
    var branchId;
    var token;
    var id = 0;
    var status;
    var categoryId;
    var commission;
    var flag2 = 0;
    var areaId = 0;
    var categoiesDataTemp;
    var radisCache = false;
    var dataToSend;
    let latitude = req.body.latitude || 30.7333;
    let longitude = req.body.longitude || 76.7794;
    var day = moment().isoWeekday();
    day = day - 1;
    //console.log("ffff",req.body);
    async.auto({
        getValues: function (callback) {
            if (!(req.body.supplierId)) {
                var msg = "supplier id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            if (!(req.body.languageId)) {
                var msg = "language id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }

            if (!(req.body.branchId)) {
                var msg = "branch id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            // if(!(req.body.categoryId)){
            //     var msg = "categoryId id not found";
            //     return sendResponse.sendErrorMessage(msg,res,400);
            // }  

            if (req.body.accessToken) {
                token = req.body.accessToken
            }

            if (req.body && req.body.supplierId && req.body.languageId) {
                supplierId = req.body.supplierId;
                languageId = req.body.languageId;
                branchId = req.body.branchId;
                categoryId = req.body.categoryId || 0;
                callback(null);
            } else {
                var msg = "something went wrong ";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        },
        supplierDetails: ['getValues', function (callback) {
            logger.debug("====supplierDetails====")
            supplierDetail(req.dbName, res, supplierId, languageId, branchId, categoryId, async function (err, result) {
                if (!(result.length)) {
                    var msg = "inVaild supplier id";
                    return sendResponse.sendErrorMessage(msg, res, 400);
                }
                if (err) {
                    callback(err);
                } else {
                    logger.debug("=====IF==COND===>>")
                    let mUnit = await Universal.getMeausringUnit(req.dbName);
                    var sql = "select s.iso,s.phone,s.country_code,s.id,sb.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.total_reviews,s.rating,sb.id as supplier_branch_id,sb.branch_name as supplier_branch_name, ";
                    sql += " sb.address,sml.name,s.logo,s.id,st.is_open as status,st.start_time,st.end_time,s.total_reviews," +
                        " s.rating,s.payment_method,sc.commission_package,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
                        " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
                    sql += " s.id = sb.supplier_id join supplier_ml " +
                        " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id where ";
                    sql += " s.id = ? and s.is_live = ? and s.is_active = ? and s.is_deleted =0 and sb.is_live = ? and sml.language_id = ? " +
                        "and sb.is_deleted = ?  and st.week_id =? GROUP BY s.id,sb.id having distance<sb.delivery_radius ";
                    let haveMoreThanOneBranch = await ExecuteQ.Query(req.dbName, sql, [supplierId, 1, 1, 1, languageId, 0, day]);
                    var oSql = " select o.id from orders o join supplier_branch sb on sb.id = o.supplier_branch_id where sb.supplier_id = ? and o.status != ? and o.status != ?";
                    let orderData = await ExecuteQ.Query(req.dbName, oSql, [supplierId, 2, 9]);

                    let categories = await supplierCategoryDetails(req.dbName, supplierId, categoryId)
                    supplierDetails.category = categories
                    var supplier_image = [];
                    var len = result.length;

                    supplierDetails.id = supplierId;
                    supplierDetails.logo = result[0].logo || "";
                    supplierDetails.email = result[0].email || "";
                    supplierDetails.iso = result[0].iso || "";
                    supplierDetails.phone = result[0].phone || "";
                    supplierDetails.country_code = result[0].country_code || "";



                    supplierDetails.branchCount = haveMoreThanOneBranch && haveMoreThanOneBranch.length > 0 ? haveMoreThanOneBranch.length : 0
                    supplierDetails.trade_license_no = result[0].trade_license_no || "";
                    supplierDetails.total_reviews = result[0].total_reviews || 0;
                    supplierDetails.rating = result[0].rating || 0;
                    supplierDetails.name = result[0].name || "";
                    supplierDetails.payment_method = result[0].payment_method || 0;
                    supplierDetails.name = result[0].name || "";
                    supplierDetails.description = result[0].description || "";
                    supplierDetails.about = result[0].uniqueness || "";
                    supplierDetails.terms_and_conditions = result[0].terms_and_conditions || "";
                    supplierDetails.address = result[0].address || "";
                    supplierDetails.delivery_min_time = result[0].delivery_min_time || 0;
                    supplierDetails.speciality = result[0].speciality || "";
                    supplierDetails.nationality = result[0].nationality || "";
                    supplierDetails.facebook_link = result[0].facebook_link || "";
                    supplierDetails.linkedin_link = result[0].linkedin_link || "";
                    supplierDetails.brand = result[0].brand || "";
                    supplierDetails.description = result[0].description || "";
                    supplierDetails.is_multi_branch = result[0].is_multi_branch || 0
                    // s.speciality,s.nationality,s.facebook_link,s.linkedin_link,s.brand,s.speciality,s.description
                    supplierDetails.delivery_max_time = result[0].delivery_max_time || 0;
                    supplierDetails.min_order = result[0].min_order || 0;
                    supplierDetails.min_order_delivery = result[0].min_order_delivery || 0;
                    supplierDetails.business_start_date = moment(result[0].business_start_date).format("MMMM DD, YYYY") || "";
                    supplierDetails.total_order = orderData.length
                    supplierDetails.delivery_prior_time = result[0].delivery_prior_time || "";
                    supplierDetails.urgent_delivery_time = result[0].urgent_delivery_time || "";
                    supplierDetails.delivery_charges = result[0].delivery_charges || 0;
                    supplierDetails.onOffComm = result[0].onOffComm || 0
                    callback(null, result);
                }
            })

        }],
        getSupplierImage: ['supplierDetails', async function (callback) {
            logger.debug("====getSupplierImage====")
            var sql = "select image_path from supplier_image where supplier_id = ? and is_deleted = ? ";
            let result = await ExecuteQ.Query(req.dbName, sql, [supplierId, 0])
            // multiConnection[req.dbName].query(sql, [supplierId,0], function (err, result) {
            //     if(err) {
            //         callback(err);
            //     }
            //     else{
            var temp = [];
            var len = result.length;
            if (result.length) {
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        if (result[i].image_path != null) {
                            temp.push(result[i].image_path);
                        }
                        if (i == (len - 1)) {
                            supplierDetails.supplier_image = temp;
                            callback(null);
                        }
                    }(i));
                }
            } else {
                callback(null);
            }

        }],
        getUserId: ['getSupplierImage', async function (callback) {
            logger.debug("======getUserId===")
            if (token != null) {
                var sql = " select id from user where access_token = ? ";
                let result = await ExecuteQ.Query(req.dbName, sql, [token]);
                // multiConnection[req.dbName].query(sql, [token], function (err, result) {
                //     if(err) {
                //         var msg = "db error :";
                //         return sendResponse.sendErrorMessage(msg,reply,500);
                //     }
                //     else{
                if (result.length) {
                    id = result[0].id;
                    //console.log("ddddd",id,result);
                    callback(null, result);
                } else {
                    var msg = "invalid accessToken pass";
                    return sendResponse.sendErrorMessage(msg, res, 401);
                }
                //     }
                // })
            } else {
                supplierDetails.Favourite = 0;
                callback(null);
            }

        }],
        checkTodayOpenTime: ['getUserId', async function (callback) {
            logger.debug("======checkTodayOpenTime===")
            var hh = '';
            var ss = '';
            var hh1 = '';
            var ss1 = '';
            var day = moment().isoWeekday();
            var time = new Date();
            var time1 = new Date(time);
            time1.setMinutes(time.getMinutes() + 00);
            time1.setHours(time.getHours() + 4);
            var time2 = time1.toTimeString().split(" ")[0];
            day = day - 1;
            //console.log("dsd",day);
            var sql = "select start_time,end_time,is_open from supplier_timings where supplier_id = ? and week_id = ? ";
            let result = await ExecuteQ.Query(req.dbName, sql, [supplierId, day, 1]);
            // multiConnection[req.dbName].query(sql, [supplierId,day,1], function (err, result) {
            //     if(err) {
            //         var msg = "db error :";
            //         return sendResponse.sendErrorMessage(msg,reply,500);
            //     }
            //     else{
            if (result.length) {
                if (result[0].is_open == 1) {
                    if (result[0].start_time <= time2 && result[0].end_time >= time2) {
                        supplierDetails.status = result[0].is_open;
                    }
                    else {
                        supplierDetails.status = 0;
                    }
                }
                else {
                    supplierDetails.status = result[0].is_open;
                }

                var aa = result[0].start_time;
                var bb = result[0].end_time;
                var len = aa.length;
                var len1 = bb.length;
                var flag = 0;
                var flag1 = 0;
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        if (aa[i] == ':') {
                            flag++;
                        }
                        if (flag == 0) {
                            hh += aa[i];
                        }
                        if (flag == 1 && aa[i] != ':') {
                            ss += aa[i];
                        }
                        if (i == (len - 1)) {
                            console.log("......", hh)
                            if (hh >= 12) {
                                if (hh > 12) {
                                    hh = hh - 12;
                                }
                                supplierDetails.open_time = hh + ':' + ss + ':' + 'PM';
                                return callback(null)
                            } else {
                                supplierDetails.open_time = hh + ':' + ss + ':' + 'AM';
                                return callback(null);
                            }
                        }
                    }(i));
                }
                for (var j = 0; j < len1; j++) {
                    (function (j) {
                        if (bb[j] == ':') {
                            flag1++;
                        }
                        if (flag1 == 0) {
                            hh1 += bb[j];
                        }
                        if (flag1 == 1 && bb[j] != ':') {
                            ss1 += bb[j];
                        }
                        if (j == (len - 1)) {
                            if (hh1 >= 12) {
                                hh1 = hh1 - 12;
                                supplierDetails.close_time = hh1 + ':' + ss1 + ':' + 'PM';
                                return callback(null);
                            } else {
                                supplierDetails.close_time = hh1 + ':' + ss1 + ':' + 'AM';
                                return callback(null);
                            }
                        }
                    }(j));
                }

            } else {
                callback(null);
            }
            //     }
            // })

        }],
        checkFav: ['checkTodayOpenTime', function (callback) {
            logger.debug("======checkFav===")
            if (id != 0) {
                checkFav(req.dbName, res, id, supplierId, function (err, result) {
                    if (err) {
                        var msg = "db error :";
                        return sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        //console.log("rrr",result)
                        if (result) {
                            //console.log("if");
                            supplierDetails.Favourite = 1;
                            callback(null);
                        } else {
                            //console.log("else");
                            supplierDetails.Favourite = 0;
                            callback(null);
                        }
                    }
                })
            } else {
                supplierDetails.Favourite = 0;
                callback(null);
            }

        }],
        getReview: ['checkFav', function (callback) {
            logger.debug("======getReview===")
            getSupplierReview(req.dbName, res, supplierId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    supplierDetails.review_list = result;
                    callback(null);
                }
            })

        }],
        countTotalOrder: ['getReview', async function (callback) {
            try {
                logger.debug("======countTotalOrder===")
                var sql = " select o.id from orders o join supplier_branch sb on sb.id = o.supplier_branch_id where sb.supplier_id = ? and o.status != ? and o.status != ?";
                let result = await ExecuteQ.Query(req.dbName, sql, [supplierId, 2, 9]);
                supplierDetails.total_order = result.length;
                callback(null, result);

            }
            catch (Err) {
                var msg = "db error";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }

        }],
        getCommission: ['countTotalOrder', async function (callback) {

            try {
                logger.debug("======getCommission===")
                var sql = 'select distinct(sc.commission) from supplier_category sc join supplier s on s.id=sc.supplier_id where sc.supplier_id = ? and sc.onOffComm = 1 and sc.category_id =? ' +
                    ' and sc.commission_type=1 and s.commisionButton = 1 ';
                let response = await ExecuteQ.Query(req.dbName, sql, [supplierId, categoryId])

                if (response.length && (response[0].commission > 0)) {
                    commission = response[0].commission;
                    callback(null)
                }
                else {
                    if (supplierDetails.onOffComm == 1) {
                        supplierDetails.commission_package = 3;
                    } else {
                        supplierDetails.commission_package = 4;
                    }

                    flag2 = 1;
                    callback(null)
                }
            }
            catch (Err) {
                var msg = "something went wrong ";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }


        }],
        setPackage: ['getCommission', async function (callback) {
            logger.debug("======setPackage===")
            var sql1 = 'select distinct(sc.commission) from supplier_category sc join supplier s on s.id=sc.supplier_id where sc.onOffComm = 1 and sc.category_id =? and' +
                '  sc.commission_type= 1  and s.commisionButton = 1 order by sc.commission DESC LIMIT 0,3';
            let result = await ExecuteQ.Query(req.dbName, sql1, [categoryId])
            // multiConnection[req.dbName].query(sql1,[categoryId],function (err,result) {
            //     if(err){
            //         console.log("err2",err);
            //         var msg = "something went wrong ";
            //         return sendResponse.sendErrorMessage(msg,res,500);
            //     }
            //     else {
            if (result.length) {
                if (result[0].commission == commission) {
                    supplierDetails.commission_package = 2;
                    callback(null);
                }
                else if (result[1].commission == commission) {
                    supplierDetails.commission_package = 0;
                    callback(null);
                }
                else if (result[2].commission == commission) {
                    supplierDetails.commission_package = 1;
                    callback(null);
                }
                else {
                    supplierDetails.commission_package = 3;
                    callback(null);
                }
            }
            else {
                supplierDetails.commission_package = 3;
                callback(null)
            }



        }],
        myReview: ['setPackage', function (callback) {
            logger.debug("======myReview===")
            getMyReview(req.dbName, res, id, supplierId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    console.log("......", result);
                    if (result.length) {
                        var review = {};
                        review.comment = result[0].comment;
                        review.rating = result[0].rating;
                        review.firstname = result[0].firstname;
                        review.user_image = result[0].user_image
                        supplierDetails.my_review = review;
                        callback(null);
                    } else {
                        supplierDetails.my_review = {};
                        callback(null);
                    }
                }
            })




        }]

    }, async function (err, result) {
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {


            supplierDetails = JSON.stringify(supplierDetails);
            supplierDetails = JSON.parse(supplierDetails);
            var temp = supplierId + languageId + branchId + categoryId;
            // redisClient.hmset("supplierDetails",temp,JSON.stringify(supplierDetails));
            dataToSend = supplierDetails;

            console.log("-------------data to send---------", dataToSend)
            let categories = await supplierCategoryDetails(req.dbName, supplierId, categoryId)
            dataToSend.category = categories
            sendResponse.sendSuccessData(dataToSend, constant.responseMessage.SUCCESS, res, 200);

        }
    })
}

function supplierCategoryDetails(dbName, supplierId, categoryId) {
    return new Promise(async (resolve, reject) => {
        try {

            let categoryCheck = ""

            if (parseInt(categoryId) !== 0) {
                categoryCheck = ` and c.id = ${categoryId}`
            }

            let query = `select  IF((select count(*)  from questions  where questions.category_id=c.id) > 0, 1, 0) as is_question,c.image,IF((select count(*) from categories where parent_id = c.id),1,0) as is_subcategory,c.supplier_placement_level,sc.category_id,c.name as category_name,c.description,c.order,c.category_flow from supplier s join supplier_category sc on 
                s.id = sc.supplier_id join categories c on c.id = sc.category_id where s.id=? and c.parent_id=0 and c.is_live=1  ${categoryCheck} group by sc.category_id`
            let params = [supplierId];
            let result = await ExecuteQ.Query(dbName, query, params);
            resolve(result);
        } catch (err) {
            logger.debug("================erer=========", err);
            reject(err);
        }
    })
}


exports.getSubcategoryDetails = function (req, res) {

    var subCategoryDetails = null;
    var supplierId = 0;
    var languageId = 0;
    var categoryId = 0;

    var tempSupplierData;
    var subRadisStatus = false;
    var categoiesDataTemp;
    var radisCache = true;

    console.log("==BODY==", req.body);

    async.auto({
        getValues: function (callback) {
            if (!(req.body.languageId)) {
                var msg = "language id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            if (!(req.body.categoryId)) {
                var msg = "category id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            if (req.body && req.body.supplierId && req.body.languageId && req.body.categoryId) {
                supplierId = req.body.supplierId;
                languageId = req.body.languageId;
                categoryId = req.body.categoryId;
                tempSupplierData = supplierId + languageId + categoryId
                callback();
            } else if (req.body && req.body.languageId && req.body.categoryId) {
                languageId = req.body.languageId;
                categoryId = req.body.categoryId;
                tempSupplierData = languageId + categoryId
                callback();
            } else {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        },
        subRadisStatus: ['getValues', async function (callback) {
            var sql = "select onOff,reset from cache "
            let result = await ExecuteQ.Query(req.dbName, sql, [])
            // multiConnection[req.dbName].query(sql,[],function(err,result)
            // {
            //     if(err){
            //         callback(err)
            //     } else{
            result = result[0];
            result.reset = parseInt(result.reset);
            // if(result.onOff == 1){
            radisCache = true;
            callback(null);
            // }else if(result.reset == 0){

            //     redisClient.expire("categoires",1);
            //     redisClient.expire("supplierlist",1);
            //     redisClient.expire("supplierDetails",1);
            //     redisClient.expire("subCategories",1);
            //     redisClient.expire("productList",1);
            //     var sql = "update cache set reset = ?  where 1";
            //     multiConnection[dbName].query(sql,[1],function(err,result)
            //     {
            //         console.log("......err......result.");
            //         radisCache = true;
            //         callback(null);

            //     })
            // }else{
            //     redisClient.HGET("subCategories",tempSupplierData, function (err, obj) {
            //         console.dir(obj)
            //         if(obj !=  null){
            //             categoiesDataTemp = obj;
            //             radisCache = false;
            //             callback(null);
            //         }else{
            //             radisCache = true;
            //             callback(null);
            //         }
            //     });
            // }
            //     }
            // })

        }],
        getSupplierSubCategory: ['subRadisStatus', function (callback) {
            if (radisCache == true) {
                if (supplierId != 0) {
                    getSupplierSubcategory(req.dbName, res, supplierId, languageId, categoryId, function (err, result) {
                        if (err) {
                            callback(err);
                        } else {
                            subCategoryDetails = result;
                            callback(null);
                        }
                    })
                } else {
                    callback(null);
                }
            } else {
                callback(null)
            }


        }],
        getSubCategoryDetails: ['subRadisStatus', function (callback) {
            if (radisCache == true) {
                if (supplierId == 0) {

                    getSubCategoryDetails(req.dbName, res, languageId, categoryId, function (err, result) {
                        if (err) {
                            callback(err);
                        } else {
                            subCategoryDetails = result;
                            callback(null, result);
                        }
                    })
                } else {
                    callback(null);
                }
            } else {
                callback(null)
            }
        }],
    }, function (err, result) {
        console.log("============ERR!===", err);

        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {

            if (radisCache == true) {
                subCategoryDetails = JSON.stringify(subCategoryDetails);
                subCategoryDetails = JSON.parse(subCategoryDetails);
                // redisClient.hmset("subCategories",tempSupplierData,JSON.stringify(subCategoryDetails));
                sendResponse.sendSuccessData(subCategoryDetails, constant.responseMessage.SUCCESS, res, 200);
            } else {
                categoiesDataTemp = JSON.parse(categoiesDataTemp);
                if (subCategoryDetailsRadis == 0) {
                    // redisClient.expire("subCategories",10);
                    subCategoryDetailsRadis = 1;
                }
                sendResponse.sendSuccessData(categoiesDataTemp, constant.responseMessage.SUCCESS, res, 200);
            }
        }
    })
}

const generateResponse = (intent) => {
    // Note that if your API version is before 2019-02-11, 'requires_action'
    // appears as 'requires_source_action'.
    let payment_source = "stripe";
    if (
        intent.status === 'requires_action' &&
        intent.next_action.type === 'use_stripe_sdk'
    ) {
        // Tell the client to handle the action
        return {
            payment_source: payment_source,
            requires_action: true,
            payment_intent_client_secret: intent.client_secret,
            success: true
        };
    } else if (intent.status === 'succeeded') {
        // The payment didn’t need any additional actions and completed!
        // Handle post-payment fulfillment
        return {
            payment_source: payment_source,
            requires_action: true,
            payment_intent_client_secret: intent.client_secret,
            success: true
        };
    } else {
        // Invalid status
        return {
            error: 'Invalid PaymentIntent status'
        }
    }
};

exports.createPaymentIntent = async (req, res) => {

    let currency = req.body.currency;
    let amount = req.body.amount;
    let stripeCustomer = req.body.stripeCustomer
    let paymentMethod = req.body.paymentMethod
    let price = Math.round(parseFloat(amount) * 100)    // 100 Cent == $1.00 charge);
    let strip_secret_key_data = await Universal.getStripSecretKey(req.dbName);
    console.log(currency, amount, stripeCustomer, paymentMethod, "stripe 3d3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3 d3 d")
    if (strip_secret_key_data && strip_secret_key_data.length > 0) {
        const stripe = require('stripe')(strip_secret_key_data[0].value);

        // Create a PaymentIntent with the order amount and currency


        //     const paymentIntent = await stripe.paymentIntents.create({
        //         amount: amount,
        //       currency: currency,
        //       payment_method_types: ['card'],
        //       customer:stripeCustomer,
        //       payment_method: paymentMethod

        //     });

        //     amount = paymentIntent.amount;
        //     balanceTransaction = paymentIntent.balance_transaction
        //   amountRefunded = paymentIntent.amount_refunded
        //   currency = paymentIntent.currency
        //   paymentintent = paymentIntent.payment_intent
        //   status = paymentIntent.status
        //   customer = paymentIntent.customer
        //   console.log(paymentIntent,"fghghgggggfghhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh")

        //     console.log(paymentIntent.id)
        //     res.send({
        //       clientSecret: paymentIntent.client_secret,
        //       paymentIntent: paymentIntent
        //     });

        //     } 
        //      else{
        //         return sendResponse.sendErrorMessage(
        //             await Universal.getMsgText(
        //             languageId,{service_type:0,dbName:req.dbName},config.get("error_msg.payment.no_gate_way")),
        //             res,400);
        //     }







        try {
            let intent;
            if (req.body.paymentMethod) {
                // Create the PaymentIntent
                intent = await stripe.paymentIntents.create({
                    payment_method: req.body.paymentMethod,
                    amount: price,
                    currency: currency,
                    customer: stripeCustomer,
                    confirmation_method: 'manual',
                    confirm: true
                });
            } else if (req.body.paymentIntentId) {
                intent = await stripe.paymentIntents.confirm(
                    req.body.paymentIntentId
                );
            }
            // Send the response to the client
            res.send(generateResponse(intent));
        } catch (e) {
            // Display error on client
            return res.send({ error: e.message });
        }
    }

    else {
        return sendResponse.sendErrorMessage(
            await Universal.getMsgText(
                languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.no_gate_way")),
            res, 400);
    }
}





exports.getDetailsSubcategory = function (req, res) {
    var subcategoryDetails;
    var supplierId = 0;
    var languageId = 0;
    var subcategoryId = 0;

    async.auto({
        getValues: function (callback) {
            if (!(req.body.supplierId)) {
                var msg = "supplier id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }

            if (!(req.body.languageId)) {
                var msg = "language id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            if (!(req.body.subcategoryId)) {
                var msg = "subcategory id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            if (req.body && req.body.supplierId && req.body.languageId && req.body.subcategoryId) {
                supplierId = req.body.supplierId;
                languageId = req.body.languageId;
                subcategoryId = req.body.subcategoryId;
                callback();
            } else if (req.body && req.body.languageId && req.body.subcategoryId) {
                languageId = req.body.languageId;
                subcategoryId = req.body.subcategoryId;
                callback();
            } else {
                var msg = something;
                sendResponse.sendErrorMessage(msg, res, 500);
            }
        },

        getSupplierDetails: ['getValues', function (callback) {
            if (supplierId != 0) {
                getsubcategorySuppliersD(req.dbName, res, supplierId, languageId, subcategoryId, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        subcategoryDetails = result;
                        callback(null);
                    }
                })
            } else {
                callback(null);
            }

        }],
        getSubCatDetails: ['getValues', function (callback) {
            if (supplierId == 0) {
                getSubcategoryDetails(req.dbName, res, languageId, subcategoryId, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        subcategoryDetails = result;
                        callback(null);
                    }
                })
            } else {
                callback();
            }
        }],
    }, function (err, result) {
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(subcategoryDetails, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}

exports.getProducts = function (req, res) {
    var productsDetails = {};
    var supplierBranchId = 0;
    var languageId = 0;
    var subcategoryId = 0;
    var countryId = 0;
    var data;
    var areaId;
    var priceType = 0;
    var listing = {};
    var radiusFlg = true;

    var categoiesDataTemp;

    async.auto({
        getValues: function (callback) {
            // if(!(req.body.supplierBranchId)){
            //     var msg = "supplier id not found";
            //     return sendResponse.sendErrorMessage(msg,res,400);
            // }
            if (!(req.body.languageId)) {
                var msg = "language id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            else if (!(req.body.subCategoryId)) {
                var msg = "subcategory id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            else if (!(req.body.countryId)) {
                var msg = "countryId id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }

            else if (!(req.body.areaId)) {
                var msg = "area  id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }

            else if (req.body && req.body.supplierBranchId && req.body.languageId && req.body.subCategoryId && req.body.countryId) {
                supplierBranchId = req.body.supplierBranchId;
                languageId = req.body.languageId;
                subcategoryId = req.body.subCategoryId;
                countryId = req.body.countryId;
                areaId = req.body.areaId;
                callback(null);
            }
            else if (req.body && req.body.languageId && req.body.subCategoryId && req.body.countryId) {
                languageId = req.body.languageId;
                subcategoryId = req.body.subCategoryId;
                countryId = req.body.countryId;
                areaId = req.body.areaId;
                callback(null);
            }
            else {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        },
        getRediusProduct: ['getValues', function (callback) {
            var sql = "select onOff,reset from cache "
            multiConnection[req.dbName].query(sql, [], function (err, result) {
                if (err) {
                    callback(err)
                }
                else {
                    result = result[0];
                    result.reset = parseInt(result.reset);
                    if (result.onOff == 1) {
                        radiusFlg = false;
                        callback(null);
                    } else if (result.reset == 0) {

                        redisClient.expire("categoires", 1);
                        redisClient.expire("supplierlist", 1);
                        redisClient.expire("supplierDetails", 1);
                        redisClient.expire("subCategories", 1);
                        redisClient.expire("productList", 1);

                        var sql = "update cache set reset = ?  where 1";
                        multiConnection[req.dbName].query(sql, [1], function (err, result) {
                            console.log("......err......result.");
                            radiusFlg = false;
                            callback(null);

                        })
                    } else {
                        var temp;
                        if (supplierBranchId != 0) {
                            temp = supplierBranchId + languageId + subcategoryId + countryId + areaId;
                        }
                        else {
                            temp = languageId + subcategoryId + countryId + areaId;
                        }
                        redisClient.HGET("productList", temp, function (err, obj) {

                            /*console.dir(obj)*/
                            if (obj != null) {
                                categoiesDataTemp = obj;
                                radiusFlg = true;
                                callback(null);
                            } else {
                                radiusFlg = false;
                                callback(null);
                            }
                        });

                    }
                }

            })

        }],

        getProduct: ['getRediusProduct', function (callback) {

            if (radiusFlg == true) {
                callback(null)
            } else {


                // var sql = "select display_price,hourly_price,urgent_type,urgent_value,can_urgent,sbapaid,supplier_branch_id,handling_admin,handling_supplier,house_cleaning_price,beauty_saloon_price,detailed_sub_category_id,product_id,bar_code,sku," +
                //     " detailed_name,name,product_desc,image_path,price,measuring_unit,price_type,delivery_charges ,fixed_price,price1,min_order from (select display_price,urgent_type,hourly_price,fixed_price,urgent_value,can_urgent,sbapaid,supplier_branch_id,handling_admin,handling_supplier,house_cleaning_price,beauty_saloon_price,detailed_sub_category_id,product_id,bar_code,sku,detailed_name,name,product_desc,image_path,price,measuring_unit,price_type,delivery_charges,price1,min_order from (select price.display_price,price.urgent_type,price.urgent_value," +
                //     "s.is_urgent as can_urgent,sbapa.id as sbapaid,bp.supplier_branch_id,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,price.beauty_saloon_price,bp.detailed_sub_category_id,p.id product_id,p.bar_code,p.sku," +
                //     " cml.name detailed_name,pml.name,pml.product_desc,pimage.image_path,price.price as fixed_price ,price.price as hourly_price,price.price,pml.measuring_unit,price.pricing_type as price_type, price.price_type as price1, " +
                //     " sbapa.delivery_charges,sbapa.min_order from supplier_branch_product bp join categories c on " +
                //     " bp.detailed_sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p on bp.product_id = p.id join product_ml pml " +
                //     " on bp.product_id = pml.product_id join product_image pimage on bp.product_id = pimage.product_id join " +
                //     "  product_pricing price on bp.product_id = price.product_id join supplier_branch_area_product sbapa on sbapa.product_id = p.id join " +
                //     " supplier_branch sbb on sbb.id = sbapa.supplier_branch_id join supplier s on s.id = sbb.supplier_id where bp.supplier_branch_id = ? and " +
                //     " bp.sub_category_id = ? and bp.detailed_sub_category_id != 0 and p.is_live = 1 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 " +
                //     "   and pml.language_id = ? and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and cml.language_id= ? and (pimage.default_image = 1 or pimage.imageOrder =1) and sbapa.supplier_branch_id = ? and sbapa.area_id = ? and ((price.price_type = '1' and DATE(price.start_date) <= " +
                //     " CURDATE() and DATE(price.end_date) >= CURDATE()) or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and price.price !=0))" +
                //     " UNION ALL "+
                //     " select price.display_price as display_price,price.urgent_type,price.urgent_value,s.is_urgent as can_urgent,sbapa.id as sbapaid,bp.supplier_branch_id,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,price.beauty_saloon_price,bp.sub_category_id as detailed_sub_category_id,p.id product_id,p.bar_code,p.sku,cml.name detailed_name,"+
                //     " pml.name,pml.product_desc,pimage.image_path,price.price as fixed_price ,price.price as hourly_price,price.price,pml.measuring_unit,price.pricing_type as price_type, price.price_type as price1,sbapa.delivery_charges,sbapa.min_order "+
                //     " from supplier_branch_product bp join categories c on bp.sub_category_id = c.id join "+
                //     " product p on bp.product_id = p.id join categories_ml cml on cml.category_id = c.id join product_ml pml on bp.product_id = pml.product_id " +
                //     " join product_image pimage on bp.product_id = pimage.product_id join product_pricing price " +
                //     " on bp.product_id = price.product_id join supplier_branch_area_product sbapa on sbapa.product_id = p.id join supplier_branch sbb on " +
                //     "sbb.id = sbapa.supplier_branch_id join supplier s on s.id = sbb.supplier_id where bp.supplier_branch_id = ? and bp.sub_category_id = ? "+
                //     " and bp.detailed_sub_category_id = 0 and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and p.is_live = 1 and p.is_deleted = 0 and bp.is_deleted=0  and pml.language_id = ? and cml.language_id=?  and price.is_deleted = 0 " +
                //     " and (pimage.default_image = 1 or pimage.imageOrder =1)and sbapa.supplier_branch_id = ? and sbapa.area_id = ? and ((price.price_type = 1 and DATE(price.start_date) <= CURDATE() and "+
                //     " DATE(price.end_date) >= CURDATE()) or (price.price_type = 0))and ((price.pricing_type=1) or(price.pricing_type=0 and price.price !=0))) selection ORDER BY price1 DESC) selection1 GROUP BY product_id,sku order by name";

                // var statement=multiConnection[dbName].query(sql,[supplierBranchId,subcategoryId,languageId,languageId,supplierBranchId,areaId,supplierBranchId,subcategoryId,languageId,languageId,supplierBranchId,areaId],function(err,result){
                //    console.log("................err..........................................",statement.sql);
                var sql = "";
                if (supplierBranchId != 0) {
                    sql = "select category_id,supplier_name,quantity,purchased_quantity,display_price,hourly_price,urgent_type,urgent_value,can_urgent,supplier_id,sbapaid,supplier_branch_id,handling_admin,handling_supplier,house_cleaning_price,beauty_saloon_price,detailed_sub_category_id,product_id,bar_code,sku," +
                        " detailed_name,name,product_desc,image_path,price,measuring_unit,price_type,delivery_charges ,fixed_price,price1,min_order from (select category_id,supplier_name,quantity,purchased_quantity,display_price,urgent_type,hourly_price,fixed_price,urgent_value,can_urgent,supplier_id,sbapaid,supplier_branch_id,handling_admin,handling_supplier,house_cleaning_price,beauty_saloon_price,detailed_sub_category_id,product_id,bar_code,sku,detailed_name,name,product_desc,image_path,price,measuring_unit,price_type,delivery_charges,price1,min_order from (select s.name as supplier_name,price.display_price,price.urgent_type,price.urgent_value," +
                        "s.is_urgent as can_urgent,c.parent_id as category_id,sbb.supplier_id as supplier_id,sbapa.id as sbapaid,bp.supplier_branch_id,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,price.beauty_saloon_price,bp.detailed_sub_category_id,p.quantity,p.purchased_quantity,p.id product_id,p.bar_code,p.sku," +
                        " cml.name detailed_name,pml.name,pml.product_desc,pimage.image_path,price.price as fixed_price ,price.price as hourly_price,price.price,pml.measuring_unit,price.pricing_type as price_type, price.price_type as price1, " +
                        " sbapa.delivery_charges,sbapa.min_order from supplier_branch_product bp join categories c on " +
                        " bp.detailed_sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p on bp.product_id = p.id join product_ml pml " +
                        " on bp.product_id = pml.product_id join product_image pimage on bp.product_id = pimage.product_id join " +
                        "  product_pricing price on bp.product_id = price.product_id join supplier_branch_area_product sbapa on sbapa.product_id = p.id join " +
                        " supplier_branch sbb on sbb.id = sbapa.supplier_branch_id join supplier s on s.id = sbb.supplier_id where s.id = " + supplierBranchId + " and " +
                        " bp.detailed_sub_category_id = " + subcategoryId + " and bp.detailed_sub_category_id != 0 and  p.parent_id=0 and p.is_live = 1 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 " +
                        "   and pml.language_id = " + languageId + " and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and cml.language_id= " + languageId + " and (pimage.default_image = 1 or pimage.imageOrder =1) and s.id = " + supplierBranchId + " and sbapa.area_id = " + areaId + " and ((price.price_type = '1' and DATE(price.start_date) <= " +
                        " CURDATE() and DATE(price.end_date) >= CURDATE()) or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and price.price !=0))" +
                        " UNION ALL " +
                        " select c.parent_id as category_id,s.name as supplier_name,p.quantity,p.purchased_quantity,price.display_price as display_price,price.urgent_type,price.urgent_value,sbb.supplier_id as supplier_id,s.is_urgent as can_urgent,sbapa.id as sbapaid,bp.supplier_branch_id,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,price.beauty_saloon_price,bp.sub_category_id as detailed_sub_category_id,p.id product_id,p.bar_code,p.sku,cml.name detailed_name," +
                        " pml.name,pml.product_desc,pimage.image_path,price.price as fixed_price ,price.price as hourly_price,price.price,pml.measuring_unit,price.pricing_type as price_type, price.price_type as price1,sbapa.delivery_charges,sbapa.min_order " +
                        " from supplier_branch_product bp join categories c on bp.sub_category_id = c.id join " +
                        " product p on bp.product_id = p.id join categories_ml cml on cml.category_id = c.id join product_ml pml on bp.product_id = pml.product_id " +
                        " join product_image pimage on bp.product_id = pimage.product_id join product_pricing price " +
                        " on bp.product_id = price.product_id join supplier_branch_area_product sbapa on sbapa.product_id = p.id join supplier_branch sbb on " +
                        "sbb.id = sbapa.supplier_branch_id join supplier s on s.id = sbb.supplier_id where s.id = " + supplierBranchId + " and bp.detailed_sub_category_id = " + subcategoryId + " " +
                        " and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and p.is_live = 1 and p.is_deleted = 0 and p.parent_id=0 and bp.is_deleted=0  and pml.language_id = " + languageId + " and cml.language_id=" + languageId + "  and price.is_deleted = 0 " +
                        " and (pimage.default_image = 1 or pimage.imageOrder =1) and s.id = " + supplierBranchId + " and sbapa.area_id = " + areaId + " and ((price.price_type = 1 and DATE(price.start_date) <= CURDATE() and " +
                        " DATE(price.end_date) >= CURDATE()) or (price.price_type = 0))and ((price.pricing_type=1) or(price.pricing_type=0 and price.price !=0))) selection ORDER BY price1 DESC) selection1 GROUP BY product_id,sku order by name";
                }
                else {
                    sql = "select category_id,supplier_name,quantity,purchased_quantity,display_price,hourly_price,urgent_type,supplier_id,urgent_value,can_urgent,sbapaid,supplier_branch_id,handling_admin,handling_supplier,house_cleaning_price,beauty_saloon_price,detailed_sub_category_id,product_id,bar_code,sku," +
                        " detailed_name,name,product_desc,image_path,price,measuring_unit,price_type,delivery_charges ,fixed_price,price1,min_order from (select category_id,supplier_name,quantity,purchased_quantity,display_price,urgent_type,hourly_price,fixed_price,urgent_value,can_urgent,supplier_id,sbapaid,supplier_branch_id,handling_admin,handling_supplier,house_cleaning_price,beauty_saloon_price,detailed_sub_category_id,product_id,bar_code,sku,detailed_name,name,product_desc,image_path,price,measuring_unit,price_type,delivery_charges,price1,min_order from (select s.name as supplier_name,price.display_price,price.urgent_type,price.urgent_value," +
                        "s.is_urgent as can_urgent,c.parent_id as category_id,sbb.supplier_id as supplier_id,sbapa.id as sbapaid,bp.supplier_branch_id,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,price.beauty_saloon_price,bp.detailed_sub_category_id,p.quantity,p.purchased_quantity,p.id product_id,p.bar_code,p.sku," +
                        " cml.name detailed_name,pml.name,pml.product_desc,pimage.image_path,price.price as fixed_price ,price.price as hourly_price,price.price,pml.measuring_unit,price.pricing_type as price_type, price.price_type as price1, " +
                        " sbapa.delivery_charges,sbapa.min_order from supplier_branch_product bp join categories c on " +
                        " bp.detailed_sub_category_id = c.id join categories_ml cml on cml.category_id = c.id join product p on bp.product_id = p.id join product_ml pml " +
                        " on bp.product_id = pml.product_id join product_image pimage on bp.product_id = pimage.product_id join " +
                        "  product_pricing price on bp.product_id = price.product_id join supplier_branch_area_product sbapa on sbapa.product_id = p.id join " +
                        " supplier_branch sbb on sbb.id = sbapa.supplier_branch_id join supplier s on s.id = sbb.supplier_id where" +
                        " bp.detailed_sub_category_id = " + subcategoryId + " and bp.detailed_sub_category_id != 0 and p.is_live = 1 and p.is_deleted = 0 and p.parent_id=0 and bp.is_deleted=0 and price.is_deleted = 0 " +
                        "   and pml.language_id = " + languageId + " and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and cml.language_id= " + languageId + " and (pimage.default_image = 1 or pimage.imageOrder =1) and sbapa.area_id = " + areaId + " and ((price.price_type = '1' and DATE(price.start_date) <= " +
                        " CURDATE() and DATE(price.end_date) >= CURDATE()) or (price.price_type = 0)) and ((price.pricing_type=1) or(price.pricing_type=0 and price.price !=0))" +
                        " UNION ALL " +
                        " select c.parent_id as category_id,s.name as supplier_name,price.display_price as display_price,price.urgent_type,sbb.supplier_id as supplier_id,price.urgent_value,s.is_urgent as can_urgent,sbapa.id as sbapaid,bp.supplier_branch_id,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price,price.beauty_saloon_price,bp.sub_category_id as detailed_sub_category_id,p.quantity,p.purchased_quantity,p.id product_id,p.bar_code,p.sku,cml.name detailed_name," +
                        " pml.name,pml.product_desc,pimage.image_path,price.price as fixed_price ,price.price as hourly_price,price.price,pml.measuring_unit,price.pricing_type as price_type, price.price_type as price1,sbapa.delivery_charges,sbapa.min_order " +
                        " from supplier_branch_product bp join categories c on bp.sub_category_id = c.id join " +
                        " product p on bp.product_id = p.id join categories_ml cml on cml.category_id = c.id join product_ml pml on bp.product_id = pml.product_id " +
                        " join product_image pimage on bp.product_id = pimage.product_id join product_pricing price " +
                        " on bp.product_id = price.product_id join supplier_branch_area_product sbapa on sbapa.product_id = p.id join supplier_branch sbb on " +
                        "sbb.id = sbapa.supplier_branch_id join supplier s on s.id = sbb.supplier_id where bp.detailed_sub_category_id = " + subcategoryId + " " +
                        " and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and p.is_live = 1 and p.is_deleted = 0 and p.parent_id=0 and bp.is_deleted=0  and pml.language_id = " + languageId + " and cml.language_id=" + languageId + "  and price.is_deleted = 0 " +
                        " and (pimage.default_image = 1 or pimage.imageOrder =1) and sbapa.area_id = " + areaId + " and ((price.price_type = 1 and DATE(price.start_date) <= CURDATE() and " +
                        " DATE(price.end_date) >= CURDATE()) or (price.price_type = 0))and ((price.pricing_type=1) or(price.pricing_type=0 and price.price !=0))) selection ORDER BY price1 DESC) selection1 GROUP BY product_id,sku order by name";

                }
                var statement = multiConnection[req.dbName].query(sql, function (err, result) {
                    console.log("................err..........................................", statement.sql);

                    if (err) {
                        console.log("err", err);
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, res, 500);
                    } else {
                        //console.log("ddd",result);

                        for (var i = 0; i < result.length; i++) {
                            if (result[i].price_type == 0) {

                                delete result[i].hourly_price
                            } else {
                                // console.log("lnjsdf",typeof(result[i].hourly_price),result[i].hourly_price,result[i]);
                                result[i].hourly_price = JSON.parse(result[i].hourly_price);
                                //  console.log("aaaaa",typeof(result[i].hourly_price),result[i].hourly_price);

                                delete result[i].fixed_price
                            }
                            // console.log("ljnasc",result[i])
                        }
                        //  var result1=result.sort(func.sort_by('name', true, parseInt));
                        productsDetails.product = result;
                        callback(null);
                    }
                })

            }


        }],
        manageJson: ['getProduct', function (callback) {
            if (radiusFlg == true) {
                callback(null);
            } else {

                collections(request.dbName, res, productsDetails.product, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        listing.product = result;
                        callback(null);
                    }
                })
            }
        }],
        countryPrice: ['getRediusProduct', function (callback) {
            if (radiusFlg == true) {
                callback(null);
            } else {
                currencyAccCountry(req.dbName, res, countryId, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        listing.currency = result;
                        callback(null);
                    }
                })
            }
        }],
    }, function (err, result) {
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {

            if (radiusFlg == true) {
                categoiesDataTemp = JSON.parse(categoiesDataTemp);
                var temp;
                if (supplierBranchId != 0) {
                    temp = supplierBranchId + languageId + subcategoryId + countryId + areaId;
                }
                else {
                    temp = languageId + subcategoryId + countryId + areaId;
                }
                console.log("............back data......................");

                if (productRadisArray == 0) {
                    redisClient.expire("productList", 5);
                    productRadisArray = 1;
                }
                sendResponse.sendSuccessData(categoiesDataTemp, constant.responseMessage.SUCCESS, res, 200);
            } else {
                listing = JSON.stringify(listing);
                listing = JSON.parse(listing);
                var temp;
                if (supplierBranchId != 0) {
                    temp = supplierBranchId + languageId + subcategoryId + countryId + areaId;
                }
                else {
                    temp = languageId + subcategoryId + countryId + areaId;
                }
                redisClient.hmset("productList", temp, JSON.stringify(listing));
                console.log("live data........0", listing);
                sendResponse.sendSuccessData(listing, constant.responseMessage.SUCCESS, res, 200);

            }

        }
    })
}

exports.customerRegisterstepfirst = function (req, res) {
    var email;
    var device_token;
    var device_type; var mobile_no;
    var firstname;
    var lastname;
    var gender;
    var latitude = 0;
    var longitude = 0;
    var area_id;
    var password;
    var accessToken;
    let referralCode = req.body.referralCode || ""
    let referCode = "REF-" + randomstring.generate({
        length: 5,
        charset: 'alphabetic'
    }).toUpperCase();
    var details = {};
    var flag = 1;
    logger.debug("=========referral-code====input==params==========>>", referralCode, req.body);
    let mobileNumber = req.body.mobileNumber !== undefined ? req.body.mobileNumber : "";
    let countryCode = req.body.countryCode !== undefined ? req.body.countryCode : "";
    let twilio_authy_id = "";
    async.auto({
        getValues: function (callback) {
            // if(!(req.body.email)){
            //     var msg = "email not found"
            //     return sendResponse.sendErrorMessage(msg,res,400);
            // }
            if (!(req.body.deviceToken)) {
                req.body.deviceToken = "GGG";
            } else {

            }

            if (!(req.body.deviceType)) {
                var msg = "device type not found"
                return sendResponse.sendErrorMessage(msg, res, 400);
            }

            if (req.body.latitude) {
                latitude = req.body.latitude;
            }

            if (req.body.longitude) {
                longitude = req.body.longitude;
            }

            // if(!(req.body.areaId)){
            //     var msg = "areaId not found"
            //     return sendResponse.sendErrorMessage(msg,res,400);
            // }

            if (!(req.body.password)) {
                var msg = "password  not found"
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            /*if(!(req.body.languageId)){
             var msg = "language id not found"
             return sendResponse.sendErrorMessage(msg,res,400);
             }*/


            if (req.body && req.body.deviceToken && req.body.password) {
                email = req.body.email || "";

                phone_number = req.body.phone_number;
                country_code = req.body.country_code;

                device_token = req.body.deviceToken;
                device_type = req.body.deviceType;
                password = req.body.password;
                password = md5(password);
                return callback();

            } else {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        },
        accessToken: function (callback) {
            if (countryCode !== "" && mobileNumber !== "") {
                accessToken = func.encrypt(mobileNumber + new Date());
                callback(null);
            } else {
                accessToken = func.encrypt(email + new Date());
                callback(null);
            }
        },
        checkmail: ['getValues', async function (callback) {
            try {
                if (countryCode !== "" && mobileNumber !== "") {
                    let sql = "select referral_link,referral_id,id,email,otp_verified,mobile_no,iso,country_code,access_token,is_active from user where mobile_no=? and is_deleted=0"
                    let result = await ExecuteQ.Query(req.dbName, sql, [mobileNumber])
                    // multiConnection[request.dbName].query(sql,[mobileNumber],function(err,result){
                    //     if(err){
                    //         let msg = "db error ";
                    //         return sendResponse.sendErrorMessage(msg,reply,500);    
                    //     }else{
                    if (result.length) {

                        logger.debug("====================1===================")
                        if (result[0].otp_verified != 0 && result[0].is_active != 0) {
                            logger.debug("====================2===================")

                            logger.debug("====================3===================")
                            var msg = "User Already exist with this Mobile Number";
                            return sendResponse.sendErrorMessageWithTranslation(req, msg, res, 400);

                        } else {
                            logger.debug("====================5===================")
                            details.id = result[0].id;
                            details.access_token = result[0].access_token;
                            details.email = result[0].email;
                            details.mobile_no = result[0].mobile_no;
                            details.country_code = result[0].country_code
                            details.iso = result[0].iso
                            details.otp_verified = 0;
                            flag = 0;
                            callback(null);
                        }
                    } else {
                        logger.debug("====================6===================")
                        callback(null, result);
                    }
                } else {
                    var sql = "select referral_link,referral_id,id,email,otp_verified,mobile_no,iso,country_code,access_token,is_active from user where email = ? and is_deleted=0 ";
                    let result = await ExecuteQ.Query(req.dbName, sql, [email])
                    // var sts = multiConnection[req.dbName].query(sql, [email], function (err, result) {
                    //  logger.debug("===============in the get Values ===========",sts.sql,err)
                    //    if (err) {
                    //        logger.debug("==========err in get values===========",err)
                    //         var msg = "db error"
                    //         sendResponse.sendErrorMessage(msg,res,500);
                    //     }
                    //     else {
                    if (result.length) {

                        logger.debug("====================1===================")
                        if (result[0].otp_verified != 0 && result[0].is_active != 0) {
                            logger.debug("====================2===================")

                            logger.debug("====================3===================")
                            var msg = "email id already exists";
                            return sendResponse.sendErrorMessageWithTranslation(req, msg, res, 400);

                        } else {
                            logger.debug("====================5===================")
                            details.id = result[0].id;
                            details.access_token = result[0].access_token;
                            details.email = result[0].email;
                            details.mobile_no = result[0].mobile_no;
                            details.country_code = result[0].country_code
                            details.iso = result[0].iso
                            details.otp_verified = 0;
                            flag = 0;
                            callback(null);
                        }
                    } else {
                        logger.debug("====================6===================")
                        callback(null, result);
                    }
                }
            }
            catch (Err) {
                logger.debug("==Err!==", Err)
                var msg = "db error"
                sendResponse.sendErrorMessage(msg, res, 500);
            }
            //     }   
            // })

        }],
        createUser: ['getValues', 'accessToken', 'checkmail', async function (callback) {
            try {
                if (flag == 1) {
                    logger.debug("=========in the create user ===============")
                    var randomize = require('randomatic');
                    let user_created_id = randomize('A0', 30);
                    console.log("===11111111111=uuid=====", user_created_id);

                    var sql = "insert into user (referral_id,email,device_token,device_type,latitude,longitude,password,access_token,otp_verified,user_created_id,country_code,mobile_no)values(?,?,?,?,?,?,?,?,?,?,?,?)";
                    let result = await ExecuteQ.Query(req.dbName, sql, [referCode, email,
                        device_token, device_type, latitude, longitude,
                        password, accessToken, 0,
                        user_created_id, countryCode, mobileNumber])

                    // var sts = multiConnection[req.dbName].query(sql, [referralCode,email,device_token,device_type,latitude,longitude,password,accessToken,0,user_created_id], function (err, result) {
                    //     if (err) {
                    //         logger.debug("======error in create user ==============",err,sts.sql)
                    //         var msg = "db error"
                    //         sendResponse.sendErrorMessage(msg,res,500);
                    //     }
                    //     else {
                    details.id = result.insertId;
                    details.access_token = accessToken;
                    // details.referral_link=result[0].referral_link;
                    details.referral_id = referralCode
                    details.mobile_no = mobileNumber
                    details.country_code = countryCode
                    details.iso = ""
                    details.email = email;
                    details.otp_verified = 0;
                    callback(null, result);
                    //     }
                    // })
                } else {
                    var sql = "update user set password = ? ,device_token = ?,device_type = ? where email = ? ";
                    await ExecuteQ.Query(req.dbName, sql, [password, device_token, device_type, email])
                    // multiConnection[req.dbName].query(sql, [password,device_token,device_type,email], function (err, result) {
                    //   console.log("***************err*********result.....",err,result);
                    //     if (err) {
                    //         var msg = "db error"
                    //         sendResponse.sendErrorMessage(msg,res,500);
                    //     }
                    //     else {
                    callback(null);
                    //     }
                    // })
                }
            }
            catch (Err) {
                var msg = "db error"
                sendResponse.sendErrorMessage(msg, res, 500);
            }
        }],
        checkReferralValidataion: ['createUser', async function (callback) {
            try {
                if (referralCode != "" && referralCode != undefined) {
                    let receivePriceData = await Universal.getRecieverReferralPrice(req.dbName);
                    let givePriceData = await Universal.getGivenReferralPrice(req.dbName);
                    let referralUserData = await ExecuteQ.Query(req.dbName, "select id,email from user where referral_id=?", [referralCode])
                    if (referralUserData && referralUserData.length > 0) {
                        let usedDupEmailPhone = await ExecuteQ.Query(req.dbName, `select * from user join user_referral 
                            on user_referral.to_id=user.id where user_referral.from_id=? and user.country_code=? and user.mobile_no=?`,
                            [referralUserData[0].id, countryCode, mobileNumber]);
                        if (usedDupEmailPhone && usedDupEmailPhone.length > 0) {
                            let msg = "Sorry you have already used this referral code "
                            return sendResponse.sendErrorMessageWithTranslation(req, msg, res, 400);
                        } else {
                            console.log("inelse in else of referal")
                            let insertSqlQuery = `insert into user_referral(from_id,to_id,given_price,receive_price) values(?,?,?,?)`
                            await ExecuteQ.Query(request.dbName, insertSqlQuery, [referralUserData[0].id, userDetail.id, givePriceData, receivePriceData])
                            callback(null)
                        }
                    } else {
                        let msg = "Sorry invalid referral code "
                        return sendResponse.sendErrorMessageWithTranslation(req, msg, res, 400);
                    }
                } else {
                    callback(null)
                }
            } catch (Err) {
                logger.debug("========Err!========", Err)
                var msg = "Something Went Wrong";
                return sendResponse.sendErrorMessageWithTranslation(request, msg, res, 500);
            }
        }],
        genrateOtp: function (callback) {
            if (countryCode !== "" && mobileNumber !== "") {
                otp = Math.floor(Math.random() * 90000) + 10000;
                callback(null);
            } else {
                callback(null);
            }
        },
        sendOtp: ['genrateOtp', async function (callback) {

            if (countryCode !== "" && mobileNumber !== "") {
                let twilioata = await Universal.getTwilioData(req.dbName);
                let twilioAuthyData = await Universal.getTwilioAuthyData(req.dbName);
                let OtpVerification = await Universal.disableOtpVerification(req.dbName);
                let muthofunData = await Universal.getMuthoFunData(req.dbName);
                let semaphoreData = await Universal.getSemaPhoreData(req.dbName);
                let bandWidthData = await Universal.getBandwidthData(req.dbName);

                let message = "Hi there, Your One Time Password is : " + otp

                console.log("=========TWilio==DATA!=========>>", twilioata, Object.keys(twilioata).length);

                if (OtpVerification && OtpVerification.length > 0) {
                    otp = 12345;
                    callback(null);
                }

                else if (Object.keys(muthofunData).length > 0) {
                    var options = {
                        method: 'GET',
                        url: "http://clients.muthofun.com:8901/esmsgw/sendsms.jsp?user=" + muthofunData["muthofun_username"] + "&password=" + muthofunData["muthofun_password"] + "&mobiles=" + countryCode + mobileNumber.toString() + "&sms=" + message + "&unicode=1"
                    };
                    web_request(options, function (err, body) {
                        logger.debug("==muthofun===Err===", err)
                        callback(null);
                    })

                }
                else if (Object.keys(twilioAuthyData).length > 0 &&
                    parseInt(twilioAuthyData.is_twilio_authy_enable) === 1) {

                    let authyData = {
                        email: details.email,
                        phone: mobileNumber,
                        country_code: countryCode,
                    };
                    console.log("$$$$$$$$$$", authyData);
                    let userAuthy = await smsManager.createAuthyUser(
                        twilioAuthyData.authy_production_key,
                        authyData
                    );
                    console.log("Authy wala user", userAuthy);

                    if (userAuthy) {
                        twilio_authy_id = userAuthy.user.id;
                    }

                    let sendOtp = await smsManager.sendToken(
                        twilioAuthyData.authy_production_key,
                        userAuthy.user.id
                    );
                    console.log("&&&&&&&&&&", sendOtp);
                    callback(null);

                } else if (Object.keys(semaphoreData).length > 0) {
                    await Universal.sendSemaphoreMessage(
                        semaphoreData.semaphore_apikey,
                        semaphoreData.semaphore_sendername,
                        message,
                        mobileNumber.toString().replace(/\s/g, '')
                    )
                } else if (Object.keys(bandWidthData).length > 0) {
                    await smsManager.bandwidth(
                        "Hi there, Your One Time Password for " + request.business_name + " is : " + otp,
                        countryCode + mobileNumber.toString().replace(/\s/g, ''),
                        bandWidthData.bandwidth_basic_auth_user_name,
                        bandWidthData.bandwidth_basic_auth_password,
                        bandWidthData.bandwidth_application_id,
                        bandWidthData.bandwidth_user_id,
                        bandWidthData.bandwidth_from_number
                    )

                }

                else {

                    if (Object.keys(twilioata).length > 0) {
                        var client = require('twilio')(twilioata[config.get("twilio.s_id")], twilioata[config.get("twilio.auth_key")]);
                        var smsOptions = {
                            from: twilioata[config.get("twilio.number_key")],
                            to: countryCode + mobileNumber.toString().replace(/\s/g, ''),
                            body: "Hi there, Your One Time Password for " + request.business_name + " is : " + otp
                        };
                        logger.debug("=====smsOptions=>>==", smsOptions)
                        client.messages.create(smsOptions, function (err, message) {
                            console.log("=========Twilio==ER!==", err, message)
                            callback(null);
                        });
                    }
                    else {
                        otp = 12345;
                        callback(null);
                    }
                }

            }
            else {
                callback(null);
            }
        }],
        updateoOtpInDb: ['sendOtp', async function (callback) {
            try {

                if (countryCode !== "" && mobileNumber !== "") {
                    logger.debug("==OTP=======", otp, details.id);
                    var sql = " update user set otp = ?,twilio_authy_id=? where id = ? ";
                    await ExecuteQ.Query(req.dbName, sql, [otp, twilio_authy_id, details.id]);
                    // multiConnection[request.dbName].query(sql,[otp,accessToken],function(err,result){
                    //     if(err){
                    //         var msg = "db error :";
                    //         return sendResponse.sendErrorMessage(msg,reply,500);
                    //     }else{
                    callback(null);
                    //     }
                    // })
                } else {
                    callback(null);
                }
            }
            catch (Err) {
                var msg = "db error :" + Err;
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        }],
        sendEmail: function (callback) {
            callback(null);
        }
    }, function (err, result) {
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(details, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}

/**
 * @description used for making an user from website and app
 */
exports.login = async function (request, reply) {
    logger.debug("==========PARAMS===", request.body)
    var dbConnection;
    var decDbName;
    var secretdbkey = request.headers.secretdbkey;
    let countryCode = request.body.countryCode
    var password;
    var deviceToken;
    var deviceType;
    var details = {}, old_token = "";
    let phoneNumber = request.body.phoneNumber == undefined || request.body.phoneNumber == "" || request.body.phoneNumber == null ? "" : request.body.phoneNumber
    var email = request.body.email;
    let latitude = request.body.latitude != undefined ? request.body.latitude : 30.7333
    let longitude = request.body.longitude != undefined ? request.body.longitude : 76.7794
    let accessToken = ""
    let isOtpVerified = 0;
    let userLoginCheck = await ExecuteQ.Query(request.dbName,
        "select `key`,value from tbl_setting where `key`=? and value='1'",
        ["customer_multiple_login"]);
    if (userLoginCheck && userLoginCheck.length > 0) {
        if (phoneNumber !== "") {
            accessToken = func.encrypt(phoneNumber);
        } else {
            accessToken = func.encrypt(email);
        }
    } else {
        if (phoneNumber !== "") {
            accessToken = func.encrypt(phoneNumber + new Date());
        } else {
            accessToken = func.encrypt(email + new Date());
        }
    }


    async.auto({
        getData: function (callback) {

            if (!(request.body.password)) {
                var msg = "password not found";
                return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 400);
            }

            if (!(request.body.deviceToken)) {

                request.body.deviceToken = "GGG";
            }
            if (request.body.deviceType == undefined || request.body.deviceType == "" || request.body.deviceType == null) {
                var msg = "device type  not found";
                return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 400);
            }

            if (!(request.body.languageId)) {
                var msg = "language  id not found";
                return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 400);
            }

            if (request.body && request.body.password && request.body.deviceToken && request.body.deviceType) {

                password = request.body.password;
                deviceToken = request.body.deviceToken;
                deviceType = request.body.deviceType;
                callback(null);
            } else {
                var msg = "something went wrong";
                sendResponse.sendErrorMessageWithTranslation(request, msg, res, 500);
            }
        },

        verifyData: ['getData', async function (callback) {
            try {
                password = md5(password);
                console.log("password....", password);
                let params = []
                var sql = ""
                if (phoneNumber !== "") {
                    let withoutPlusCountryCode = countryCode.replace(/\+/g, "");
                    sql = " select (SELECT message_id FROM `chats` WHERE (`send_to_type`='ADMIN' or `send_by_type`='ADMIN') and (send_by=user.user_created_id or send_to=user.user_created_id) and (`send_to_type`='USER' or `send_by_type`='USER') order by c_id desc limit 1) as message_id, user_created_id,abn_number,business_name, squareup_cust_id,peach_customer_id,replace(country_code, '+', '') as country_code,access_token,referral_id,dateOfBirth,referral_link,user_created_id,device_type,longitude,latitude,is_active,id,email,replace(replace(replace(replace(mobile_no,'-',''),'(',''),')',''),' ','') as mobile_no,firstname,user_image,otp_verified,customer_payment_id,notification_status,iso,authnet_profile_id,fb_access_token,google_access_token from user where password = ? having country_code='" + withoutPlusCountryCode + "' and mobile_no='" + phoneNumber + "'";
                    params = [password]
                } else {
                    sql = " select (SELECT message_id FROM `chats` WHERE (`send_to_type`='ADMIN' or `send_by_type`='ADMIN') and (send_by=user.user_created_id or send_to=user.user_created_id) and (`send_to_type`='USER' or `send_by_type`='USER') order by c_id desc limit 1) as message_id,longitude,latitude,id_for_invoice,country_code,squareup_cust_id, device_type,user_created_id,abn_number,business_name,peach_customer_id,access_token,referral_id,dateOfBirth,referral_link,user_created_id,is_active,id,email,mobile_no,firstname,authnet_profile_id,user_image,otp_verified,customer_payment_id,notification_status,fb_access_token,iso,google_access_token from user where email = ? and password = ?";
                    params = [email, password]
                }

                let result = await ExecuteQ.Query(request.dbName, sql, params);
                console.log("=sql==Result=", request.dbName, sql, result);

                if (result && result.length > 0) {
                    console.log("=abn_number=user==>>=", result[0].abn_number)
                    if (result[0].is_active == 0) {
                        var msg = "User not Active";
                        sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 400);
                    }
                    else {

                        details.email = result[0].email;
                        details.isOtpVerified = parseInt(result[0].otp_verified);
                        details.referral_id = result[0].referral_id;
                        details.referral_link = result[0].referral_link;
                        old_token = result[0].access_token;
                        details.id_for_invoice = result[0].id_for_invoice
                        // abn_number,business_name
                        details.squareup_cust_id = result[0].squareup_cust_id;
                        details.authnet_profile_id = result[0].authnet_profile_id
                        details.wallet_amount = result[0].wallet_amount
                        details.authnet_profile_id = result[0].authnet_profile_id
                        details.abn_number = result[0].abn_number
                        details.business_name = result[0].business_name
                        details.iso = result[0].iso
                        details.mobile_no = result[0].mobile_no;
                        details.firstname = result[0].firstname;
                        details.gender = result[0].gender;
                        details.user_created_id = result[0].user_created_id
                        details.id = result[0].id;
                        details.user_image = result[0].user_image;
                        details.otp_verified = result[0].otp_verified;
                        details.customer_payment_id = result[0].customer_payment_id
                        details.notification_status = result[0].notification_status
                        details.peach_customer_id = result[0].peach_customer_id
                        details.user_created_id = result[0].user_created_id
                        details.message_id = result[0].message_id
                        details.country_code = result[0].country_code;
                        details.longitude = result[0].longitude;
                        details.latitude = result[0].latitude;
                        details.device_type = result[0].device_type;
                        details.dateOfBirth = result[0].dateOfBirth;
                        details.google_access_token = result[0].google_access_token;
                        details.fb_access_token = result[0].fb_access_token;
                        details.is_subscribed = 0
                        let subscriptionData = await ExecuteQ.Query(request.dbName,
                            "select id from user_subscription where user_id=? and status=?", [details.id, '1']);
                        if (subscriptionData && subscriptionData.length > 0) {
                            details.is_subscribed = 1;
                        } else {
                            details.is_subscribed = 0
                        }

                        callback(null, result);
                    }
                } else {
                    console.log("=Invalide=pwd==>>=")

                    var msg = "email id or password not correct";


                    if (phoneNumber !== "") {
                        msg = "Phone Number or password not correct";
                    }


                    sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 400);
                }

            }
            catch (Err) {
                console.log("===Err!==", Err)
                sendResponse.somethingWentWrongError(reply);
            }
        }],
        updateAccessToken: ['verifyData', async function (callback) {
            try {
                var sql = "update user set latitude=?,longitude=?,access_token = ?, device_token = ?,device_type = ?,is_logged_in = ? where id = ? ";
                var id = details.id;
                logger.debug("============dbname in updateAccessToken========", decDbName)
                await ExecuteQ.Query(request.dbName, sql, [latitude, longitude, accessToken, deviceToken, deviceType, 1, id]);
                details.access_token = accessToken;
                callback(null);

            }
            catch (Err) {
                sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }],
        ridesTokenUpdation: ['updateAccessToken', async function (callback) {
            logger.debug("..................accessToken................", accessToken);
            try {
                let login_datas = {
                    "language_id": 1,
                    "old_token": old_token,
                    "email": email,
                    "latitude": latitude,
                    "longitude": longitude,
                    "new_token": accessToken
                }
                let rideRegistrationEnable = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_registeration']);

                let rideRegistrationPhoneEnable = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_registeration_phone']);


                if (phoneNumber !== "") {

                    if (rideRegistrationPhoneEnable && rideRegistrationPhoneEnable.length > 0) {
                        let baseUrlRideData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_base_url'])
                        let baseUrl = baseUrlRideData && baseUrlRideData.length > 0 ? baseUrlRideData[0].value : config.get("server.rides.api_link");
                        let dbSecretKeyData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_db_secret_key']);
                        let dbSecretKey = dbSecretKeyData && dbSecretKeyData.length > 0 ? dbSecretKeyData[0].value : "";

                        // logger.debug("======baseUrlRideData==baseUrl==dbSecretKey=>>1", baseUrlRideData, baseUrl, dbSecretKey);

                        if (parseInt(rideRegistrationPhoneEnable[0].value) == 1) {
                            // logger.debug("===========loginfdatas======1", login_datas)
                            let rides_registeration_input = {
                                language_id: 1,
                                email: details.email,
                                access_token: accessToken,
                                fcm_id: deviceToken,
                                name: details.firstname,
                                phone_code: details.country_code,
                                phone_number: details.mobile_no,
                                device_type: details.device_type == 1 ? "Ios" : "android",
                                address: "chandigarh",
                                latitude: details.latitude != undefined ? details.latitude : 30.7333,
                                longitude: details.longitude != undefined ? details.longitude : 76.7794,
                                gender: "male",
                                timezone: "+05:30",
                                profile_pic: details.user_image
                            }
                            await common.ridesRegisteration(baseUrl, rides_registeration_input, dbSecretKey);

                        }
                    }

                    callback(null)
                } else {
                    if (rideRegistrationEnable && rideRegistrationEnable.length > 0) {
                        let baseUrlRideData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_base_url'])
                        let baseUrl = baseUrlRideData && baseUrlRideData.length > 0 ? baseUrlRideData[0].value : config.get("server.rides.api_link");
                        let dbSecretKeyData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_db_secret_key']);
                        let dbSecretKey = dbSecretKeyData && dbSecretKeyData.length > 0 ? dbSecretKeyData[0].value : "";

                        console.log("======baseUrlRideData==baseUrl==dbSecretKey=>>2", baseUrlRideData, baseUrl, dbSecretKey);

                        if (parseInt(rideRegistrationEnable[0].value) == 1) {

                            let rides_registeration_input1 = {
                                language_id: 1,
                                email: details.email,
                                access_token: accessToken,
                                fcm_id: deviceToken,
                                name: details.firstname,
                                phone_code: details.country_code,
                                phone_number: details.mobile_no,
                                device_type: details.device_type == 1 ? "Ios" : "android",
                                address: "chandigarh",
                                latitude: details.latitude != undefined ? details.latitude : 30.7333,
                                longitude: details.longitude != undefined ? details.longitude : 76.7794,
                                gender: "male",
                                timezone: "+05:30",
                                profile_pic: details.user_image
                            }
                            await common.ridesRegisteration(baseUrl, rides_registeration_input1, dbSecretKey);

                        }
                        callback(null)
                    } else {
                        logger.debug("==222222222222=====>>", login_datas);
                        callback(null)
                    }
                }
            } catch (Err) {
                callback(null)
            }


        }],
    }, function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            // console.log(".............................details..........", details);
            sendResponse.sendSuccessData(details, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.customerRegisterstepsecond = function (request, reply) {
    logger.debug("===================", request.body)
    var accessToken = 0;
    var countryCode = 0;
    var mobileNumber = 0;
    let notification_status = request.body.notification_status == undefined ? 1 : request.body.notification_status
    let referralCode = request.body.referralCode || ""
    let userDetail;
    let twilio_authy_id = "";
    var otp;
    let isOtpVerified = 0;

    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access Token  not found"
                return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 400);
            }
            if (!(request.body.countryCode)) {
                var msg = "country Code not found"
                return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 400);
            }
            if (!(request.body.mobileNumber)) {
                var msg = "mobile Number  not found";
                return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            countryCode = request.body.countryCode;
            mobileNumber = request.body.mobileNumber;
            callback(null);
        },
        userData: ['getValue', async function (callback) {

            let userData = await ExecuteQ.Query(request.dbName, `select otp_verified,id,email from user where access_token=?`, [accessToken])
            if (userData && userData.length > 0) {
                userDetail = userData[0]
                isOtpVerified = userData[0].otp_verified
                callback(null)
            }
            else {
                var msg = "invalid access token ";
                return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 401);
            }

        }],

        checkPhoneAlreadyExist: ['userData', async function (callback) {
            try {
                let sql = "select id from user where mobile_no=? and is_deleted=0 and otp_verified=1"
                let result = await ExecuteQ.Query(request.dbName, sql, [mobileNumber])
                if (result && result.length > 0) {
                    let msg = "User already registered with this Mobile Number."
                    return sendResponse.sendErrorMessage(msg, reply, 400);
                } else {
                    callback(null);
                }
            }
            catch (Err) {
                let msg = "db error ";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }],
        checkReferralValidataion: ['checkPhoneAlreadyExist', async function (callback) {
            try {
                if (referralCode != "" && referralCode != undefined) {
                    let receivePriceData = await Universal.getRecieverReferralPrice(request.dbName);
                    let givePriceData = await Universal.getGivenReferralPrice(request.dbName);
                    let referralUserData = await ExecuteQ.Query(request.dbName, "select id,email from user where referral_id=?", [referralCode])
                    if (referralUserData && referralUserData.length > 0) {
                        let usedDupEmailPhone = await ExecuteQ.Query(request.dbName, `select * from user join user_referral 
                            on user_referral.to_id=user.id where user_referral.from_id=? and user.country_code=? and user.mobile_no=?`,
                            [referralUserData[0].id, countryCode, mobileNumber]);
                        if (usedDupEmailPhone && usedDupEmailPhone.length > 0) {
                            let msg = "Sorry you have already used this referral code "
                            return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 400);
                        } else {
                            let insertSqlQuery = `insert into user_referral(from_id,to_id,given_price,receive_price) values(?,?,?,?)`
                            await ExecuteQ.Query(request.dbName, insertSqlQuery, [referralUserData[0].id, userDetail.id, givePriceData, receivePriceData])
                            callback(null)
                        }
                    } else {
                        let msg = "Sorry invalid referral code "
                        return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 400);
                    }
                } else {
                    callback(null)
                }
            } catch (Err) {
                logger.debug("========Err!========", Err)
                var msg = "Something Went Wrong";
                return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 500);
            }
        }],
        updateMobile: ['checkReferralValidataion', async function (callback) {
            try {
                var sql = "update user set notification_status=?, mobile_no = ? ,country_code = ? where access_token = ? "; //country code missing
                let result = await ExecuteQ.Query(request.dbName, sql, [notification_status, mobileNumber, countryCode, accessToken]);

                if (result.affectedRows) {
                    callback(null);
                } else {
                    var msg = "invalid access token ";
                    return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 401);
                }

            }
            catch (Err) {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }],
        genrateOtp: function (callback) {
            otp = Math.floor(Math.random() * 90000) + 10000;
            callback(null);
        },
        sendOtp: ['updateMobile', 'genrateOtp', async function (callback) {
            if (countryCode !== "" && mobileNumber !== "") {
                let twilioata = await Universal.getTwilioData(request.dbName);
                let twilioAuthyData = await Universal.getTwilioAuthyData(request.dbName);
                let OtpVerification = await Universal.disableOtpVerification(request.dbName);
                let muthofunData = await Universal.getMuthoFunData(request.dbName);
                let bandWidthData = await Universal.getBandwidthData(request.dbName);
                let semaphoreData = await Universal.getSemaPhoreData(request.dbName);
                let safapaydata = await Universal.getSafaSmsPayKey(request.dbName);
                let krixData = await Universal.getKrixSmsKey(request.dbName);
                let messagebirddata = await Universal.getmessagebirdkey(request.dbName);
                let expert_texting = await Universal.getExpertTextingData(request.dbName);


                let keccelMsgData = await Universal.getKeccelMessagingKeys(request.dbName);
                // KECCEL MESSAGING
                let message = "Hi there, Your One Time Password is : " + otp
                console.log("=========TWilio==DATA!=========>>", twilioata, Object.keys(twilioata).length);
                if (OtpVerification && OtpVerification.length > 0) {
                    console.log(OtpVerification, "OtpVerificationOtpVerification")
                    otp = 12345;
                    callback(null);
                }
                else if (Object.keys(krixData).length > 0) {
                    await smsManager.katrixSmsRequest(
                        krixData.krix_api_key,
                        message,
                        mobileNumber.toString().replace(/\s/g, ''),
                        krixData.krix_sender_id,
                    )
                    callback(null);
                }
                else if (Object.keys(keccelMsgData).length > 0) {
                    var options = {
                        url: " https://api.keccel.com/otp/generate.asp",
                        body:
                        {
                            "token": keccelMsgData["keccel_sms_token"],
                            "from": keccelMsgData["keccel_from"],
                            "to": countryCode + mobileNumber.toString(),
                            "message": "Hi there, Your One Time Password is :  %OTP%",
                            "lifetime": 180
                        },
                        json: true

                    };
                    web_request(options, function (err, body) {
                        logger.debug("==muthofun===Err===", err)
                        callback(null);
                    })
                }
                else if (Object.keys(muthofunData).length > 0) {
                    //     method: 'GET',
                    //     url: "http://clients.muthofun.com:8901/esmsgw/sendsms.jsp?user="+muthofunData["muthofun_username"]+"&password="+muthofunData["muthofun_password"]+"&mobiles="+countryCode+mobileNumber.toString()+"&sms="+message+"&unicode=1"
                    // };
                    // web_request(options, function (err, body) {
                    //     logger.debug("==muthofun===Err===",err)
                    //      callback(null);
                    // })

                }


                else if (Object.keys(messagebirddata).length > 0) {
                    var messagebird = require('messagebird')(messagebirddata[config.get("messagebird.bird_key")]);


                    var params = {
                        'originator': 'MSGBRD',
                        'recipients': [
                            countryCode + mobileNumber.toString().replace(/\s/g, '')
                        ],
                        'body': "Hi there, Your One Time Password for " + request.business_name + " is : " + otp
                    };

                    messagebird.messages.create(params, function (err, response) {
                        if (err) {
                            return console.log(err);
                        }
                        console.log(response, "responseresponse");
                        callback(null);

                    });


                }

                else if (Object.keys(twilioAuthyData).length > 0) {

                    let authyData = {
                        email: userDetail.email,
                        phone: mobileNumber,
                        country_code: countryCode,
                    };
                    console.log("$$$$$$$$$$", authyData);
                    let userAuthy = await smsManager.createAuthyUser(
                        twilioAuthyData.authy_production_key,
                        authyData
                    );
                    console.log("Authy wala user", userAuthy);

                    if (userAuthy) {
                        twilio_authy_id = userAuthy.user.id;
                    }

                    let sendOtp = await smsManager.sendToken(
                        twilioAuthyData.authy_production_key,
                        userAuthy.user.id
                    );
                    console.log("&&&&&&&&&&", sendOtp);
                    callback(null);

                } else if (Object.keys(bandWidthData).length > 0) {
                    await smsManager.bandwidth(
                        "Hi there, Your One Time Password for " + request.business_name + " is : " + otp,
                        countryCode + mobileNumber.toString().replace(/\s/g, ''),
                        bandWidthData.bandwidth_basic_auth_user_name,
                        bandWidthData.bandwidth_basic_auth_password,
                        bandWidthData.bandwidth_application_id,
                        bandWidthData.bandwidth_user_id,
                        bandWidthData.bandwidth_from_number
                    )
                    callback(null);

                }
                else if (Object.keys(semaphoreData).length > 0) {
                    await Universal.sendSemaphoreMessage(
                        semaphoreData.semaphore_apikey,
                        semaphoreData.semaphore_sendername,
                        message,
                        mobileNumber.toString().replace(/\s/g, '')
                    )
                    callback(null);

                } else if (Object.keys(safapaydata).length > 0) {
                    await smsManager.sendSafaPaySms(message);
                    callback(null);
                } else if (Object.keys(expert_texting).length > 0) {
                    let url = `https://www.experttexting.com/ExptRestApi/sms/json/Message/Send?username=${expert_texting['expert_texting_username']}&api_key=${expert_texting['expert_texting_api_key']}&api_secret=${expert_texting['expert_texting_secret_key']}&from=DEFAULT&to=${countryCode + mobileNumber.toString()}&text=${message}&type=text`;

                    logger.debug("==url===", url);

                    var options = {
                        method: 'GET',
                        url: url
                    };
                    web_request(options, function (err, response) {
                        logger.debug("==muthofun===Err===", err, response.statusCode, response.body)
                        callback(null);
                    })

                }
                else {
                    if (Object.keys(twilioata).length > 0) {
                        var client = require('twilio')(twilioata[config.get("twilio.s_id")], twilioata[config.get("twilio.auth_key")]);
                        var smsOptions = {
                            from: twilioata[config.get("twilio.number_key")],
                            to: countryCode + mobileNumber.toString().replace(/\s/g, ''),
                            body: "Hi there, Your One Time Password for " + request.business_name + " is : " + otp
                        };
                        logger.debug("=====smsOptions=>>==", smsOptions)
                        client.messages.create(smsOptions, function (err, message) {
                            console.log("=========Twilio==ER!==", err, message)
                            callback(null);
                        });

                    }
                    else {
                        otp = 12345;
                        callback(null);
                    }
                }
            }
            else {
                callback(null);
            }

        }],
        updateoOtpInDb: ['sendOtp', async function (callback) {
            try {
                logger.debug("==OTP=======", otp)
                var sql = " update user set otp = ?,twilio_authy_id=? where access_token = ? ";
                await ExecuteQ.Query(request.dbName, sql, [otp, twilio_authy_id, accessToken]);
                // multiConnection[request.dbName].query(sql,[otp,accessToken],function(err,result){
                //     if(err){
                //         var msg = "db error :";
                //         return sendResponse.sendErrorMessage(msg,reply,500);
                //     }else{
                callback(null);
                //     }
                // })
            }
            catch (Err) {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }]
    }, function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            sendResponse.sendSuccessData({ access_token: accessToken, isOtpVerified: isOtpVerified }, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.checkOtp = async function (request, reply) {
    var access_token = null;
    var otp = 0;
    var id = 0;
    var dbConnection;
    if (request.headers.secretdbkey != undefined && request.headers.secretdbkey != "") {
        var decipher = crypto.createDecipher(algorithm, crypto_password)
        var decDbName = decipher.update(request.headers.secretdbkey, 'hex', 'utf8')
        decDbName += decipher.final('utf8');
        console.log("==DB_NAME==", decDbName)
        dbConnection = multiConnection[decDbName]
    }
    else {
        dbConnection = connection
    }
    let verifyToken = "";
    let twilioAuthyData = await Universal.getTwilioAuthyData(request.dbName);
    let keccelSmsData = await Universal.getKeccelMessagingKeys(request.dbName);

    let dataToSend = {}
    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access Token  not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.otp)) {
                var msg = "otp Code not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.languageId)) {
                var msg = "language  id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            access_token = request.body.accessToken;
            otp = request.body.otp;
            callback(null);
        },
        checkOtp: async function (callback) {
            try {
                if (Object.keys(twilioAuthyData).length > 0 &&
                    parseInt(twilioAuthyData.is_twilio_authy_enable) === 1) {

                    let sql = "select id,twilio_authy_id from user where  access_token = ?"; //country code missing
                    let result = await ExecuteQ.Query(request.dbName, sql, [access_token])

                    let payloadData = {
                        authy_id: result[0].twilio_authy_id,
                        token: otp,
                    };

                    verifyToken = await smsManager.verifyToken(
                        twilioAuthyData.authy_production_key,
                        payloadData
                    );
                    console.log("Data in verify otp", verifyToken);
                    if (!verifyToken.success) {
                        if (request.body.languageId == 14) {
                            let msg = "invalid otp";
                            return sendResponse.sendErrorMessage(msg, reply, 400);
                        } else {
                            let msg = " غير صالحةمكتب المدعي العام  ";
                            return sendResponse.sendErrorMessage(msg, reply, 400);
                        }
                    } else {
                        callback(null);
                    }

                }

                else if (Object.keys(keccelSmsData).length > 0) {
                    let userDetails = await ExecuteQ.Query(req.dbName, ` select id,country_code,mobile_no where access_token=${access_token}`, [])
                    let phoneNumber = userDetails[0].country_code + userDetails[0].mobile_no
                    var options = {
                        method: 'GET',
                        url: "https://api.keccel.com/otp/validate.asp",
                        body:
                        {
                            "token": keccelSmsData[""],
                            "to": phoneNumber,
                            "from": keccelSmsData[""],
                            "otp": otp
                        }
                        ,
                        json: true

                    };
                    web_request(options, function (err, res) {
                        logger.debug("==keccelSmsData===Err===", res.body)

                        let statusOtp = res.body.statusOTP

                        if (statusOtp === 'VALID') {
                            id = userDetails[0].id;
                            callback(null);
                        } else {
                            if (request.body.languageId == 14) {
                                var msg = "invalid otp";
                                return sendResponse.sendErrorMessage(msg, reply, 400);
                            } else {
                                var msg = " غير صالحةمكتب المدعي العام  ";
                                return sendResponse.sendErrorMessage(msg, reply, 400);
                            }
                        }

                        callback(null);
                    })
                }


                else {

                    var sql = "select id from user where  otp = ? and  access_token = ?"; //country code missing
                    let result = await ExecuteQ.Query(request.dbName, sql, [otp, access_token]);
                    if (result.length) {
                        id = result.id;
                        callback(null);
                    } else {
                        if (request.body.languageId == 14) {
                            var msg = "invalid otp";
                            return sendResponse.sendErrorMessage(msg, reply, 400);
                        } else {
                            var msg = " غير صالحةمكتب المدعي العام  ";
                            return sendResponse.sendErrorMessage(msg, reply, 400);
                        }
                    }

                }

            }
            catch (Err) {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        },
        updateOtp: ['checkOtp', async function (callback) {
            try {
                var sql = "update user set 	otp_verified = ?,is_active = ? where access_token = ? ";
                await ExecuteQ.Query(request.dbName, sql, [1, 1, access_token])

                var sql1 = "select * from user where    access_token = ?"; //country code missing
                let result = await ExecuteQ.Query(request.dbName, sql1, [access_token])
                dataToSend = result[0];
                callback(null);
            }
            catch (Err) {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }]
    }, function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            sendResponse.sendSuccessData(dataToSend, constant.responseMessage.SUCCESS, reply, 200);

        }
    })
}

exports.checkOtpNew = function (request, reply) {
    var access_token = null;
    var otp = 0;
    var id = 0;
    var dbConnection;
    if (request.headers.secretdbkey != undefined && request.headers.secretdbkey != "") {
        var decipher = crypto.createDecipher(algorithm, crypto_password)
        var decDbName = decipher.update(request.headers.secretdbkey, 'hex', 'utf8')
        decDbName += decipher.final('utf8');
        console.log("==DB_NAME==", decDbName)
        dbConnection = multiConnection[decDbName]
    }
    else {
        dbConnection = connection
    }
    let dataToSend = {}
    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access Token  not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.otp)) {
                var msg = "otp Code not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.languageId)) {
                var msg = "language  id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            access_token = request.body.accessToken;
            otp = request.body.otp;
            callback(null);
        },
        checkOtp: async function (callback) {
            try {
                var sql = "select * from user where  otp = ? and  access_token = ?"; //country code missing
                let result = await ExecuteQ.Query(request.dbName, sql, [otp, access_token])

                // multiConnection[request.dbName].query(sql,[otp,access_token],function(err,result){
                //    if(err){
                //         var msg = "db error :";
                //         return sendResponse.sendErrorMessage(msg,reply,500);
                //     }else{
                if (result.length) {
                    id = result.id;
                    dataToSend = result[0]
                    callback(null);
                } else {
                    if (request.body.languageId == 14) {
                        var msg = "invalid otp";
                        return sendResponse.sendErrorMessage(msg, reply, 400);
                    } else {
                        var msg = " غير صالحةمكتب المدعي العام  ";
                        return sendResponse.sendErrorMessage(msg, reply, 400);
                    }
                }
                //     }
                // })
            }
            catch (Err) {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        },
        updateOtp: ['checkOtp', async function (callback) {
            try {
                var sql = "update user set 	otp_verified = ?,is_active = ? where access_token = ? ";
                await ExecuteQ.Query(request.dbName, sql, [1, 1, access_token])

                var sql1 = "select * from user where    access_token = ?"; //country code missing
                let result = await ExecuteQ.Query(request.dbName, sql1, [access_token])
                dataToSend = result[0];

                // multiConnection[request.dbName].query(sql,[1,1,access_token],function(err,result){
                //     if(err){
                //         var msg = "db error :";
                //         return sendResponse.sendErrorMessage(msg,reply,500);
                //     }else{
                callback(null);
                //     }
                // })
            }
            catch (Err) {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }]
    }, function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            sendResponse.sendSuccessData(dataToSend, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

/**
 * @desc used for listing an suppliers from acco to category
 */
//***********below api pending language id******//
exports.getSupplierList = async function (request, reply) {

    var areaId = 0;
    var categoryId = 0;
    var languageId = 0;
    var subCat = 0;
    var supplierList = {};
    var supplier = []
    var day = moment().isoWeekday();
    day = day - 1;
    var time = new Date()
    var time1 = new Date(time);
    time1.setMinutes(time.getMinutes() + 00);
    time1.setHours(time.getHours() + 4);
    var time2 = time1.toTimeString().split(" ")[0];
    var categoiesDataTemp;
    var rediusFlag = false;
    var latitude = request.body.latitude;
    var longitude = request.body.longitude;
    console.log("==BODYPRAM=", request.body);
    let sort_by = request.body.sort_by !== undefined && request.body.sort_by !== 0
        && request.body.sort_by !== null ? request.body.sort_by : 0
    let filter_by = request.body.filter_by !== undefined ? request.body.filter_by : 0;

    let enable_subscription_priority_supplier = await Execute.Query(
        request.dbName,
        " select `key`, value from tbl_setting where `key`=? and value=1",
        ["enable_subscription_priority_supplier"]);

    async.auto({
        getValue: function (callback) {
            // if(!(request.body.areaId)){
            //     var msg = "area  id not found";
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            if (!(request.body.categoryId)) {
                var msg = "category  id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language  id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (request.body && request.body.categoryId && request.body.languageId) {
                // areaId = request.body.areaId;
                categoryId = request.body.categoryId;
                // languageId = request.body.languageId;
                languageId = 14;
                subCat = parseInt(request.body.subCat);
                //console.log("aaaaaaa",typeof(subCat),subCat);
                callback(null);
            } else {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
        },
        getRediusSupplier: ['getValue', async function (callback) {
            try {
                var sql = "select onOff,reset from cache "
                let result = await ExecuteQ.Query(request.dbName, sql, []);
                result = result[0];


                if (result.onOff == 1) {
                    rediusFlag = false;
                    callback(null);
                }
                else if (result.reset == 0) {
                    redisClient.expire("categoires", 1);
                    redisClient.expire("supplierlist", 1);
                    redisClient.expire("supplierDetails", 1);
                    redisClient.expire("subCategories", 1);
                    redisClient.expire("productList", 1);
                    var sql = "update cache set reset = ?  where 1";
                    multiConnection[request.dbName].query(sql, [1], function (err, result) {
                        console.log("......err......result.");
                        rediusFlag = false;
                        callback(null);

                    })
                } else {

                    var temp = areaId + categoryId + languageId + subCat;
                    redisClient.HGET("supplierlist", temp, function (err, obj) {
                        /*console.dir(obj)*/
                        if (obj != null) {
                            categoiesDataTemp = obj;
                            rediusFlag = false;
                            callback(null);
                        } else {
                            rediusFlag = false;
                            callback(null);
                        }
                    });
                }
            }
            catch (Err) {
                logger.debug("======Err!==", Err)
                callback(Err)
            }

        }],
        getSupplierList: ['getRediusSupplier', async function (callback) {
            try {
                let mUnit = await Universal.getMeausringUnit(request.dbName);
                console.log("===rediusFlag=", rediusFlag)





                if (rediusFlag == true) {
                    callback(null);
                } else {

                    let planQuery = "";

                    let subScriptionData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])

                    planQuery = subScriptionData && subScriptionData.length > 0 ? " and ss.status='active' and ss.is_approved=1 " : " "




                    let active_inactiveCheck = await ExecuteQ.Query(request.dbName,
                        "select `key`,value from tbl_setting where `key`=? and value='1' ", ["active_inactive"])

                    let active_inactive_filter = "and s.is_live = 1 and  sb.is_live = 1 and  s.is_active = 1 ";
                    if (active_inactiveCheck && active_inactiveCheck.length > 0)
                        active_inactive_filter = "or s.is_live = 1 or  sb.is_live = 1 or  s.is_active = 1  or s.is_live = 0 or  sb.is_live = 0 or  s.is_active = 0 ";

                    console.log("active_inactiveCheck+++++++++", active_inactive_filter);

                    let enable_zone_geofence = await Execute.Query(
                        request.dbName,
                        " select `key`, value from tbl_setting where `key`=? and value=1",
                        ["enable_zone_geofence"])

                    let zone_wise_check = "";
                    let radius_check_query = " having distance<s.delivery_radius ";

                    if (enable_zone_geofence && enable_zone_geofence.length > 0) {
                        radius_check_query = " having is_under_zone>0 ";
                        zone_wise_check = ` IF((select st_contains(coordinates,point(${latitude},${longitude})) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone, `;

                    }

                    let orderTypeCondition = ""

                    if (parseInt(filter_by) == 1) {
                        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
                    } else if (parseInt(filter_by) == 2) {
                        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
                    } else if (parseInt(filter_by) == 3) {
                        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
                    }

                    if (enable_subscription_priority_supplier && enable_subscription_priority_supplier.length > 0) {

                        if (subCat) {


                            var sql = "select *,if( count(*)>1,1,0) as is_multi_branch from ( select s.id,s.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.total_reviews,s.rating,sb.min_order,sb.id as supplier_branch_id, ";
                            sql += " s.is_dine_in,s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber, s.preparation_time, sml.address,sml.name,s.logo,st.is_open as status,st.start_time,st.end_time," +
                                " s.payment_method,sc.commission_package,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( s.latitude ) )* cos( radians( s.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( s.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
                                " " + zone_wise_check + " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
                            sql += " s.id = sb.supplier_id join supplier_ml " +
                                " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id  join supplier_subscription ss on ss.supplier_id = s.id  where ";
                            sql += " sc.category_id = ? and (sc.sub_category_id = ? or sc.detailed_sub_category_id = ?)  " + active_inactive_filter + " and ss.status='active'  and s.is_deleted =0 and sml.language_id = ? " +
                                "and sb.is_deleted = ? " + orderTypeCondition + "  and st.week_id =? GROUP BY s.id,sb.id " + radius_check_query + "  ) as sub group by id union ";


                            sql += "select *,if( count(*)>1,1,0) as is_multi_branch from ( select s.id,s.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.total_reviews,s.rating,sb.min_order,sb.id as supplier_branch_id, ";
                            sql += " s.is_dine_in,s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber, s.preparation_time, sml.address,sml.name,s.logo,st.is_open as status,st.start_time,st.end_time," +
                                " s.payment_method,sc.commission_package,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( s.latitude ) )* cos( radians( s.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( s.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
                                " " + zone_wise_check + " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
                            sql += " s.id = sb.supplier_id join supplier_ml " +
                                " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id  join supplier_subscription ss on ss.supplier_id = s.id  where ";
                            sql += " sc.category_id = ? and (sc.sub_category_id = ? or sc.detailed_sub_category_id = ?)  " + active_inactive_filter + "  and ss.status='active' and s.is_deleted =0  and sml.language_id = ? " +
                                "and sb.is_deleted = ? " + orderTypeCondition + "  and st.week_id =? GROUP BY s.id,sb.id " + radius_check_query + " order by s.rating  ) as sub group by id";

                            let result = await ExecuteQ.Query(request.dbName, sql,
                                [categoryId, subCat, subCat, languageId, 0, day, categoryId, subCat, subCat, languageId, 0, day])

                            let supplier_data = [], supplierData = [];

                            if (result.length) {
                                for (const [index, i] of result.entries()) {
                                    i.timing = [];
                                    let timing = await getSupTiming(request.dbName, i.id)
                                    i.timing = timing
                                    supplierData.push(i)
                                    if (index == (result.length - 1)) {
                                        supplier = supplierData;
                                        if (parseInt(sort_by) == 2) {
                                            // supplierData = _.sortBy(supplierData,'rating').reverse()

                                        }
                                        callback(null, supplierData);
                                    }
                                }
                            }

                            else {
                                callback(null);
                            }
                        }
                        else {


                            var sql = "select *,if( count(*)>1,1,0) as is_multi_branch from ( select s.id,s.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.total_reviews,s.rating,sb.min_order,sb.id as supplier_branch_id, ";
                            sql += "s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code, sml.address,sml.name,s.logo,st.is_open as status,st.start_time,st.end_time," +
                                " " + zone_wise_check + " s.is_dine_in,s.is_scheduled, s.preparation_time, s.payment_method,sc.commission_package,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( s.latitude ) )* cos( radians( s.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( s.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
                                " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
                            sql += " s.id = sb.supplier_id join supplier_ml " +
                                " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id    join supplier_subscription ss on ss.supplier_id = s.id    where ";
                            sql += " sc.category_id = ?    " + active_inactive_filter + "  and ss.status='active' and s.is_deleted =0  and sml.language_id = ? " +
                                "and sb.is_deleted = ? " + orderTypeCondition + "  and st.week_id =? GROUP BY s.id,sb.id " + radius_check_query + " ) as sub group by id union  ";

                            sql += "select *,if( count(*)>1,1,0) as is_multi_branch from ( select s.id,s.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.total_reviews,s.rating,sb.min_order,sb.id as supplier_branch_id, ";
                            sql += "s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code, sml.address,sml.name,s.logo,st.is_open as status,st.start_time,st.end_time," +
                                " " + zone_wise_check + " s.is_dine_in,s.is_scheduled, s.preparation_time, s.payment_method,sc.commission_package,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( s.latitude ) )* cos( radians( s.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( s.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
                                " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
                            sql += " s.id = sb.supplier_id join supplier_ml " +
                                " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id where ";
                            sql += " sc.category_id = ? and " + active_inactive_filter + " and  s.is_deleted =0 and  sml.language_id = ? " +
                                "and sb.is_deleted = ? " + orderTypeCondition + "  and st.week_id =? GROUP BY s.id,sb.id " + radius_check_query + " order by s.rating ) as sub group by id";

                            let result = await ExecuteQ.Query(request.dbName, sql, [categoryId, languageId, 0, day, categoryId, languageId, 0, day]);

                            let supplierData = [];
                            if (result.length) {
                                for (const [index, i] of result.entries()) {
                                    i.timing = [];
                                    let timing = await getSupTiming(request.dbName, i.id)
                                    i.timing = timing
                                    supplierData.push(i)
                                    if (index == (result.length - 1)) {
                                        supplier = supplierData;
                                        if (parseInt(sort_by) == 2) {
                                            supplierData = _.sortBy(supplierData, 'rating').reverse()

                                        }
                                        callback(null, supplierData);
                                    }
                                }
                            }
                            else {
                                callback(null);
                            }
                        }
                    } else {

                        if (subCat) {

                            var sql = "select *,if( count(*)>1,1,0) as is_multi_branch from ( select s.id,s.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.total_reviews,s.rating,sb.min_order,sb.id as supplier_branch_id, ";
                            sql += " s.is_dine_in,s.is_scheduled, s.mobile_number_1 as supplierPhoneNumber,s.preparation_time, sml.address,sml.name,s.logo,st.is_open as status,st.start_time,st.end_time," +
                                " s.payment_method,sc.commission_package,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( s.latitude ) )* cos( radians( s.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( s.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
                                " " + zone_wise_check + " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
                            sql += " s.id = sb.supplier_id join supplier_ml " +
                                " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id where ";
                            sql += " sc.category_id = ? and (sc.sub_category_id = ? or sc.detailed_sub_category_id = ?) " + active_inactive_filter + " and s.is_deleted =0 and sml.language_id = ? " +
                                "and sb.is_deleted = ? " + orderTypeCondition + "  and st.week_id =? GROUP BY s.id,sb.id " + radius_check_query + " ) as sub group by id";

                            let result = await ExecuteQ.Query(request.dbName, sql,
                                [categoryId, subCat, subCat, languageId, 0, day])

                            let supplier_data = [], supplierData = [];

                            if (result.length) {
                                for (const [index, i] of result.entries()) {
                                    i.timing = [];
                                    let timing = await getSupTiming(request.dbName, i.id)
                                    i.timing = timing
                                    supplierData.push(i)
                                    if (index == (result.length - 1)) {
                                        supplier = supplierData;
                                        if (parseInt(sort_by) == 2) {
                                            supplierData = _.sortBy(supplierData, 'rating').reverse()

                                        }
                                        callback(null, supplierData);
                                    }
                                }
                            }

                            else {
                                callback(null);
                            }
                        }
                        else {


                            var sql = "select *,if( count(*)>1,1,0) as is_multi_branch from ( select s.id,s.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.total_reviews,s.rating,sb.min_order,sb.id as supplier_branch_id, ";
                            sql += "s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code, sml.address,sml.name,s.logo,st.is_open as status,st.start_time,st.end_time," +
                                " " + zone_wise_check + " s.is_dine_in,s.is_scheduled, s.preparation_time, s.payment_method,sc.commission_package,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( s.latitude ) )* cos( radians( s.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( s.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
                                " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
                            sql += " s.id = sb.supplier_id join supplier_ml " +
                                " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id where ";
                            sql += " sc.category_id = ? " + active_inactive_filter + "  and s.is_deleted =0 and sml.language_id = ? " +
                                "and sb.is_deleted = ? " + orderTypeCondition + "  and st.week_id =? GROUP BY s.id,sb.id " + radius_check_query + " ) as sub group by id";

                            let result = await ExecuteQ.Query(request.dbName, sql, [categoryId, languageId, 0, day]);

                            let supplierData = [];
                            if (result.length) {
                                for (const [index, i] of result.entries()) {
                                    i.timing = [];
                                    let timing = await getSupTiming(request.dbName, i.id)
                                    i.timing = timing
                                    supplierData.push(i)
                                    if (index == (result.length - 1)) {
                                        supplier = supplierData;
                                        if (parseInt(sort_by) == 2) {
                                            supplierData = _.sortBy(supplierData, 'rating').reverse()

                                        }
                                        callback(null, supplierData);
                                    }
                                }
                            }
                            else {
                                callback(null);
                            }
                        }
                    }



                }
            }
            catch (Err) {
                callback(Err)
            }
        }],

        resetPackage: ['getSupplierList', function (callback) {
            if (rediusFlag == true) {
                callback(null)
            } else {
                if (supplier.length) {
                    for (var i = 0; i < supplier.length; i++) {
                        (function (i) {
                            if (supplier[i].onOffComm == 1) {
                                if (supplier[i].is_sponsor == 1) {
                                    supplier[i].new_package = 4
                                } else {
                                    supplier[i].new_package = 0
                                }
                                supplier[i].commission_package = 3;
                            }
                            else {
                                if (supplier[i].is_sponsor == 1) {
                                    supplier[i].new_package = 4
                                } else {
                                    supplier[i].new_package = 0
                                }
                                supplier[i].commission_package = 4;

                            }
                            if (i == (supplier.length - 1)) {
                                //   console.log(".......sup",supplier)
                                callback(null);
                            }
                        }(i))
                    }
                }
                else {
                    callback(null)
                }
            }
        }],
        getPlatinumPackage: ['resetPackage', function (callback) {
            if (rediusFlag == true) {
                callback(null)
            } else {
                if (supplier.length) {
                    getPackage(request.dbName, reply, 2, categoryId, function (err, platinum) {
                        if (err) {
                            console.log("err", err);
                            var msg = "db error :";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            console.log("..platinum...", platinum, platinum.length);
                            var len = platinum.length;
                            if (len) {
                                var supplierLength = supplier.length;
                                for (var i = 0; i < supplierLength; i++) {
                                    (function (i) {
                                        for (var j = 0; j < len; j++) {
                                            (function (j) {
                                                if (platinum[j].supplier_id == supplier[i].id) {
                                                    if (supplier[i].is_sponsor == 0) {
                                                        supplier[i].new_package = 3;
                                                    }
                                                    supplier[i].commission_package = 2;
                                                    if (j == (len - 1) && i == (supplierLength - 1)) {
                                                        callback(null);
                                                    }
                                                }
                                                else {
                                                    if (j == (len - 1) && i == (supplierLength - 1)) {
                                                        callback(null);
                                                    }
                                                }
                                            }(j))
                                        }
                                    }(i))
                                }
                            }
                            else {
                                callback(null)
                            }
                        }
                    });
                }
                else {
                    callback(null)
                }
            }


        }],
        getGoldPackage: ['resetPackage', function (callback) {

            if (rediusFlag == true) {
                callback(null)
            } else {

                if (supplier.length) {
                    getPackage(request.dbName, reply, 0, categoryId, function (err, gold) {
                        if (err) {
                            console.log("err", err);
                            var msg = "db error :";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                        else {
                            console.log("..gold...", gold, gold.length);
                            var len = gold.length;
                            if (len) {
                                var supplierLength = supplier.length;
                                for (var i = 0; i < supplierLength; i++) {
                                    (function (i) {
                                        for (var j = 0; j < len; j++) {
                                            (function (j) {
                                                if (gold[j].supplier_id == supplier[i].id) {
                                                    supplier[i].commission_package = 0;
                                                    if (supplier[i].is_sponsor == 0) {
                                                        supplier[i].new_package = 2;
                                                    }
                                                    if (j == (len - 1) && i == (supplierLength - 1)) {
                                                        callback(null);
                                                    }
                                                }
                                                else {
                                                    if (j == (len - 1) && i == (supplierLength - 1)) {
                                                        callback(null);
                                                    }
                                                }
                                            }(j))
                                        }
                                    }(i))
                                }
                            }
                            else {
                                callback(null)
                            }

                        }
                    });
                }
                else {
                    callback(null)
                }
            }


        }],
        getSilverPackage: ['resetPackage', function (callback) {
            if (rediusFlag == true) {
                callback(null)
            } else {
                if (supplier.length) {
                    getPackage(request.dbName, reply, 1, categoryId, function (err, silver) {
                        if (err) {
                            console.log("err", err);
                            var msg = "db error :";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                        else {
                            var len = silver.length;
                            console.log("..silver...", silver, silver.length);
                            if (len) {
                                var supplierLength = supplier.length;
                                for (var i = 0; i < supplierLength; i++) {
                                    (function (i) {
                                        for (var j = 0; j < len; j++) {
                                            (function (j) {
                                                if (silver[j].supplier_id == supplier[i].id) {
                                                    supplier[i].commission_package = 1;
                                                    if (supplier[i].is_sponsor == 0) {
                                                        supplier[i].new_package = 1;
                                                    }
                                                    if (j == (len - 1) && i == (supplierLength - 1)) {
                                                        callback(null);
                                                    }
                                                }
                                                else {
                                                    if (j == (len - 1) && i == (supplierLength - 1)) {
                                                        callback(null);
                                                    }
                                                }
                                            }(j))
                                        }
                                    }(i))
                                }
                            }
                            else {
                                callback(null);
                            }
                        }
                    });
                }
                else {
                    callback(null)
                }
            }


        }],
    }, function (err, result) {
        if (err) {
            console.log("======Err!==", err)
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {

            console.log("..................rediusFlag..................", rediusFlag);



            if (rediusFlag == true) {
                categoiesDataTemp = JSON.parse(categoiesDataTemp);

                //    console.log("............................suplier list ...................cache");

                if (supplierRadisArray == 0) {
                    redisClient.expire("supplierlist", 5);
                    supplierRadisArray = 1;
                }
                sendResponse.sendSuccessData(categoiesDataTemp, constant.responseMessage.SUCCESS, reply, 200);

            } else {

                supplierList.supplierList = supplier;
                var data = supplierList.supplierList;
                //console.log(".............data,length...........",data.length);
                // console.log(".............data,length...........",data.length);
                if (data.length) {
                    var result1 = data.sort(func.sort_by('new_package', true, parseInt));


                    supplierList.supplierList = result1;
                }
                else {
                    supplierList.supplierList = [];
                }
                //  console.log("............................suplier list ...................live");
                supplierList = JSON.stringify(supplierList);
                supplierList = JSON.parse(supplierList);
                var temp = areaId + categoryId + languageId + subCat;
                redisClient.hmset("supplierlist", temp, JSON.stringify(supplierList));

                logger.debug("=========supplier list before sorting======", supplierList)

                if (parseInt(sort_by) == 2) {
                    supplierList.supplierList = _.sortBy(supplierList.supplierList, "rating").reverse();
                }

                logger.debug("=========supplier list after sorting======", supplierList)
                sendResponse.sendSuccessData(supplierList, constant.responseMessage.SUCCESS, reply, 200);
            }


        }
    })
}

//***********below api pending language id******//
exports.getSupplierBranchList = function (request, reply) {
    var areaId = 0;
    var languageId = 0;
    var categoryId = 0;
    var supplierId = 0;
    var supplierList = {};
    var supplier = []
    var day = moment().isoWeekday();
    day = day - 1;
    var time = new Date()
    var time1 = new Date(time);
    time1.setMinutes(time.getMinutes() + 00);
    time1.setHours(time.getHours() + 4);
    var time2 = time1.toTimeString().split(" ")[0];
    var categoiesDataTemp;
    var rediusFlag = false;
    var latitude = request.body.latitude;
    var longitude = request.body.longitude;
    console.log("==BODYPRAM=", request.body);

    async.auto({
        getValue: function (callback) {
            // if(!(request.body.areaId)){
            //     var msg = "area  id not found";
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            if (!(request.body.supplierId)) {
                var msg = "supplierId id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language  id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (request.body && request.body.supplierId && request.body.languageId) {
                // areaId = request.body.areaId;
                supplierId = request.body.supplierId;
                languageId = request.body.languageId;
                callback(null);
            } else {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
        },
        getRediusSupplier: ['getValue', function (callback) {
            var sql = "select onOff,reset from cache "
            multiConnection[request.dbName].query(sql, [], function (err, result) {
                if (err) {
                    callback(err)
                }
                else {
                    result = result[0];
                    if (result.onOff == 1) {
                        rediusFlag = false;
                        callback(null);
                    } else if (result.reset == 0) {
                        redisClient.expire("supplierlist", 1);
                        redisClient.expire("supplierDetails", 1);
                        redisClient.expire("subCategories", 1);
                        redisClient.expire("productList", 1);
                        var sql = "update cache set reset = ?  where 1";
                        multiConnection[dbName].query(sql, [1], function (err, result) {
                            console.log("......err......result.");
                            rediusFlag = false;
                            callback(null);

                        })
                    } else {

                        var temp = areaId + supplierId + languageId;
                        redisClient.HGET("supplierlist", temp, function (err, obj) {
                            /*console.dir(obj)*/
                            if (obj != null) {
                                categoiesDataTemp = obj;
                                rediusFlag = true;
                                callback(null);
                            } else {
                                rediusFlag = false;
                                callback(null);
                            }
                        });
                    }
                }

            })


        }],
        getSupplierList: ['getRediusSupplier', async function (callback) {
            console.log("===rediusFlag=", rediusFlag)

            let mUnit = await Universal.getMeausringUnit(request.dbName);
            // Search suppler according to branch only
            var sql = "select s.id,sb.delivery_radius,si.image_path as supplier_image,sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.total_reviews,s.rating,sb.id as supplier_branch_id,sb.branch_name as supplier_branch_name, ";
            sql += " sb.address,sml.name,sb.logo,s.id,st.is_open as status,st.start_time,st.end_time,s.total_reviews," +
                " s.is_dine_in, s.rating,s.payment_method,sc.commission_package,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from supplier_category sc join supplier s on s.id = " +
                " sc.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on ";
            sql += " s.id = sb.supplier_id join supplier_ml " +
                " sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id=s.id where ";
            sql += " s.id = ? and s.is_live = ? and s.is_active = ? and s.is_deleted =0 and sb.is_live = ? and sml.language_id = ? " +
                "and sb.is_deleted = ?  and st.week_id =? GROUP BY s.id,sb.id having distance<sb.delivery_radius ";

            var stmt = multiConnection[request.dbName].query(sql, [supplierId, 1, 1, 1, 14, 0, day], async function (err, result) {
                console.log("= sub branch-------------------", stmt.sql)
                if (err) {
                    console.log("............err...................................", err);
                    var msg = "db error:";
                    return sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    let supplierData = [];
                    if (result.length) {
                        for (const [index, i] of result.entries()) {
                            i.timing = [];
                            let timing = await getSupTiming(request.dbName, i.id)
                            i.timing = timing
                            supplierData.push(i)
                            if (index == (result.length - 1)) {
                                supplier = supplierData;
                                callback(null, supplierData);
                            }
                        }

                    }
                    else {
                        callback(null);
                    }
                }
            })

        }],

        resetPackage: ['getSupplierList', function (callback) {

            if (supplier.length) {
                for (var i = 0; i < supplier.length; i++) {
                    (function (i) {
                        if (supplier[i].onOffComm == 1) {
                            if (supplier[i].is_sponsor == 1) {
                                supplier[i].new_package = 4
                            } else {
                                supplier[i].new_package = 0
                            }
                            supplier[i].commission_package = 3;
                        }
                        else {
                            if (supplier[i].is_sponsor == 1) {
                                supplier[i].new_package = 4
                            } else {
                                supplier[i].new_package = 0
                            }
                            supplier[i].commission_package = 4;

                        }
                        if (i == (supplier.length - 1)) {
                            //   console.log(".......sup",supplier)
                            callback(null);
                        }
                    }(i))
                }
            }
            else {
                callback(null)
            }
        }],
        getPlatinumPackage: ['resetPackage', function (callback) {

            if (supplier.length) {
                getPackage(request.dbName, reply, 2, categoryId, function (err, platinum) {
                    if (err) {
                        console.log("err", err);
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        console.log("..platinum...", platinum, platinum.length);
                        var len = platinum.length;
                        if (len) {
                            var supplierLength = supplier.length;
                            for (var i = 0; i < supplierLength; i++) {
                                (function (i) {
                                    for (var j = 0; j < len; j++) {
                                        (function (j) {
                                            if (platinum[j].supplier_id == supplier[i].id) {
                                                if (supplier[i].is_sponsor == 0) {
                                                    supplier[i].new_package = 3;
                                                }
                                                supplier[i].commission_package = 2;
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                            else {
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                        }(j))
                                    }
                                }(i))
                            }
                        }
                        else {
                            callback(null)
                        }
                    }
                });
            }
            else {
                callback(null)
            }



        }],
        getGoldPackage: ['resetPackage', function (callback) {



            if (supplier.length) {
                getPackage(request.dbName, reply, 0, categoryId, function (err, gold) {
                    if (err) {
                        console.log("err", err);
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        console.log("..gold...", gold, gold.length);
                        var len = gold.length;
                        if (len) {
                            var supplierLength = supplier.length;
                            for (var i = 0; i < supplierLength; i++) {
                                (function (i) {
                                    for (var j = 0; j < len; j++) {
                                        (function (j) {
                                            if (gold[j].supplier_id == supplier[i].id) {
                                                supplier[i].commission_package = 0;
                                                if (supplier[i].is_sponsor == 0) {
                                                    supplier[i].new_package = 2;
                                                }
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                            else {
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                        }(j))
                                    }
                                }(i))
                            }
                        }
                        else {
                            callback(null)
                        }

                    }
                });
            }
            else {
                callback(null)
            }



        }],
        getSilverPackage: ['resetPackage', function (callback) {

            if (supplier.length) {
                getPackage(request.dbName, reply, 1, categoryId, function (err, silver) {
                    if (err) {
                        console.log("err", err);
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        var len = silver.length;
                        console.log("..silver...", silver, silver.length);
                        if (len) {
                            var supplierLength = supplier.length;
                            for (var i = 0; i < supplierLength; i++) {
                                (function (i) {
                                    for (var j = 0; j < len; j++) {
                                        (function (j) {
                                            if (silver[j].supplier_id == supplier[i].id) {
                                                supplier[i].commission_package = 1;
                                                if (supplier[i].is_sponsor == 0) {
                                                    supplier[i].new_package = 1;
                                                }
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                            else {
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                        }(j))
                                    }
                                }(i))
                            }
                        }
                        else {
                            callback(null);
                        }
                    }
                });
            }
            else {
                callback(null)
            }



        }],
    }, function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {

            console.log("..................rediusFlag..................", rediusFlag);



            supplierList.supplierList = supplier;
            var data = supplierList.supplierList;
            //console.log(".............data,length...........",data.length);
            // console.log(".............data,length...........",data.length);
            if (data.length) {
                var result1 = data.sort(func.sort_by('new_package', true, parseInt));


                supplierList.supplierList = result1;
            }
            else {
                supplierList.supplierList = [];
            }
            //  console.log("............................suplier list ...................live");
            supplierList = JSON.stringify(supplierList);
            supplierList = JSON.parse(supplierList);
            var temp = areaId + supplierId + languageId;
            redisClient.hmset("supplierlist", temp, JSON.stringify(supplierList));
            sendResponse.sendSuccessData(supplierList, constant.responseMessage.SUCCESS, reply, 200);



        }
    })
}









exports.customerRegisterstepthird = function (request, reply) {
    var accessToken = null;
    var name = null;
    var supplierList = {};
    var profilePic;
    var image;
    var details = {};
    var languageId;
    var dbConnection;
    let email = request.body.email;
    let abn_number = request.body.abn_number == undefined ? "" : request.body.abn_number
    let password = request.body.password == undefined ? "" : request.body.password
    let business_name = request.body.business_name == undefined ? "" : request.body.business_name
    let dateOfBirth = request.body.dateOfBirth !== undefined ? request.body.dateOfBirth : "0000-00-00"
    let id_for_invoice = request.body.id_for_invoice == undefined ? "" : request.body.id_for_invoice

    if (request.headers.secretdbkey != undefined && request.headers.secretdbkey != "") {
        var decipher = crypto.createDecipher(algorithm, crypto_password)
        var decDbName = decipher.update(request.headers.secretdbkey, 'hex', 'utf8')
        decDbName += decipher.final('utf8');
        console.log("==DB_NAME==", decDbName)
        dbConnection = multiConnection[decDbName]
    }
    else {
        dbConnection = connection
    }
    async.auto({


        getValue: function (callback) {
            console.log("****************************************", request.body);
            if (!(request.body.accessToken)) {
                var msg = "access token not found"
                return sendResponse.sendErrorMessageWithTranslation(request, msg, reply, 400);
            }
            if (!(request.body.name)) {
                var msg = "name not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body && request.body.accessToken && request.body.name) {
                accessToken = request.body.accessToken;
                name = request.body.name;
                callback(null);

            } else {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessageWithTranslation(request, msg, res, 500);
            }
        },
        getimage: ['getValue', async function (callback) {
            try {
                var sql = " select * from user where access_token = ? ";
                let result = await ExecuteQ.Query(request.dbName, sql, [accessToken])
                // multiConnection[request.dbName].query(sql, [accessToken], function (err, result) {
                //     if (err) {
                //         var msg = "db error :";
                //         return sendResponse.sendErrorMessage(msg, reply, 500);
                //     }
                //     else {
                console.log("==result[0].user_image======", result[0].user_image)
                if (result[0].user_image != null && result[0].user_image != "" && result[0].user_image != undefined) {
                    image = result[0].user_image;
                    callback(null)
                }
                else {
                    image = "";
                    callback(null)
                }
                //     }
                // })
            }
            catch (Err) {
                logger.debug("=========exact=====er===++", Err)
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg, reply, 500);

            }
        }],
        updatefile: ['getimage', async function (callback) {
            console.log("====IMAGE!=====", image);
            if (request.files && request.files.profilePic) {
                var folder = "abc";
                profilePic = request.files.profilePic;
                let result = await uploadMgr.uploadImageFileToS3BucketNew(profilePic);
                image = result;
                callback(null);
                // func.uploadImageFileToS3BucketSupplier(reply, profilePic, folder, function (err, result) {
                //     if (err) {
                //         var msg = "db error :";
                //         return sendResponse.sendErrorMessage(msg, reply, 500);
                //     } else {
                //         image = result;
                //         callback(null)
                //     }
                // });
            } else {
                callback(null)
            }
        }],
        updateUserDb: ['updatefile', async function (callback) {
            try {
                if (email != undefined && email != "" && email != null) {
                    await ExecuteQ.Query(request.dbName, `update user set 
                    firstname = ?,user_image = ?,is_active = ?,email=?,abn_number=?,
                    business_name=?,dateOfBirth=?,id_for_invoice=? where access_token = ?`,
                        [name, image, 1, email, abn_number, business_name,
                            dateOfBirth, id_for_invoice, accessToken])
                    callback(null, {});
                }
                else {
                    await ExecuteQ.Query(request.dbName, `update user set 
                    firstname = ?,user_image = ?,is_active = ?,abn_number=?, 
                     business_name=?,dateOfBirth=?,id_for_invoice=? where access_token = ?`,
                        [name, image, 1, abn_number, business_name, dateOfBirth
                            , id_for_invoice, accessToken])
                    callback(null, {});
                }
            }
            catch (Err) {
                logger.debug("===ERR!==", Err);
                callback(null, {});
            }
            // var sql = "update user set firstname = ?, user_image = ?,is_active = ? where access_token = ? ";
            // multiConnection[request.dbName].query(sql, [name, image,1, accessToken], function (err, result) {
            //     if (err) {
            //         var msg = "db error :";
            //         return sendResponse.sendErrorMessage(msg, reply, 500);
            //     }
            //     else {
            //         callback(null, result);
            //     }
            // })

        }],
        getData: ['updateUserDb', async function (callback) {
            try {
                var sql = " select (SELECT message_id FROM `chats` WHERE (`send_to_type`='ADMIN' or `send_by_type`='ADMIN') and (send_by=user.user_created_id or send_to=user.user_created_id) and (`send_to_type`='USER' or `send_by_type`='USER') order by c_id desc limit 1) as message_id,user.* from user where access_token = ? ";
                let result = await ExecuteQ.Query(request.dbName, sql, [accessToken])
                // multiConnection[request.dbName].query(sql, [accessToken], function (err, result) {
                //     if (err) {
                //         var msg = "db error :";
                //         return sendResponse.sendErrorMessage(msg, reply, 500);
                //     }
                //     else {
                /**
                 * -------add for fula -----\
                 */
                if (request.dbName == "fulalive_0857" && result[0].apple_id) {
                    details.apple_id = result[0].apple_id
                }
                /**
                 * end
                 */
                details.email = result[0].email;
                details.access_token = result[0].access_token;
                details.device_token = result[0].device_token;
                details.fb_access_token = result[0].fb_access_token
                details.google_access_token = result[0].google_access_token
                details.mobile_no = result[0].mobile_no;
                details.device_type = result[0].device_type;
                details.latitude = result[0].latitude;
                details.longitude = result[0].longitude;
                details.country_code = result[0].country_code;
                details.firstname = result[0].firstname;
                details.user_image = result[0].user_image;
                details.referral_id = result[0].referral_id;
                details.user_created_id = result[0].user_created_id
                details.notification_status = result[0].notification_status
                details.id = result[0].id;
                details.dateOfBirth = result[0].dateOfBirth
                details.user_created_id = result[0].user_created_id;
                details.message_id = result[0].message_id;
                details.id_for_invoice = result[0].id_for_invoice || ""
                languageId = result[0].notification_language;
                // details.id_for_invoice= id_for_invoice
                callback(null, result);
                //     }
                // })
            }
            catch (Err) {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }],
        rideRegistration: ['getData', async function (callback) {
            try {
                let rides_registeration_input = {
                    language_id: 1,
                    email: details.email,
                    access_token: details.access_token,
                    fcm_id: details.device_token,
                    name: details.firstname,
                    phone_code: details.country_code,
                    phone_number: details.mobile_no.replace(/\s/g, ''),
                    device_type: details.device_type == 1 ? "Ios" : "android",
                    address: "chandigarh",
                    latitude: request.body.latitude != undefined ? request.body.latitude : 30.7333,
                    longitude: request.body.longitude != undefined ? request.body.longitude : 76.7794,
                    gender: "male",
                    timezone: request.body.zone_offset != undefined && request.body.zone_offset !== "" && request.body.zone_offset != null ? request.body.zone_offset : "+05:30",
                    profile_pic: details.user_image
                }
                let rideRegistrationEnable = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_registeration']);
                logger.debug("====rideRegistrationEnable=", rideRegistrationEnable)
                if (rideRegistrationEnable && rideRegistrationEnable.length > 0) {
                    let baseUrlRideData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_base_url'])
                    let baseUrl = baseUrlRideData && baseUrlRideData.length > 0 ? baseUrlRideData[0].value : config.get("server.rides.api_link");
                    let dbSecretKeyData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_db_secret_key']);
                    let dbSecretKey = dbSecretKeyData && dbSecretKeyData.length > 0 ? dbSecretKeyData[0].value : "";
                    logger.debug("======baseUrlRideData==baseUrl===dbSecretKey>>", baseUrlRideData, baseUrl, dbSecretKey);
                    if (parseInt(rideRegistrationEnable[0].value) == 1) {
                        await common.ridesRegisteration(baseUrl, rides_registeration_input, dbSecretKey);
                    }
                }

                callback(null, {})
            }
            catch (Err) {
                logger.debug("====Err!==", Err)
                callback(null, {})
            }
        }],
        /*      sendMail:['getData',function(cb){
                  if(languageId==15){
                      var subject = "مرحبا بك في كليكات اول منصه الكترونيه للخدمات المنزليه";
                      //var content = "Welcome  "+details.firstname+" \n\n";
                      var content = "مرحبا بكم في كليكات  \n\n";
                      content+="عميلنا العزيز  \n\n";
                      content+="\n\n"
                      content+="نود ان نشكركم لتسجيلكم معنا في تطبيق كليكات اول واكبر منصة للخدمات المنزلية اون لاين في الامارات العربية المتحدة. . \n\n";
                      content+="تفاصيل تسجيل الدخول الخاصة بك  \n\n"
                      content+=" اسم المستخدم : "+ details.email+"\n\n"
                      content+="الان يمكنكم طلب جميع الاحتياجات المنزلية وسيتم توصيلها الى باب منزلكم.  ابدأ بجمع نقاط الولاء التي يمكنكم استبدالها بقسائم شرائية متنوعه. \n";
                     // content+="Start Collecting royo Loyalty Points which can be redeemed Against Multiple services & Products Vouchers\n";
                      content+="كليكات...لجعل حياتك أسهل. \n";
                      content+="للاستفسارات والمساعده الرجاء التواصل معنا على:- \n";
                      content+=config.get('EmailCredentials.email')+"\n";
                      content+="هاتف: 0134 \n" ;
                      content+="مع اطيب التحيات \n" ;
                      content+="فريق عمل كليكات \n";
                  }
                  else {
                      var subject = "Welcome To royo.com Leading Online Home Service";
                      //var content = "Welcome  "+details.firstname+" \n\n";
                      var content = "Welcome To royo App \n\n";
                      content+="Dear User \n\n";
                      content+="\n\n"
                      content+="Thank you very much for Registering at royo the Leading Online Home Service in UAE . \n\n";
                      content+="Please find below your Access Details  \n\n"
                      content+="Username : "+ +"\n\n"
                      content+="Now you can enjoy Ordering from Varity of Products delivered to your Home step. \n";
                      content+="Start Collecting royo Loyalty Points which can be redeemed Against Multiple services & Products Vouchers\n";
                      content+="royo Life Couldn’t be Simpler \n";
                      content+="Four Inquires Please contact Us at :- \n";
                      content+=config.get('EmailCredentials.email')+"\n";
                      content+="Tel: 0134 \n" ;
                      content+="Regards\n" ;
                      content+="royo Team \n";
                  }
      
                  func.sendMailthroughSMTP(reply,subject,details.email,content,1,function(err,result){
                      if(err){
                          cb(err);
                      }else{
                          cb(null)
                      }
                  });
              }],*/
        sendMail: ['rideRegistration', function (cb) {
            console.log(".........", details)
            emailTemp.userRegister(request, reply, AdminMail, details.firstname, password,
                details.email, languageId, dbConnection, function (err, result) {
                    if (err) {
                        console.log("..****register email*****....", err);
                    }
                })
            cb(null)

        }]
    }, function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            details.abn_number = abn_number;
            details.business_name = business_name
            sendResponse.sendSuccessData(details, "Profile updated successfully", reply, 200);
            // sendResponse.sendSuccessData(details, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.customerAddNewAddress = async function (request, reply) {
    var addressLineFirst1 = "";
    var id = 0;
    var data = {};
    var customer_address = null;
    var latitude;
    var longitude;
    let name = request.body.name != undefined && request.body.name != "" ? request.body.name : "";
    let phone_number = request.body.phone_number != undefined ? request.body.phone_number : ""
    var accessToken;
    let collectNumber = request.body.collectNumber != undefined ? request.body.collectNumber : "";
    let country_code = request.body.country_code != undefined ? request.body.country_code : "";
    let reference_address = request.body.reference_address !== undefined ? request.body.reference_address : "";
    const settingDataKeys = await func.getSettingDataKeyAndValue(request.dbName, ['addCollectFieldInAddress']);
    settingDataKeys.keyAndValue.addCollectFieldInAddress = !!settingDataKeys.keyAndValue.addCollectFieldInAddress;
    let pincode = request.body.pincode || "";
    let landmark = request.body.landmark || "";
    let road_no = request.body.roadNo || "";
    let block_no = request.body.blockNo || "";
    let building_no = request.body.buildingNo || "";
    let area_name = request.body.area_name || "";

    async.auto({
        getValue: function (callback) {
            if (request.body.addressLineFirst == undefined) {
                var msg = "address first line not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.customer_address)) {
                var msg = "customer Address not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body) {
                addressLineFirst1 = request.body.addressLineFirst !== undefined && request.body.addressLineFirst !== "" ? request.body.addressLineFirst : "";
                accessToken = request.body.accessToken;
                customer_address = request.body.customer_address != undefined && request.body.customer_address != '' ? request.body.customer_address : ''
                latitude = request.body.latitude;
                longitude = request.body.longitude;
                callback(null);
            }
            else {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
            logger.debug("============params=========", addressLineFirst1,
                accessToken, customer_address, latitude, longitude)
        },
        getUserId: function (callback) {
            if (request.body && request.body.accessToken) {
                var sql = " select id from user where access_token = ? ";
                multiConnection[request.dbName].query(sql, [request.body.accessToken], function (err, result) {
                    if (err) {
                        logger.debug("+=============err======1==============", err)
                        var msg = "db error :";
                        return sendResponse.sendErrorMessage(msg, reply, 400);
                    }
                    else {
                        if (result.length) {
                            id = result[0].id;
                            callback(null);
                        } else {
                            var msg = "invalid accessToken pass";
                            return sendResponse.sendErrorMessage(msg, reply, 401);
                        }
                    }
                })
            } else {
                callback(null, {});
            }
        },
        insertIntoDb: ['getUserId', function (callback) {


            let sql = "insert into user_address (landmark,area_name,block_no,road_no,building_no,phone_number,name,address_line_1,user_id,customer_address,latitude,longitude,country_code,reference_address,pincode)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ";
            let params = [landmark, area_name, block_no, road_no, building_no, phone_number, name, addressLineFirst1, id, customer_address, latitude, longitude, country_code, reference_address, pincode];

            if (settingDataKeys.keyAndValue.addCollectFieldInAddress === true) {
                // collectNumber
                sql = "insert into user_address (phone_number,name,address_line_1,user_id,customer_address,latitude,longitude,collectNumber,country_code,reference_address,pincode)values(?,?,?,?,?,?,?,?,?,?,?) ";
                params = [phone_number, name, addressLineFirst1, id, customer_address, latitude, longitude, collectNumber, country_code, reference_address, pincode]

            }

            var sts = multiConnection[request.dbName].query(sql, params, function (err, result) {
                console.log("st============st======", sts.sql)
                if (err) {
                    logger.debug("+=============err======2==============", err)
                    var msg = "db error :";
                    return sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    data.id = result.insertId;
                    callback(null);
                }
            })
        }],
        getData: ['insertIntoDb', function (callback) {
            var sql = " select * from user_address where id = ?";
            multiConnection[request.dbName].query(sql, [data.id], function (err, result) {
                if (err) {
                    logger.debug("+=============err======3==============", err)
                    var msg = "db error :";
                    return sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    data.customer_address = result[0].customer_address;
                    data.name = result[0].name
                    data.latitude = result[0].latitude;
                    data.longitude = result[0].longitude;
                    data.user_id = result[0].user_id
                    data.phone_number = result[0].phone_number;
                    data.address_line_1 = result[0].address_line_1;
                    data.country_code = result[0].country_code
                    data.pincode = result[0].pincode;
                    data.landmark = result[0].landmark;
                    data.area_name = result[0].area_name;
                    data.block_no = result[0].block_no;
                    data.road_no = result[0].road_no;
                    data.building_no = result[0].building_no;
                    if (settingDataKeys.keyAndValue.addCollectFieldInAddress === true) {
                        // collectNumber
                        data.collectNumber = result[0].collectNumber;

                    }

                    callback(null)
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}



exports.getCustomerAddress = function (request, reply) {
    var accessToken = null;
    var id = 0;
    var supplierBranchId = 0;
    var languageId = 0;
    var data = {};
    var area_id;
    var areaId;
    var flag = 0;
    var min_time1 = 0,
        max_time1 = 0,
        min_time2 = 0,
        max_time2 = 0,
        urgent1 = 0,
        urgent2 = 0;
    console.log("--------------------response-0-------------", request.body)
    let latitude = request.body.latitude == undefined || request.body.latitude == "" || request.body.latitude == null ? 0 : request.body.latitude
    let longitude = request.body.longitude == undefined || request.body.longitude == "" || request.body.longitude == null ? 0 : request.body.longitude
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.supplierBranchId) {
                supplierBranchId = request.body.supplierBranchId;
            }
            if (!(request.body.languageId)) {
                var msg = "language id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            languageId = request.body.languageId;
            if (request.body && request.body.accessToken) {
                accessToken = request.body.accessToken;
                areaId = request.body.areaId;
                callback(null);
            } else {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        },
        getId: ['getValue', async function (callback) {
            var sql = " select id,area_id,notification_status  from user where access_token = ? ";
            let result = await ExecuteQ.Query(request.dbName, sql, [accessToken]);
            if (result.length) {
                id = result[0].id;
                area_id = result[0].area_id;
                data.notification_status = result[0].notification_status
                data.user_id = result[0].id
                callback(null, result);
            } else {
                var msg = "invalid accessToken pass";
                return sendResponse.sendErrorMessage(msg, reply, 401);
            }

        }],
        getAllAddress: ['getId', async function (callback) {
            try {
                var sql = " select * from user_address where user_id = ? and is_deleted = ? ";
                let result = await ExecuteQ.Query(request.dbName, sql, [id, 0]);
                data.address = result;
                callback(null, result);

            }
            catch (Err) {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }],
        getLanguage: ['getId', async function (callback) {
            try {
                var sql = " select id_for_invoice,abn_number,business_name,notification_status,notification_language,wallet_amount from user where id = ?";
                let result = await ExecuteQ.Query(request.dbName, sql, [id])

                data.notification_status = result[0].notification_status;
                data.notification_language = result[0].notification_language;
                data.wallet_amount = result[0].wallet_amount;
                data.abn_number = result[0].abn_number;
                data.business_name = result[0].business_name
                data.id_for_invoice = result[0].id_for_invoice
                callback(null, result);

            }
            catch (Err) {
                logger.debug("=======Err!==", Err)
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }],
        getDeliveryValue: ['getValue', function (callback) {
            if (supplierBranchId != 0) {

                getDeliveryData(request.dbName, reply, supplierBranchId, languageId, area_id,
                    latitude, longitude, function (err, result) {
                        if (err) {
                            callback(err);
                        } else {
                            data.is_postpone = 0;

                            if (result.is_postpone == 1 && languageId == 14) {
                                data.postpone = "Postpone delivery";
                                data.is_postpone = 1;
                            }
                            if (result.is_postpone == 1 && languageId == 15) {
                                data.postpone = "تأجيل تسليم";
                                data.is_postpone = 1;
                            }
                            data.min_order = result.min_order;
                            data.base_delivery_charges = result.base_delivery_charges
                            data.region_delivery_charge = result.region_delivery_charge
                            data.base_delivery_charges_array = result.base_delivery_charges_array
                            data.preparation_time = result.preparation_time
                            data.user_service_charge = result.user_service_charge
                            // data.min_order_delivery_charge = result.charges_below_min_order || 0;
                            // data.free_delivery_amount = result.min_order_delivery || 0;
                            if (languageId == 14) {
                                if (result.delivery_max_time >= 60) {
                                    if (result.delivery_min_time >= 60) {
                                        min_time1 = parseInt(result.delivery_min_time / 60);
                                        min_time2 = result.delivery_min_time % 60;
                                    }
                                    else {
                                        flag = 1;
                                        min_time2 = result.delivery_min_time;
                                    }
                                    max_time1 = parseInt(result.delivery_max_time / 60);
                                    max_time2 = result.delivery_max_time % 60;
                                    if (max_time1 >= 24) {
                                        if (min_time1 >= 24) {
                                            min_time1 = parseInt(min_time1 / 24);
                                            min_time2 = 0;
                                        }
                                        else {
                                            if (flag == 0) {
                                                min_time2 = min_time1;
                                                min_time1 = 0;
                                            }
                                        }
                                        max_time1 = parseInt(max_time1 / 24);
                                        max_time2 = 0;
                                        if (min_time1 && max_time1) {
                                            if (min_time2 && max_time2) {
                                                data.standard = "Standard(" + min_time1 + " days " + min_time2 + " hours - " + max_time1 + " days " + max_time2 + " hours)"
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                            else {
                                                data.standard = "Standard ('" + min_time1 + "' days - '" + max_time1 + "' days)";
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                        }
                                        else {
                                            if (min_time2 && max_time2) {
                                                if (flag) {
                                                    data.standard = "Standard(" + min_time2 + " minutes - " + max_time1 + " days " + max_time2 + " hours)"
                                                }
                                                else {
                                                    data.standard = "Standard(" + min_time2 + " hours - " + max_time1 + " days " + max_time2 + " hours)"
                                                }
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                            else {
                                                if (flag) {
                                                    data.standard = "Standard(" + min_time2 + " minutes - " + max_time1 + " days )"
                                                }
                                                else {
                                                    data.standard = "Standard( " + min_time2 + " hours - " + max_time1 + " days )"

                                                }
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                        }
                                    }
                                    else {
                                        if (min_time1 && max_time1) {
                                            if (min_time2 && max_time2) {
                                                data.standard = "Standard(" + min_time1 + " hours " + min_time2 + " minutes - " + max_time1 + " hours " + max_time2 + " minutes)"
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                            else {
                                                data.standard = "Standard ('" + min_time1 + "' hours - '" + max_time1 + "' hours)";
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                        }
                                        else {
                                            if (min_time2 && max_time2) {
                                                data.standard = "Standard(" + min_time2 + " minutes - " + max_time1 + " hours " + max_time2 + " minutes)"
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                            else {
                                                data.standard = "Standard( " + min_time2 + " minutes - " + max_time1 + " hours )"
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                        }
                                    }
                                }
                                else {
                                    data.standard = "Standard ('" + result.delivery_min_time + "'minutes - '" + result.delivery_max_time + "' minutes)";
                                    data.delivery_max_time = result.delivery_max_time;
                                }
                            }
                            else {
                                if (result.delivery_max_time >= 60) {
                                    if (result.delivery_min_time >= 60) {
                                        min_time1 = parseInt(result.delivery_min_time / 60);
                                        min_time2 = result.delivery_min_time % 60;
                                    }
                                    else {
                                        min_time2 = result.delivery_min_time;
                                    }
                                    max_time1 = parseInt(result.delivery_max_time / 60);
                                    max_time2 = result.delivery_max_time % 60;
                                    if (max_time1 >= 24) {
                                        if (min_time1 >= 24) {
                                            min_time1 = parseInt(min_time1 / 24);
                                            min_time2 = 0;

                                        }
                                        max_time2 = 0;
                                        max_time1 = parseInt(max_time1 / 24);
                                        if (min_time1 && max_time1) {
                                            if (min_time2 && max_time2) {
                                                data.standard = "عادي(" + min_time1 + " أيام " + min_time2 + " ساعات - " + max_time1 + " أيام " + max_time2 + " ساعات)"
                                                // data.standard = "ساعة)"+max_time2+"أيام " +max_time1+"- ساعات"+min_time2+ "أيام"+min_time1+ "معيار(";
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                            else {
                                                data.standard = "عادي ('" + min_time1 + "' أيام - '" + max_time1 + "' أيام)";
                                                // data.standard = "أيام)"+max_time1+"أيام - "+min_time1+" معيار(";
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                        }
                                        else {
                                            if (min_time2 && max_time2) {
                                                data.standard = "عادي(" + min_time2 + " ساعات - " + max_time1 + " أيام " + max_time2 + " ساعات)";
                                                //data.standard = " ساعة)"+max_time2+ "أيام " +max_time1+ " ساعات -"+min_time2 +" معيار ( "
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                            else {
                                                data.standard = "عادي( " + min_time2 + " ساعات - " + max_time1 + " أيام )"
                                                // data.standard =" أيام)"+max_time1+" ساعات -"+min_time2+ "معيار ( "
                                                data.delivery_max_time = result.delivery_max_time;
                                            }

                                        }
                                    }
                                    else {
                                        if (min_time1 && max_time1) {
                                            if (min_time2 && max_time2) {
                                                data.standard = "عادي(" + min_time1 + " ساعات " + min_time2 + " دقيقة - " + max_time1 + " ساعات " + max_time2 + " دقيقة)"
                                                // data.standard = " دقيقة )"+max_time2+ "ساعات " +max_time1+ "دقيقة - "+min_time2+"ساعات "+min_time1+ " معيار ( "
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                            else {
                                                data.standard = "عادي ('" + min_time1 + "' ساعات - '" + max_time1 + "' ساعات)";
                                                // data.standard =" ساعات)"+max_time1+" ساعات - "+ min_time1+ "معيار ( ";
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                        }
                                        else {
                                            if (min_time2 && max_time2) {
                                                data.standard = "عادي(" + min_time2 + " دقيقة - " + max_time1 + " ساعات " + max_time2 + " دقيقة)"
                                                // data.standard = " دقيقة)"+max_time2+" ساعات "+max_time1+ "دقيقة -" +min_time2+" معيار ("
                                                data.delivery_max_time = result.delivery_max_time;
                                            }
                                            else {
                                                data.standard = "عادي( " + min_time2 + " دقيقة - " + max_time1 + " ساعات )"
                                                //data.standard =" ساعة)"+max_time1+" دقيقة - "+min_time2+ " معيار ( "
                                                data.delivery_max_time = result.delivery_max_time;
                                            }

                                        }
                                    }
                                }
                                else {
                                    data.standard = "عادي ('" + result.delivery_min_time + "'دقيقة - '" + result.delivery_max_time + "' دقيقة)";
                                    //data.standard =" دقيقة)"+result.delivery_max_time + " دقيقة - "+ result.delivery_min_time+ "معيار ("
                                    data.delivery_max_time = result.delivery_max_time;
                                }
                            }
                            if (languageId == 15 && result.is_urgent == 1) {
                                if (result.urgent_delivery_time >= 60) {
                                    urgent1 = parseInt(result.urgent_delivery_time / 60);
                                    urgent2 = parseInt(result.urgent_delivery_time % 60);
                                    if (urgent1 >= 24) {
                                        urgent1 = parseInt(result.urgent_delivery_time / 1440);
                                        urgent2 = 0;
                                        if (urgent2) {
                                            data.urgent = "العاجلة(" + urgent1 + "أيام " + urgent2 + "ساعات)"

                                        }
                                        else {
                                            data.urgent = "العاجلة(" + urgent1 + "أيام)"

                                        }
                                    }
                                    else {
                                        if (urgent2) {
                                            data.urgent = "العاجلة(" + urgent1 + "ساعات " + urgent2 + "دقيقة)"
                                        }
                                        else {
                                            data.urgent = "العاجلة(" + urgent1 + "ساعات)"
                                        }
                                    }
                                }
                                else {
                                    data.urgent = "العاجلة ('" + result.urgent_delivery_time + "'دقيقة)";
                                }
                                //data.urgent = "العاجلة";
                                data.urgent_type = result.urgent_type || 0;
                                data.urgent_price = result.urgent_price || 0;
                                data.urgent_delivery_time = result.urgent_delivery_time || "00:00:00";
                                data.is_urgent = result.is_urgent || 0;
                            }
                            if (languageId == 14 && result.is_urgent == 1) {
                                // console.log("urgent",data.urgent_delivery_time);
                                if (result.urgent_delivery_time >= 60) {
                                    urgent1 = parseInt(result.urgent_delivery_time / 60);
                                    urgent2 = parseInt(result.urgent_delivery_time % 60);
                                    if (urgent1 >= 24) {
                                        urgent1 = parseInt(result.urgent_delivery_time / 1440);
                                        urgent2 = 0;
                                        if (urgent2) {
                                            data.urgent = "Urgent(" + urgent1 + "days " + urgent2 + "hours)"

                                        }
                                        else {
                                            data.urgent = "Urgent(" + urgent1 + "days)"

                                        }
                                    }
                                    else {
                                        if (urgent2) {
                                            data.urgent = "Urgent(" + urgent1 + "hours " + urgent2 + "minutes)"
                                        }
                                        else {
                                            data.urgent = "Urgent(" + urgent1 + "hours)"
                                        }
                                    }
                                }
                                else {
                                    data.urgent = "Urgent ('" + result.urgent_delivery_time + "'minutes)";
                                }
                                //data.urgent = "Urgent";
                                data.urgent_type = result.urgent_type || 0;
                                data.urgent_price = result.urgent_price || 0;
                                data.urgent_delivery_time = result.urgent_delivery_time || "00:00:00";
                                data.is_urgent = result.is_urgent || 0;
                            }
                            data.payment_method = result.payment_method;
                            callback(null);
                        }
                    })
            }
            else {
                callback(null);
            }
        }]
    }, function (err, result) {
        logger.debug("=======Err!==", err)
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.deleteCustomerAddress = function (request, reply) {
    var accessToken = null;
    var id = 0;
    var data;
    var addressId = 0;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.addressId)) {
                var msg = "address id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body && request.body.accessToken && request.body.addressId) {
                accessToken = request.body.accessToken;
                addressId = request.body.addressId;
                callback(null);
            } else {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        },
        getId: ['getValue', function (callback) {
            var sql = " select id from user where access_token = ? ";
            multiConnection[request.dbName].query(sql, [accessToken], function (err, result) {
                if (err) {
                    var msg = "db error :";
                    return sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if (result.length) {
                        id = result[0].id;
                        callback(null, result);
                    } else {
                        var msg = "invalid accessToken pass";
                        return sendResponse.sendErrorMessage(msg, res, 401);
                    }
                }
            })
        }],
        deleteAddress: ['getId', function (callback) {
            var sql = "update user_address set is_deleted = ? where id = ? ";
            multiConnection[request.dbName].query(sql, [1, addressId], function (err, result) {
                if (err) {
                    var msg = "db error :";
                    return sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    callback(null, result);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 400);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.see_user = async (req, res) => {

    try {
        let name = req.body.name;
        let Data = await ExecuteQ.Query(req.dbName, "SELECT * FROM user where email LIKE '%" + name + "%' ", [0]);

        for (let [index, i] of Data.entries()) {
            let result = await ExecuteQ.Query(req.dbName, "SELECT * FROM user_address where user_id=? ", [i.id]);
            i.user_address = result;
        }

        sendResponse.sendSuccessData({ levelData: Data }, constant.responseMessage.SUCCESS, res, 200);
    }

    catch (Err) {
        logger.error("======ERR!==", Err);
        sendResponse.somethingWentWrongError(res);
    }

}
/**
 * @desc used for getting an product detail with similar category products
 */


exports.getProductDetails = async function (request, reply) {

    var accessToken;
    var productId;
    var languageId;
    var tmp = {};
    var areaId;
    var supplierBranchId;
    var pricing_type = 0;
    var user_id = 0;
    var latitude = request.body.latitude;
    var longitude = request.body.longitude;
    var offer = 0;//3-promotion;2-package;
    var zone_offset = request.body.zone_offset != undefined && request.body.zone_offset !== "" && request.body.zone_offset != null ? request.body.zone_offset : "+05:30"
    var current_date = moment().utcOffset(zone_offset).format("YYYY-MM-DD")
    var version = Universal.getVersioning(request.path);

    var service_type = await ExecuteQ.Query(request.dbName, "select app_type from screen_flow", []);
    let user_type_check = await Universal.getUserPriceType(request.dbName);
    let categoryIds = [];
    let parentIds = await ExecuteQ.Query(request.dbName, "select app_type from screen_flow", []);

    logger.debug("=======user_type_check=========", user_type_check, user_type_check.length)
    var user_id = await GetUserId(request.headers.authorization, request.dbName)
    logger.debug("=======userrrrrrrr iddddddd=========", user_id)
    let user_details = await ExecuteQ.Query(request.dbName, "select * from user where id= ?", [user_id])
    let user_type_id = user_details && user_details.length > 0 ? user_details[0].user_type_id : 0
    if (user_type_id == undefined || user_type_id == "" || user_type_id == null || user_type_id == 0) {
        let user_type_details = await ExecuteQ.Query(request.dbName, "select * from user_types limit 1", []);
        logger.debug("============user_type_details------", user_type_details)
        if (user_type_details && user_type_details.length > 0) {
            user_type_id = user_type_details[0].id
        } else {
            user_type_id = 0
        }
    }
    logger.debug("=================user_type_id============", user_type_id)
    // Adding productCustomTabDescriptionLabel per supplier
    const settingDataKeys = await func.getSettingDataKeyAndValue(request.dbName, ['isProductCustomTabDescriptionEnable']);
    settingDataKeys.keyAndValue.isProductCustomTabDescriptionEnable = !!settingDataKeys.keyAndValue.isProductCustomTabDescriptionEnable;
    async.auto({

        getValue: function (callback) {
            if (!(request.body.productId)) {
                var msg = "product Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.supplierBranchId)) {
                var msg = "supplier branch Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            // if(!(request.body.areaId)){ 
            //     var msg = "area Id not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }

            if (request.body && request.body.productId && request.body.languageId) {
                productId = request.body.productId;
                languageId = request.body.languageId;
                supplierBranchId = request.body.supplierBranchId;
                areaId = 0;
                offer = request.body.offer;
                /*    pricing_type = request.body.pricing_type;*/
                callback(null);
            } else {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }

        },
        getUserId: function (callback) {
            if (request.headers.authorization != undefined && request.headers.authorization != "") {
                checkUserAccessToken(request.dbName, reply, request.headers.authorization, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        user_id = result.id;
                        callback(null);
                    }
                })
            }
            else {
                callback(null);
            }
        },
        getDetail: ['getUserId', 'getValue', function (callback) {
            //console.log("offer",offer);

            getProductDetail(version, request.dbName, reply, productId, languageId,
                supplierBranchId, pricing_type, offer, user_type_check, user_type_id,
                user_id, current_date, async function (err, result) {


                    logger.debug("...................................2.........", err, result);

                    if (err) {
                        var msg = "something went wrong";
                        return sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        if (result.length == 0) {
                            return callback(null);
                        }
                        var temparr = result;
                        var arr = [];
                        // category_id as categories_id,sub_category_id,
                        result = result[0];
                        let sort_by_query = "tmp.is_favourite DESC,-tmp.fixed_price ASC,tmp.fixed_price ASC limit 50";
                        let radius_check_query = "";
                        // having distance<=s.delivery_radius
                        let user_type_condition_one = ""
                        let user_type_condition_two = ""
                        logger.debug("====service_type=======check_user_type====", service_type, user_type_check)
                        if (request.service_type == 1 || request.service_type == 2) {
                            radius_check_query = "having tmp.distance<=tmp.delivery_radius"
                            if (user_type_check && user_type_check.length > 0) {
                                user_type_condition_one = " and pc.user_type_id=" + +" "
                                user_type_condition_two = " and price.user_type_id=" + user_type_id + " "
                            }
                        }
                        else {
                            radius_check_query = "having tmp.distance<=5000000"
                        }
                        let mUnit = await Universal.getMeausringUnit(request.dbName);
                        // category_id as categories_id,sub_category_id,

                        let similarQuerySql = "select * from (select p.avg_rating,p.category_id as categories_id,p.sub_category_id,IF((select count(*)  from questions where questions.category_id =bp.detailed_sub_category_id ) > 0,1,0 ) as is_question,p.interval_flag,p.interval_value,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + "))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id=" + user_id + " and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration," +
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo," +
                            " quantity,purchased_quantity," +
                            " p.parent_id,p.is_allergy_product,p.item_unavailable,p.allergy_description,p.payment_after_confirmation,c.is_quantity,c.is_agent,c.is_liquor,c.agent_list,c.type,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name" +
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id," +
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price," +
                            " price.beauty_saloon_price," +
                            " bp.detailed_sub_category_id," +
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc" +
                            " ,price.price,pimage.image_path," +
                            " pml.measuring_unit,s.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,price.price_type  ," +
                            " price.price as fixed_price,price.price_type as price1" +
                            " from" +
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p" +
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = " +
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 " + user_type_condition_one + " having counter>1) , 1, 0) " +
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id" +
                            " join product_variants pvt on pvt.parent_id=p.id  where" +
                            // "  is_favourite=1 and p.id!="+result.id+" and c.is_deleted=0 and c.is_live=1  and p.is_live = 1"+
                            " p.category_id IN(" + result.categories_id + ") and p.id!=" + result.id + " and c.is_deleted=0 and c.is_live=1  and p.is_live = 1" +
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0" +
                            " and pml.language_id = " + languageId + " and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= " + languageId + " and (" +
                            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '" + current_date + "'" +
                            " and DATE(price.end_date) >= '" + current_date + "' " + user_type_condition_two + ") or (price.price_type = 0 " + user_type_condition_two + ")) and ((price.pricing_type=1) or(price.pricing_type=0 and " +
                            "  price.price !=0)) UNION ALL select p.avg_rating,p.category_id as categories_id,p.sub_category_id,IF((select count(*)  from questions where questions.category_id =bp.detailed_sub_category_id ) > 0,1,0 ) as is_question,p.interval_flag,p.interval_value,  ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*)  from product_adds_on  where  product_adds_on.product_id = p.id  and product_adds_on.is_deleted = 0 ) > 0, 1, 0) as is_product_adds_on,(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + "))* sin(radians(s.latitude)))) AS distance,IF((select count(*) from product where product.parent_id=p.id)>0,1,0) as is_variant,p.id as product_id,IF((select count(*) from product_favourite where product_favourite.product_id=p.id and product_favourite.user_id=" + user_id + " and product_favourite.status=1 )>0,1,0) as is_favourite,p.is_product,p.duration," +
                            " price.display_price,s.self_pickup,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.address as supplier_address,s.logo as supplier_logo," +
                            " quantity,purchased_quantity," +
                            " c.is_liquor,p.parent_id,p.is_allergy_product,p.item_unavailable,p.allergy_description,p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.type,c.id as category_id,c.name as category_name,c.category_flow,c.order_instructions,p.cart_image_upload,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name" +
                            " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id," +
                            " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price," +
                            " price.beauty_saloon_price," +
                            " bp.detailed_sub_category_id," +
                            " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc" +
                            " ,price.price,pimage.image_path," +
                            " pml.measuring_unit,s.delivery_radius,sbb.latitude,sbb.longitude,s.radius_price,price.price_type  ," +
                            " price.price as fixed_price,price.price_type as price1" +
                            " from" +
                            " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p" +
                            " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = " +
                            " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 " + user_type_condition_one + " having counter>1) , 1, 0) " +
                            "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id" +
                            " join product_variants pvt on pvt.parent_id=p.id  where" +
                            "  p.category_id IN(" + result.categories_id + ") and p.id!=" + result.id + " and c.is_deleted=0 and c.is_live=1  and p.is_live = 1" +
                            " and p.parent_id=0  and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0" +
                            " and pml.language_id = " + languageId + " and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= " + languageId + " and (" +
                            " pimage.imageOrder =1)  and ((price.price_type = '1' and DATE(price.start_date) <=  '" + current_date + "'" +
                            " and DATE(price.end_date) >= '" + current_date + "' " + user_type_condition_two + ") or (price.price_type = 0 " + user_type_condition_two + ")) and ((price.pricing_type=1) or(price.pricing_type=0 and " +
                            "  price.price !=0))) as tmp GROUP BY tmp.product_id,tmp.sku " + radius_check_query + " order by " + sort_by_query
                        // GROUP BY product_id,sku "+radius_check_query+" order by "+sort_by_query
                        let similarProduct = await ExecuteQ.Query(request.dbName, similarQuerySql, []);
                        tmp.similarProduct = await Universal.modifyProductResult(similarProduct, 0, 0, 0);
                        tmp.is_subscription_required = result.is_subscription_required
                        tmp.cart_image_upload = result.cart_image_upload || 0
                        tmp.purchase_limit = result.purchase_limit
                        tmp.is_allergy_product = result.is_allergy_product
                        tmp.allergy_description = result.allergy_description
                        tmp.categories_id = result.categories_id;
                        tmp.sub_category_id = result.sub_category_id;
                        tmp.quantity = result.quantity;
                        tmp.is_question = result.is_question
                        tmp.purchased_quantity = result.purchased_quantity
                        tmp.supplier_image = result.supplier_image;
                        tmp.is_favourite = result.is_favourite;
                        tmp.is_rated = result.is_rated;
                        tmp.supplier_id = result.supplier_id;
                        tmp.supplier_name = result.supplier_name;
                        tmp.type = result.type;
                        tmp.delivery_max_time = result.delivery_max_time;
                        tmp.delivery_min_time = result.delivery_min_time;
                        tmp.Size_chart_url = result.Size_chart_url
                        tmp.country_of_origin = result.country_of_origin;
                        tmp.item_unavailable = result.item_unavailable

                        tmp.is_appointment = result.is_appointment
                        // p.Size_chart_url,p.country_of_origin
                        // sp.delivery_max_time,sp.delivery_min_time

                        tmp.adds_on = result.adds_on && result.adds_on.length > 0 ? JSON.parse(result.adds_on) : [];
                        var adds_on_ar = [], adds_on, final_json = {};

                        logger.debug("===BEFOR[i].adds_on====", result.adds_on)
                        adds_on = _.groupBy(JSON.parse(result.adds_on), "name");

                        _.each(adds_on, function (value, key, object) {
                            final_json.name = key
                            final_json.value = value
                            adds_on_ar.push(final_json);
                            final_json = {}
                        })

                        tmp.adds_on = adds_on_ar;
                        tmp.discount = result.discount
                        tmp.brand_name = result.brand_name != undefined && result.brand_name != "" ? result.brand_name : null
                        tmp.brand_id = result.brand_id != undefined && result.brand_id != "" ? result.brand_id : null
                        tmp.brand_image = result.brand_image != undefined && result.brand_image != "" ? result.brand_image : null;
                        tmp.parent_id = result.parent_id

                        tmp.interval_flag = result.interval_flag != undefined && result.interval_flag != "" ? result.interval_flag : 0
                        tmp.interval_value = result.interval_value != undefined && result.interval_value != "" ? result.interval_value : 0

                        tmp.agent_list = result.agent_list
                        tmp.is_agent = result.is_agent
                        tmp.is_quantity = result.is_quantity
                        tmp.total_rating = result.total_rating;
                        tmp.total_reviews = result.total_reviews;
                        tmp.avg_rating = result.avg_rating;
                        tmp.is_product = result.is_product;
                        tmp.supplier_rating = result.supplier_rating;
                        tmp.supplier_address = result.supplier_address;

                        tmp.duration = result.duration;
                        tmp.category_id = result.category_id;
                        tmp.logo = result.logo;
                        tmp.country_of_origin = result.country_of_origin
                        tmp.size_chart_url = result.Size_chart_url

                        tmp.category_flow = result.category_flow;
                        if (settingDataKeys.keyAndValue.isProductCustomTabDescriptionEnable === true) {
                            tmp.customTabDescription3 = result.customTabDescription3;
                        }




                        if (offer == 3) {
                            result.pricing_type = 0;
                        }
                        if (result.pricing_type == 0) {
                            tmp.fixed_price = result.price
                            tmp.display_price = result.display_price;
                        } else {
                            tmp.price_type = result.pricing_type;
                            tmp.hourly_price = result.price;
                            tmp.hourly_price = JSON.parse(tmp.hourly_price);
                            tmp.display_price = 0;
                        }
                        if (offer == 3) {
                            tmp.bar_code = 0;
                            tmp.sku = 0;
                            tmp.is_package = 0;
                        }
                        else {
                            tmp.bar_code = result.bar_code;
                            tmp.sku = result.sku;
                            tmp.is_package = result.is_package;
                        }
                        if (offer == 3) {
                            tmp.price_type = 0;
                        }
                        else {
                            tmp.price_type = result.pricing_type;
                        }
                        tmp.product_desc = result.product_desc;
                        tmp.name = result.name;
                        tmp.price = result.price;
                        if (offer == 2 || offer == 3) {
                            tmp.handling_admin = 0;
                            tmp.handling_supplier = 0;
                            tmp.urgent_value = 0;
                            tmp.can_urgent = 0;
                            tmp.urgent_type = 0;
                        }
                        else {
                            tmp.handling_admin = result.handling;
                            tmp.handling_supplier = result.handling_supplier;
                            tmp.urgent_value = result.urgent_value;
                            tmp.can_urgent = result.can_urgent;
                            tmp.urgent_type = result.urgent_type;
                        }
                        if (offer == 3) {
                            tmp.delivery_charges = 0;
                        }
                        else {
                            tmp.delivery_charges = result.delivery_charges;
                        }
                        if (offer == 3) {
                            tmp.id = result.offer_product_value;
                            tmp.measuring_unit = 0;
                        }
                        else {
                            tmp.id = result.id;
                            tmp.measuring_unit = result.measuring_unit;
                        }
                        tmp.product_id = result.id
                        logger.debug("====pricing==type=====", parseInt(result.pricing_type))
                        if (parseInt(result.pricing_type) == 1) {
                            tmp.hourly_price = JSON.parse(result.price);
                            tmp.price_type = 1;
                        } else {
                            tmp.price_type = 0;
                            delete tmp.hourly_price;
                        }

                        //console.log("arr",temparr);
                        for (var i = 0; i < temparr.length; i++) {
                            (function (i) {
                                arr.push(temparr[i].image_path);
                            }(i));
                        }
                        tmp.image_path = arr;
                        tmp.supplier_branch_id = result.supplier_branch_id;



                        if (settingDataKeys.keyAndValue.isProductCustomTabDescriptionEnable === true) {
                            tmp.customTabDescription1 = result.customTabDescription1;
                            tmp.customTabDescription2 = result.customTabDescription2;
                        }


                        //console.log("finish");
                        callback(null);
                    }
                })
        }],
        getImage: ['getDetail', async function (callback) {
            console.log("start");
            var arr_image = [];
            if (offer == 3) {
                callback(null);
            }
            else {
                try {
                    var sql = "select imageOrder,image_path from product_image where product_id = ? ORDER BY imageOrder";
                    let result = await ExecuteQ.Query(request.dbName, sql, [productId])
                    // multiConnection[request.dbName].query(sql,[productId],function(err,result){
                    //     //console.log("err.................",err,result);
                    //     if(err){
                    //         console.log("err",err);
                    //         var msg = "something went wrong";
                    //         return sendResponse.sendErrorMessage(msg,reply,500);
                    //     }else{
                    if (result.length) {
                        var len = result.length;
                        for (var i = 0; i < len; i++) {
                            (function (i) {
                                if (result[i].image_path != "")
                                    arr_image.push(result[i].image_path);

                                if (i == (len - 1)) {
                                    tmp.image_path = arr_image;
                                    callback(null);
                                }
                            }(i));
                        }
                    } else {
                        callback(null);
                    }
                    //     }
                    // })
                }
                catch (Err) {
                    var msg = "something went wrong";
                    return sendResponse.sendErrorMessage(msg, reply, 500);
                }

            }

        }],
        getRating: ['getImage', async function (callback) {
            try {
                var sql = "select ors.id,DATE_FORMAT(pr.created_on, '%e %M %Y') as created_on,usr.firstname,usr.lastname,usr.user_image,pr.reviews,pr.value,pr.title from orders ors join order_prices orp on ors.id=orp.order_id  join product_rating pr on orp.product_id=pr.product_id join user usr on usr.id=pr.user_id where pr.product_id=? group by pr.id order by pr.created_on desc limit ?"
                let rData = await ExecuteQ.Query(request.dbName, sql, [parseInt(productId), 10])
                // var st=multiConnection[request.dbName].query(sql,[parseInt(productId),10],function(err,rData){
                //     // console.log("====err====",err,st.sql);
                //     if(err){
                //         return sendResponse.sendErrorMessage("something went wrong",reply,500);
                //     }
                //     else{
                tmp.rating = rData
                callback(null)
                //     }
                // })
            }
            catch (Err) {
                return sendResponse.sendErrorMessage("something went wrong", reply, 500);
            }
        }],
        getVariants: ['getRating', async function (callback) {
            try {

                let parentId = tmp.parent_id

                parentId = parseInt(parentId) !== 0 && parentId != undefined ? parentId : productId

                var query = "select product_variants.id as unid,product.name as product_name,product.product_desc," +
                    "product.measuring_unit,variants.value as variant_value,cat_variants.id as variant_id,cat_variants.variant_type,cat_variants.name as variant_name," +
                    " product.bar_code,product.id as product_id from product" +
                    " INNER JOIN product_variants ON product_variants.product_id=product.id" +
                    " INNER JOIN variants ON variants.id=product_variants.variant_id" +
                    " INNER JOIN cat_variants ON  cat_variants.id=variants.cat_variant_id " +
                    " where ((product.parent_id = " + parentId + " ) or (product_variants.parent_id=" + parentId + " and" +
                    " product_variants.product_id=" + parentId + ")  or (product_variants.product_id=" + parentId + ") or" +
                    " (product.parent_id=" + parentId + " and product.parent_id!=0) ) " +
                    " and product.is_deleted=? and variants.deleted_by=0  and cat_variants.deleted_by =0 GROUP by variants.value ,product.id   "

                let data = await ExecuteQ.Query(request.dbName, query, [0])

                var finalVariantArray = [];
                if (data && data.length > 0) {

                    var after_group = _.groupBy(data, "variant_name"), json_variant = {};

                    console.log("++++++after_group++++++", JSON.stringify(after_group));
                    //  _.mapObject(after_group,function(val,key){
                    _.mapObject(after_group, function (val, key) {
                        json_variant.variant_name = key,
                            json_variant.variant_type = val && val.length > 0 ? val[0].variant_type : 0,
                            json_variant.variant_values = val
                        finalVariantArray.push(json_variant)
                        json_variant = {}
                    })
                }
                tmp.variants = finalVariantArray
                callback(null)
                //     }
                // })
            }
            catch (Err) {
                return sendResponse.sendErrorMessage("something went wrong", reply, 500);
            }
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {

            console.log(service_type[0].app_type, "app_typeapp_typeapp_typeapp_type*************");
            tmp.app_type = service_type[0].app_type

            return sendResponse.sendSuccessData(tmp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}







exports.editAddress = async function (request, reply) {
    var addressId = null;
    var accessToken;
    var addressLineFirst;
    var addressLineSecond;
    // var pincode;
    var areaId;
    var landmark;
    var data;
    var name = request.body.name;
    var addressLink = null;
    var customer_address = null;
    var latitude;
    var longitude;
    let phone_number = request.body.phone_number != undefined ? request.body.phone_number : ""

    let collectNumber = request.body.collectNumber != undefined ? request.body.collectNumber : "";

    const settingDataKeys = await func.getSettingDataKeyAndValue(request.dbName, ['addCollectFieldInAddress']);
    settingDataKeys.keyAndValue.addCollectFieldInAddress = !!settingDataKeys.keyAndValue.addCollectFieldInAddress;

    let pincode = request.body.pincode || "";

    console.log(".....body.....", request.body);
    async.auto({
        getValue: function (callback) {
            if (!(request.body.addressId)) {
                var msg = "address not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.addressLineFirst == undefined) {
                var msg = "address first line not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            // if(!(request.body.addressLineSecond)){
            //     var msg = "address second line not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            // if(!(request.body.pincode)){
            //     var msg = "pincode not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            // if(!(request.body.areaId)){
            //     var msg = "area Id not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            // if(!(request.body.landmark)){
            //     var msg = "landmark Id not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            // if(!(request.body.name)){
            //     var msg = "name not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            // if(!(request.body.address_link)){
            //     var msg = "link not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            if (!(request.body.customer_address)) {
                var msg = "customer_address not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }


            addressId = request.body.addressId;
            // landmark = request.body.landmark;
            // pincode = request.body.pincode;
            // addressLineSecond = request.body.addressLineSecond;
            addressLineFirst = request.body.addressLineFirst;
            accessToken = request.body.accessToken;
            // name  = request.body.name;
            // addressLink  = request.body.address_link;
            customer_address = request.body.customer_address;
            latitude = request.body.latitude;
            longitude = request.body.longitude;
            callback(null);

        },
        editDetails: ['getValue', function (callback) {
            let sql = "update user_address set pincode=?,phone_number=?,name=?,address_line_1 = ?,customer_address=?,latitude=?,longitude=? where id = ? ";
            let params = [pincode, phone_number, name, addressLineFirst, customer_address, latitude, longitude, addressId];

            if (settingDataKeys.keyAndValue.addCollectFieldInAddress === true) {
                // collectNumber
                sql = "update user_address set pincode=?,phone_number=?,name=?,address_line_1 = ?,customer_address=?,latitude=?,longitude=?,collectNumber=? where id = ? ";
                params = [pincode, phone_number, name, addressLineFirst, customer_address, latitude, longitude, collectNumber, addressId];

            }

            multiConnection[request.dbName].query(sql, params, function (err, result) {
                if (err) {
                    console.log("=========herrrrrrrrrrr====", err)
                    var msg = "something went wrong";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    console.log(".....body1.....", result);
                    callback(null, result);
                }

            })
        }],
        getaddress: ['editDetails', function (callback) {
            var sql = "select phone_number,address_line_1,customer_address,latitude,longitude from user_address where id = ?";

            if (settingDataKeys.keyAndValue.addCollectFieldInAddress === true) {
                // collectNumber
                sql = "select phone_number,address_line_1,customer_address,latitude,longitude,collectNumber from user_address where id = ?";

            }

            multiConnection[request.dbName].query(sql, [addressId], function (err, result) {
                if (err) {
                    var msg = "something went wrong";
                    console.log("======222222222==========", err)
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    data = result[0];
                    console.log(".....body2.....", data);
                    callback(null);
                }

            })
        }]
    }, function (err, result) {
        console.log(".....result.....", data);

        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            data.id = request.body.addressId;
            return sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}




exports.addToCart = async function (request, reply) {

    var accessToken;
    var supplierBranchId;
    var productList;
    var remarks = 0;
    var id;
    var cartId = 0;
    var optionalCartd = 0;
    var netAmount = 0;
    var deviceId = 0;  // o:android , 1:ios
    var freeProduct = {};
    var remarksImage = [];
    var remarkImage = [], productIds = [], supplierIds = [];
    var promoationType = 0;
    var flag = 0;
    var productId;
    var minOrder = 0;
    var area_id;

    var product_adds_on = request.body.adds_on;
    let product_variant = request.body.variants;

    let order_day = request.body.order_day != undefined ? request.body.order_day : 0
    let order_time = request.body.order_time != undefined ? request.body.order_time : "00:00:00";
    var servicetype = await agent.screenInfo(request.dbName);
    let latitude = request.body.latitude
    let longitude = request.body.longitude
    console.log("==INPUT=sericeType=>>", request.body, servicetype);
    var api_version = Universal.getVersioning(request.path);
    let questionToBeSave = '';
    const questions = request.body.questions;
    let addOn = request.body.addOn ? request.body.addOn : null;
    let is_schedule = request.body.is_schedule || 0;

    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (request.body.promoationType) {
                promoationType = request.body.promoationType;
            }

            if (!(request.body.supplierBranchId)) {
                var msg = "supplier branch  Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.productList)) {
                var msg = "product not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            // if(!(request.body.area_id)){
            //     var msg = "area_id not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            if (request.body.productList && request.body.productList.length > 0) {

                _.each(request.body.productList, function (i) {
                    supplierIds.push(i.supplier_id);
                    productIds.push(i.productId)
                })

                // const unique = (value, index, self) => {
                //     return self.indexOf(value) === index
                //   }

                // supplierIds = supplierIds.filter(unique)

            }
            if (request.body.cartId && request.body.cartId != 0) {
                cartId = request.body.cartId;
            }

            // if(!request.body.deviceId) {
            //     var msg = "please enter device id"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }

            if (request.body.netAmount) {
                netAmount = request.body.netAmount;
            }

            deviceId = request.body.deviceId || "";
            accessToken = request.body.accessToken;
            supplierBranchId = request.body.supplierBranchId;
            productList = request.body.productList;
            // area_id = request.body.area_id;

            if (request.body.remarks && request.body.remarks != 0) {
                remarks = request.body.remarks;
            }

            if (request.files != undefined) {
                remarksImage = request.files.remarksImage;
                flag = 1;
            } else {
                remarksImage = null;
            }
            console.log("callback 1", remarks);
            callback(null);

        },

        checkActive: ['getValue', function (cb) {

            checkUserAccessActiveToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    is_active = result.is_active;

                    if (is_active == 0) {
                        var msg = "User Not Active"
                        return sendResponse.sendErrorMessage(msg, reply, 400);
                    } else {
                        cb(null);
                    }

                }
            })

        }],
        checkAccessToken: ['checkActive', function (callback) {

            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    id = result.id;
                    console.log("callback 2");
                    callback(null);
                }
            })

        }],
        checkDeliveryArea: ['checkAccessToken', async function (callback) {
            // try{
            //     let data = await checkUserArea(request.dbName,supplierIds,id,latitude,longitude)
            //     logger.debug("==========data and supplierIds length====++",data.length,supplierIds.length)
            //     if(data && data.length){
            //         // if(data.length==supplierIds.length){
            //         //     callback(null)
            //         // }else{
            //             var msg = "Supplier does not comes under your area"
            //             return sendResponse.sendErrorMessage(msg,reply,400)
            //         // }
            //     }else{
            //         // var msg = "Supplier does not comes under your area"
            //         // return sendResponse.sendErrorMessage(msg,reply,400)
            //         callback(null)
            //     }

            // }catch(err){
            //     logger.debug("=============err in checkDeliveryArea======",err);
            //     callback(err)
            // }
            callback(null)
        }],
        checkCart: ['checkDeliveryArea', function (callback) {

            console.log("check Cart");

            if (cartId != 0) {
                dropCart(request.dbName, reply, cartId, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        console.log("callback 3");
                        callback(null);
                    }
                })
            }

            else {
                callback(null);
            }


        }],
        checkAvailability: ['checkCart', function (callback) {

            if (cartId == 0) {
                var avail_query = "select p.id,p.name from product p where id IN (?) and p.purchased_quantity>=p.quantity";
                var stmt = multiConnection[request.dbName].query(avail_query, [productIds], function (err, data) {

                    console.log(stmt.sql);

                    if (err) {
                        var msg = "sorry! some of items are not available";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        if (data && data.length > 0) {
                            var msg = data[0].name + " is not available";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                        else {
                            callback(null);
                        }
                    }
                })
            }
            else {
                callback(null);
            }
        }],
        checkResturantTime: ['checkAvailability', async function (callback) {

            let disable_supplier_timings_check = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['disable_supplier_timings_check'])

            if (disable_supplier_timings_check && disable_supplier_timings_check.length && disable_supplier_timings_check[0].value == 1) {
                var sql = "select s.id from supplier_branch sb join supplier s on sb.supplier_id=s.id join supplier_timings st on st.supplier_id=s.id "
                sql += "where s.id IN (?) and st.week_id = ? and st.is_open = 0"
                var stmt = multiConnection[request.dbName].query(sql, [supplierIds, order_day], function (err, data) {
                    logger.debug("==TIME-QUERY==>", stmt.sql)
                    if (err) {
                        var msg = "error getting time";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        if ((data && data.length > 0 && servicetype == 1) || (data && data.length > 0 && servicetype == 2)) {
                            let finalArr = data.map((value) => value.name)
                            let msgStr = finalArr.toString().replace(/,/g, ' and ')

                            var msg = "Sorry! " + msgStr + " is closed now";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                        else {
                            callback(null);
                        }
                    }
                })
            } else {

                let supplier_closed = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ["supplier_closed"]);
                let closed_vendor_check = 0;

                var sql = "select s.id,s.name,s.is_active,s.is_deleted,s.is_live,s.status from supplier_branch sb join supplier s on sb.supplier_id=s.id join supplier_timings st on st.supplier_id=s.id "
                sql += "where s.id IN (?) and st.week_id = ? and (st.is_open = 0 or st.end_time <= ?) group by s.id"
                var stmt = multiConnection[request.dbName].query(sql, [supplierIds, order_day, order_time], async function (err, data) {
                    console.log(stmt.sql);
                    if (err) {
                        var msg = "error getting time";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {


                        if (supplier_closed && supplier_closed.length > 0 && supplier_closed[0].value == 1) {
                            console.log("aaaaaa")
                            if (data && data.length > 0) {
                                console.log("bbbbbb")

                                closed_vendor_check = 1;
                            }
                        }
                        console.log("=====closed_vendor_check==1=======", closed_vendor_check == 1)
                        console.log("============servicetype.app_type=======", (((data && data.length > 0 && servicetype.app_type == 1) ||
                            (data && data.length > 0 && servicetype.app_type == 2) ||
                            (data && data.length > 0 && servicetype.app_type > 10))
                            && (parseInt(data[0].is_active) == 0

                                && parseInt(data[0].is_live) == 0)
                            && parseInt(is_schedule) == 0
                        ))
                        if (closed_vendor_check == 1 ||
                            (((data && data.length > 0 && servicetype.app_type == 1) ||
                                (data && data.length > 0 && servicetype.app_type == 2) ||
                                (data && data.length > 0 && servicetype.app_type > 10))
                                //  data && data.length>0
                                && (parseInt(data[0].is_active) == 0
                                    //  && parseInt(data[0].status)==0 
                                    //  && parseInt(data[0].is_deleted)==1 
                                    && parseInt(data[0].is_live) == 0)
                                && parseInt(is_schedule) == 0
                            )) {

                            let finalArr = data.map((value) => value.name)
                            let msgStr = finalArr.toString().replace(/,/g, ' and ')
                            var msg = "Sorry! " + msgStr + " is closed now";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                        else {
                            // let  extend_schedule_date_data = await Execute.Query(dbName,"select `key`,`value` from tbl_setting where `key`=? ",["extend_schedule_date_hrs"]);
                            //   let is_live_filter = "and s.is_live=1 ";
                            //   if(extend_schedule_date_data && extend_schedule_date_data.length>0){
                            //    is_live_filter ="or s.is_live=1  or s.is_live=0";
                            // }

                            let checkSupplierAvailablity = await ExecuteQ.Query(request.dbName,
                                `select s.id,s.name,s.is_active,s.is_deleted,s.is_live,s.status from
                                supplier_branch sb join supplier s on sb.supplier_id=s.id 
                                join supplier_timings st on st.supplier_id=s.id
                                where s.id IN (${supplierIds})  group by s.id`);
                            console.log(checkSupplierAvailablity, "checkSupplierAvailablitycheckSupplierAvailablity")
                            if (checkSupplierAvailablity && checkSupplierAvailablity.length > 0) {

                                callback(null);
                            } else {
                                let finalArr = data.map((value) => value.name)
                                let msgStr = finalArr.toString().replace(/,/g, ' and ')
                                let msg = "Sorry! " + msgStr + " is closed now";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            }

                        }
                    }
                })

            }

        }],
        genrateCartId: ['checkResturantTime', function (callback) {
            console.log("generate Cart", remarks);
            genrateCart(request.dbName, reply, id, supplierBranchId, remarks,
                promoationType, area_id, questions, addOn, function (err, result) {
                    if (err) {
                        logger.debug("============error in generate cart ==================")
                        callback(err);
                    } else {
                        cartId = result;
                        console.log("callback 4");
                        callback(null);
                    }
                })
        }],
        addProductInCart: ['genrateCartId', function (callback) {
            console.log("Add Product Cart");


            addProductInCart(request.dbName, reply, productList, cartId, deviceId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    productId = result
                    console.log("callback 5");
                    callback(null);
                }
            })

        }],
        getfreeProduct: function (callback) {
            console.log("free product");
            if (promoationType == 0) {
                if (promoationType == 0 && netAmount != 0) {

                    getFreeProducts(request.dbName, reply, netAmount, supplierBranchId, function (err, result) {
                        if (err) {
                            callback(err);
                        } else {
                            result = result[0];
                            if (result) {

                                freeProduct.name = result.name;
                                freeProduct.measuring_unit = result.measuring_unit;
                                freeProduct.product_desc = result.product_desc;
                                freeProduct.image_path = result.image_path;
                                freeProduct.id = result.id;
                                freeProduct.promotion_id = result.promotion_id;

                                console.log("callback 6 *");

                                callback(null);
                            } else {
                                console.log("callback 6 **");
                                callback(null);
                            }
                        }
                    })
                } else {
                    console.log("callback 6 ***");
                    callback(null);
                }
            } else {
                console.log("callback 6 ****");
                callback(null);
            }
        },
        remarkImage: ['genrateCartId', function (callback) {
            logger.debug("remark Image")
            if (flag == 1 && remarksImage.length) {
                var len = remarksImage.length;
                for (var i = 0; i < len; i++) {
                    (async function (i) {
                        if (remarksImage[i]) {
                            var folder = "abc";
                            var profilePic = remarksImage[i];
                            let result = uploadMgr.uploadImageFileToS3BucketNew(profilePic);
                            remarkImage.push(result);
                            if (i == (len - 1)) {
                                logger.debug("=callback===========7=");
                                callback(null);
                            }
                        }
                    }(i))
                }
            } else {
                console.log("callback 7");
                callback(null);
            }
        }],
        uploadImage: ['remarkImage', function (callback) {
            console.log("upload Image", remarkImage, remarkImage.length);
            if (remarkImage.length) {
                var len = remarkImage.length;
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        var sql = "insert into review_image (image_path,cart_id)values(?,?)";
                        multiConnection[request.dbName].query(sql, [remarkImage[i], cartId], function (err, result) {
                            if (err) {
                                console.log("err", err);
                                var msg = "some thing went wrong ";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            } else {
                                if (i == (len - 1)) {
                                    console.log("callback 8");
                                    callback(null)
                                }
                            }
                        })
                    }(i));
                }
            } else {
                console.log("callback 8");
                callback(null);
            }
        }],
        productAddsOn: ['addProductInCart', async function (callback) {
            if (product_adds_on && product_adds_on.length > 0) {
                try {
                    await cartAddsOn(request.dbName, api_version, product_adds_on, cartId)
                    callback(null)
                }
                catch (Err) {
                    logger.debug("===ADDS=ON=ERROR", Err);
                    callback(Err)
                }
            }
            else {
                callback(null)
            }

        }],
        productVariants: ['productAddsOn', async function (callback) {
            if (product_variant && product_variant.length > 0) {
                try {
                    await cartVariants(request.dbName, api_version, product_variant, cartId)
                    callback(null)
                }
                catch (Err) {
                    callback(Err)
                }
            }
            else {
                callback(null)
            }
        }]
    }, function (err, result) {

        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            console.log("finish", { cartId: cartId, freeProduct: freeProduct, min_order: 0 })
            return sendResponse.sendSuccessData({ cartId: cartId, freeProduct: freeProduct, min_order: minOrder }, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.addToCartV2 = async function (request, reply) {

    var accessToken;
    var supplierBranchId;
    var productList;
    var remarks = 0;
    var id;
    var cartId = 0;
    var optionalCartd = 0;
    var netAmount = 0;
    var deviceId = 0;  // o:android , 1:ios
    var freeProduct = {};
    var remarksImage = [];
    var remarkImage = [], productIds = [], supplierIds = [];
    var promoationType = 0;
    var flag = 0;
    var productId;
    var minOrder = 0;
    var area_id;

    var product_adds_on = request.body.adds_on;
    let product_variant = request.body.variants;

    let order_day = request.body.order_day != undefined ? request.body.order_day : 0
    let order_time = request.body.order_time != undefined ? request.body.order_time : "00:00:00";
    var servicetype = await agent.screenInfo(request.dbName);
    let latitude = request.body.latitude
    let longitude = request.body.longitude
    console.log("==INPUT=sericeType=>>", request.body, servicetype);
    var api_version = Universal.getVersioning(request.path);
    let questionToBeSave = '';
    const questions = request.body.questions;
    let addOn = request.body.addOn ? request.body.addOn : null;
    let is_schedule = request.body.is_schedule || 0;

    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (request.body.promoationType) {
                promoationType = request.body.promoationType;
            }

            if (!(request.body.supplierBranchId)) {
                var msg = "supplier branch  Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.productList)) {
                var msg = "product not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            // if(!(request.body.area_id)){
            //     var msg = "area_id not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            if (request.body.productList && request.body.productList.length > 0) {

                _.each(request.body.productList, function (i) {
                    supplierIds.push(i.supplier_id);
                    productIds.push(i.productId)
                })

                // const unique = (value, index, self) => {
                //     return self.indexOf(value) === index
                //   }

                // supplierIds = supplierIds.filter(unique)

            }
            if (request.body.cartId && request.body.cartId != 0) {
                cartId = request.body.cartId;
            }

            // if(!request.body.deviceId) {
            //     var msg = "please enter device id"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }

            if (request.body.netAmount) {
                netAmount = request.body.netAmount;
            }

            deviceId = request.body.deviceId || "";
            accessToken = request.body.accessToken;
            supplierBranchId = request.body.supplierBranchId;
            productList = request.body.productList;
            // area_id = request.body.area_id;

            if (request.body.remarks && request.body.remarks != 0) {
                remarks = request.body.remarks;
            }

            if (request.files != undefined) {
                remarksImage = request.files.remarksImage;
                flag = 1;
            } else {
                remarksImage = null;
            }
            console.log("callback 1", remarks);
            callback(null);

        },

        checkActive: ['getValue', function (cb) {

            checkUserAccessActiveToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    is_active = result.is_active;

                    if (is_active == 0) {
                        var msg = "User Not Active"
                        return sendResponse.sendErrorMessage(msg, reply, 400);
                    } else {
                        cb(null);
                    }

                }
            })

        }],
        checkAccessToken: ['checkActive', function (callback) {

            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    id = result.id;
                    console.log("callback 2");
                    callback(null);
                }
            })

        }],
        checkDeliveryArea: ['checkAccessToken', async function (callback) {
            // try{
            //     let data = await checkUserArea(request.dbName,supplierIds,id,latitude,longitude)
            //     logger.debug("==========data and supplierIds length====++",data.length,supplierIds.length)
            //     if(data && data.length){
            //         // if(data.length==supplierIds.length){
            //         //     callback(null)
            //         // }else{
            //             var msg = "Supplier does not comes under your area"
            //             return sendResponse.sendErrorMessage(msg,reply,400)
            //         // }
            //     }else{
            //         // var msg = "Supplier does not comes under your area"
            //         // return sendResponse.sendErrorMessage(msg,reply,400)
            //         callback(null)
            //     }

            // }catch(err){
            //     logger.debug("=============err in checkDeliveryArea======",err);
            //     callback(err)
            // }
            callback(null)
        }],
        checkCart: ['checkDeliveryArea', function (callback) {

            console.log("check Cart");

            if (cartId != 0) {
                dropCart(request.dbName, reply, cartId, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        console.log("callback 3");
                        callback(null);
                    }
                })
            }

            else {
                callback(null);
            }


        }],
        checkAvailability: ['checkCart', function (callback) {

            if (cartId == 0) {
                var avail_query = "select p.id,p.name from product p where id IN (?) and p.purchased_quantity>=p.quantity";
                var stmt = multiConnection[request.dbName].query(avail_query, [productIds], function (err, data) {

                    console.log(stmt.sql);

                    if (err) {
                        var msg = "sorry! some of items are not available";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        if (data && data.length > 0) {
                            var msg = data[0].name + " is not available";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                        else {
                            callback(null);
                        }
                    }
                })
            }
            else {
                callback(null);
            }
        }],
        checkResturantTime: ['checkAvailability', async function (callback) {

            let disable_supplier_timings_check = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['disable_supplier_timings_check'])

            if (disable_supplier_timings_check && disable_supplier_timings_check.length && disable_supplier_timings_check[0].value == 1) {
                var sql = "select s.id from supplier_branch sb join supplier s on sb.supplier_id=s.id join supplier_timings st on st.supplier_id=s.id "
                sql += "where s.id IN (?) and st.week_id = ? and st.is_open = 0"
                var stmt = multiConnection[request.dbName].query(sql, [sup_ids, order_day], function (err, data) {
                    logger.debug("==TIME-QUERY==>", stmt.sql)
                    if (err) {
                        var msg = "error getting time";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        if ((data && data.length > 0 && servicetype == 1) || (data && data.length > 0 && servicetype == 2)) {
                            let finalArr = data.map((value) => value.name)
                            let msgStr = finalArr.toString().replace(/,/g, ' and ')

                            var msg = "Sorry! " + msgStr + " is closed now";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                        else {
                            callback(null);
                        }
                    }
                })
            } else {

                let supplier_closed = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ["supplier_closed"]);
                let closed_vendor_check = 0;

                var sql = "select s.id,s.name,s.is_active,s.is_deleted,s.is_live,s.status from supplier_branch sb join supplier s on sb.supplier_id=s.id join supplier_timings st on st.supplier_id=s.id "
                sql += "where s.id IN (?) and st.week_id = ? and (st.is_open = 0 or st.end_time <= ?) group by s.id"
                var stmt = multiConnection[request.dbName].query(sql, [supplierIds, order_day, order_time], async function (err, data) {
                    console.log(stmt.sql);
                    if (err) {
                        var msg = "error getting time";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {


                        if (supplier_closed && supplier_closed.length > 0 && supplier_closed[0].value == 1) {
                            console.log("aaaaaa")
                            if (data && data.length > 0) {
                                console.log("bbbbbb")

                                closed_vendor_check = 1;
                            }
                        }
                        console.log("=========service_type=========", servicetype, data)
                        console.log("============servicetype.app_type=======", servicetype.app_type)
                        if (closed_vendor_check == 1 ||
                            (((data && data.length > 0 && servicetype.app_type == 1) ||
                                (data && data.length > 0 && servicetype.app_type == 2) ||
                                (data && data.length > 0 && servicetype.app_type > 10))
                                //  data && data.length>0
                                && (parseInt(data[0].is_active) == 0
                                    //  && parseInt(data[0].status)==0 
                                    //  && parseInt(data[0].is_deleted)==1 
                                    && parseInt(data[0].is_live) == 0)
                                && parseInt(is_schedule) == 0
                            )) {

                            let finalArr = data.map((value) => value.name)
                            let msgStr = finalArr.toString().replace(/,/g, ' and ')
                            var msg = "Sorry! " + msgStr + " is closed now";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                        else {
                            let checkSupplierAvailablity = await ExecuteQ.Query(request.dbName,
                                `select s.id,s.name,s.is_active,s.is_deleted,s.is_live,s.status from
                             supplier_branch sb join supplier s on sb.supplier_id=s.id 
                             join supplier_timings st on st.supplier_id=s.id
                              where s.id IN (${supplierIds}) and s.is_live=1  group by s.id`);
                            console.log(checkSupplierAvailablity, "checkSupplierAvailablitycheckSupplierAvailablity")
                            if (checkSupplierAvailablity && checkSupplierAvailablity.length > 0) {

                                callback(null);
                            } else {
                                let finalArr = data.map((value) => value.name)
                                let msgStr = finalArr.toString().replace(/,/g, ' and ')
                                let msg = "Sorry! " + msgStr + " is closed now";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            }

                        }
                    }
                })

            }

        }],
        genrateCartId: ['checkResturantTime', function (callback) {
            console.log("generate Cart", remarks);
            genrateCart(request.dbName, reply, id, supplierBranchId, remarks,
                promoationType, area_id, questions, addOn, function (err, result) {
                    if (err) {
                        logger.debug("============error in generate cart ==================")
                        callback(err);
                    } else {
                        cartId = result;
                        console.log("callback 4");
                        callback(null);
                    }
                })
        }],
        addProductInCart: ['genrateCartId', function (callback) {
            console.log("Add Product Cart");


            addProductInCart(request.dbName, reply, productList, cartId, deviceId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    productId = result
                    console.log("callback 5");
                    callback(null);
                }
            })

        }],
        getfreeProduct: function (callback) {
            console.log("free product");
            if (promoationType == 0) {
                if (promoationType == 0 && netAmount != 0) {

                    getFreeProducts(request.dbName, reply, netAmount, supplierBranchId, function (err, result) {
                        if (err) {
                            callback(err);
                        } else {
                            result = result[0];
                            if (result) {

                                freeProduct.name = result.name;
                                freeProduct.measuring_unit = result.measuring_unit;
                                freeProduct.product_desc = result.product_desc;
                                freeProduct.image_path = result.image_path;
                                freeProduct.id = result.id;
                                freeProduct.promotion_id = result.promotion_id;

                                console.log("callback 6 *");

                                callback(null);
                            } else {
                                console.log("callback 6 **");
                                callback(null);
                            }
                        }
                    })
                } else {
                    console.log("callback 6 ***");
                    callback(null);
                }
            } else {
                console.log("callback 6 ****");
                callback(null);
            }
        },
        remarkImage: ['genrateCartId', function (callback) {
            logger.debug("remark Image")
            if (flag == 1 && remarksImage.length) {
                var len = remarksImage.length;
                for (var i = 0; i < len; i++) {
                    (async function (i) {
                        if (remarksImage[i]) {
                            var folder = "abc";
                            var profilePic = remarksImage[i];
                            let result = uploadMgr.uploadImageFileToS3BucketNew(profilePic);
                            remarkImage.push(result);
                            if (i == (len - 1)) {
                                logger.debug("=callback===========7=");
                                callback(null);
                            }
                        }
                    }(i))
                }
            } else {
                console.log("callback 7");
                callback(null);
            }
        }],
        uploadImage: ['remarkImage', function (callback) {
            console.log("upload Image", remarkImage, remarkImage.length);
            if (remarkImage.length) {
                var len = remarkImage.length;
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        var sql = "insert into review_image (image_path,cart_id)values(?,?)";
                        multiConnection[request.dbName].query(sql, [remarkImage[i], cartId], function (err, result) {
                            if (err) {
                                console.log("err", err);
                                var msg = "some thing went wrong ";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            } else {
                                if (i == (len - 1)) {
                                    console.log("callback 8");
                                    callback(null)
                                }
                            }
                        })
                    }(i));
                }
            } else {
                console.log("callback 8");
                callback(null);
            }
        }],
        productAddsOn: ['addProductInCart', async function (callback) {
            if (product_adds_on && product_adds_on.length > 0) {
                try {
                    await cartAddsOn(request.dbName, api_version, product_adds_on, cartId)
                    callback(null)
                }
                catch (Err) {
                    logger.debug("===ADDS=ON=ERROR", Err);
                    callback(Err)
                }
            }
            else {
                callback(null)
            }

        }],
        productVariants: ['productAddsOn', async function (callback) {
            if (product_variant && product_variant.length > 0) {
                try {
                    await cartVariants(request.dbName, api_version, product_variant, cartId)
                    callback(null)
                }
                catch (Err) {
                    callback(Err)
                }
            }
            else {
                callback(null)
            }
        }]
    }, function (err, result) {

        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            console.log("finish", { cartId: cartId, freeProduct: freeProduct, min_order: 0 })
            return sendResponse.sendSuccessData({ cartId: cartId, freeProduct: freeProduct, min_order: minOrder }, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}
exports.addToCartBySupplier = async function (request, reply) {
    var accessToken;
    var supplierBranchId;
    var productList;
    var remarks = 0;
    let id = request.body.id != undefined ? request.body.id : 0
    var cartId = 0;
    var optionalCartd = 0;
    var netAmount = 0;
    var deviceId = 0;  // o:android , 1:ios
    var freeProduct = {};
    var remarksImage = [];
    var remarkImage = [], productIds = [], supplierIds = [];
    var promoationType = 0;
    var flag = 0;
    var productId;
    var minOrder = 0;
    var area_id;

    var product_adds_on = request.body.adds_on;
    let product_variant = request.body.variants;

    let order_day = request.body.order_day != undefined ? request.body.order_day : 0
    let order_time = request.body.order_time != undefined ? request.body.order_time : "00:00:00";
    var servicetype = await agent.screenInfo(request.dbName);
    let latitude = request.body.latitude
    let longitude = request.body.longitude
    console.log("==INPUT=sericeType=>>", request.body, servicetype);
    var api_version = Universal.getVersioning(request.path);
    let questionToBeSave = '';
    const questions = request.body.questions;
    let addOn = request.body.addOn ? request.body.addOn : null;

    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (request.body.promoationType) {
                promoationType = request.body.promoationType;
            }

            if (!(request.body.supplierBranchId)) {
                var msg = "supplier branch  Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.productList)) {
                var msg = "product not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            // if(!(request.body.area_id)){
            //     var msg = "area_id not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            if (request.body.productList && request.body.productList.length > 0) {

                _.each(request.body.productList, function (i) {
                    supplierIds.push(i.supplier_id);
                    productIds.push(i.productId)
                })

                // const unique = (value, index, self) => {
                //     return self.indexOf(value) === index
                //   }

                // supplierIds = supplierIds.filter(unique)

            }
            if (request.body.cartId && request.body.cartId != 0) {
                cartId = request.body.cartId;
            }

            if (!request.body.deviceId) {
                var msg = "please enter device id"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (request.body.netAmount) {
                netAmount = request.body.netAmount;
            }

            deviceId = request.body.deviceId;
            accessToken = request.body.accessToken;
            supplierBranchId = request.body.supplierBranchId;
            productList = request.body.productList;
            // area_id = request.body.area_id;

            if (request.body.remarks && request.body.remarks != 0) {
                remarks = request.body.remarks;
            }

            if (request.files != undefined) {
                remarksImage = request.files.remarksImage;
                flag = 1;
            } else {
                remarksImage = null;
            }
            console.log("callback 1", remarks);
            callback(null);

        },

        // checkActive:['getValue',function(cb){

        //     checkUserAccessActiveToken(request.dbName,reply,accessToken,function(err,result){
        //         if(err){
        //             callback(err);
        //         }else{
        //             is_active = 1;//result.is_active;

        //             if(is_active == 0){
        //                 var msg = "User Not Active"
        //                 return sendResponse.sendErrorMessage(msg,reply,400);
        //             }else{
        //                 cb(null);
        //             }

        //         }
        //     })

        // }],
        // checkAccessToken:['checkActive',function(callback){

        //     checkUserAccessToken(request.dbName,reply,accessToken,function(err,result){
        //         if(err){
        //             callback(err);
        //         }else{
        //             id = result.id;
        //             console.log("callback 2");
        //             callback(null);
        //         }
        //     })

        // }],
        checkDeliveryArea: ['getValue', async function (callback) {
            // try{
            //     let data = await checkUserArea(request.dbName,supplierIds,id,latitude,longitude)
            //     logger.debug("==========data and supplierIds length====++",data.length,supplierIds.length)
            //     if(data && data.length){
            //         // if(data.length==supplierIds.length){
            //         //     callback(null)
            //         // }else{
            //             var msg = "Supplier does not comes under your area"
            //             return sendResponse.sendErrorMessage(msg,reply,400)
            //         // }
            //     }else{
            //         // var msg = "Supplier does not comes under your area"
            //         // return sendResponse.sendErrorMessage(msg,reply,400)
            //         callback(null)
            //     }

            // }catch(err){
            //     logger.debug("=============err in checkDeliveryArea======",err);
            //     callback(err)
            // }
            callback(null)
        }],
        checkCart: ['checkDeliveryArea', function (callback) {

            console.log("check Cart");

            if (cartId != 0) {
                dropCart(request.dbName, reply, cartId, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        console.log("callback 3");
                        callback(null);
                    }
                })
            }

            else {
                callback(null);
            }


        }],
        checkAvailability: ['checkCart', function (callback) {

            if (cartId == 0) {
                var avail_query = "select p.id,p.name from product p where id IN (?) and p.purchased_quantity>=p.quantity";
                var stmt = multiConnection[request.dbName].query(avail_query, [productIds], function (err, data) {

                    console.log(stmt.sql);

                    if (err) {
                        var msg = "sorry! some of items are not available";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        if (data && data.length > 0) {
                            var msg = data[0].name + " is not available";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                        else {
                            callback(null);
                        }
                    }
                })
            }
            else {
                callback(null);
            }
        }],
        checkResturantTime: ['checkAvailability', function (callback) {
            var sql = "select s.id,s.name from supplier_branch sb join supplier s on sb.supplier_id=s.id join supplier_timings st on st.supplier_id=s.id "
            sql += "where s.id IN (?) and st.week_id = ? and (st.is_open = 0 or st.end_time <= ?) group by s.id"
            var stmt = multiConnection[request.dbName].query(sql, [supplierIds, order_day, order_time], function (err, data) {
                logger.debug(stmt.sql);
                if (err) {
                    var msg = "error getting time";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    logger.debug("=========service_type=========", servicetype, data)
                    logger.debug("============servicetype.app_type=======", servicetype.app_type)
                    if ((data && data.length > 0 && servicetype.app_type == 1) || (data && data.length > 0 && servicetype.app_type == 2)) {

                        let finalArr = data.map((value) => value.name)
                        let msgStr = finalArr.toString().replace(/,/g, ' and ')

                        var msg = "Sorry! " + msgStr + " is closed now";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        callback(null);
                    }
                }
            })
        }],
        genrateCartId: ['checkResturantTime', function (callback) {
            console.log("generate Cart", remarks);
            genrateCart(request.dbName, reply, id, supplierBranchId, remarks,
                promoationType, area_id, questions, addOn, function (err, result) {
                    if (err) {
                        logger.debug("============error in generate cart ==================")
                        callback(err);
                    } else {
                        cartId = result;
                        console.log("callback 4");
                        callback(null);
                    }
                })
        }],
        addProductInCart: ['genrateCartId', function (callback) {
            console.log("Add Product Cart");


            addProductInCart(request.dbName, reply, productList, cartId, deviceId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    productId = result
                    console.log("callback 5");
                    callback(null);
                }
            })

        }],
        getfreeProduct: function (callback) {
            console.log("free product");
            if (promoationType == 0) {
                if (promoationType == 0 && netAmount != 0) {

                    getFreeProducts(request.dbName, reply, netAmount, supplierBranchId, function (err, result) {
                        if (err) {
                            callback(err);
                        } else {
                            result = result[0];
                            if (result) {

                                freeProduct.name = result.name;
                                freeProduct.measuring_unit = result.measuring_unit;
                                freeProduct.product_desc = result.product_desc;
                                freeProduct.image_path = result.image_path;
                                freeProduct.id = result.id;
                                freeProduct.promotion_id = result.promotion_id;

                                console.log("callback 6 *");

                                callback(null);
                            } else {
                                console.log("callback 6 **");
                                callback(null);
                            }
                        }
                    })
                } else {
                    console.log("callback 6 ***");
                    callback(null);
                }
            } else {
                console.log("callback 6 ****");
                callback(null);
            }
        },
        remarkImage: ['genrateCartId', function (callback) {
            logger.debug("remark Image")
            if (flag == 1 && remarksImage.length) {
                var len = remarksImage.length;
                for (var i = 0; i < len; i++) {
                    (async function (i) {
                        if (remarksImage[i]) {
                            var folder = "abc";
                            var profilePic = remarksImage[i];
                            let result = uploadMgr.uploadImageFileToS3BucketNew(profilePic);
                            remarkImage.push(result);
                            if (i == (len - 1)) {
                                logger.debug("=callback===========7=");
                                callback(null);
                            }

                            // func.uploadImageFileToS3Bucket(reply,profilePic, folder, function(err,result){
                            //     if(err){
                            //         logger.debug("=======error is here in remarkImage")
                            //         var msg = "db error :";
                            //         return  sendResponse.sendErrorMessage(msg,reply,500);
                            //     }else{
                            //         remarkImage.push(result);
                            //         if(i == (len-1)){
                            //            console.log("callback 7");
                            //             callback(null)
                            //         }
                            //     }
                            // });
                        }
                    }(i))
                }
            } else {
                console.log("callback 7");
                callback(null);
            }
        }],
        uploadImage: ['remarkImage', function (callback) {
            //   console.log("upload Image",remarkImage.length);
            console.log("upload Image", remarkImage, remarkImage.length);
            if (remarkImage.length) {
                var len = remarkImage.length;
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        var sql = "insert into review_image (image_path,cart_id)values(?,?)";
                        multiConnection[request.dbName].query(sql, [remarkImage[i], cartId], function (err, result) {
                            if (err) {
                                console.log("err", err);
                                var msg = "some thing went wrong ";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            } else {
                                if (i == (len - 1)) {
                                    console.log("callback 8");
                                    callback(null)
                                }
                            }
                        })
                    }(i));
                }
            } else {
                console.log("callback 8");
                callback(null);
            }
        }],
        productAddsOn: ['addProductInCart', async function (callback) {
            if (product_adds_on && product_adds_on.length > 0) {
                try {
                    await cartAddsOn(request.dbName, api_version, product_adds_on, cartId)
                    callback(null)
                }
                catch (Err) {
                    logger.debug("===ADDS=ON=ERROR", Err);
                    callback(Err)
                }
            }
            else {
                callback(null)
            }

        }],
        productVariants: ['productAddsOn', async function (callback) {
            if (product_variant && product_variant.length > 0) {
                try {
                    await cartVariants(request.dbName, api_version, product_variant, cartId)
                    callback(null)
                }
                catch (Err) {
                    logger.debug("===ADDS=ON=ERROR", Err);
                    callback(Err)
                }
            }
            else {
                callback(null)
            }
        }]
    }, function (err, result) {

        if (err) {
            logger.debug("=============error in the add to cart===========")
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            console.log("finish", { cartId: cartId, freeProduct: freeProduct, min_order: 0 })
            return sendResponse.sendSuccessData({ cartId: cartId, freeProduct: freeProduct, min_order: minOrder }, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

// exports.addToCartBySupplier = async function(request,reply){
//     var accessToken;
//     var supplierBranchId ;
//     var productList;
//     var remarks = 0;
//     let id = request.body.id!=undefined?request.body.id:0
//     var cartId =0;
//     var optionalCartd = 0;
//     var netAmount = 0;
//     var deviceId = 0 ;  // o:android , 1:ios
//     var freeProduct = {};
//     var remarksImage = [];
//     var remarkImage = [],productIds=[],supplierIds=[];
//     var promoationType = 0;
//     var flag = 0;
//     var productId;
//     var minOrder=0;
//     var area_id;

//     var product_adds_on=request.body.adds_on;
//     let product_variant=request.body.variants;

//     let  order_day = request.body.order_day!=undefined?request.body.order_day:0
//     let  order_time = request.body.order_time!=undefined?request.body.order_time:"00:00:00";
//     var servicetype=await agent.screenInfo(request.dbName);   
//     let latitude = request.body.latitude
//     let longitude = request.body.longitude
//     console.log("==INPUT=sericeType=>>",request.body,servicetype);
//     var api_version=Universal.getVersioning(request.path);
//     let questionToBeSave = '';
//     const questions = request.body.questions;
//     let addOn = request.body.addOn?request.body.addOn:null;

//     async.auto({

//         getValue:function(callback){
//             if(!(request.body.accessToken)){
//                 var msg = "access token Id not found"
//                 return sendResponse.sendErrorMessage(msg,reply,400);
//             }

//             if(request.body.promoationType){
//                 promoationType  = request.body.promoationType;
//             }

//             if(!(request.body.supplierBranchId)){
//                 var msg = "supplier branch  Id not found"
//                 return sendResponse.sendErrorMessage(msg,reply,400);
//             }

//             if(!(request.body.productList)){
//                 var msg = "product not found"
//                 return sendResponse.sendErrorMessage(msg,reply,400);
//             }
//             // if(!(request.body.area_id)){
//             //     var msg = "area_id not found"
//             //     return sendResponse.sendErrorMessage(msg,reply,400);
//             // }
//             if(request.body.productList && request.body.productList.length>0){

//                 _.each(request.body.productList,function(i){
//                     supplierIds.push(i.supplier_id);
//                     productIds.push(i.productId)
//                 })

//                 // const unique = (value, index, self) => {
//                 //     return self.indexOf(value) === index
//                 //   }

//                 // supplierIds = supplierIds.filter(unique)

//             }
//             if(request.body.cartId && request.body.cartId != 0){
//                 cartId = request.body.cartId;
//             }

//             if(!request.body.deviceId) {
//                 var msg = "please enter device id"
//                 return sendResponse.sendErrorMessage(msg,reply,400);
//             }

//             if(request.body.netAmount){
//                 netAmount = request.body.netAmount;
//             }

//             deviceId = request.body.deviceId;
//             accessToken = request.body.accessToken;
//             supplierBranchId = request.body.supplierBranchId;
//             productList = request.body.productList;
//             // area_id = request.body.area_id;

//             if(request.body.remarks && request.body.remarks != 0){
//                 remarks = request.body.remarks;
//             }

//             if(request.files != undefined){
//                  remarksImage = request.files.remarksImage;
//                 flag = 1;
//             }else{
//                 remarksImage = null;
//             }
//             console.log("callback 1",remarks);
//             callback(null);

//         },

//         checkActive:['getValue',function(cb){
//         // if (request.path == "/supplier/add_to_cart") {
//         //   //  accessToken = 98696
//         // //   callback(null);
//         // //   sendResponse.sendErrorMessage("user id not found",reply,400);
//         //    cb(null)
//         // }else{
//             // checkUserAccessActiveToken(request.dbName,reply,accessToken,function(err,result){
//             //     if(err){
//             //         callback(err);
//             //     }else{
//             //         is_active = result.is_active;

//             //         if(is_active == 0){
//             //             var msg = "User Not Active"
//             //             return sendResponse.sendErrorMessage(msg,reply,400);
//             //         }else{
//             //             cb(null);
//             //         }

//             //     }
//             // })
//             // console.log("gcdgscgksgikd")
//             console.log("gcdgscgksgikd")
//             is_active =1;
//             cb(null)
//             // checkUserAccessActiveToken(request.dbName,reply,accessToken,function(err,result){
//             //     if(err){
//             //         callback(err);
//             //     }else{


//             //         console.log("resulrtttttttttttttttttttttttttttttttttt",result)


//             //         if(is_active == 0){
//             //             var msg = "User Not Active"
//             //             return sendResponse.sendErrorMessage(msg,reply,400);
//             //         }else{
//             //             cb(null);
//             //         }

//             //     }
//             // })

//         // } 
//         }],
//         checkAccessToken:['checkActive',function(callback){
//             // if (request.path == "/supplier/add_to_cart") {

//             //   id = request.body.user_id || 0;

//             // if(parseInt(id)==0){
//             //     sendResponse.sendErrorMessage("user id not found",reply,400);
//             // }

//             // } else {

//             // checkUserAccessToken(request.dbName,reply,accessToken,function(err,result){
//             //     if(err){
//             //         callback(err);
//             //     }else{
//             //         console.log("resulr5555555555555555555555555555tttttt",result)
//             //         id = result.id;
//             //         console.log("callback 2");
//             //         callback(null);
//             //     }
//             // })

//         // } 
//         callback(null);
//     //    checkUserAccessToken(request.dbName,reply,accessToken,function(err,result){
//     //     if(err){
//     //         callback(err);
//     //     }else{
//     //         id = result.id;
//     //         console.log("callback 2");
//     //         callback(null);
//     //     }
//     // })
//         }],

//         checkDeliveryArea:['checkAccessToken',async function(callback){



//             // try{
//             //     let data = await checkUserArea(request.dbName,supplierIds,id,latitude,longitude)
//             //     logger.debug("==========data and supplierIds length====++",data.length,supplierIds.length)
//             //     if(data && data.length){
//             //         // if(data.length==supplierIds.length){
//             //         //     callback(null)
//             //         // }else{
//             //             var msg = "Supplier does not comes under your area"
//             //             return sendResponse.sendErrorMessage(msg,reply,400)
//             //         // }
//             //     }else{
//             //         // var msg = "Supplier does not comes under your area"
//             //         // return sendResponse.sendErrorMessage(msg,reply,400)
//             //         callback(null)
//             //     }

//             // }catch(err){
//             //     logger.debug("=============err in checkDeliveryArea======",err);
//             //     callback(err)
//             // }
//             callback(null)
//         }],
//         checkCart:['checkDeliveryArea',function(callback){

//         console.log("check Cart");

//            if(cartId != 0)
//            {
//                 dropCart(request.dbName,reply,cartId,function(err,result){
//                     if(err){
//                         callback(err);
//                     }else{
//                         console.log("callback 3");
//                         callback(null);
//                     }
//                })
//            }

//            else{
//                 callback(null);
//            }


//         }],
//         checkAvailability:['checkCart',function(callback){

//            if(cartId == 0){
//                var avail_query="select p.id,p.name from product p where id IN (?) and p.purchased_quantity>=p.quantity";
//                var stmt=multiConnection[request.dbName].query(avail_query,[productIds],function(err,data){

//                 console.log(stmt.sql);

//                 if(err){
//                         var msg = "sorry! some of items are not available";
//                         sendResponse.sendErrorMessage(msg,reply,500);
//                     }
//                     else{
//                         if(data && data.length>0){
//                             var msg = data[0].name +" is not available";
//                             sendResponse.sendErrorMessage(msg,reply,500);
//                         }
//                         else{
//                             callback(null);
//                         }
//                     }
//                })
//            }
//            else{
//             callback(null);
//            }
//         }],
//         checkResturantTime:['checkAvailability',function(callback){
//             var sql = "select s.id,s.name from supplier_branch sb join supplier s on sb.supplier_id=s.id join supplier_timings st on st.supplier_id=s.id "
//                 sql += "where s.id IN (?) and st.week_id = ? and (st.is_open = 0 or st.end_time <= ?) group by s.id"
//             var stmt=multiConnection[request.dbName].query(sql,[supplierIds,order_day,order_time],function(err,data){
//              logger.debug(stmt.sql);
//              if(err){
//                      var msg = "error getting time";
//                      sendResponse.sendErrorMessage(msg,reply,500);
//                  }
//                  else{
//                      logger.debug("=========service_type=========",servicetype,data)
//                      logger.debug("============servicetype.app_type=======",servicetype.app_type)
//                      if((data && data.length>0 && servicetype.app_type==1) || (data && data.length>0 && servicetype.app_type==2)){

//                             let finalArr = data.map((value)=>value.name)
//                             let msgStr = finalArr.toString().replace(/,/g,' and ')

//                         var msg = "Sorry! "+msgStr+" is closed now";
//                         sendResponse.sendErrorMessage(msg,reply,500);
//                      }
//                      else{
//                         callback(null);
//                      }
//                  }
//             })
//          }],
//         genrateCartId:['checkResturantTime',function(callback)
//         {
//             console.log("generate Cart",remarks);
//             genrateCart(request.dbName,reply,id,supplierBranchId,remarks,
//                 promoationType,area_id,questions,addOn,function(err,result){
//                 if(err){
//                     logger.debug("============error in generate cart ==================")
//                     callback(err);
//                 }else{
//                     cartId = result;
//                     console.log("callback 4");
//                     callback(null);
//                 }
//             })
//         }],
//         addProductInCart:['genrateCartId',function(callback){
//             console.log("Add Product Cart");


//             addProductInCart(request.dbName,reply,productList,cartId,deviceId,function(err,result){
//                     if(err){
//                         callback(err);
//                     }else{
//                         productId=result
//                         console.log("callback 5");
//                         callback(null);
//                     }
//                 })

//         }],
//         getfreeProduct:function(callback){
//             console.log("free product");
//             if(promoationType == 0){
//                 if(promoationType == 0 && netAmount != 0){

//                     getFreeProducts(request.dbName,reply,netAmount,supplierBranchId,function(err,result){
//                         if(err){
//                             callback(err);
//                         }else{
//                             result = result[0];
//                             if(result){

//                                 freeProduct.name = result.name;
//                                 freeProduct.measuring_unit = result.measuring_unit;
//                                 freeProduct.product_desc = result.product_desc;
//                                 freeProduct.image_path = result.image_path;
//                                 freeProduct.id = result.id;
//                                 freeProduct.promotion_id = result.promotion_id;

//                                 console.log("callback 6 *");

//                                 callback(null);
//                             }else{
//                                 console.log("callback 6 **");
//                                 callback(null);
//                             }
//                         }
//                     })
//                 }else{
//                     console.log("callback 6 ***");
//                     callback(null);
//                 }
//             }else{
//                 console.log("callback 6 ****");
//                 callback(null);
//             }
//         },
//         remarkImage:['genrateCartId',function(callback){
//             logger.debug("remark Image")
//             if(flag == 1 && remarksImage.length){
//                 var len = remarksImage.length;
//                 for(var i = 0;i < len;i++){
//                     (async function(i){
//                         if(remarksImage[i]){
//                             var folder = "abc";
//                             var profilePic = remarksImage[i];
//                             let result = uploadMgr.uploadImageFileToS3BucketNew(profilePic);
//                             remarkImage.push(result);
//                             if(i==(len-1)){
//                                 logger.debug("=callback===========7=");
//                                 callback(null);
//                             }

//                             // func.uploadImageFileToS3Bucket(reply,profilePic, folder, function(err,result){
//                             //     if(err){
//                             //         logger.debug("=======error is here in remarkImage")
//                             //         var msg = "db error :";
//                             //         return  sendResponse.sendErrorMessage(msg,reply,500);
//                             //     }else{
//                             //         remarkImage.push(result);
//                             //         if(i == (len-1)){
//                             //            console.log("callback 7");
//                             //             callback(null)
//                             //         }
//                             //     }
//                             // });
//                         }
//                     }(i))
//                 }
//             }else{
//                console.log("callback 7");
//                 callback(null);
//             }
//         }],
//         uploadImage:['remarkImage',function(callback){
//          //   console.log("upload Image",remarkImage.length);
//                 console.log("upload Image",remarkImage,remarkImage.length);
//                 if (remarkImage.length) {
//                     var len = remarkImage.length;
//                     for (var i = 0; i < len; i++) {
//                         (function (i) {
//                             var sql = "insert into review_image (image_path,cart_id)values(?,?)";
//                             multiConnection[request.dbName].query(sql, [remarkImage[i], cartId], function (err, result) {
//                                 if (err) {
//                                     console.log("err", err);
//                                     var msg = "some thing went wrong ";
//                                     sendResponse.sendErrorMessage(msg, reply, 500);
//                                 } else {
//                                     if (i == (len - 1)) {
//                                           console.log("callback 8 0");
//                                         callback(null)
//                                     }
//                                 }
//                             })
//                         }(i));
//                     }
//                 } else {
//                     console.log("callback 8 1");
//                     callback(null);
//                 }
//         }],
//         productAddsOn:['addProductInCart',async function (callback) {
//             if(product_adds_on && product_adds_on.length>0){
//                 try{
//                     await cartAddsOn(request.dbName,api_version,product_adds_on,cartId)
//                     callback(null)
//                 }
//                 catch(Err){
//                     logger.debug("===ADDS=ON=ERROR",Err);
//                     callback(Err)
//                 }
//             }
//             else{
//                callback(null)
//             }

//         }],
//         productVariants:['productAddsOn',async function (callback) {
//             if(product_variant && product_variant.length>0){
//                 try{
//                     await cartVariants(request.dbName,api_version,product_variant,cartId)
//                     callback(null)
//                 }
//                 catch(Err){
//                     logger.debug("===ADDS=ON=ERROR",Err);
//                     callback(Err)
//                 }
//             }
//             else{
//                 callback(null)
//             }
//         }]
//     },function(err,result){

//         if(err){
//             logger.debug("=============error in the add to cart===========")
//             var msg = err;
//             return sendResponse.sendErrorMessage(msg,reply,500);
//         }else{
//             console.log("finish",{cartId:cartId,freeProduct:freeProduct,min_order:0})
//             return sendResponse.sendSuccessData({cartId:cartId,freeProduct:freeProduct,min_order:minOrder}, constant.responseMessage.SUCCESS, reply,200);
//         }
//     })
// }

async function checkUserArea(dbName, supplierIds, userId, latitude, longitude, supplierBranchIds) {
    //console.log('dbName,supplierIds,userId,latitude,longitude',dbName,supplierIds,userId,latitude,longitude,supplierBranchIds);

    // supplierIds = supplierIds.toString()
    // return new Promise(async(resolve,reject)=>{
    //     let query = "select s.delivery_radius, ( 6371 * acos ( cos ( radians("+latitude+") )* " +
    //         "cos( radians(s.latitude) )* cos( radians(s.longitude) - radians("+longitude+") ) " +
    //         "+ sin ( radians("+latitude+") )* sin( radians(s.latitude) ) ) ) AS distance " +
    //         "from supplier s where s.id IN ("+supplierIds+") having distance>=s.delivery_radius"


    //     let params = []

    //     let data = await ExecuteQ.Query(dbName,query,params)
    //     resolve(data)
    // })

    supplierBranchIds = supplierBranchIds.toString()
    return new Promise(async (resolve, reject) => {
        let mUnit = await Universal.getMeausringUnit(dbName);
        let query = "select s.delivery_radius, ( " + mUnit + " * acos ( cos ( radians(" + latitude + ") )* " +
            "cos( radians(s.latitude) )* cos( radians(s.longitude) - radians(" + longitude + ") ) " +
            "+ sin ( radians(" + latitude + ") )* sin( radians(s.latitude) ) ) ) AS distance " +
            "from supplier_branch s where s.id IN (" + supplierBranchIds + ") having distance>=s.delivery_radius"


        let params = []

        let data = await ExecuteQ.Query(dbName, query, params)
        resolve(data)
    })
}
const cartVariants = (dbName, api_version, product_variants, cartId) => {

    logger.debug("====api_version=", api_version);

    return new Promise(async (resolve, reject) => {
        // { unid: 13 product_name: "Lacoste Sport Light Men's Lightweight Running Shoes" product_desc:
        //     "Lacoste Sport Light Men's Lightweight Running Shoes" measuring_unit: "a" variant_value: "5"
        //     variant_id: 1 variant_name: "Size" bar_code: "undefined" product_id: 36 }
        var types, final_arry = [];
        for (const i of product_variants) {
            final_arry.push(
                cartId,
                i.variant_type,
                i.variant_id,
                i.unid,
                i.variant_value,
                i.variant_name,
                i.product_id
            )
        }
        var final_data = _.chunk(final_arry, 7);
        var adds_on_data = await ExecuteQ.Query(dbName, "INSERT INTO cart_variant" +
            " (`cart_id`,`variant_type`,`variant_id`,`variant_val_id`,`variant_value`,`variant_name`,`product_id`) VALUES ? ",
            [final_data]
        )
        logger.debug("======>>adds_on_data==ARRAY==>>", final_data, adds_on_data);
        resolve()
    })

}

const cartAddsOn = (dbName, api_version, product_adds_on, cartId) => {

    logger.debug("====api_version=", api_version);

    return new Promise(async (resolve, reject) => {
        if (api_version >= 1) {
            // let is_decimal_quantity_allowed_val=await Universal.is_decimal_quantity_allowed(dbName)
            // var is_decimal_quantity_allowed = "0";
            // if(is_decimal_quantity_allowed_val[0] && is_decimal_quantity_allowed_val[0].value){
            //     is_decimal_quantity_allowed = is_decimal_quantity_allowed_val[0].value
            // }
            var types, final_arry = [];
            for (const i of product_adds_on) {

                let add_on_id_ios = ""

                if (i.add_on_id_ios != undefined) {
                    add_on_id_ios = i.add_on_id_ios
                } else {
                    add_on_id_ios = ""
                }
                var i_quantity = parseInt(i.quantity)
                var i_adds_on_type_quantity = parseInt(i.adds_on_type_quantity)
                // if(is_decimal_quantity_allowed == "1"){
                //     i_quantity = parseFloat(i.quantity)
                //     i_adds_on_type_quantity = parseInt(i.adds_on_type_quantity)
                // }

                final_arry.push(
                    parseInt(i.serial_number),
                    parseInt(cartId),
                    parseInt(i.id),
                    parseInt(i.type_id),
                    i.name,
                    i.type_name,
                    parseFloat(i.price) * i_adds_on_type_quantity,
                    i.quantity,
                    add_on_id_ios,
                    i_adds_on_type_quantity || 0,
                )
            }
            var final_data = _.chunk(final_arry, 10);
            var adds_on_data = await ExecuteQ.Query(dbName, "INSERT INTO cart_adds_on" +
                " (`serial_number`,`cart_id`,`adds_on_id`,`adds_on_type_jd`," +
                "`adds_on_name`,`adds_on_type_name`,`price`,`quantity`,`add_on_id_ios`,`adds_on_type_quantity`) VALUES ? ",
                [final_data]
            )
            logger.debug("======>>adds_on_data==ARRAY==>>", final_data, adds_on_data);
            resolve()
        }
        else {
            var types, final_arry = [];
            for (const i of product_adds_on) {
                final_arry.push(
                    parseInt(cartId),
                    parseInt(i.id),
                    parseInt(i.type_id),
                    i.name,
                    i.type_name,
                    parseFloat(i.price),
                    parseInt(i.quantity),

                )
            }
            var final_data = _.chunk(final_arry, 7);
            var adds_on_data = await ExecuteQ.Query(dbName, "INSERT INTO cart_adds_on" +
                " (`cart_id`,`adds_on_id`,`adds_on_type_jd`,`adds_on_name`,`adds_on_type_name`,`price`,`quantity`) VALUES ? ",
                [final_data]
            )
            logger.debug("======>>adds_on_data==ARRAY==>>", final_data, adds_on_data);
            resolve()

        }
    })

}


exports.addToFavourite = function (request, reply) {
    var accessToken = null;
    var supplierId = null;
    var categoryId = null;
    var id;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.supplierId)) {
                var msg = "supplier Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            supplierId = request.body.supplierId;
            callback(null);
        },
        checkAccessToken: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    id = result.id;
                    callback(null);
                }
            })
        }],
        setFavourite: ['checkAccessToken', function (callback) {
            setFavourite(request.dbName, reply, id, supplierId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.updateCartInfo = function (request, reply) {

    var accessToken;
    var cartId;
    var deliveryId;
    var deliveryType;
    var deliveryDate = null;
    var deliveryTime = 0;
    var pickupDate = null;
    // console.log(request.body.accessToken);
    var pickupId = 0;
    var pickupTime = 0;
    var handlingAdmin;
    var liquor_bottle_deposit_tax;
    var liquor_plt_deposit_tax;
    var handlingSupplier;
    var deliveryCharges;
    var currencyId;
    var min_order_delivery;
    var netAmount = 0;
    var urgentPrice = 0;

    var preparation_time = request.body.preparation_time != undefined ? request.body.preparation_time : "00:00:00";
    //  var remarks;
    var id;
    var day;
    var dayName;
    var time;
    var languageId;
    let supplierIds = [];
    let supplierBranchIds = [];
    console.log("saasd", request.body)
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.cartId)) {
                var msg = "cart id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.deliveryId)) {
                var msg = "delivery id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (request.body.deliveryType < 0) {
                var msg = "delivery type not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.deliveryDate == '0000-00-00') {
                var msg = "delivery Date required";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            deliveryDate = request.body.deliveryDate;
            if ((request.body.deliveryType == 2 && request.body.deliveryDate && request.body.deliveryTime) || (request.body.deliveryType == 1 && request.body.deliveryDate && request.body.deliveryTime)) {
                deliveryDate = request.body.deliveryDate;
                deliveryTime = request.body.deliveryTime;
            }
            else if (request.body.deliveryType == 0) {
                deliveryTime = request.body.deliveryTime;
            } else {
                var msg = "can not enter deliveryDate date"
                return sendResponse.sendErrorMessage(msg, reply, 400);

            }
            if (request.body.pickupId && request.body.pickupTime && request.body.pickupDate) {
                pickupId = request.body.pickupId;
                pickupDate = request.body.pickupDate;
                pickupTime = request.body.pickupTime
            } else {
                pickupId = 0;
                pickupDate = 0;
                pickupTime = 0;
            }
            accessToken = request.body.accessToken;
            cartId = request.body.cartId;
            deliveryId = request.body.deliveryId;
            deliveryType = request.body.deliveryType;

            // if(!(request.body.handlingAdmin)){
            //     var msg = "handling Admin not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            // if(!(request.body.handlingSupplier)){
            //     var msg = "handling Supplier not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            if (request.body.deliveryCharges < 0) {
                var msg = "delivery Charges not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.currencyId)) {
                var msg = "currencyId not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.netAmount)) {
                var msg = "netAmount not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.urgentPrice) {
                urgentPrice = request.body.urgentPrice;
            }
            if (request.body.day) {
                day = request.body.day;
            }
            handlingAdmin = request.body.handlingAdmin || 0;
            handlingSupplier = request.body.handlingSupplier || 0;
            deliveryCharges = request.body.deliveryCharges || 0;
            currencyId = request.body.currencyId;
            min_order_delivery = request.body.minOrderDeliveryCrossed;
            netAmount = request.body.netAmount;
            liquor_bottle_deposit_tax = request.body.liquor_bottle_deposit_tax || 0;
            liquor_plt_deposit_tax = request.body.liquor_plt_deposit_tax || 0;

            //remarks = request.body.remarks;
            languageId = request.body.languageId;

            callback(null);

        },
        checkAccessToken: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    id = result.id;
                    callback(null);
                }
            })
        }],
        checkSupplierArea: ['checkAccessToken', async function (callback) {
            try {
                if (parseInt(deliveryId)) {

                    let cartDetails = await getDetails(request.dbName, cartId, deliveryId)
                    // let check_selfPickUp = cartDetails.every((details) => {
                    //     return details.self_pickup > 0
                    // })

                    _.each(cartDetails, function (i) {
                        supplierIds.push(i.supplier_id);
                        supplierBranchIds.push(i.supplier_branch_id);
                    })

                    const unique = (value, index, self) => {
                        return self.indexOf(value) === index
                    }

                    supplierIds = supplierIds.filter(unique)
                    logger.debug("=======supplierIds in update cart======", supplierIds)

                    let user_latitude = cartDetails[0].latitude
                    let user_longitude = cartDetails[0].longitude

                    let data = await checkUserArea(request.dbName, supplierIds, id,
                        user_latitude, user_longitude, supplierBranchIds)

                    logger.debug("==========data and supplierIds length====++", data.length, supplierIds.length)
                    if (data && data.length) {
                        // if(data.length==supplierIds.length){
                        //     callback(null)
                        // }else{
                        let service_type = parseInt(request.service_type) > 10 ? cartDetails[0].type : request.service_type;
                        logger.debug("===service_type==", service_type)
                        var msg = await Universal.getErrMsgText(
                            constant.errorCategory.SUPPLIER_ERROR,
                            constant.Supplier.DOES_NOT_DELIVER_IN_AREA_ERROR,
                            request.dbName,
                            service_type,
                            14
                        )
                        return sendResponse.sendErrorMessage(msg, reply, 400)
                        // }
                    } else {
                        // var msg = "Supplier does not comes under your area"
                        // return sendResponse.sendErrorMessage(msg,reply,400)
                        callback(null);
                    }

                } else {
                    logger.debug("=========in the else======")
                    callback(null);
                }

            } catch (err) {
                logger.debug("=============err in checkSupplierArea======", err);
                callback(err)
            }

        }],
        checkSupplier: ['checkSupplierArea', function (callback) {
            if (deliveryType == 2) {
                if (languageId == 14 && day == 0) {
                    dayName = "Monday";
                }
                if (languageId == 14 && day == 1) {
                    dayName = "Tuesday";
                }
                if (languageId == 14 && day == 2) {
                    dayName = "Wednesday";
                }
                if (languageId == 14 && day == 3) {
                    dayName = "Thursday";
                }
                if (languageId == 14 && day == 4) {
                    dayName = "Friday";
                }
                if (languageId == 14 && day == 5) {
                    dayName = "Saturday";
                }
                if (languageId == 14 && day == 6) {
                    dayName = "Sunday";
                } if (languageId == 15 && day == 0) {
                    dayName = "الإثنين";
                }
                if (languageId == 15 && day == 1) {
                    dayName = "الثلاثاء";
                }
                if (languageId == 15 && day == 2) {
                    dayName = "الأربعاء";
                }
                if (languageId == 15 && day == 3) {
                    dayName = "الخميس";
                }
                if (languageId == 15 && day == 4) {
                    dayName = "الجمعة";
                }
                if (languageId == 15 && day == 5) {
                    dayName = " السبت";
                }
                if (languageId == 15 && day == 6) {
                    dayName = "الأحد";
                }
                var sql = 'select st.is_open,st.start_time,st.end_time from supplier_timings st join supplier_branch sb on ' +
                    ' sb.supplier_id = st.supplier_id join cart c on c.supplier_branch_id=sb.id where c.id=? and week_id = ?';
                multiConnection[dbName].query(sql, [cartId, day], function (err, result) {
                    console.log(".........................", result)
                    if (err) {
                        console.log("err", err);
                        callback(err);
                    }
                    else {
                        if (result.length) {
                            var datetime1 = new Date(deliveryDate + ' ' + result[0].start_time);
                            var datetime2 = new Date(deliveryDate + ' ' + result[0].end_time);
                            datetime1 = moment(datetime1).format('h:mm A');
                            datetime2 = moment(datetime2).format('h:mm A');
                            var check1 = moment(deliveryTime, 'h:mma');
                            var check2 = moment(datetime1, 'h:mma');
                            var check3 = moment(datetime2, 'h:mma');

                            console.log("...........start...........", check1)
                            console.log("................", check2.isBefore(check1));
                            console.log("................", check1.isBefore(check3));

                            if (result[0].is_open == 1) {
                                if ((check2.isBefore(check1)) && (check1.isBefore(check3))) {
                                    callback(null)
                                }
                                else {
                                    if (languageId == 14) {
                                        var msg = "please select time within " + datetime1 + " - " + datetime2;
                                    }
                                    else {
                                        var msg = 'الرجاء اختيار الوقت مابين' + datetime1 + " - " + datetime2;

                                    }
                                    sendResponse.sendErrorMessage(msg, reply, 501);
                                }
                            }
                            else {
                                if (languageId == 14) {
                                    var msg = "supplier is not working on " + dayName;
                                }
                                else {
                                    var msg = 'مزود الخدمه لايعمل في يوم ' + dayName

                                }
                                sendResponse.sendErrorMessage(msg, reply, 501);
                            }
                        }
                        else {
                            callback(null);
                        }


                    }
                })
            }
            else {
                callback(null);
            }
        }],
        updateCart: ['checkSupplier', async function (callback) {

            var sql = "update cart set user_pickup_address = ?, user_delivery_address = ? , " +
                " delivery_date = ?,delivery_type = ? , pickup_time=? ,delivery_time = ? ,pickup_date = ? , handling_admin = ? , handling_supplier = ? ," +
                " delivery_charges = ? , currency_id = ? , min_order_delivery_crossed = ? , net_amount = ? , urgent_price = ? ," +
                " preparation_time=?, liquor_plt_deposit_tax=?, liquor_bottle_deposit_tax=? where id = ? ";

            var stmt = multiConnection[request.dbName].query(sql, [pickupId, deliveryId,
                moment(deliveryDate).format('YYYY-MM-DD'), deliveryType,
                pickupTime, deliveryTime, moment(pickupDate).format('YYYY-MM-DD'),
                handlingAdmin, handlingSupplier, deliveryCharges, currencyId,
                min_order_delivery, netAmount,
                urgentPrice, preparation_time, liquor_plt_deposit_tax, liquor_bottle_deposit_tax, cartId], async function (err, result) {
                    if (err) {
                        logger.debug("=================error in checksupplier========================", stmt.sql, err)
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        if (request.dbName = 'northwesteats_0692') {
                            let orderDetail = await ExecuteQ.Query(request.dbName, "select id from orders where cart_id = ?", [cartId]);
                            if (orderDetail.length) {
                                order_id = orderDetail[0].id;
                                await multiConnection[request.dbName].query("update order_prices set price = ? where order_id = ? ", [netAmount, order_id])
                            }
                        }

                        callback(null);
                    }
                })

        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {

            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.updateCartInfoBySupplier = function (request, reply) {

    var accessToken;
    var cartId;
    var deliveryId;
    var deliveryType;
    var deliveryDate = null;
    var deliveryTime = 0;
    var pickupDate = null;
    // console.log(request.body.accessToken);
    var pickupId = 0;
    var pickupTime = 0;
    var handlingAdmin;
    var liquor_bottle_deposit_tax;
    var liquor_plt_deposit_tax;
    var handlingSupplier;
    var deliveryCharges;
    var currencyId;
    var min_order_delivery;
    var netAmount = 0;
    var urgentPrice = 0;

    var preparation_time = request.body.preparation_time != undefined ? request.body.preparation_time : "00:00:00";
    //  var remarks;
    var id = request.body.id;
    var day;
    var dayName;
    var time;
    var languageId;
    let supplierIds = [];
    let supplierBranchIds = [];
    console.log("saasd", request.body)
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.cartId)) {
                var msg = "cart id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.deliveryId)) {
                var msg = "delivery id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (request.body.deliveryType < 0) {
                var msg = "delivery type not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.deliveryDate == '0000-00-00') {
                var msg = "delivery Date required";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            deliveryDate = request.body.deliveryDate;
            if ((request.body.deliveryType == 2 && request.body.deliveryDate && request.body.deliveryTime) || (request.body.deliveryType == 1 && request.body.deliveryDate && request.body.deliveryTime)) {
                deliveryDate = request.body.deliveryDate;
                deliveryTime = request.body.deliveryTime;
            }
            else if (request.body.deliveryType == 0) {
                deliveryTime = request.body.deliveryTime;
            } else {
                var msg = "can not enter deliveryDate date"
                return sendResponse.sendErrorMessage(msg, reply, 400);

            }
            if (request.body.pickupId && request.body.pickupTime && request.body.pickupDate) {
                pickupId = request.body.pickupId;
                pickupDate = request.body.pickupDate;
                pickupTime = request.body.pickupTime
            } else {
                pickupId = 0;
                pickupDate = 0;
                pickupTime = 0;
            }
            accessToken = request.body.accessToken;
            cartId = request.body.cartId;
            deliveryId = request.body.deliveryId;
            deliveryType = request.body.deliveryType;

            // if(!(request.body.handlingAdmin)){
            //     var msg = "handling Admin not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            // if(!(request.body.handlingSupplier)){
            //     var msg = "handling Supplier not found"
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            if (request.body.deliveryCharges < 0) {
                var msg = "delivery Charges not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.currencyId)) {
                var msg = "currencyId not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.netAmount)) {
                var msg = "netAmount not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.urgentPrice) {
                urgentPrice = request.body.urgentPrice;
            }
            if (request.body.day) {
                day = request.body.day;
            }
            handlingAdmin = request.body.handlingAdmin || 0;
            handlingSupplier = request.body.handlingSupplier || 0;
            deliveryCharges = request.body.deliveryCharges || 0;
            currencyId = request.body.currencyId;
            min_order_delivery = request.body.minOrderDeliveryCrossed;
            netAmount = request.body.netAmount;
            liquor_bottle_deposit_tax = request.body.liquor_bottle_deposit_tax || 0;
            liquor_plt_deposit_tax = request.body.liquor_plt_deposit_tax || 0;

            //remarks = request.body.remarks;
            languageId = request.body.languageId;

            callback(null);

        },
        // checkAccessToken:['getValue',function(callback){
        //     checkUserAccessToken(request.dbName,reply,accessToken,function(err,result){
        //         if(err){
        //             callback(err);
        //         }else{
        //             id = result.id;
        //             callback(null);
        //         }
        //     })
        // }],
        checkSupplierArea: ['getValue', async function (callback) {
            try {
                if (parseInt(deliveryId)) {


                    let cartDetails = await getDetails(request.dbName, cartId, deliveryId)
                    // let check_selfPickUp = cartDetails.every((details) => {
                    //     return details.self_pickup > 0
                    // })
                    let _maxDeliveryTime = cartDetails && cartDetails.length > 0 ? cartDetails[0].delivery_max_time : 0;
                    deliveryTime = Universal.addMinutesInString(deliveryTime, parseInt(_maxDeliveryTime))
                    _.each(cartDetails, function (i) {
                        supplierIds.push(i.supplier_id);
                        supplierBranchIds.push(i.supplier_branch_id);
                    })

                    const unique = (value, index, self) => {
                        return self.indexOf(value) === index
                    }

                    supplierIds = supplierIds.filter(unique)
                    logger.debug("=======supplierIds in update cart======", supplierIds)

                    let user_latitude = cartDetails[0].latitude
                    let user_longitude = cartDetails[0].longitude

                    let data = await checkUserArea(request.dbName, supplierIds, id,
                        user_latitude, user_longitude, supplierBranchIds)

                    logger.debug("==========data and supplierIds length====++", data.length, supplierIds.length)
                    if (data && data.length) {
                        // if(data.length==supplierIds.length){
                        //     callback(null)
                        // }else{
                        let service_type = parseInt(request.service_type) > 10 ? cartDetails[0].type : request.service_type;
                        logger.debug("===service_type==", service_type)
                        var msg = await Universal.getErrMsgText(
                            constant.errorCategory.SUPPLIER_ERROR,
                            constant.Supplier.DOES_NOT_DELIVER_IN_AREA_ERROR,
                            request.dbName,
                            service_type,
                            14
                        )
                        return sendResponse.sendErrorMessage(msg, reply, 400)
                        // }
                    } else {
                        // var msg = "Supplier does not comes under your area"
                        // return sendResponse.sendErrorMessage(msg,reply,400)
                        callback(null);
                    }

                } else {
                    logger.debug("=========in the else======")
                    callback(null);
                }

            } catch (err) {
                logger.debug("=============err in checkSupplierArea======", err);
                callback(err)
            }

        }],
        checkSupplier: ['checkSupplierArea', function (callback) {
            if (deliveryType == 2) {
                if (languageId == 14 && day == 0) {
                    dayName = "Monday";
                }
                if (languageId == 14 && day == 1) {
                    dayName = "Tuesday";
                }
                if (languageId == 14 && day == 2) {
                    dayName = "Wednesday";
                }
                if (languageId == 14 && day == 3) {
                    dayName = "Thursday";
                }
                if (languageId == 14 && day == 4) {
                    dayName = "Friday";
                }
                if (languageId == 14 && day == 5) {
                    dayName = "Saturday";
                }
                if (languageId == 14 && day == 6) {
                    dayName = "Sunday";
                } if (languageId == 15 && day == 0) {
                    dayName = "الإثنين";
                }
                if (languageId == 15 && day == 1) {
                    dayName = "الثلاثاء";
                }
                if (languageId == 15 && day == 2) {
                    dayName = "الأربعاء";
                }
                if (languageId == 15 && day == 3) {
                    dayName = "الخميس";
                }
                if (languageId == 15 && day == 4) {
                    dayName = "الجمعة";
                }
                if (languageId == 15 && day == 5) {
                    dayName = " السبت";
                }
                if (languageId == 15 && day == 6) {
                    dayName = "الأحد";
                }
                var sql = 'select st.is_open,st.start_time,st.end_time from supplier_timings st join supplier_branch sb on ' +
                    ' sb.supplier_id = st.supplier_id join cart c on c.supplier_branch_id=sb.id where c.id=? and week_id = ?';
                multiConnection[dbName].query(sql, [cartId, day], function (err, result) {
                    console.log(".........................", result)
                    if (err) {
                        console.log("err", err);
                        callback(err);
                    }
                    else {
                        if (result.length) {
                            var datetime1 = new Date(deliveryDate + ' ' + result[0].start_time);
                            var datetime2 = new Date(deliveryDate + ' ' + result[0].end_time);
                            datetime1 = moment(datetime1).format('h:mm A');
                            datetime2 = moment(datetime2).format('h:mm A');
                            var check1 = moment(deliveryTime, 'h:mma');
                            var check2 = moment(datetime1, 'h:mma');
                            var check3 = moment(datetime2, 'h:mma');

                            console.log("...........start...........", check1)
                            console.log("................", check2.isBefore(check1));
                            console.log("................", check1.isBefore(check3));

                            if (result[0].is_open == 1) {
                                if ((check2.isBefore(check1)) && (check1.isBefore(check3))) {
                                    callback(null)
                                }
                                else {
                                    if (languageId == 14) {
                                        var msg = "please select time within " + datetime1 + " - " + datetime2;
                                    }
                                    else {
                                        var msg = 'الرجاء اختيار الوقت مابين' + datetime1 + " - " + datetime2;

                                    }
                                    sendResponse.sendErrorMessage(msg, reply, 501);
                                }
                            }
                            else {
                                if (languageId == 14) {
                                    var msg = "supplier is not working on " + dayName;
                                }
                                else {
                                    var msg = 'مزود الخدمه لايعمل في يوم ' + dayName

                                }
                                sendResponse.sendErrorMessage(msg, reply, 501);
                            }
                        }
                        else {
                            callback(null);
                        }


                    }
                })
            }
            else {
                callback(null);
            }
        }],
        updateCart: ['checkSupplier', function (callback) {

            var sql = "update cart set user_pickup_address = ?, user_delivery_address = ? , " +
                " delivery_date = ?,delivery_type = ? , pickup_time=? ,delivery_time = ? ,pickup_date = ? , handling_admin = ? , handling_supplier = ? ," +
                " delivery_charges = ? , currency_id = ? , min_order_delivery_crossed = ? , net_amount = ? , urgent_price = ? ," +
                " preparation_time=?, liquor_plt_deposit_tax=?, liquor_bottle_deposit_tax=? where id = ? ";

            var stmt = multiConnection[request.dbName].query(sql, [pickupId, deliveryId,
                moment(deliveryDate).format('YYYY-MM-DD'), deliveryType,
                pickupTime, deliveryTime, moment(pickupDate).format('YYYY-MM-DD'),
                handlingAdmin, handlingSupplier, deliveryCharges, currencyId,
                min_order_delivery, netAmount,
                urgentPrice, preparation_time, liquor_plt_deposit_tax, liquor_bottle_deposit_tax, cartId], function (err, result) {
                    if (err) {
                        logger.debug("=================error in checksupplier========================", stmt.sql, err)
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        callback(null);
                    }
                })

        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {

            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}



async function getDetails(dbName, cart_id, delivery_id) {
    return new Promise(async (resolve, reject) => {
        let sql = "select s.delivery_max_time,s.self_pickup,ct.type,c.id,c.user_id,c.supplier_branch_id,cp.id as cId, cp.supplier_id, " +
            "ua.latitude,ua.longitude from cart c join cart_products cp on c.id = cp.cart_id left join supplier_branch_product sbp on sbp.product_id=cp.product_id left join categories ct on ct.id=sbp.category_id " +
            "join user u on u.id = c.user_id join user_address ua on u.id = ua.user_id join " +
            "supplier s on cp.supplier_id = s.id where c.id = ? and ua.id = ? group by cp.id "
        let params = [cart_id, delivery_id]
        try {

            let data = await ExecuteQ.Query(dbName, sql, params)
            if (data && data.length) {
                resolve(data)
            } else {
                resolve([])
            }
            resolve(data)
        } catch (err) {
            logger.debug("===============err-=-=-========", err)
            reject(err)
        }
    })
}



function groupBy(array, name) {

    var groups = _.groupBy(_.sortBy(array, "supplier_branch_id"), name)
    return _.keys(groups).map(function (group) {

        return groups[group];

    })
}
/**
 * @description used for geting an agent db info
 * @param {*String} dbName 
 */
function getAgentDbInformation(dbName) {
    logger.debug("===dbName=========4", dbName);
    return new Promise(async (resolve, reject) => {
        try {
            var sql = "select name,user,password,host from agent_db"
            let data = await ExecuteQ.Query(dbName, sql, []);
            resolve(data[0])
        }
        catch (Err) {
            reject(Err)
        }
        //  var sql ="select name,user,password,host from agent_db"
        //  multiConnection[dbName].query(sql,[],function(err,data){
        //         if(err){
        //             reject(err)
        //         }
        //         else{
        //             logger.debug("====DATA===",data);
        //             if(data && data.length>0){
        //                 resolve(data[0])
        //             }
        //             else{
        //                 reject()
        //             }
        //         }
        // })
    })
}
function RunTimeAgentConnection(data) {
    var decipher = crypto.createDecipher(algorithm, crypto_password)
    var password = decipher.update(data.password, 'hex', 'utf8')
    password += decipher.final('utf8');
    // logger.debug("=====password===",password);
    return new Promise((resolve, reject) => {
        resolve(
            runTimeDbConnection.runTimeDbConnections(
                data.name,
                data.host,
                data.user,
                password
            )
        )
    })
}

function bookedSlots(a_connection, date, user_id) {
    var slots_array = [];
    return new Promise((resolve, reject) => {
        var slots = "select `cbl_user_booked_slots`.`booked_slots`,`cbl_user_booked_slots`.`id`,`cbl_user_orders`.`status` from `cbl_user_booked_slots` join `cbl_user_orders` on `cbl_user_orders`.`id`=`cbl_user_booked_slots`.`order_id` where `cbl_user_booked_slots`.`booked_date`=? and `cbl_user_booked_slots`.`user_id`=? and `cbl_user_orders`.`status` NOT IN(?)"
        a_connection.query(slots, [date, user_id, [8, 2]], function (err, data) {
            if (err) {
                reject(err)
            }
            else {
                _.each(data, function (i) {
                    slots_array.push(i.booked_slots);
                    if (i.buffer_time != 0) {

                        slots_array.push(Universal.addMinutesInString(i.booked_slots, i.buffer_time));
                    }
                })
                resolve(slots_array)
            }
        })
    })
}
function bufferTime(a_connection) {
    return new Promise((resolve, reject) => {
        var time_query = "select value from cbl_user_buffer_time where status=?"
        a_connection.query(time_query, [1], function (err, data) {
            if (err) {
                resolve(0)
            }
            else {
                if (data && data.length > 0) {
                    resolve(data[0].value)
                }
                else {
                    resolve(0)
                }
            }
        })
    })
}

var isJsonParsable = string => {
    try {
        JSON.parse(string);
    } catch (e) {
        return false;
    }
    return true;
}

function isObject(val) {
    return val instanceof Object;
}


function includesMatch(lookupValue, testString) {
    var re = new RegExp(lookupValue, 'i'); //Here the 'i' means that we are doing a case insensitive match
    return testString.match(re) !== null
}

exports.changeCdnUrl = async function (req, res) {
    try {
        let dbName = req.dbName
        var sql = "SELECT * FROM `tbl_setting` where value like'%cdn%'";
        var sql2 = "update tbl_setting set value = ? where value = ?";

        let data = await ExecuteQ.Query(req.dbName, sql, []);
        console.log("-------------")
        console.log(JSON.stringify(data));
        console.log("-------------")

        for (let i = 0; i < data.length; i++) {
            // console.log(data[i].value)
            var d = data[i].value
            if (isJsonParsable(data[i].value)) {
                d = JSON.parse(data[i].value)
            }

            if (isObject(d)) {
                if (d.hasOwnProperty('web') && d.hasOwnProperty('app')) {
                    console.log(d.web, "1111111111111111")

                    var pathArray = d.web.split('/');
                    var pathArray2 = d.app.split('/');
                    var third = pathArray[3];
                    var third2 = pathArray2[3];
                    var newurl = 'https://royo.imgix.net';
                    var url = newurl + '/' + third;
                    var url2 = newurl + '/' + third2;
                    var lookup = "undefined";

                    if (!(includesMatch(lookup, url))) {


                        const copy = Object.assign({}, d);

                        copy.web = url
                        copy.app = url2
                        console.log(copy, "newobjjjjjjjjjjjjjj")
                        await ExecuteQ.Query(req.dbName, sql2, [JSON.stringify(copy), JSON.stringify(d)]);
                        console.log(url, d.web, "aaaaaaaaaaaaaaaaaaaaaa")
                    }
                    if (!(includesMatch(lookup, url2))) {

                        const copy = Object.assign({}, d);

                        copy.web = url
                        copy.app = url2
                        console.log(copy, "newobj222222222222222222222222222")
                        await ExecuteQ.Query(req.dbName, sql2, [JSON.stringify(copy), JSON.stringify(d)]);

                        console.log(url2, d.app, "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")
                    }

                } else if (d.hasOwnProperty('app')) {
                    console.log(d.app, "222222222222222")
                    var pathArray = d.app.split('/');
                    var third = pathArray[3];
                    var newurl = 'https://royo.imgix.net';
                    var url = newurl + '/' + third;
                    console.log(url, d.app, "---------------------2")

                    const copy = Object.assign({}, d);


                    copy.app = url
                    console.log(copy, "newobj222222222222222222222222222")
                    await ExecuteQ.Query(req.dbName, sql2, [JSON.stringify(copy), JSON.stringify(d)]);
                    console.log(url, "---------------------2")

                }

            } else {
                var pathArray = data[i].value.split('/');

                var third = pathArray[3];
                var newurl = 'https://royo.imgix.net';
                var url = newurl + '/' + third;
                console.log(data[i].value,)
                console.log(url, "hererererr")
                await ExecuteQ.Query(req.dbName, sql2, [url, data[i].value]);
            }

        }
        sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, constant.responseStatus.SUCCESS);
    } catch (err) {
        console.log(err);
        sendResponse.somethingWentWrongError(res);
    }
}

exports.genrateOrder = async function (request, reply) {
    console.log("request.body ########################################################################## ", request.body)
    let dbName = request.dbName
    let customer_payment_id = request.body.customer_payment_id == undefined ? "" : request.body.customer_payment_id;
    let card_id = request.body.card_id == undefined ? "" : request.body.card_id;
    let payment_status = 0;
    var supplier_commission;
    var id = request.users.id;
    var accessToken;
    var cartId;
    var productList;

    var languageId;
    var user = {};
    var order = {};
    var paymentType = 3;
    var promoationType;

    var deviceToken;
    var supplierId;
    var deviceType;
    var userId;
    let have_pet = request.body.have_pet == undefined ? 0 : request.body.have_pet
    let parking_instructions = request.body.parking_instructions == undefined ? "" : request.body.parking_instructions;
    let cleaner_in = request.body.cleaner_in == undefined ? 0 : request.body.cleaner_in;
    let area_to_focus = request.body.area_to_focus == undefined ? "" : request.body.area_to_focus;


    var userName;
    var message;
    var deliveryDate;
    var supplierEmail, deliveryCharges, handling, urgent_price, quantity;
    var building, houseNumber, payment_type, schedule_date, supplierPhone, branchToken, branchDeviceType, net_amount, supplierName, created_on, mobileNumber, area, landmark, address_link;
    var type = 1;
    var count = 0, flag = 0, applyCode = 0;
    var is_active = 0;
    var orderDetails = [], supplierIds = [], supplier_product_data, order_data = [], pickup_delivered_address = [];
    var offset = request.body.offset != undefined && request.body.offset != "" && request.body.offset != null ? request.body.offset : 4
    logger.debug("==========", request.body);
    var agentIds = request.body.agentIds, isAgent = 0, agentArray, agentOrderDetail = {}, agentOrderItemDetail = [];
    var agentConnection, dateTime, booking_date, slots;
    let pres_image1 = request.body.pres_image1 != undefined ? request.body.pres_image1 : "";
    let pres_image2 = request.body.pres_image2 != undefined ? request.body.pres_image2 : "";
    let pres_image3 = request.body.pres_image3 != undefined ? request.body.pres_image3 : "";
    let pres_image4 = request.body.pres_image4 != undefined ? request.body.pres_image4 : "";
    let pres_image5 = request.body.pres_image5 != undefined ? request.body.pres_image5 : "";
    let pres_description = request.body.pres_description != undefined ? request.body.pres_description : "";
    var booking_date_time = request.body.date_time != undefined && request.body.date_time != "" ? request.body.date_time : "";
    var buffer_time = 0, duration = request.body.duration != undefined && request.body.duration != "" ? request.body.duration : 60;

    var from_address = request.body.from_address != undefined && request.body.from_address != "" ? request.body.from_address : "";
    var to_address = request.body.to_address != undefined && request.body.to_address != "" ? request.body.to_address : "";
    var booking_from_date = request.body.booking_from_date != undefined && request.body.booking_from_date != "" ? moment(request.body.booking_from_date).utcOffset(offset).format("YYYY-MM-DD HH:mm:ss") : "";
    var booking_to_date = request.body.booking_to_date != undefined && request.body.booking_to_date != "" ? moment(request.body.booking_to_date).utcOffset(offset).format("YYYY-MM-DD HH:mm:ss") : "";


    var from_latitude = request.body.from_latitude != undefined && request.body.from_latitude != "" ? request.body.from_latitude : 0.000000000
    var to_latitude = request.body.to_latitude != undefined && request.body.to_latitude != "" ? request.body.to_latitude : 0.000000000
    var from_longitude = request.body.from_longitude != undefined && request.body.from_longitude != "" ? request.body.from_longitude : 0.000000000
    var to_longitude = request.body.to_longitude != undefined && request.body.to_longitude != "" ? request.body.to_longitude : 0.000000000
    var servicetype = await agent.screenInfo(request.dbName);

    var tip_agent = request.body.tip_agent != undefined && request.body.tip_agent != "" && request.body.tip_agent != null ? request.body.tip_agent : 0

    if (booking_date_time != "") {
        dateTime = new Date(booking_date_time);
        booking_date = moment(dateTime).format("YYYY-MM-DD");
        slots = moment(dateTime).format("HH:mm:ss");
    }
    var api_version = Universal.getVersioning(request.path);
    let order_day = request.body.order_day != undefined ? request.body.order_day : 0
    let type_id = request.body.type != undefined ? request.body.type : 0;
    let payment_after_confirmation = request.body.payment_after_confirmation != undefined ? request.body.payment_after_confirmation : 0;
    let order_time = request.body.order_time != undefined ? request.body.order_time : "00:00:00";

    var cat_ids = [], sup_ids = [];
    var discounted_supplier_ids = []
    var self_pickup = request.body.self_pickup != undefined && request.body.self_pickup != "" ? request.body.self_pickup : 0
    let adds_on_delivery_admin_charges = 0, delivery_admin_supplier_charge = 0, adds_on_arr = [], productIds = [];
    let unique_id = request.body.gateway_unique_id != undefined ? (request.body.gateway_unique_id).toLowerCase() : "";
    let currency = request.body.currency != undefined ? request.body.currency : "usd";
    let payment_token = request.body.payment_token;
    let card_payment_id = "", payment_source = "";
    let deliveryChargeAlgo = 0;//0 for radius wise 1 for supplier-product-max wise
    let deliveryChargeData = await Universal.getDeliveryChargeAlgo(request.dbName);
    if (deliveryChargeData && deliveryChargeData.length > 0) {
        deliveryChargeAlgo = deliveryChargeData[0].value;
    }
    var preparation_time = request.body.preparation_time != undefined ? request.body.preparation_time : "00:00:00";
    let questionToBeSave = '';
    let addOn = request.body.addOn ? request.body.addOn : null;
    const questions = request.body.questions;
    const use_refferal = request.body.use_refferal || 0;
    const payer_id = request.body.payer_id || "";
    let referralAmount = 0, orderNetAmount = 0;
    let zelle_receipt_url = request.body.payment_token !== undefined && request.body.payment_token !== null ? request.body.payment_token : ""
    let user_service_charge = request.body.user_service_charge !== undefined && request.body.user_service_charge !== "" && request.body.user_service_charge !== null ? request.body.user_service_charge : 0
    let user_gift_ids = request.body.user_gift_ids || [];
    let giftAmount = request.body.gift_amount || 0;
    let orderResonseObj = {};
    let countryCode = ""
    console.log("request.body ########################################################################## ", request.body)


    schedule_date = request.body.schedule_date !== undefined || request.body.schedule_date !== "" ? request.body.schedule_date : ""
    let schedule_end_date = request.body.schedule_end_date !== undefined || request.body.schedule_end_date !== "" ? request.body.schedule_end_date : ""
    let is_schedule = request.body.is_schedule !== undefined || request.body.is_schedule !== "" ? request.body.is_schedule : 0

    logger.debug("=============is_scheule==========", is_schedule)
    async.auto({
        getValue: async function (callback) {
            if (!(request.body.cartId)) {
                var msg = "cart id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.promoCode)) {
                request.body.promoCode = 0;
            } else {
                applyCode = 1;
            }
            if (!(request.body.promoId)) {
                request.body.promoId = 0
            }

            if (!(request.body.discountAmount)) {
                request.body.discountAmount = 0;
            }

            if (request.body.paymentType == 0 || request.body.paymentType == 1 || request.body.paymentType == 2 || request.body.paymentType == 3) {
                paymentType = request.body.paymentType;
            }
            else {
                var msg = "Enter Payment Type"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            accessToken = request.body.accessToken;
            cartId = request.body.cartId;
            languageId = request.body.languageId;
            user.languageId = request.body.languageId;
            type = request.body.isPackage;

            callback(null);

        },
        checkDeliveryArea: ["getValue", async function (callback) {

            let cartQuery = `select *, sb.latitude as supplier_latitude,sb.longitude as supplier_longitude,ua.latitude as user_latitude,ua.longitude as user_longitude
            from cart c 
            join supplier_branch sb on c.supplier_branch_id=sb.id 
            join user_address ua on c.user_id=ua.user_id 
            where c.id=${cartId}`;
            let cardData = await ExecuteQ.Query(request.dbName, cartQuery, []);
            console.log('cardData', cardData);
            if (cardData.length) {
                from_latitude = cardData[0].supplier_latitude || 0.0;
                from_longitude = cardData[0].supplier_longitude || 0.0;
                to_latitude = cardData[0].user_latitude || 0.0
                to_longitude = cardData[0].user_longitude || 0.0;
                callback(null);
            } else {
                callback(null)
            }
            // try{
            //     let supplierIds = [];
            //     let cartDetails = await getCartDetails(request.dbName,cartId)
            //     logger.debug("=========cartDetails===========",cartDetails)
            //     _.each(cartDetails,function(i){
            //         supplierIds.push(i.supplier_id);
            //     })

            //     const unique = (value, index, self) => {
            //         return self.indexOf(value) === index
            //       }

            //     supplierIds = supplierIds.filter(unique)
            //     logger.debug("=======supplierIds in genrate order=======",supplierIds)

            //     let user_latitude = cartDetails[0].latitude
            //     let user_longitude = cartDetails[0].longitude

            //     let data = await checkUserArea(request.dbName,supplierIds,id,user_latitude,user_longitude)

            //     logger.debug("==========data and supplierIds length====++",data.length,supplierIds.length)
            //     if(data && data.length){
            //         // if(data.length==supplierIds.length){
            //         //     callback(null)
            //         // }else{
            //             var msg = "Supplier does not comes under your area"
            //             return sendResponse.sendErrorMessage(msg,reply,400)
            //         // }
            //     }else{
            //         // var msg = "Supplier does not comes under your area"
            //         // return sendResponse.sendErrorMessage(msg,reply,400)
            //         callback(null);
            //     }

            // }catch(err){
            //     logger.debug("=============err in checkDeliveryArea======",err);
            //     callback(err)
            // }
            // if(use_refferal==1){
            //        let referralAmount= await  Universal.getUserLeftReferralAmount(request.dbName,request.users.id);
            //         logger.debug("=========referralAmount====>>",referralAmount)
            //        if(referralAmount>0){
            //
            //            let usedRefQuery="insert into referral_used(used_by,used_price) value (?,?)"
            //            await ExecuteQ.Query(request.dbName,usedRefQuery,[request.users.id,referralAmount]);
            //            callback(null)
            //        }countryCode
            // else{
            // callback(null)
            // }
            // callback(null)
        }],
        agentValidation: ["checkDeliveryArea", async function (callback) {
            logger.debug("=======AGENT==IDS==", agentIds)
            if (agentIds && agentIds.length > 0) {
                var GetAgentDbData = await getAgentDbInformation(request.dbName);
                agentConnection = await RunTimeAgentConnection(GetAgentDbData);
                var sqlQuery = "select id from cbl_user where id IN(?) and deleted_by=?";
                var st = agentConnection.query(sqlQuery, [agentIds, 0], async function (err, agentData) {
                    // logger.debug("===ST==SQL",st.sql);
                    if (err) {
                        callback(err)
                    }

                    else {
                        if (agentData && agentData.length > 0) {
                            agentArray = agentData;
                            isAgent = 1;
                            try {
                                var booked_slots = await bookedSlots(agentConnection, booking_date, agentData[0].id);
                                buffer_time = await bufferTime(agentConnection);
                                var is_slots_booked = booked_slots.filter(function (val) {
                                    return slots.indexOf(val) != -1;
                                });
                                logger.debug("=========is_slots_booked====", is_slots_booked);
                                if (is_slots_booked && is_slots_booked.length > 0) {
                                    var msg = "Sorry! Agent Are Not Avail On This Slots"
                                    return sendResponse.sendErrorMessage(msg, reply, 400);
                                }
                                else {
                                    callback(null);
                                }
                            } catch (Err) {
                                logger.debug(Err)
                                return sendResponse.somethingWentWrongError(reply);
                            }

                        }

                        else {
                            var msg = "Invalid Agent"
                            logger.debug("=======discounted_product_ids========", discounted_product_ids);
                            return sendResponse.sendErrorMessage(msg, reply, 400);
                        }
                    }
                })
            }
            else {
                var servicetype = await agent.screenInfo(request.dbName);
                if (servicetype.type == 1 || servicetype.type == 2) {
                    isAgent = 1
                    callback(null)
                }
                else {
                    callback(null)
                }
            }
        }
        ],
        getCartValue: ['agentValidation', function (callback) {

            getCartProductList(request.dbName, reply, id, cartId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    promoationType = result[0].promoationType;
                    delivery_admin_supplier_charge = result && result.length > 0 ? parseFloat(result[0].handling_admin) + parseFloat(result[0].handling_supplier) + parseFloat(result[0].delivery_charges) : 0
                    productList = result;
                    supplier_product_data = groupBy(productList, "supplier_id");

                    if (request.service_type == 1 || request.service_type == 2) {
                        if (result[0].user_delivery_address == 0 && self_pickup == 0) {
                            let msg = "Please add address to continue"
                            return sendResponse.sendErrorMessage(msg, reply, 400);
                        }
                    }

                    _.each(productList, function (i) {
                        productIds.push(i.product_id)
                        supplierIds.push(i.supplier_branch_id);
                        cat_ids.push(i.category_id);
                        sup_ids.push(i.supplier_id);

                    })
                    callback(null);
                }
            })
        }],
        referralDeduction: ['getCartValue', async function (callback) {
            orderNetAmount = productList[0].net_amount;
            if (use_refferal == 1) {
                referralAmount = await Universal.getUserLeftReferralAmount(request.dbName, request.users.id);

                if (referralAmount > 0) {
                    if (parseFloat(referralAmount) >= parseFloat(orderNetAmount)) {
                        referralAmount = orderNetAmount;
                    }
                    let usedRefQuery = "insert into referral_used(used_by,used_price) value (?,?)"
                    await ExecuteQ.Query(request.dbName, usedRefQuery, [request.users.id, referralAmount]);
                    logger.debug("=====orderNetAmount====referralAmount====1>>", orderNetAmount, referralAmount);
                    callback(null)
                }
                else {
                    logger.debug("=====orderNetAmount====referralAmount====2>>", orderNetAmount, referralAmount);
                    callback(null)
                }
            }
            else {
                logger.debug("=====orderNetAmount====referralAmount====3>>", orderNetAmount, referralAmount, request.dbName);
                callback(null)
            }
        }],
        giftDeduction: ['referralDeduction', async function (callback) {
            if (user_gift_ids && user_gift_ids.length > 0) {
                // giftAmount
                let usedGiftData = await ExecuteQ.Query(request.dbName, "select id from user_gift_card  where id IN (?) and is_used=?", [user_gift_ids, 1]);
                if (usedGiftData && usedGiftData.length > 0) {
                    let msg = "gift already used"
                    return sendResponse.sendErrorMessage(msg, reply, 400);
                }
                else {
                    let userGiftData = await ExecuteQ.Query(request.dbName, `select id,price,price_type,percentage_value from 
                    user_gift_card where id IN(?) and is_used!=?`, [user_gift_ids, 1]);
                    if (userGiftData && userGiftData.length > 0) {
                        // for(const [index,i] of userGiftData.entries()){
                        //     if(parseInt(i.price_type)==1){
                        //         giftAmount=gift_amount;
                        //     }
                        //     else{
                        //         giftAmount=giftAmount+i.price;
                        //     }
                        // }
                        // logger.debug("====referralAmount==",referralAmount)
                        // referralAmount=referralAmount+giftAmount;
                        logger.debug("=referralAmount===giftAmount==", referralAmount, giftAmount);
                        await ExecuteQ.Query(request.dbName, `update user_gift_card set is_used=? where id IN(?) and is_used!=?`, [1, user_gift_ids, 1]
                        )
                        callback(null)
                    }
                    else {
                        let msg = "gift not exist"
                        return sendResponse.sendErrorMessage(msg, reply, 400);
                    }
                }
            }
            else {
                callback(null)
            }
        }],
        makePayment: ['giftDeduction', async function (callback) {
            logger.debug("===========request in fo======2=====", request.headers.authorization);
            try {
                let userData = await Universal.getUserData(dbName, request.headers.authorization);
                logger.debug("========service charnge====", user_service_charge)
                logger.debug("===========request in fo===========", dbName, parseFloat(((orderNetAmount + user_service_charge) - referralAmount) * 100));
                // logger.debug("=======CONFIG===>>",config,config.get("service"),config.get("agent"))
                if (parseInt(paymentType) == 1 && payment_after_confirmation == 0) {

                    if ((unique_id) == config.get("payment.strip.unique_id")) {
                        payment_source = "stripe";
                        logger.debug("+===========request.dbName============", dbName)
                        let strip_secret_key_data = await Universal.getStripSecretKey(dbName);
                        logger.debug("==card_id=customer_payment_id=STRIP=DATA==>>", card_id, customer_payment_id, strip_secret_key_data, Math.round(parseFloat(productList[0].net_amount * 100)))
                        if (strip_secret_key_data && strip_secret_key_data.length > 0) {
                            const stripe = require('stripe')(strip_secret_key_data[0].value);
                            let payment_object = {};
                            if (customer_payment_id !== "" && card_id !== "") {
                                payment_object = {
                                    amount: Math.round(parseFloat(((orderNetAmount + user_service_charge + tip_agent) - referralAmount) * 100)),
                                    currency: currency,
                                    source: card_id,
                                    customer: customer_payment_id,
                                    capture: true,
                                    description: '(' + userData[0].email + ') Made an booking',
                                }
                            } else {
                                payment_object = {
                                    amount: Math.round(parseFloat((orderNetAmount - referralAmount) * 100)),
                                    currency: currency,
                                    source: payment_token,
                                    capture: true,
                                    description: '(' + userData[0].email + ') Made an booking',
                                }
                            }
                            stripe.charges.create(payment_object, async function (err, charge) {
                                logger.debug("==Payment===ERR!==>>", err);
                                if (err) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    card_payment_id = charge.id
                                    payment_status = 1
                                    payment_source = "stripe";
                                    callback(null)
                                }
                            }
                            );
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.conekta.unique_id")) {
                        let conekta_data = await Universal.getConektaSecretKey(request.dbName);
                        let userData = await Universal.getUserData(request.dbName, request.headers.authorization);
                        payment_source = "conekta";
                        logger.debug("=====conekta_data===USR==DAT!==>>>", productList[0].net_amount, conekta_data, userData)

                        if (conekta_data && conekta_data.length > 0) {
                            let conekta = require('conekta');
                            conekta.api_key = conekta_data[0].value;
                            conekta.locale = 'es';
                            conekta.Order.create({
                                "currency": "MXN",
                                "customer_info": {
                                    "name": userData[0].name,
                                    "phone": userData[0].mobile_no,
                                    "email": userData[0].email
                                },
                                "line_items": [{
                                    "name": userData[0].name,
                                    "unit_price": Math.round(parseFloat((orderNetAmount - referralAmount) * 100)),
                                    "quantity": 1
                                }],
                                "shipping_lines": [
                                    {
                                        "amount": 0
                                    }
                                ],
                                "shipping_contact": {
                                    "address": {
                                        street1: userData[0].customer_address,
                                        city: "Ciudad de Mexico",
                                        state: userData[0].address_line_2,
                                        postal_code: "78215",
                                        country: userData[0].customer_address,
                                        residential: true,
                                        object: "shipping_address"
                                    }
                                },
                                "charges": [
                                    {
                                        "payment_method": {
                                            "type": "card",
                                            "token_id": payment_token
                                        }
                                    }]
                            }).then(function (result) {
                                logger.debug("JSON==Object==>", result.toObject());
                                card_payment_id = result.toObject().id;
                                payment_status = 1
                                callback(null)
                            }, async function (error) {
                                logger.debug("=======ERR!=====", error);
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                    reply, 400);
                            })
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else if ((unique_id) == config.get("payment.razorpay.unique_id")) {
                        payment_source = "razorpay";
                        let razor_pay_data = await Universal.getRazorPayData(request.dbName);
                        logger.debug("======razor_pay_data=net_amount====>>", razor_pay_data, productList[0].net_amount * 100)
                        if (Object.keys(razor_pay_data).length > 0) {
                            web_request({
                                method: 'POST',
                                url: "https://" + razor_pay_data[config.get("payment.razorpay.publish_key")] + ":" + razor_pay_data[config.get("payment.razorpay.secret_key")] + "@api.razorpay.com/v1/payments/" + payment_token + "/capture",
                                form: {
                                    amount: (orderNetAmount - referralAmount) * 100,
                                    currency: "INR"
                                }
                            }, async function (error, response, body) {
                                logger.debug("===RazorPayError====", error)
                                // console.log('Status:', response.statusCode);
                                // console.log('Headers:', JSON.stringify(response.headers));
                                // console.log('Response:', body);
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1
                                    callback(null)
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.paystack.unique_id")) {
                        payment_source = "paystack";
                        let paystack_secret_key_data = await Universal.getPaystackSecretKey(request.dbName);
                        logger.debug("====STRIP=DATA==>>", paystack_secret_key_data, Math.round(parseFloat(productList[0].net_amount * 100)))

                        if (paystack_secret_key_data && paystack_secret_key_data.length > 0) {
                            var options = {
                                method: 'GET',
                                url: 'https://api.paystack.co/transaction/verify/' + payment_token + '',
                                headers: {
                                    Authorization: 'Bearer ' + paystack_secret_key_data[0].value + ''
                                }
                            };
                            web_request(options, function (err, response, body) {
                                logger.debug("====Err!==", err)
                                if (err) {
                                    return sendResponse.sendErrorMessage(
                                        Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    logger.debug("===BoDY===>>==", JSON.parse(body));
                                    let verifyData = JSON.parse(body);
                                    if (verifyData.data.status == "success") {
                                        payment_status = 1;
                                        card_payment_id = verifyData.data.reference;
                                        callback(null)
                                    }
                                    else {
                                        return sendResponse.sendErrorMessage(
                                            Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }

                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.paypal.unique_id")) {
                        payment_source = "paypal";
                        let paypal_api = process.env.NODE_ENV == 'prod' ? 'https://api.paypal.com' : 'https://api.sandbox.paypal.com'
                        let paypal_data = await Universal.getPaypalData(request.dbName);
                        logger.debug("========paypal==API==", paypal_api, paypal_data)
                        if (Object.keys(paypal_data).length > 0) {
                            let tokenData = await Universal.getAuthTokeOfPayPal(paypal_data[config.get("payment.paypal.client_key")], paypal_data[config.get("payment.paypal.secret_key")]);
                            var options = {
                                'method': 'POST',
                                'url': paypal_api + '/v2/checkout/orders/' + payment_token + '/capture',
                                'headers': {
                                    'Authorization': 'Bearer ' + tokenData.access_token,
                                    // 'PayPal-Request-Id': '7b92603e-77ed-4896-8e78-5dea2050476a',
                                    'Content-Type': 'application/json'
                                }
                            };
                            web_request(options, async function (error, response, body) {
                                logger.debug("====Body=====", error, body)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1
                                    card_payment_id = payment_token;
                                    callback(null)
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }

                    else if ((unique_id) == config.get("payment.checkout.unique_id")) {
                        payment_source = "checkout";

                        let checkout_data = await Universal.getCheckoutSecretKey(request.dbName);
                        logger.debug("======razor_pay_data=net_amount====>>", checkout_data)
                        if (Object.keys(checkout_data).length > 0) {
                            var headers = {
                                'Accept': 'application/json',
                                'Authorization': checkout_data[config.get("payment.checkout.secret_key")]//'sk_test_a7d262c3-15fd-4564-8aca-9e45ed879f57'
                            };

                            //console.log("headers ============= ",headers)

                            var dataString = {
                                "source": {
                                    "type": "token",
                                    "token": payment_token//"tok_4gzeau5o2uqubbk6fufs3m7p54"
                                },
                                //"amount": amount,//6500,
                                "amount": (parseFloat(orderNetAmount) + parseFloat(user_service_charge)),
                                "currency": currency,//"USD",
                                "reference": request.body.cartId ? request.body.cartId : '',//"ORD-5023-4E89",
                                "metadata": {
                                    "card_id": card_id,
                                    "customer_payment_id": customer_payment_id
                                }
                            };
                            console.log("dataString ============= ", dataString)
                            let checkout_api_url = (process.env.NODE_ENV == 'prod') ? 'https://api.checkout.com/payments' : 'https://api.sandbox.checkout.com/payments';
                            console.log("options ------- ------ ------ ", {
                                method: 'POST',
                                //url: "https://api.sandbox.checkout.com/payments",
                                url: checkout_api_url,
                                headers: headers,
                                form: dataString
                            })
                            web_request({
                                method: 'POST',
                                //url: "https://api.sandbox.checkout.com/payments",
                                url: checkout_api_url,
                                headers: headers,
                                form: dataString
                            }, async function (error, response, body) {
                                // console.log("1#########################################################")
                                // logger.debug("=== Checkout ====",error)
                                // console.log("2#########################################################")
                                // console.log(error)
                                // console.log("3#########################################################")
                                // console.log(response)
                                // console.log("4#########################################################")
                                // console.log(body)
                                // console.log("5#########################################################")
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    card_payment_id = body.id;
                                    payment_status = 1
                                    callback(null)
                                }
                            });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }

                    else if ((unique_id) == config.get("payment.venmo.unique_id")) {
                        payment_source = "venmo";
                        let braintree_data = await Universal.getBraintreeData(request.dbName);
                        logger.debug("========braintree_data==API==", braintree_data);

                        if (Object.keys(braintree_data).length > 0) {
                            var braintree = require("braintree");
                            var gateway = braintree.connect({
                                environment: process.env.NODE_ENV == 'prod' ? braintree.Environment.Production : braintree.Environment.Sandbox,
                                merchantId: braintree_data[config.get("payment.venmo.merchant_id")],
                                publicKey: braintree_data[config.get("payment.venmo.public_key")],
                                privateKey: braintree_data[config.get("payment.venmo.private_key")]
                            });

                            gateway.transaction.sale({
                                amount: (orderNetAmount - referralAmount),
                                paymentMethodNonce: payment_token,
                                options: {
                                    submitForSettlement: true
                                },
                                deviceData: {}
                            }, async function (err, result) {
                                if (err) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    if (result.success) {
                                        logger.debug("===braintree===response Id==>>>", result)
                                        card_payment_id = result.transaction.id;
                                        payment_status = 1
                                        callback(null)
                                    }
                                    else {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }

                                }

                            });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }

                    else if ((unique_id) == "zelle") {
                        logger.debug("===============zelle==========", zelle_receipt_url)
                        if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                            logger.debug("=======node zelle url============", zelle_receipt_url)
                            let msg = "please provide receipt for zelle";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            payment_source = "zelle"
                            callback(null)
                        }
                    }
                    else if ((unique_id) == "aamarpay") {
                        payment_source = "aamarpay";
                    }
                    else if ((unique_id) == "datatrans") {

                        payment_source = "datatrans";

                    }
                    else if ((unique_id) == config.get("payment.squareup.unique_id")) {
                        payment_source = "squareup";
                        let squareData = await Universal.getSquareupSecretKey(dbName)

                        if (Object.keys(squareData).length > 0) {
                            var SquareConnect = require('square-connect');
                            // Set Square Connect credentials and environment
                            var defaultClient = SquareConnect.ApiClient.instance;
                            // Configure OAuth2 access token for authorization: oauth2
                            var oauth2 = defaultClient.authentications['oauth2'];
                            oauth2.accessToken = squareData.square_token;
                            // Set 'basePath' to switch between sandbox env and production env
                            // sandbox: https://connect.squareupsandbox.com
                            // production: https://connect.squareup.com
                            let basePathOfSequare = process.env.NODE_ENV == 'prod' ? 'https://connect.squareup.com' : 'https://connect.squareupsandbox.com';
                            logger.debug("=basePathOfSequare===", basePathOfSequare);
                            defaultClient.basePath = process.env.NODE_ENV == 'prod' ? 'https://connect.squareup.com' : 'https://connect.squareupsandbox.com'

                            let payment_object = {};
                            const idempotency_key = crypto.randomBytes(22).toString('hex');
                            var apiInstance = new SquareConnect.PaymentsApi();
                            // you cand Add some Optional params acc. to the requirements in the PaymentObj
                            //https://developer.squareup.com/reference/square/payments-api/create-payment/explorer
                            logger.debug("==withou,with=", parseInt(Math.round(parseFloat((orderNetAmount - referralAmount) * 100))), typeof parseInt(Math.round(parseFloat((orderNetAmount - referralAmount) * 100))), typeof Math.round(parseFloat((orderNetAmount - referralAmount) * 100)))
                            if (customer_payment_id !== "" && card_id !== "") {
                                payment_object = {
                                    amount_money: {
                                        amount: parseInt(Math.round(parseFloat((orderNetAmount - referralAmount) * 100))),    // 100 Cent == $1.00 charge
                                        currency: "USD"
                                    },
                                    // currency: currency,
                                    source_id: card_id,
                                    customer_id: customer_payment_id,
                                    idempotency_key: idempotency_key,
                                    note: 'Made an booking'
                                }
                            } else {
                                payment_object = {
                                    source_id: customer_payment_id,
                                    amount_money: {
                                        amount: parseInt(Math.round(parseFloat((orderNetAmount - referralAmount) * 100))),    // 100 Cent == $1.00 charge
                                        currency: "USD"
                                    },
                                    idempotency_key: idempotency_key,
                                    note: 'Made an booking'

                                };
                            }
                            logger.debug("===payment_object=", payment_object);
                            apiInstance.createPayment(payment_object).then(function (data) {
                                console.log('API called successfully. Returned data: ' + JSON.stringify(data));
                                card_payment_id = data.payment.id;
                                payment_status = 1
                                callback(null);
                            }, function (error) {
                                console.error(error);
                                return sendResponse.sendErrorMessage(
                                    Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                    reply, 400);
                            });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }


                    }
                    else if ((unique_id) == config.get("payment.cybersource.unique_id")) {
                        payment_source = "cybersource";
                        let cyberSourceData = await Universal.getCyberSourceData(dbName);
                        logger.debug("==cyberSourceData====", cyberSourceData);
                        if (Object.keys(cyberSourceData).length > 0) {
                            var cybersourceRestApi = require('cybersource-rest-client');
                            try {
                                var instance = new cybersourceRestApi.PaymentsApi({
                                    'authenticationType': process.env.NODE_ENV == 'prod' ? 'https_signature' : 'http_signature',
                                    'runEnvironment': process.env.NODE_ENV == 'prod' ? 'cybersource.environment.production' : 'cybersource.environment.SANDBOX',
                                    'merchantID': cyberSourceData.cybersource_merchant_id,
                                    'merchantKeyId': cyberSourceData.cybersource_merchant_key_id,
                                    'merchantsecretKey': cyberSourceData.cybersource_merchant_secret_key
                                });
                                var processingInformation = new cybersourceRestApi.Ptsv2paymentsProcessingInformation();
                                processingInformation.commerceIndicator = 'internet';
                                // var aggregatorInformation = new cybersourceRestApi.Ptsv2paymentsAggregatorInformation();


                                var amountDetails = new cybersourceRestApi.Ptsv2paymentsOrderInformationAmountDetails();
                                amountDetails.totalAmount = parseFloat(parseFloat(orderNetAmount) - referralAmount);
                                amountDetails.currency = 'AED';
                                var orderInformation = new cybersourceRestApi.Ptsv2paymentsOrderInformation();
                                orderInformation.amountDetails = amountDetails;

                                // var billTo = new cybersourceRestApi.Ptsv2paymentsOrderInformationBillTo();
                                //     billTo.country = userData[0].customer_address;
                                //     billTo.firstName = userData[0].name;
                                //     billTo.lastName = userData[0].name
                                //     billTo.phoneNumber = userData[0].mobile_no
                                //     billTo.address1 = userData[0].address_line_2
                                //     billTo.locality = userData[0].customer_address;
                                //     billTo.email = userData[0].email;
                                //     billTo.address2 = userData[0].address_line_2;

                                // orderInformation.billTo = billTo;
                                var paymentInformation = new cybersourceRestApi.Ptsv2paymentsPaymentInformation();
                                // var card = new cybersourceRestApi.Ptsv2paymentsPaymentInformationCard(); 
                                var customer = new cybersourceRestApi.Ptsv2paymentsPaymentInformationCustomer();
                                customer.customerId = payment_token;
                                // card.expirationYear = cardData[0].exp_year
                                // card.number = cardData[0].card_number;
                                // card.expirationMonth = cardData[0].exp_month;
                                // card.securityCode = await Universal.getDecryptData(cardData[0].cvc);
                                // // customer.customer_payment_id
                                // card.type = cardData[0].card_type;
                                // paymentInformation.card = card;
                                paymentInformation.customer = customer
                                var cbrequest = new cybersourceRestApi.CreatePaymentRequest();
                                // request.clientReferenceInformation = clientReferenceInformation;
                                cbrequest.processingInformation = processingInformation;
                                // request.aggregatorInformation = aggregatorInformation;
                                cbrequest.orderInformation = orderInformation;
                                cbrequest.paymentInformation = paymentInformation;
                                cbrequest.processingInformation.capture = true;
                                console.log('\n*************** Process Payment ********************* ');

                                instance.createPayment(cbrequest, function (error, data, response) {
                                    if (error) {

                                        console.log('\nError in process a payment : ' + JSON.stringify(error));
                                        return sendResponse.sendErrorMessage(
                                            Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        console.log('\nData of process a payment : ' + JSON.stringify(response['status']), JSON.stringify(response['id']))
                                        card_payment_id = data.id;
                                        payment_status = 1
                                        callback(null);
                                    }
                                    // console.log('\nResponse of process a payment : ' + JSON.stringify(response));
                                    // console.log('\nResponse Code of process a payment : ' + JSON.stringify(response['status']));
                                    // callback(error, data);
                                });
                            } catch (error) {
                                logger.debug("======ERR!===>>", error)
                                return sendResponse.sendErrorMessage(
                                    Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                    reply, 400);
                            }

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.paytab.unique_id")) {
                        let payTabData = await Universal.getPayTabData(dbName);

                        payment_source = "paytab";
                        if (Object.keys(payTabData).length > 0) {
                            web_request.post({
                                url: "https://www.paytabs.com/apiv2/verify_payment_transaction",
                                method: "POST",
                                form: {
                                    "merchant_email": payTabData.paytab_secret_key,
                                    "secret_key": payTabData.paytab_merchant_email,
                                    // "merchant_email":"Kiran.girija@afoc.mil.ae", //payTabData.paytab_merchant_email,
                                    // "secret_key":"QGj2hCvxNdFnoA9QZe9jm8QSr2S44FcUmvWD7sbUFRh4rrUrG4L2cCUEENJJsVDPqAsy3EtIvLNXdHoTM9WYLRDqEm97hNWIophr",//payTabData.paytab_secret_key,
                                    "transaction_id": customer_payment_id
                                }

                            }, async function (error, response, body) {
                                logger.debug("===paytabErr!===", error)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    card_payment_id = JSON.parse(body).transaction_id;
                                    payment_status = 1
                                    callback(null);
                                }

                            })
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.saferpay.unique_id")) {
                        payment_source = "saferpay";

                        let safer_pay_data = await Universal.getSaferPayData(dbName);
                        let saferTransactionData = await Execute.Query(dbName, `select saferpay.saferpay_request_id,saferpay.saferpay_token from saferpay where saferpay.saferpay_request_id=?`, [request.body.payment_token]);
                        if (saferTransactionData && saferTransactionData.length && Object.keys(safer_pay_data).length > 0) {
                            let payload = {
                                "RequestHeader": {
                                    "SpecVersion": "1.20",
                                    "CustomerId": safer_pay_data.saferpay_customer_id,
                                    "RequestId": saferTransactionData[0].saferpay_request_id,
                                    "RetryIndicator": 0
                                },
                                "Token": saferTransactionData[0].saferpay_token
                            }

                            let username = safer_pay_data.saferpay_username;
                            let password = safer_pay_data.saferpay_password;

                            let authToken = "Basic " + new Buffer(username + ":" + password).toString("base64");

                            var headers = {
                                "Content-type": "application/json",
                                "accetp": "application/json; charset=utf-8",
                                'Authorization': authToken
                            };

                            let url = "https://test.saferpay.com/api/Payment/v1/Transaction/Authorize";

                            if (process.env.NODE_ENV == 'prod')
                                url = "https://www.saferpay.com/api/Payment/v1/Transaction/Authorize";

                            web_request({
                                method: 'POST',
                                url: url,
                                headers: headers,
                                body: payload,
                                json: true
                            }, async function (error, response, body) {

                                if (body && body.Behavior == 'ABORT') {
                                    console.log('Response:', body);
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    card_payment_id = body.Transaction.Id;
                                    payment_status = 1

                                    await Execute.Query(request.dbName, `update saferpay set other=? where id=?`, [card_payment_id, request.body.payment_token]);
                                    callback(null);
                                    // sendResponse.sendSuccessData(body, constant.responseMessage.SUCCESS, reply, 200);
                                }

                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else {
                        return sendResponse.sendErrorMessage(
                            await Universal.getMsgText(
                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                            reply, 400);
                    }
                }
                else {
                    callback(null)
                }
            }
            catch (Err) {
                logger.debug("======ERR!===?", Err)
                return sendResponse.sendErrorMessage(
                    await Universal.getMsgText(
                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                    reply, 400);
            }
        }],
        // checkPaymentType:['makePayment',async function(callback){
        // if(unique_id == "zelle"){
        //     if(zelle_receipt_url=="" && zelle_receipt_url==null){
        //         let msg = "please provide receipt for zelle";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        //         payment_source = "zelle"
        //     }
        // }
        // }],
        checkProductQuantity: ['makePayment', function (callback) {


            var avail_query = "select p.id,p.name from product p where id IN (?) and p.purchased_quantity>=p.quantity";
            var stmt = multiConnection[request.dbName].query(avail_query, [productIds], function (err, data) {

                console.log(stmt.sql);

                if (err) {
                    var msg = "sorry! some of items are not available";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if (data && data.length > 0) {
                        var msg = data[0].name + " is not available";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        callback(null);
                    }
                }
            })
            // let avail_query="select p.id,p.name,(p.quantity-p.purchased_quantity) as available  from product p where id IN (?)";
            // let stmt=multiConnection[request.dbName].query(avail_query,[productIds],function(err,data){
            //     logger.debug("===========check product quanity===",stmt.sql)
            //     if(err){
            //             var msg = "sorry! some of items are not available";
            //             sendResponse.sendErrorMessage(msg,reply,500);
            //         }
            //         else{
            //             logger.debug("==========productList============",productList)
            //             _.each(productList,(i,index)=>{
            //                 if(data[index].available>0){
            //                     if(!(i.product_id==data[index].id && data[index].available>=parseInt(i.quantity))){
            //                         logger.debug("=======check product quantity======2222222==========",i.product_id,data[index].id,data[index].available,parseInt(i.quantity))
            //                         var msg = data[index].name +" is not available";
            //                         sendResponse.sendErrorMessage(msg,reply,500);
            //                     }
            //                 }
            //             })


            //             callback(null);
            //             // if(data && data.length>0){
            //             //     var msg = data[0].name +" is not available";
            //             //     sendResponse.sendErrorMessage(msg,reply,500);
            //             // }
            //             // else{
            //             //     callback(null);
            //             // }
            //         }
            //    })
        }],
        checkResturantTime: ['checkProductQuantity', function (callback) {
            var sql = "select s.id from supplier_branch sb join supplier s on sb.supplier_id=s.id join supplier_timings st on st.supplier_id=s.id "
            sql += "where s.id IN (?) and st.week_id = ? and (st.is_open = 0 or st.end_time <= ?)"
            var stmt = multiConnection[request.dbName].query(sql, [sup_ids, order_day, order_time], function (err, data) {
                logger.debug("==TIME-QUERY==>", stmt.sql)
                if (err) {
                    var msg = "error getting time";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if ((data && data.length > 0 && servicetype == 1) || (data && data.length > 0 && servicetype == 2)) {
                        let finalArr = data.map((value) => value.name)
                        let msgStr = finalArr.toString().replace(/,/g, ' and ')

                        var msg = "Sorry! " + msgStr + " is closed now";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        callback(null);
                    }
                }
            })

        }],
        getAddsOnDeliveryAdminCharge: ['checkResturantTime', async function (callback) {
            let ads_on_query = "select product_adds_on.product_id,cart_adds_on.*,cart.delivery_charges,cart.handling_admin,cart.handling_supplier from " +
                " cart_adds_on join cart on cart.id=cart_adds_on.cart_id join product_adds_on on product_adds_on.id=cart_adds_on.adds_on_id where cart_adds_on.cart_id=?  ";
            let ads_on_data = await ExecuteQ.Query(request.dbName, ads_on_query, [cartId]);
            let delivery_charges, handling_admin, handling_supplier;

            logger.debug(ads_on_data)
            if (ads_on_data && ads_on_data.length > 0) {
                for (const [index, i] of ads_on_data.entries()) {
                    adds_on_arr.push({
                        product_id: i.product_id,
                        adds_on_name: i.adds_on_name,
                        adds_on_type_name: i.adds_on_type_name,
                        quantity: i.quantity,
                        price: i.price,
                        serial_number: i.serial_number
                    })
                    logger.debug("===")
                    adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + parseFloat(i.price) * parseInt(i.quantity);
                    logger.debug("=adds_on_delivery_admin_charges==", adds_on_delivery_admin_charges)
                    if (index == (ads_on_data.length - 1)) {
                        // delivery_charges=i.delivery_charges!=null?parseFloat(i.delivery_charges):0
                        // handling_admin=i.handling_admin!=null?parseFloat(i.handling_admin):0
                        // handling_supplier=i.handling_supplier!=null?parseFloat(i.handling_supplier):0
                        adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + delivery_admin_supplier_charge
                        logger.debug("===adds_on_delivery_admin_charges=", adds_on_delivery_admin_charges)
                        callback(null)
                    }
                }
            }
            else {
                adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + delivery_admin_supplier_charge
                callback(null)
            }
        }],
        promoCodeValidation: ['getAddsOnDeliveryAdminCharge', async function (callback) {
            logger.debug("============adds_on_delivery_admin_charges=========", adds_on_delivery_admin_charges)
            var promo_categories_validation = false, promo_supplier_validation = false, is_supplier = 0, is_category = 0;
            try {
                if (request.body.promoId != 0) {
                    await promoCntrl.PromoValidation(request.dbName, request.body.promoCode, request.body.languageId, request.users.id);
                    var promo_type = await promoCntrl.PromoType(request.dbName, request.body.promoCode, request.body.languageId);
                    logger.debug("==promo_type=", promo_type.promoType);
                    var promo_data = await promoCntrl.PromoData(request.dbName, request.body.promoCode, request.body.languageId);
                    if (promo_type.promoType == 1) {

                        outerloop: for (const i of JSON.parse(promo_data[0].detailsJson)) {
                            logger.debug("======CAT=ID========", i.categoryId)
                            for (const j of productList) {
                                logger.debug("==============", j.category_id)
                                if (parseInt(i.categoryId) == parseInt(j.category_id)) {
                                    discounted_supplier_ids.push(j.supplier_id)
                                    promo_categories_validation = true
                                    break outerloop;
                                }
                            }
                        }
                        logger.debug("==AFTE==lOPP=I=", promo_categories_validation, promo_supplier_validation)
                        if (promo_categories_validation == false) {
                            logger.debug("====IF=D=", request.body.languageId)
                            if (parseInt(request.body.languageId) == 14) {
                                var msg = "Promo Code Is Not Valid For Selected Items"
                                throw msg

                            } else {
                                var msg = "رمز القسيمة غير صالح للعناصر المحددة"
                                throw msg
                            }
                        }
                        else {
                            // logger.debug("===ELSE===")
                            callback(null)
                        }
                    }
                    else {


                        outerloop: for (const i of JSON.parse(promo_data[0].detailsJson)) {
                            logger.debug("==PROMO==LOOP==")
                            for (const j of productList) {
                                logger.debug("==PRODUCT=LOOP==", i.supplierId, j.supplierId)
                                if (parseInt(i.supplierId) == parseInt(j.supplier_id)) {
                                    promo_supplier_validation = true
                                    discounted_supplier_ids.push(j.supplier_id)
                                    break outerloop;
                                }
                            }
                        }


                        logger.debug("==AFTE==lOPP=ELSE=", promo_categories_validation, promo_supplier_validation)
                        if (promo_supplier_validation == false) {
                            logger.debug("====IF==")
                            if (parseInt(request.body.languageId) == 14) {
                                var msg = "Promo Code Is Not Valid For Selected Items"
                                throw msg

                            } else {
                                var msg = "رمز القسيمة غير صالح للعناصر المحددة"
                                throw msg
                            }
                        }
                        else {
                            callback(null)
                        }

                    }

                }
                else {
                    callback(null);
                }

            }
            catch (err) {
                // console.log("=======ERR!==",err)
                return sendResponse.sendErrorMessage(err, reply, 400);
            }
        }],
        genrateOrder: ['promoCodeValidation', function (callback) {
            logger.debug("genrateOrder---------------------------------", supplier_product_data)

            async.each(supplier_product_data,
                function (product, callback1) {
                    logger.debug("===========product=====referralAmount>>>>>>>>>", product, referralAmount);
                    logger.debug("===============user_service_charge=============", user_service_charge);
                    orderGengrate(request.service_type, deliveryChargeData, request.dbName, reply, product, user, paymentType, cartId, type, offset,
                        isAgent, booking_date_time, buffer_time,
                        duration, discounted_supplier_ids,
                        request.body.discountAmount,
                        request.body.promoCode,
                        request.body.promoId,
                        self_pickup,
                        booking_to_date,
                        booking_from_date,
                        from_address,
                        to_address,

                        api_version,
                        from_latitude,
                        to_latitude,
                        from_longitude,
                        to_longitude,
                        card_payment_id,
                        "",
                        payment_source,
                        preparation_time,
                        questions,
                        tip_agent,
                        referralAmount,
                        zelle_receipt_url,
                        user_service_charge,
                        pres_image1,
                        pres_image2,
                        pres_image3,
                        pres_image4,
                        pres_image5,
                        pres_description,
                        type_id,
                        payment_after_confirmation,
                        payment_status,
                        have_pet,
                        parking_instructions,
                        cleaner_in,
                        area_to_focus,
                        giftAmount,
                        0,
                        schedule_date,
                        schedule_end_date,
                        is_schedule,
                        0,
                        function (err, result) {
                            if (err) {
                                callback1(err);
                            } else {
                                order.id = result;
                                order_data.push(order.id);
                                logger.debug("===========orderData==========", order_data, order.id)
                                callback1(null);
                            }
                        })

                }, function (err) {
                    if (err) {
                        callback(err);
                    }
                    else {
                        callback(null)
                    }
                });
        }],
        addOrderProduct: ['genrateOrder', function (callback) {
            // console.log("prom////",order_data);
            var index, order_id;
            async.each(supplier_product_data, function (p_data, callback2) {
                index = supplier_product_data.indexOf(p_data);
                order_id = order_data[parseInt(index)]
                // console.log("====p_data==",order_id,index);
                if (promoationType == 1) {
                    addPromotionProduct(request.dbName, reply, cartId, p_data, parseInt(order_id), user, languageId, function (err, result) {
                        if (err) {
                            logger.debug("========err1===============")
                            callback2(err);
                        } else {
                            logger.debug("==================else of add order product ========--=========")

                            callback2(null);
                        }
                    })
                }

                else {


                    addOrderProduct(request.dbName, reply, cartId, p_data,
                        parseInt(order_id), user, type, duration, 0, function (err, result) {
                            if (err) {
                                logger.debug("========err2===============")
                                callback2(err);
                            } else {
                                logger.debug("==================else of add order product =========**=========")

                                callback2(null);
                            }
                        })
                }
            }, function (err) {
                if (err) {
                    logger.debug("========err3 end===============")
                    callback(err);
                }
                else {
                    logger.debug("==================else of add order product =========end=========")
                    callback(null)
                }
            });
        }],
        getSupplierCommission: ['addOrderProduct', function (callback) {
            // if(api_version>=1){
            let orderIds = order_data.toString();
            let sql = "select sp.commission/100 as supplier_commission,sp.pickup_commission/100 as pickup_commission, o.id as order_id, cp.supplier_id ," +
                " o.net_amount as total_price from orders o join " +
                " order_prices op on o.id = op.order_id join cart_products cp on cp.product_id = op.product_id join supplier" +
                " sp on sp.id = supplier_id where o.id in (" + orderIds + ") group by supplier_id"
            let stmt = multiConnection[request.dbName].query(sql, function (err, data) {
                console.log("-----getsuppliercommissionquery---------------", stmt.sql)
                if (err) {
                    logger.debug("==========err in getSupplierCommission==========");
                    callback(err)
                } else {
                    supplier_commission = data
                    logger.debug("=========in get supplierCommission====function=========", data)
                    callback(null)
                }
            })
            // }else{
            //     callback(null)
            // }
        }],
        addSupplierHandlingCharges: ['getSupplierCommission', async function (callback) {
            let adminCommissionData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_commission_dynamic", "1"]);
            // if(api_version>=1){
            let handling_supplier_charges = 0;
            if (supplier_commission && supplier_commission.length) {
                let sql = "update orders set supplier_commision=? where id = ?"
                let totalPrice;
                // for(let i = 0; i < supplier_commission.length; i++){
                for (const [ind, i] of supplier_commission.entries()) {
                    totalPrice = i.total_price;
                    if (adminCommissionData && adminCommissionData.length > 0) {
                        let orderPiceData = await ExecuteQ.Query(request.dbName, `select SUM(quantity*price) as amount from order_prices where order_id=?`, [i.order_id]);
                        totalPrice = orderPiceData[0].amount
                    }
                    else if (parseInt(self_pickup) == 1) {
                        handling_supplier_charges = i.pickup_commission * totalPrice;
                    }
                    else {
                        handling_supplier_charges = i.supplier_commission * totalPrice;
                    }
                    await ExecuteQ.Query(request.dbName, sql, [handling_supplier_charges, i.order_id])
                    // let stmt = multiConnection[request.dbName].query(sql,[handling_supplier_charges,supplier_commission[i].order_id],function(err,data){
                    // logger.debug("==========stmt in add SupplierHandling charges=============",stmt.sql)
                    //     if(err){
                    //         logger.debug("==========err in addSupplierHandlingCharges==========");
                    //         callback(err)
                    //     }else{
                    //         logger.debug("========== in addSupplierHandlingCharges====function======");
                    //         callback(null)
                    //     }
                    // })
                }
                callback(null)
            } else {
                callback(null);
            }
            // }else{
            //     callback(null)
            // }
        }],
        updatePurchasedQuantity: ['addSupplierHandlingCharges', function (callback) {
            logger.debug("============in the update purchased quantity===============")
            var update_query = "update product p inner join order_prices orp on orp.product_id=p.id " +
                " inner join cart_products crp on crp.product_id=orp.product_id set p.purchased_quantity= p.purchased_quantity" +
                " + orp.quantity where orp.order_id IN (?)";
            var st = multiConnection[request.dbName].query(update_query, [order_data], function (err, data) {
                console.log(st.sql);
                if (err) {
                    logger.debug("========err4===============")
                    callback(err)
                }
                else {
                    callback(null)
                }
            })
        }],
        updateNetAmoountQuantity: ['updatePurchasedQuantity', function (callback) {
            logger.debug("============i****EMER*********=====");
            let update_net_amount = "update orders as ord " +
                "set ord.net_amount=(select SUM(orss.price*orss.quantity) from order_prices orss where orss.order_id=ord.id )+(select IFNULL(cart.addOn,0) from cart where cart.id=ord.cart_id)+" + adds_on_delivery_admin_charges + " " +
                "where ord.id IN(?)";
            let st = multiConnection[request.dbName].query(update_net_amount, [order_data], function (err, data) {
                logger.debug("==========STMT==>>", st.sql);
                if (err) {
                    logger.debug("========err4===============")
                    callback(err)
                }
                else {
                    console.log('updateNetAmoountQuantity data', data);

                    callback(null)
                }
            })

        }],
        applyPromocode: ['updateNetAmoountQuantity', function (callback) {
            // applyPromocode:['updatePurchasedQuantity',function(callback){
            logger.debug("=================in applypromocode-==============")
            // if(applyCode == 1){
            //     connection.query("",function(err,data){

            //         async.each(order_data,function(p_data, callback2){

            //              applyPromoCodeParticularOrder(request.users.id,supplierId,order.id,request.body.promoId,request.body.promoCode,totalPriceAfter,request.body.discountAmountfunction(){

            //             })
            //         });

            //      })
            // }
            // else{
            callback(null)
            // }

        }],

        orderInformation: ['applyPromocode', function (callback) {//supplier_branch_id
            var select_query = "select  ors.supplier_branch_id,usr.email as customer_email,IFNULL(CONCAT(usr.firstname,usr.lastname),'') AS customer_name,ors.buffer_time, " +
                " sp.id as supplier_id,ors.user_service_charge,sp.name as supplier_name,ors.created_on,ors.schedule_date as delivery_date,usr.mobile_no as customer_phone_number,usr.user_image as customer_image ,CAST(usr.id as CHAR(50)) as customer_id," +
                " spb.name as supplier_branch_name,spb.address as supplier_branch_address,ors.promo_discount,ors.promo_code,ors.payment_type,IFNULL(ors.comment, '') as comment,ors.remarks,ors.urgent_price," +
                " ors.urgent,ors.tip_agent,ors.net_amount,ors.delivery_charges,ors.handling_supplier," +
                " ors.handling_admin,CAST(ors.id AS CHAR) as order_id " +
                " from orders ors inner join supplier inner join" +
                " supplier_branch spb on spb.id=ors.supplier_branch_id inner join supplier sp " +
                " on sp.id=spb.supplier_id inner join user usr on usr.id=ors.user_id where ors.id IN (?) group by ors.id"
            var st = multiConnection[request.dbName].query(select_query, [order_data], function (err, data) {
                logger.debug("===========orderInformation========", st.sql)
                if (err) {
                    logger.debug("========err6===============")
                    callback(err)
                }
                else {
                    logger.debug("=================in orderInformation-==============")
                    if (data && data.length > 0) {
                        agentOrderDetail = data;
                    }
                    else {
                        agentOrderDetail = []
                    }
                    callback(null)
                }
            })
        }],
        deliveryAddress: ["orderInformation", function (callback) {
            var select_query = "select ors.id as order_id,usr.latitude,usr.longitude,usr.address_line_1,usr.address_line_2,usr.pincode,usr.city,usr.landmark, " +
                "usr.directions_for_delivery,usr.address_link,usr.customer_address from orders ors left join user_address usr on usr.id=ors.user_delivery_address where ors.id IN(?)"
            var st = multiConnection[request.dbName].query(select_query, [order_data], function (err, deliveryData) {
                if (err) {
                    logger.debug("========err5===============")
                    callback(err)
                }
                else {
                    logger.debug("=================in deliveryAddress-==============", agentOrderDetail, deliveryData)
                    if (agentOrderDetail && agentOrderDetail.length > 0) {
                        for (var j = 0; j < agentOrderDetail.length; j++) {
                            agentOrderDetail[j].adds_on = adds_on_arr
                            agentOrderDetail[j].duration = duration;
                            if (deliveryData && deliveryData.length > 0) {
                                for (var i = 0; i < deliveryData.length; i++) {
                                    if (parseInt(deliveryData[i].order_id) == parseInt(agentOrderDetail[j].order_id)) {
                                        deliveryData[i].type = 0;
                                        agentOrderDetail[j].address = deliveryData[i]
                                    }
                                }
                            }
                            else {
                                agentOrderDetail[j].address = {}
                            }
                            if (j == (agentOrderDetail.length - 1)) {
                                callback(null)
                            }
                        }
                    }

                    callback(null)
                }
            })

        }],
        orderItemData: ['deliveryAddress', function (callback) {

            let select_query = "select handling_admin,order_prices.id as order_price_id,order_id,quantity,price,product_id as item_id,product_name as item_name, " +
                " product_desc as item_desc,product_name as item_name,image_path, " +
                " sb.name as supplier_branch_name,sb.address as supplier_branch_address,sb.latitude,sb.longitude " +
                " from order_prices join supplier_branch sb on sb.id=order_prices.supplier_branch_id where order_id IN(?)"
            let st = multiConnection[request.dbName].query(select_query, [order_data], function (err, orderItemData) {
                if (err) {
                    logger.debug("========err7===============")
                    callback(err)
                }
                else {
                    logger.debug("=================in orderItemData-==============", agentOrderDetail)

                    var items = []
                    // agentOrderItemDetail=orderItemData
                    if (agentOrderDetail && agentOrderDetail.length > 0) {
                        for (var j = 0; j < agentOrderDetail.length; j++) {
                            if (booking_date_time != "") {
                                agentOrderDetail[j].delivery_date = booking_date_time;
                            }
                            if (orderItemData && orderItemData.length > 0) {
                                for (var i = 0; i < orderItemData.length; i++) {
                                    if (parseInt(orderItemData[i].order_id) == parseInt(agentOrderDetail[j].order_id)) {
                                        items.push(orderItemData[i])
                                        agentOrderDetail[j].items = items
                                    }
                                    if (i == (orderItemData.length - 1)) {
                                        items = []
                                    }
                                }
                            }
                            else {
                                agentOrderDetail[j].items = []
                            }
                            if (j == (agentOrderDetail.length - 1)) {
                                callback(null)
                            }
                        }
                    }
                    callback(null)
                }
            })


        }],
        addOrderToAgent: ['orderItemData', async function (callback) {

            var final_data, agent_booking_array = [], api_key, secret_key;
            logger.debug("=======agentOrderDetail==>>===", agentArray);

            if (agentArray && agentArray.length > 0) {
                agentOrderDetail[0].user_id = agentArray[0].id
                _.each(agentArray, function (i) {
                    agentOrderDetail[0].user_id = i.id
                    agent_booking_array.push(i.id, order_data[0])
                })
                final_data = _.chunk(agent_booking_array, 2);

                var insert_query = "insert into  agent_orders(`agent_id`,`order_id`) values ?"
                multiConnection[request.dbName].query(insert_query, [final_data], async function (err, data) {
                    if (err) {
                        logger.debug("========err8===============")
                        callback(err)
                    }
                    else {
                        try {
                            var GetAgentDbData = await getAgentDbInformation(request.dbName);
                            var agentConnection = await RunTimeAgentConnection(GetAgentDbData);
                            // logger.debug("---agentConnection-",agentConnection)
                            var api_key = await agent.KeyData(agentConnection, config.get("agent.api_key"));
                            var secret_key = await agent.KeyData(agentConnection, config.get("agent.db_secret_key"));
                            var assignOrder = await agent.AssignOrderToAgent(agentOrderDetail[0], api_key, secret_key)
                            // logger.debug("---api_key,secret_key=VALUE--",agentConnection,api_key,secret_key);
                            callback(null)
                        }
                        catch (err) {
                            logger.debug("========err9===============", err)
                            callback(err)
                        }
                    }
                })
            }
            else {
                var servicetype = await agent.screenInfo(request.dbName);
                logger.debug("=====type_id=servicetype===", type_id, servicetype, self_pickup)

                if (((servicetype.app_type == 1 || servicetype.app_type == 2) && parseInt(self_pickup) == 0)) {
                    var GetAgentDbData = await getAgentDbInformation(request.dbName);
                    var agentConnection = await RunTimeAgentConnection(GetAgentDbData);
                    var api_key = await agent.KeyData(agentConnection, config.get("agent.api_key"));
                    var secret_key = await agent.KeyData(agentConnection, config.get("agent.db_secret_key"));
                    for (const [index, i] of agentOrderDetail.entries()) {
                        var assignOrder = await agent.AssignOrderToAgentByLocation(i, api_key, secret_key)
                        if (index == (agentOrderDetail.length - 1)) {
                            callback(null)
                        }
                    }
                }
                else if ((parseInt(type_id) == 1 || parseInt(type_id) == 2) && parseInt(self_pickup) == 0) {
                    var GetAgentDbData = await getAgentDbInformation(request.dbName);
                    var agentConnection = await RunTimeAgentConnection(GetAgentDbData);
                    var api_key = await agent.KeyData(agentConnection, config.get("agent.api_key"));
                    var secret_key = await agent.KeyData(agentConnection, config.get("agent.db_secret_key"));
                    for (const [index, i] of agentOrderDetail.entries()) {
                        var assignOrder = await agent.AssignOrderToAgentByLocation(i, api_key, secret_key)
                        if (index == (agentOrderDetail.length - 1)) {
                            callback(null)
                        }
                    }
                }
                else {
                    callback(null)
                }
            }
        }],
        notificationData: ['addOrderToAgent', function (callback) {
            getvalues(request.dbName, reply, order.id, function (err, values) {
                if (err) {
                    logger.debug("========err10===============")
                    sendResponse.somethingWentWrongError(reply);
                }
                else {
                    deviceToken = values.device_token;
                    deviceType = values.device_type;
                    userId = values.user_id;
                    userName = values.user_name;
                    deliveryDate = values.delivery_date;
                    supplierEmail = values.email;
                    supplierPhone = values.phone;
                    branchToken = values.branch_token;
                    branchDeviceType = values.branch_device_type;
                    supplierId = values.supplier_id;
                    net_amount = values.net_amount;
                    supplierName = values.supplierName;
                    mobileNumber = values.mobileNumber;
                    countryCode = values.country_code
                    area = values.area;
                    landmark = values.customer_full_address;
                    address_link = values.address_link;
                    created_on = moment(values.created_on).format('YYYY-MM-DD HH:mm');
                    schedule_date = moment(values.schedule_date).format('YYYY-MM-DD HH:mm');
                    houseNumber = values.pincode != null && values.pincode != undefined && values.pincode != "" ? (values.pincode).split(',') : "";
                    if (houseNumber[1]) {
                        building = houseNumber[1];
                        building = building.substring(2);
                    }
                    else {
                        building = '';
                    }

                    deliveryCharges = values.delivery_charges;
                    handling = parseInt(values.handling_admin) + parseInt(values.handling_supplier);
                    urgent_price = values.urgent_price;
                    quantity = values.quantity;
                    if (values.payment_type == 0) {
                        payment_type = 'CASH'
                    } else {
                        payment_type = 'CARD'
                    }
                    callback(null);
                }
            });

        }],
        sendPushNotificationToAdmin: ['notificationData', async function (cb) {
            var fcmToken = [];
            var cur_date = moment().utcOffset(offset);
            var created_on = new Date();
            var suplrIds = _.uniq(supplierIds)
            logger.debug("===Supplier==Deevice..", supplierIds, suplrIds);
            let adminData = await ExecuteQ.Query(request.dbName,
                "select `fcm_token`,`email`,`id` from admin where is_active=1 and fcm_token!=? ", ["0"])
            let supplierDatas = await ExecuteQ.Query(request.dbName,
                "select `device_token`,`device_type` from supplier where id in (?)", suplrIds)

            logger.debug("==adminData==supplierDatas=", adminData, supplierDatas);

            let new_email_template_v12 = await Execute.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=? and value=1 ", ["new_email_template_v12"]);


            adminData.forEach(element => {
                fcmToken.push(element.fcm_token)
            });
            _.each(supplierDatas, function (i) {
                fcmToken.push(i.device_token)
            })
            var data = {
                "status": 0,
                "message": new_email_template_v12.length <= 0 ? await Universal.getMsgText(languageId, request, 0) : "A pending order has been placed",
                "orderId": order_data[0],
                "self_pickup": self_pickup
            }
            await lib.sendFcmPushNotification(fcmToken, data, request.dbName);
            cb(null)


        }],
        orderDetails: ['sendPushNotificationToAdmin', async function (callback) {
            console.log('orderDetails-----------------');
            let productData = []
            var sql = "select p.id,c.type, c.menu_type,c.terminology,sp.recipe_pdf,p.is_product,os.cart_id,os.is_agent,c.id as category_id,s.name as supplier_name,spb.name as branch_name,spb.latitude,spb.longitude,s.address,s.id as supplier_id,s.phone,s.supplier_image,s.email,pp.can_urgent,pp.urgent_type,pp.urgent_value ,c.order,c.category_flow,op.supplier_branch_id,op.handling_admin,op.handling_supplier,op.id as order_price_id,op.quantity,pml.name,pml.measuring_unit,op.product_id,op.price,op.price as fixed_price,op.product_name,op.image_path,op.product_desc from order_prices op join " +
                " product_ml pml on op.product_id = pml.product_id join orders os on os.id = op.order_id join product_pricing pp on op.product_id=pp.product_id and op.product_id=pp.product_id join product addonprice on p.id = op.product_id left join supplier_branch spb on spb.id=op.supplier_branch_id join supplier s on s.id=spb.supplier_id left join supplier_branch_product sp on sp.product_id =op.product_id join categories c on c.id =sp.category_id  where op.order_id IN (?) group by product_id";
            logger.debug("+===========order id in final==========");

            let result = await ExecuteQ.Query(request.dbName, sql, [order_data]);

            for await (const [index, i] of result.entries()) {
                let addonprice = 0;
                i.adds_on = await getOrderAddsOn(request.dbName, i.cart_id, i.product_id);
                logger.debug("========result.addon====", i.addon)
                if (i.adds_on && i.adds_on.length > 0) {
                    addonprice = await addonTotalPrice(i.adds_on, i.quantity)
                }
                productData.push({
                    id: i.id,
                    quantity: i.quantity,
                    name: i.name,
                    image_path: i.image_path,
                    price: i.price,
                    addonprice: addonprice
                })
            }
            orderDetails = productData;
            logger.debug("=orderDetails==>>>", orderDetails)
            console.log(orderDetails, "orderDetails-----------")
            callback(null);
            // console.log('orderDetails-----------------');
            // var sql='select p.id,op.price,p.bar_code,op.quantity,p.measuring_unit,p.name,pi.image_path from order_prices op join product p on ' +
            //     'op.product_id =p.id join product_image pi on pi.product_id =p.id where op.order_id IN (?)  group by pi.product_id '
            // multiConnection[request.dbName].query(sql,[order_data],function (err,result) {
            //     // console.log(".............order details........................",err,result);
            //     if(err){
            //         logger.debug("========err11===============")
            //         sendResponse.somethingWentWrongError(reply);
            //     }
            //     else{
            //         orderDetails=result;
            //         callback(null)
            //     }
            // })

        }],
        sendNumber: ['orderDetails', async function (cb) {
            console.log('sendNumber-----------------');
            let twilioata = await Universal.getTwilioData(request.dbName);
            logger.debug("=========TWilio==DATA!=========>>", twilioata);
            let muthofunData = await Universal.getMuthoFunData(request.dbName);
            if (Object.keys(twilioata).length > 0) {
                var client = require('twilio')(twilioata[config.get("twilio.s_id")], twilioata[config.get("twilio.auth_key")]);
                var smsOptions = {
                    from: twilioata[config.get("twilio.number_key")],
                    to: countryCode + mobileNumber.toString(),
                    body: "NEW ORDER"
                };
                client.messages.create(smsOptions, function (err, message) {
                    logger.debug("=========Twilio==ER!==", err, message)
                });
            }

            cb(null);
            // var smsOptions = {
            //     from: "+18447077820",
            //     To: supplierPhone!=undefined && supplierPhone!="" && supplierPhone!=null ?supplierPhone.toString():"",
            //     Body: "NEW ORDER"
            // };
            // client.messages.create(smsOptions, function (err, message) {
            //     // console.log("err,vngfsdbgjkdfshb",err)
            //     cb(null);
            // });

        }],
        sendBranchPushNotification: ['sendNumber', function (cb) {
            console.log("device1..*************branch push notificatio,,,,,,,,", branchToken, branchDeviceType);
            console.log("..........................branch..........");
            cb(null);
        }],
        orderNumber: ['sendNumber', function (cb) {
            var sql = 'select * from orders where user_id=?';
            multiConnection[request.dbName].query(sql, [id], function (err, result) {
                if (err) {
                    logger.debug("========err12===============")
                    console.log("err.....", err);
                    cb(err);
                }
                else {
                    count = result.length;
                    if (result.length == 1) {
                        flag = 1;
                    }
                    cb(null);
                }
            })
        }],
        sendAdminMail: ['orderNumber', function (cb) {
            if (flag == 1) {
                emailTemp.UserFirstOrder(request, reply, AdminMail, order.id, userName, mobileNumber, area, landmark, building, houseNumber[0], function (err, result) {
                    if (err) {
                        console.log("..****fb register email*****....", err);
                    }
                })
                emailTemp.supplierNewOrder(request, reply, orderDetails, AdminMail, supplierEmail, order.id, supplierName, userName, mobileNumber, area, landmark, houseNumber[0], address_link, building, net_amount, created_on, schedule_date, payment_type, deliveryCharges, handling, urgent_price, quantity, function (err, result) {
                    if (err) {
                        console.log("..****fb register email*****....", err);
                    }
                })
            }
            else {
                emailTemp.supplierNewOrder(request, reply, orderDetails, AdminMail, supplierEmail, order.id, supplierName, userName, mobileNumber, area, landmark, houseNumber[0], address_link, building, net_amount, created_on, schedule_date, payment_type, deliveryCharges, handling, urgent_price, quantity, function (err, result) {
                    if (err) {
                        console.log("..****fb register email*****....", err);
                    }
                })
            }
            cb(null)
        }],

    }, function (err, result) {
        logger.debug(".......err.fina,.....................", err);
        if (err) {
            logger.debug("========err16===============")
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(order_data, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}
/**
 * @description used for making an order from user from web/app
 */
exports.genrateOrderV2 = async function (request, reply) {

    console.log("request.body ########################################################################## ", request.body);

    let dbName = request.dbName
    let customer_payment_id = request.body.customer_payment_id == undefined ? "" : request.body.customer_payment_id;
    let card_id = request.body.card_id == undefined ? "" : request.body.card_id;
    let payment_status = 0;
    var supplier_commission;
    var id = request.users.id;
    var accessToken;
    var cartId;

    var productList;

    var languageId;
    var user = {};
    var order = {};

    var paymentType = 3;
    var promoationType;

    var deviceToken;
    var supplierId;
    var deviceType;
    var userId;
    let have_pet = request.body.have_pet == undefined ? 0 : request.body.have_pet
    let parking_instructions = request.body.parking_instructions == undefined ? "" : request.body.parking_instructions;
    let cleaner_in = request.body.cleaner_in == undefined ? 0 : request.body.cleaner_in;
    let area_to_focus = request.body.area_to_focus == undefined ? "" : request.body.area_to_focus;
    let donate_to_someone = request.body.donate_to_someone || 0;
    let userDetails = await ExecuteQ.Query(request.dbName, "select * from user where id = ?", [request.users.id])
    let user_type_id = userDetails[0].user_type_id
    if (user_type_id == undefined || user_type_id == ""
        || user_type_id == null || user_type_id == 0) {
        let user_type_details = await ExecuteQ.Query(request.dbName, "select * from user_types limit 1", []);

        if (user_type_details && user_type_details.length > 0) {
            user_type_id = user_type_details[0].id
        } else {
            user_type_id = 0
        }
    }
    var no_payment = request.body.no_payment != undefined && request.body.no_payment != "" && request.body.no_payment != null ? request.body.no_payment : 0

    var userName;
    var message;
    var deliveryDate;
    var supplierEmail, deliveryCharges, handling, urgent_price, quantity;
    var building, houseNumber, payment_type, schedule_date, supplierPhone, branchToken, branchDeviceType, net_amount, supplierName, created_on, mobileNumber, area, landmark, address_link;
    var type = 1;
    var count = 0, flag = 0, applyCode = 0;
    var is_active = 0;
    var orderDetails = [], supplierIds = [], supplier_product_data, order_data = [], pickup_delivered_address = [];
    var offset = request.body.offset != undefined && request.body.offset != "" && request.body.offset != null ? request.body.offset : 4
    var agentIds = request.body.agentIds, isAgent = 0, agentArray, agentOrderDetail = {}, agentOrderItemDetail = [];
    var agentConnection, dateTime, booking_date, slots;
    let pres_image1 = request.body.pres_image1 != undefined ? request.body.pres_image1 : "";
    let pres_image2 = request.body.pres_image2 != undefined ? request.body.pres_image2 : "";
    let pres_image3 = request.body.pres_image3 != undefined ? request.body.pres_image3 : "";
    let pres_image4 = request.body.pres_image4 != undefined ? request.body.pres_image4 : "";
    let pres_image5 = request.body.pres_image5 != undefined ? request.body.pres_image5 : "";
    let pres_description = request.body.pres_description != undefined ? request.body.pres_description : "";
    var booking_date_time = request.body.date_time != undefined && request.body.date_time != "" ? request.body.date_time : "";
    var buffer_time = 0, duration = request.body.duration != undefined && request.body.duration != "" ? request.body.duration : 60;

    var from_address = request.body.from_address != undefined && request.body.from_address != "" ? request.body.from_address : "";
    var to_address = request.body.to_address != undefined && request.body.to_address != "" ? request.body.to_address : "";
    var booking_from_date = request.body.booking_from_date != undefined && request.body.booking_from_date != "" ? moment(request.body.booking_from_date).utcOffset(offset).format("YYYY-MM-DD HH:mm:ss") : "";
    var booking_to_date = request.body.booking_to_date != undefined && request.body.booking_to_date != "" ? moment(request.body.booking_to_date).utcOffset(offset).format("YYYY-MM-DD HH:mm:ss") : "";



    var from_latitude = request.body.from_latitude != undefined && request.body.from_latitude != "" ? request.body.from_latitude : 0.000000000
    var to_latitude = request.body.to_latitude != undefined && request.body.to_latitude != "" ? request.body.to_latitude : 0.000000000
    var from_longitude = request.body.from_longitude != undefined && request.body.from_longitude != "" ? request.body.from_longitude : 0.000000000
    var to_longitude = request.body.to_longitude != undefined && request.body.to_longitude != "" ? request.body.to_longitude : 0.000000000
    var servicetype = await agent.screenInfo(request.dbName);

    var tip_agent = request.body.tip_agent != undefined && request.body.tip_agent != "" && request.body.tip_agent != null ? request.body.tip_agent : 0

    if (booking_date_time != "") {
        dateTime = new Date(booking_date_time);
        booking_date = moment(dateTime).format("YYYY-MM-DD");
        slots = moment(dateTime).format("HH:mm:ss");
    }

    var liquor_bottle_deposit_tax = 0;
    var liquor_plt_deposit_tax = 0;
    var api_version = Universal.getVersioning(request.path);
    let order_day = request.body.order_day != undefined ? request.body.order_day : 0
    let type_id = request.body.type != undefined ? request.body.type : 0;
    let payment_after_confirmation = request.body.payment_after_confirmation != undefined ? request.body.payment_after_confirmation : 0;
    let order_time = request.body.order_time != undefined ? request.body.order_time : "00:00:00";

    var cat_ids = [], sup_ids = [];

    var discounted_supplier_ids = []
    var self_pickup = request.body.self_pickup != undefined && request.body.self_pickup != "" ? request.body.self_pickup : 0
    let adds_on_delivery_admin_charges = 0, delivery_admin_supplier_charge = 0, adds_on_arr = [], productIds = [];
    let unique_id = request.body.gateway_unique_id != undefined ? (request.body.gateway_unique_id) : "";
    let currency = request.body.currency != undefined ? request.body.currency : "usd";
    let payment_token = request.body.payment_token;
    let myFatoorahInvoiceId = request.body.invoiceId;
    let card_payment_id = "", payment_source = "";
    var transaction_id = "";
    let deliveryChargeAlgo = 0;//0 for radius wise 1 for supplier-product-max wise
    let deliveryChargeData = await Universal.getDeliveryChargeAlgo(request.dbName);
    if (deliveryChargeData && deliveryChargeData.length > 0) {
        deliveryChargeAlgo = deliveryChargeData[0].value;
    }


    var preparation_time = request.body.preparation_time != undefined ? request.body.preparation_time : "00:00:00";
    let drop_off_date = request.body.drop_off_date != undefined ? request.body.drop_off_date : ""
    let questionToBeSave = '';
    let addOn = request.body.addOn ? request.body.addOn : null;
    const questions = request.body.questions;
    const use_refferal = request.body.use_refferal || 0;
    const use_loyality_point = request.body.use_loyality_point || 0;
    const payer_id = request.body.payer_id || "";
    let referralAmount = 0, orderNetAmount = 0;
    let sIds;
    let zelle_receipt_url = request.body.payment_token !== undefined && request.body.payment_token !== null ? request.body.payment_token : ""
    let user_service_charge = request.body.user_service_charge !== undefined && request.body.user_service_charge !== "" && request.body.user_service_charge !== null ? request.body.user_service_charge : 0
    let user_gift_ids = request.body.user_gift_ids || [];
    let giftAmount = request.body.gift_amount || 0;
    let orderResonseObj = {};
    let countryCode = ""
    let customer_email = "";


    let wallet_discount_amount = request.body.wallet_discount_amount != undefined ? request.body.wallet_discount_amount : 0
    let wallet_amount_used = 0;

    let wallet_module = 0;

    let walletQuery = "select `key`,`value` from tbl_setting where `key`=? ";
    let walletData = await ExecuteQ.Query(request.dbName, walletQuery, ["wallet_module"]);

    AdminMail = await Universal.getSuperAdminEmail(request.dbName);

    if (walletData && walletData.length > 0) {
        if (parseInt(walletData[0].value) === 1) {
            wallet_module = 1;
        }
    }


    let is_cutlery_required = request.body.is_cutlery_required == undefined ? 0 : request.body.is_cutlery_required
    let userWalletDetails = await ExecuteQ.Query(request.dbName, "select wallet_amount from user where id = ?", [id]);
    let wallet_amount = 0;

    let walletLeftAmount = 0;
    let is_paid_through_wallet = request.body.is_paid_through_wallet == undefined ? 0 : 1

    schedule_date = request.body.schedule_date !== undefined ? request.body.schedule_date : "";

    let schedule_end_date = request.body.schedule_end_date !== undefined ? request.body.schedule_end_date : "";
    let slot_id = request.body.slot_id == undefined ? 0 : request.body.slot_id
    let table_request_id = request.body.table_request_id


    let booked_slot_id = request.body.booked_slot_id


    let is_schedule = request.body.is_schedule !== undefined ? request.body.is_schedule : 0

    var user_subscription_delivery = 0, user_subscription_supplier_id = "", user_subscription_id = "";
    var user_subscription_data = request.body.user_subscription_data ? request.body.user_subscription_data : {}
    var slot_price = request.body.slot_price == undefined ? 0 : request.body.slot_price
    let is_dine_in = request.body.is_dine_in == undefined ? 0 : request.body.is_dine_in
    let table_id = request.body.table_id == undefined ? 0 : request.body.table_id;
    let have_coin_change = request.body.have_coin_change || 0;

    let loyalityPointDiscountAmount = 0, totalLoayaloyDiscountAmount = 0, totalLoayaloyDiscountAmountByCat = 0;
    let order_source = request.body.order_source != undefined ? request.body.order_source : 3;
    let totalAddOnAmount = 0;
    var suplrIds = [];

    if (parseInt(is_dine_in) == 1 && parseInt(table_request_id) > 0) {
        let data = await ExecuteQ.Query(request.dbName, "select * from user_table_booked where id=?", [table_request_id]);

        if (data && data.length > 0) {
            schedule_date = data[0].schedule_date
            schedule_end_date = data[0].schedule_end_date
        }

    }




    let order_delivery_type = request.body.order_delivery_type == undefined ? 0 : request.body.order_delivery_type
    let agent_verification_code = Math.floor(Math.random() * 10000);
    let vehicle_number = request.body.vehicle_number !== undefined && request.body.vehicle_number !== null &&
        request.body.vehicle_number !== "" ? request.body.vehicle_number : ""
    let delivery_company_id = request.body.delivery_company_id != undefined && request.body.delivery_company_id != "" ? request.body.delivery_company_id : 0
    let seating_capacity = request.body.seating_capacity !== undefined && request.body.seating_capacity !== "" ? request.body.seating_capacity : 0;
    var supplierDatas = [];
    let no_touch_delivery = request.body.no_touch_delivery !== undefined && request.body.no_touch_delivery !== "" ? request.body.no_touch_delivery : 0;
    let payment_status_after_confirm = request.body.payment_status_after_confirm !== undefined && request.body.payment_status_after_confirm !== "" ? request.body.payment_status_after_confirm : 0;
    let grouping_id = Math.floor(Math.random() * 10000);


    async.auto({
        getValue: async function (callback) {
            if (!(request.body.cartId)) {
                var msg = "cart id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.promoCode)) {
                request.body.promoCode = 0;
            } else {
                applyCode = 1;
            }
            if (!(request.body.promoId)) {
                request.body.promoId = 0
            }

            if (!(request.body.discountAmount)) {
                request.body.discountAmount = 0;
            }

            if (request.body.paymentType == 0 ||
                request.body.paymentType == 1 ||
                request.body.paymentType == 2 ||
                request.body.paymentType == 3 ||
                request.body.paymentType == 4 ||
                request.body.paymentType == 5
            ) {
                paymentType = request.body.paymentType;
            }
            else {
                var msg = "Enter Payment Type"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            accessToken = request.body.accessToken;
            cartId = request.body.cartId;
            languageId = request.body.languageId;
            user.languageId = request.body.languageId;
            type = request.body.isPackage;

            callback(null);

        },
        checkDeliveryArea: ["getValue", async function (callback) {
            let cartQuery = `select *,sb.supplier_id, sb.latitude as supplier_latitude,sb.longitude as supplier_longitude,ua.latitude as user_latitude,ua.longitude as user_longitude
        from cart c 
        join supplier_branch sb on c.supplier_branch_id=sb.id 
        join user_address ua on c.user_id=ua.user_id 
        where c.id=${cartId}`;
            let cardData = await ExecuteQ.Query(request.dbName, cartQuery, []);
            //console.log('cardData',cardData);
            if (cardData.length) {
                from_latitude = cardData[0].supplier_latitude || 0.0;
                from_longitude = cardData[0].supplier_longitude || 0.0;
                liquor_plt_deposit_tax = cardData[0].liquor_plt_deposit_tax || 0.0;
                liquor_bottle_deposit_tax = cardData[0].liquor_bottle_deposit_tax || 0.0;
                to_latitude = cardData[0].user_latitude || 0.0
                to_longitude = cardData[0].user_longitude || 0.0;
                user_subscription_supplier_id = cardData[0].supplier_id
                callback(null);
            } else {
                callback(null)
            }



        }],
        agentValidation: ["checkDeliveryArea", async function (callback) {
            if (agentIds && agentIds.length > 0) {
                var GetAgentDbData = await getAgentDbInformation(request.dbName);
                agentConnection = await RunTimeAgentConnection(GetAgentDbData);
                var sqlQuery = "select id from cbl_user where id IN(?) and deleted_by=?";
                var st = agentConnection.query(sqlQuery, [agentIds, 0], async function (err, agentData) {
                    // logger.debug("===ST==SQL",st.sql);
                    if (err) {
                        callback(err)
                    }

                    else {
                        if (agentData && agentData.length > 0) {
                            agentArray = agentData;
                            isAgent = 1;
                            try {
                                var booked_slots = await bookedSlots(agentConnection, booking_date, agentData[0].id);
                                buffer_time = await bufferTime(agentConnection);
                                var is_slots_booked = booked_slots.filter(function (val) {
                                    return slots.indexOf(val) != -1;
                                });
                                if (is_slots_booked && is_slots_booked.length > 0) {
                                    var msg = "Sorry! Agent Are Not Avail On This Slots"
                                    return sendResponse.sendErrorMessage(msg, reply, 400);
                                }
                                else {
                                    callback(null);
                                }
                            } catch (Err) {
                                logger.debug(Err)
                                return sendResponse.somethingWentWrongError(reply);
                            }

                        }

                        else {
                            var msg = "Invalid Agent"
                            //logger.debug("=======discounted_product_ids========",discounted_product_ids);
                            return sendResponse.sendErrorMessage(msg, reply, 400);
                        }
                    }
                })
            }
            else {
                var servicetype = await agent.screenInfo(request.dbName);
                if (servicetype.type == 1 || servicetype.type == 2) {
                    isAgent = 1
                    callback(null)
                }
                else {
                    callback(null)
                }
            }
        }
        ],

        getCartValue: ['agentValidation', function (callback) {

            getCartProductList(request.dbName, reply, id, cartId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    promoationType = result[0].promoationType;
                    delivery_admin_supplier_charge = result && result.length > 0 ? parseFloat(result[0].handling_admin) + parseFloat(result[0].delivery_charges) : 0
                    productList = result;
                    supplier_product_data = groupBy(productList, "supplier_id");

                    if (request.service_type == 1 || request.service_type == 2) {
                        if (result[0].user_delivery_address == 0 && self_pickup == 0) {
                            let msg = "Please add address to continue"
                            return sendResponse.sendErrorMessage(msg, reply, 400);
                        }
                    }

                    _.each(productList, function (i) {

                        totalLoayaloyDiscountAmount = totalLoayaloyDiscountAmount + parseFloat(i.loyality_discount)
                        totalLoayaloyDiscountAmountByCat = totalLoayaloyDiscountAmountByCat + parseFloat(i.loyality_discount)
                        productIds.push(i.product_id)
                        supplierIds.push(i.supplier_id);
                        cat_ids.push(i.category_id);
                        sup_ids.push(i.supplier_id);

                    })

                    callback(null);
                }
            })
        }],
        walletCheck: ['getCartValue', async function (callback) {
            if (parseInt(wallet_module) === 1 && parseInt(paymentType) === 4) {
                orderNetAmount = productList[0].net_amount;
                wallet_amount = userWalletDetails[0].wallet_amount
                if (wallet_amount < orderNetAmount) {
                    return sendResponse.sendErrorMessage("Not enough wallet money", reply, 400);
                } else {
                    callback(null);
                }
            } else {
                callback(null);
            }

        }],
        referralDeduction: ['walletCheck', async function (callback) {
            orderNetAmount = (productList[0].net_amount);
            let referralFeatureData = await ExecuteQ.Query(request.dbName, "select * from tbl_setting where `key`=? and `value`=?", ["referral_feature", "1"])
            let referralBalLimitCheck = await ExecuteQ.Query(request.dbName, "select * from tbl_setting where `key`=? and `value`=?", ["enable_referral_bal_limit", "1"])

            if (referralFeatureData && referralFeatureData.length > 0) {
                if (use_refferal == 1) {
                    referralAmount = await Universal.getUserLeftReferralAmount(request.dbName, request.users.id);

                    if (referralAmount > 0) {
                        if (parseFloat(referralAmount) >= parseFloat(orderNetAmount)) {
                            referralAmount = orderNetAmount;
                        }
                        if (referralBalLimitCheck && referralBalLimitCheck.length > 0) {
                            let referBalLimit = await ExecuteQ.Query(request.dbName,
                                "select value from tbl_setting where `key`=?", ["referral_bal_limit_per_order"])
                            if (referBalLimit && referBalLimit.length > 0) {
                                if (parseFloat(referralAmount) >= parseFloat(referBalLimit[0].value)) {
                                    referralAmount = parseFloat(referBalLimit[0].value)
                                }
                            }
                        }
                        let usedRefQuery = "insert into referral_used(used_by,used_price) value (?,?)"
                        await ExecuteQ.Query(request.dbName, usedRefQuery, [request.users.id, referralAmount]);
                        orderNetAmount = parseFloat(orderNetAmount) - parseFloat(referralAmount)
                        callback(null)
                    }
                    else {
                        callback(null)
                    }

                }
                else {
                    callback(null)
                }
            } else {
                callback(null)
            }
        }],
        loyalityPointDiscount: ['referralDeduction', async function (callback) {
            if (use_loyality_point == 1) {
                let userLoyality = await ExecuteQ.Query(request.dbName,
                    `select total_loyality_amount,used_loyality_amount from user where id=?`, [request.users.id]
                )
                loyalityPointDiscountAmount = parseFloat(userLoyality[0].total_loyality_amount) > parseFloat(userLoyality[0].used_loyality_amount) ? parseFloat(userLoyality[0].total_loyality_amount) - parseFloat(userLoyality[0].used_loyality_amount) : 0;

                loyalityPointDiscountAmount = parseFloat(loyalityPointDiscountAmount) >= parseFloat(orderNetAmount) ? parseFloat(orderNetAmount) : loyalityPointDiscountAmount;
                console.log("=====loyalityPointDiscountAmount=====", loyalityPointDiscountAmount, orderNetAmount);

                totalLoayaloyDiscountAmount = (parseFloat(totalLoayaloyDiscountAmount) + parseFloat(loyalityPointDiscountAmount)) >= parseFloat(orderNetAmount) ? parseFloat(orderNetAmount) : parseFloat(totalLoayaloyDiscountAmount) + parseFloat(loyalityPointDiscountAmount);
                console.log("=====totalLoayaloyDiscountAmount=====", totalLoayaloyDiscountAmount, orderNetAmount);

                await ExecuteQ.Query(request.dbName, `update user set used_loyality_amount=used_loyality_amount+? where id=?`, [loyalityPointDiscountAmount, request.users.id])
                callback(null)
            }
            else {
                console.log("=====orderNetAmount====referralAmount====3>>", orderNetAmount, referralAmount, request.dbName);
                callback(null)
            }
        }],
        giftDeduction: ['loyalityPointDiscount', async function (callback) {
            orderNetAmount = parseFloat(orderNetAmount) - parseFloat(loyalityPointDiscountAmount)
            console.log("=======AFTER==Loyalit=Sub==orderNetAmount,totalLoayaloyDiscountAmount=", orderNetAmount, totalLoayaloyDiscountAmount)
            if (user_gift_ids && user_gift_ids.length > 0) {
                // giftAmount
                let usedGiftData = await ExecuteQ.Query(request.dbName, "select id from user_gift_card  where id IN (?) and is_used=?", [user_gift_ids, 1]);
                if (usedGiftData && usedGiftData.length > 0) {
                    let msg = "gift already used"
                    return sendResponse.sendErrorMessage(msg, reply, 400);
                }
                else {
                    let userGiftData = await ExecuteQ.Query(request.dbName, `select id,price,price_type,percentage_value from 
                user_gift_card where id IN(?) and is_used!=?`, [user_gift_ids, 1]);
                    if (userGiftData && userGiftData.length > 0) {

                        logger.debug("=referralAmount===giftAmount==", referralAmount, giftAmount);
                        await ExecuteQ.Query(request.dbName, `update user_gift_card set is_used=? where id IN(?) and is_used!=?`, [1, user_gift_ids, 1]
                        )
                        callback(null)
                    }
                    else {
                        let msg = "gift not exist"
                        return sendResponse.sendErrorMessage(msg, reply, 400);
                    }
                }
            }
            else {
                callback(null)
            }
        }],
        userSubscriptionDeduction: ['giftDeduction', async function (callback) {
            //orderNetAmount
            let isUserSubscriptionEnabled = await Universal.isUserSubscriptionEnabled(request.dbName);
            if (isUserSubscriptionEnabled == "1" && Object.keys(user_subscription_data).length !== 0 && user_subscription_data.constructor === Object) {
                var current_datetime = moment().utcOffset(offset).format('YYYY-MM-DD HH:mm:ss');
                let userSubscription = await ExecuteQ.Query(request.dbName, "select us.id,us.start_date,us.end_date,us.subscription_plan_id, usp.*, uspb.benefit_id,usb.title as benefit_title, usb.description as benefit_description, usb.benefit_id as benefit_unique_id, usb.benefit_type from user_subscription us join user_subscription_plans usp on us.subscription_plan_id=usp.id join user_subscription_plan_benefits uspb on us.subscription_plan_id=uspb.plan_id join user_subscription_benefits usb on uspb.benefit_id=usb.id where user_id=? and status='1' and is_deleted='0' and is_cancelled='0' and ('" + current_datetime + "' > start_date and '" + current_datetime + "' < end_date) and usb.is_blocked='0'", [request.users.id]);
                if (userSubscription[0]) {

                    var total_discount_amount = 0;
                    var benefit_types_list_ar = [];
                    var discount_amount_per_benefit_ar = [];

                    for (const userSub of userSubscription) {
                        if (Object.keys(user_subscription_data).indexOf(userSub.benefit_type) !== -1) {//contains key as FDW/FDM/FDY(benefit_type))
                            if (
                                userSub.benefit_type == 'FD' &&
                                parseFloat(productList[0].delivery_charges) > 0
                            ) { //FDW,FDM,FDY
                                if (
                                    user_subscription_data[userSub.benefit_type] &&
                                    parseFloat(user_subscription_data[userSub.benefit_type]) == parseFloat(productList[0].delivery_charges)
                                ) {//contains value equal to delivery charges
                                    user_subscription_delivery = 1
                                    orderNetAmount = parseFloat(orderNetAmount) - parseFloat(productList[0].delivery_charges);
                                    total_discount_amount += parseFloat(productList[0].delivery_charges);
                                    benefit_types_list_ar.push(userSub.benefit_type)
                                    discount_amount_per_benefit_ar.push(userSub.benefit_type + "(-" + productList[0].delivery_charges + ")")
                                }
                            } else if (
                                userSub.benefit_type == 'B1G1' &&
                                user_subscription_data[userSub.benefit_type] &&
                                user_subscription_data[userSub.benefit_type] > 0
                            ) { //B1G1W, B1G1M, B1G1Y
                                orderNetAmount = parseFloat(orderNetAmount) - parseFloat(user_subscription_data[userSub.benefit_type]);
                                total_discount_amount += parseFloat(user_subscription_data[userSub.benefit_type]);
                                benefit_types_list_ar.push(userSub.benefit_type)
                                discount_amount_per_benefit_ar.push(userSub.benefit_type + "(-" + user_subscription_data[userSub.benefit_type] + ")")
                            }
                        }
                    }
                    var benefit_types_list = benefit_types_list_ar.join(",");
                    var discount_amount_per_benefit = discount_amount_per_benefit_ar.join(",");
                    var sub_result = await ExecuteQ.Query(request.dbName, 'insert into orders_user_subscription (user_id,supplier_id,subscription_id,order_total_amount,total_discount_amount,benefit_types_list,discount_amount_per_benefit) value (?,?,?,?,?,?,?,?)', [
                        request.users.id,//user_id
                        user_subscription_supplier_id,//supplier_id
                        userSubscription[0].subscription_plan_id,//subscription_id
                        orderNetAmount,//order_total_amount
                        total_discount_amount,
                        benefit_types_list,
                        discount_amount_per_benefit
                    ])
                    user_subscription_id = sub_result.insertId;
                }
                else {
                    callback(null)
                }
            } else {
                callback(null)
            }
        }],
        makePayment: ['userSubscriptionDeduction', async function (callback) {
            if (no_payment == 1) {
                let userData = await Universal.getUserData(dbName, request.headers.authorization);
                console.log("nopayment")
                if ((unique_id) == config.get("payment.strip.unique_id") && dbName == "billymorris_0194") {
                    console.log("==BillyMOris=Payment>>")
                    payment_source = "stripe";
                    console.log("2222222222+===========orderNetAmount============", dbName, orderNetAmount)
                    let strip_secret_key_data = await Universal.getStripSecretKey(dbName);
                    if (strip_secret_key_data && strip_secret_key_data.length > 0) {

                        const stripe = require('stripe')(strip_secret_key_data[0].value);
                        let payment_object = {};
                        if (customer_payment_id !== "" && card_id !== "") {
                            payment_object = {
                                amount: Math.round(parseFloat((orderNetAmount - 1) * 100)),
                                currency: currency,
                                source: card_id,
                                customer: customer_payment_id,
                                capture: true,
                                description: '(' + userData[0].email + ') Made an booking',
                            }
                        } else {
                            payment_object = {
                                amount: Math.round(parseFloat((orderNetAmount - 1) * 100)),
                                currency: currency,
                                source: payment_token,
                                capture: true,
                                description: '(' + userData[0].email + ') Made an booking',
                            }
                        }
                        console.log("payment_object === ", payment_object);

                        stripe.charges.create(payment_object, async function (err, charge) {
                            console.log("==Payment===ERR!==>>", err);
                            if (err) {
                                let msg = config.get("error_msg.payment.error");
                                switch (err.type) {
                                    case 'StripeCardError':
                                        // A declined card error
                                        msg = err.message; // => e.g. "Your card's expiration year is invalid."
                                        break;
                                    case 'StripeRateLimitError':
                                        // Too many requests made to the API too quickly
                                        break;
                                    case 'StripeInvalidRequestError':
                                        // Invalid parameters were supplied to Stripe's API
                                        msg = err.message
                                        break;
                                    case 'StripeAPIError':
                                        // An error occurred internally with Stripe's API
                                        break;
                                    case 'StripeConnectionError':
                                        // Some kind of error occurred during the HTTPS communication
                                        break;
                                    case 'StripeAuthenticationError':
                                        // You probably used an incorrect API key
                                        break;
                                    default:
                                        // Handle any other types of unexpected errors
                                        msg = config.get("error_msg.payment.error");
                                        break;
                                }

                                console.log("==Payment===ERR!==>>", err, msg);
                                return sendResponse.sendErrorMessage(
                                    msg,
                                    reply, 400);
                            }
                            else {
                                card_payment_id = charge.id
                                payment_status = 1
                                callback(null)
                            }
                        }
                        );
                    }
                    else {
                        return sendResponse.sendErrorMessage(
                            await Universal.getMsgText(
                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                            reply, 400);
                    }

                }
                else {
                    callback(null)
                }


            } else {
                try {
                    /**
                    * ------------add new for paystack card save amit ----\\
                    */
                    let paystack_card_save = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=?", ["paystack_card_save"]);
                    console.log("paystack_card_save>>>>>>>>>>makePayment>>>>>>>", paystack_card_save)
                    let enable_paystack_card_save = 0;
                    if (paystack_card_save && paystack_card_save.length > 0 && paystack_card_save[0].value == "1") {
                        enable_paystack_card_save = 1;
                    }
                    //----------------end---------------\\
                    let userData = await Universal.getUserData(dbName, request.headers.authorization);
                    if (parseInt(paymentType) == 1 && payment_after_confirmation == 0) {
                        console.log("innnnnnnnnnnnnnnnnnnnnnnnnnn")
                        if ((unique_id) == config.get("payment.mumybene.unique_id")) {
                            payment_source = "mumybene";
                            let mumybene_key_data = await Universal.getMumybeneKeyData(dbName);
                            if (mumybene_key_data) {

                                var mumybene_username = mumybene_key_data[config.get("payment.mumybene.mumybene_username")]
                                var mumybene_password = mumybene_key_data[config.get("payment.mumybene.mumybene_password")]
                                var phoneNumber = request.body.mobile_no;// ? request.body.mobile_no : "0954755348";
                                var service_provider = request.body.service_provider;// ? request.body.mobile_no : "0954755348";
                                var paymentReference = "order_" + (+ new Date()); //"Testabc0112";

                                var transactionAmount = orderNetAmount//"100";
                                var baseUrl = "http://test.543.cgrate.co.zm:55555/Konik/KonikWs"

                                let xml = `<soapenv:Envelope
                            xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                            xmlns:kon="http://konik.cgrate.com">
                            <soapenv:Header xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                                <wsse:Security xmlns:mustUnderstand="1">
                                    <wsse:UsernameToken xmlns:Id="UsernameToken-1" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
                                        <wsse:Username xmlns="http://konik.cgrate.com">`+ mumybene_username + `</wsse:Username>
                                        <wsse:Password xmlns:Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">`+ mumybene_password + `</wsse:Password>
                                    </wsse:UsernameToken>
                                </wsse:Security>
                            </soapenv:Header>
                            <soapenv:Body>
                            <kon:processCustomerPayment>
                            <transactionAmount>`+ transactionAmount + `</transactionAmount>
                            <customerMobile>`+ phoneNumber + `</customerMobile>
                            <paymentReference>`+ paymentReference + `</paymentReference>
                            </kon:processCustomerPayment>
                            </soapenv:Body>
                            </soapenv:Envelope>`;
                                var options = {
                                    method: 'POST',
                                    url: baseUrl,
                                    headers: {
                                        'Content-Type': 'text/xml;charset=utf-8',
                                        'Accept-Encoding': 'gzip,deflate',
                                        'Content-Length': xml.length
                                    },
                                    body: xml,
                                    timeout: 60000
                                };


                                web_request(options, async function (error, response, body) { //0,1,6,7,48,62,63,75,565

                                    if (error) {
                                        if (error.code == "ESOCKETTIMEDOUT") {


                                            let xml1 = `<soapenv:Envelope
                                        xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                                        xmlns:kon="http://konik.cgrate.com">
                                        <soapenv:Header xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                                            <wsse:Security xmlns:mustUnderstand="1">
                                                <wsse:UsernameToken xmlns:Id="UsernameToken-1" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
                                                    <wsse:Username xmlns="http://konik.cgrate.com">`+ mumybene_username + `</wsse:Username>
                                                    <wsse:Password xmlns:Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">`+ mumybene_password + `</wsse:Password>
                                                </wsse:UsernameToken>
                                            </wsse:Security>
                                        </soapenv:Header>
                                        <soapenv:Body>
                                        <kon:queryCustomerPayment>
                                        <paymentReference>`+ paymentReference + `</paymentReference>
                                        </kon:queryCustomerPayment>
                                        </soapenv:Body>
                                        </soapenv:Envelope>`;
                                            var options1 = {
                                                method: 'POST',
                                                url: "http://test.543.cgrate.co.zm:55555/Konik/KonikWs",
                                                headers: {
                                                    'Content-Type': 'text/xml;charset=utf-8',
                                                    'Accept-Encoding': 'gzip,deflate',
                                                    'Content-Length': xml1.length
                                                },
                                                body: xml1
                                            };

                                            web_request(options1, async function (error1, response1, body1) {

                                                if (error1) {

                                                    return sendResponse.sendErrorMessage(
                                                        await Universal.getMsgText(
                                                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                        reply, 400);
                                                } else if (!error1 && response1.statusCode == 200) {

                                                    var xml2js1 = require('xml2js');
                                                    var parser1 = new xml2js1.Parser({ explicitArray: false, trim: true });
                                                    parser1.parseString(body1, (err1, result1) => {

                                                        var responseCode1 = result1['env:Envelope']['env:Body']['ns2:queryCustomerPaymentResponse']['return']['responseCode']
                                                        if (responseCode1 == "0") {
                                                            var paymentID1 = result1['env:Envelope']['env:Body']['ns2:queryCustomerPaymentResponse']['return']['paymentID']
                                                            card_payment_id = paymentID1
                                                            transaction_id = paymentReference
                                                            payment_source = "543 (" + service_provider + ")"
                                                            payment_status = 1
                                                            callback(null)
                                                        } else {
                                                            return sendResponse.sendErrorMessage("Timeout: You did not respond to the prompt on your phone in time, please try again.", reply, 400);
                                                        }
                                                    });
                                                } else {
                                                    return sendResponse.sendErrorMessage(
                                                        await Universal.getMsgText(
                                                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                        reply, 400);
                                                }
                                            });
                                        } else {
                                            return sendResponse.sendErrorMessage(
                                                await Universal.getMsgText(
                                                    languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                reply, 400);
                                        }
                                    } else if (!error && response.statusCode == 200) {
                                        var xml2js = require('xml2js');
                                        var parser = new xml2js.Parser({ explicitArray: false, trim: true });
                                        console.log("parser -- ", JSON.stringify(parser))
                                        parser.parseString(body, (err, result) => {
                                            var responseCode = result['env:Envelope']['env:Body']['ns2:processCustomerPaymentResponse']['return']['responseCode']
                                            console.log("responseCode ==== ", responseCode)
                                            if (responseCode == "0") {
                                                var paymentID = result['env:Envelope']['env:Body']['ns2:processCustomerPaymentResponse']['return']['paymentID']
                                                card_payment_id = paymentID
                                                transaction_id = paymentReference
                                                payment_source = "543 (" + service_provider + ")"
                                                payment_status = 1
                                                console.log("11111111111111111111111111111", paymentReference)
                                                callback(null)
                                            } else {
                                                //var responseMessage = result['env:Envelope']['env:Body']['ns2:processCustomerPaymentResponse']['return']['responseMessage']
                                                var responseMessage = "";
                                                if (responseCode == "17") {
                                                    // responseMessage = "Timeout: You did not respond to the prompt on your phone in time, please try again.";
                                                    responseMessage = "This transaction has timedout, please try again.";
                                                }
                                                else if (responseCode == "1") {
                                                    responseMessage = "Insufficient funds: It appears your account has insufficient funds, please choose a different payment method"
                                                }
                                                else if (responseCode == "79") {
                                                    responseMessage = "You're not currently registered to make payments. To register follow the instructions below:\n1. Add +260211840008 as a WhatsApp contact \n 2. Send “Hello” and follow the instructions \n"
                                                }
                                                else if (responseCode == "6") {
                                                    responseMessage = "You're not currently registered to make payments. To register follow the instructions below:\n1. Add +260211840008 as a WhatsApp contact \n 2. Send “Hello” and follow the instructions \n"
                                                }
                                                else {
                                                    responseMessage = "Sorry, an error occurred. Please try again"
                                                }
                                                console.log(responseCode, "---------responseMessage ------------------- ", responseMessage)

                                                return sendResponse.sendErrorMessage(responseMessage, reply, 400);
                                            }
                                        });
                                    } else {
                                        console.log("0101010101010101010101010101010101010101")
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                });
                            } else {
                                console.log("1212121212121212121212121212121212121212")
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }
                        }
                        else if ((unique_id) == config.get("payment.peach.unique_id")) {
                            payment_source = "peach";
                            let peach_secret_key_data = await Universal.getPeachSecretKey(request.dbName);

                            //if(peach_secret_key_data && peach_secret_key_data.length>0){
                            if (Object.keys(peach_secret_key_data).length > 0) {
                                console.log("customer_payment_id ========== ", customer_payment_id)

                                let url = "https://test.oppwa.com/v1/registrations/" + customer_payment_id + "/payments";
                                let headers = {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                    'Authorization': 'Bearer ' + peach_secret_key_data[config.get("payment.peach.peach_auth_token")] //OGFjN2E0Yzk3MTEyOWYyMjAxNzExNjI2YWYxYjA4N2J8SlpSeFljNnRtbg==' 
                                };

                                var amountForPeachSandbox = parseInt(orderNetAmount);

                                let obj = {
                                    'entityId': peach_secret_key_data[config.get("payment.peach.peach_entityid")],//'8ac7a4c771129f2401711626cae30c42',
                                    'amount': amountForPeachSandbox,//orderNetAmount,
                                    'currency': currency,
                                    'paymentType': 'PA',
                                    'shopperResultUrl': 'https://peachpayments.docs.oppwa.com/tutorials/server-to-server'
                                };

                                var options = {
                                    method: 'POST',
                                    url: url,
                                    headers: headers,
                                    form: obj,
                                    json: true
                                };
                                console.log("==options=", options)
                                web_request(options, async function (error, response, body) {
                                    console.log(error, "##############################################################", body)
                                    if (error) {
                                        console.log("11111111111111111 error ----- ", error)
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        if (body && body["result"]) {
                                            if (body["result"]["code"] == "000.000.000" || body["result"]["code"] == "000.100.110" || body["result"]["code"] == "000.100.110" || body["result"]["code"] == "000.100.111" || body["result"]["code"] == "000.100.112" || body["result"]["code"] == "000.200.000") {
                                                payment_status = 1
                                                card_payment_id = body.id;
                                                callback(null)
                                            }
                                            else {
                                                return sendResponse.sendErrorMessage(body["result"]["description"], reply, 400);
                                            }
                                        }
                                        else {
                                            return sendResponse.sendErrorMessage("Sorry Payment Failed", reply, 400);
                                        }
                                    }
                                });


                            }
                            else {
                                console.log("222222222222222222222error ----- ", error)
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }

                        }

                        else if ((unique_id) == "applepay" || (unique_id) == "ApplePay" || (unique_id) == "applePay") {

                            card_payment_id = payment_token;
                            payment_status = 1
                            payment_source = "applepay"

                            callback(null)

                        }

                        else if ((unique_id) == config.get("payment.paymaya.unique_id")) {
                            payment_source = "paymaya";
                            let getPaymayaKeys = await Universal.getPayMayaKeys(request.dbName);
                            let userCards = await checkUserCards(request.dbName, userData[0].id, payment_source);
                            logger.debug("========userCards payamaya a===", userCards)
                            try {
                                aamount = Math.round(parseFloat(orderNetAmount))
                                var createPayment = await createPaymentFunction(request.dbName, userCards[0].card_id, userCards[0].customer_payment_id, getPaymayaKeys.paymaya_basic_auth, aamount, currency);
                                console.log(createPayment, "thisthisthistisbdasuvfuyveufv")
                                if (createPayment.isPaid == true) {
                                    payment_status = 1;
                                    callback(null)
                                } else {
                                    payment_status = 0;
                                    callback(null)
                                }
                            } catch (err) {
                                console.log("=========paymaya=err======", err)
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                    reply, 400);
                            }


                        }

                        else if ((unique_id) == config.get("payment.strip.unique_id")) {
                            console.log("stripe--------------------")
                            payment_source = "stripe";
                            logger.debug("2222222222+===========request.dbName============", dbName)
                            let strip_secret_key_data = await Universal.getStripSecretKey(dbName);
                            logger.debug("111111111111111==card_id=customer_payment_id=STRIP=DATA==>>", card_id, customer_payment_id, strip_secret_key_data, Math.round(parseFloat(productList[0].net_amount * 100)))
                            if (strip_secret_key_data && strip_secret_key_data.length > 0) {
                                const stripe = require('stripe')(strip_secret_key_data[0].value);
                                let payment_object = {};
                                if (customer_payment_id !== "" && card_id !== "") {
                                    payment_object = {
                                        amount: Math.round(parseFloat(orderNetAmount * 100)),
                                        currency: currency,
                                        source: card_id,
                                        customer: customer_payment_id,
                                        capture: true,
                                        description: '(' + userData[0].email + ') Made an booking',
                                    }
                                } else {
                                    payment_object = {
                                        amount: Math.round(parseFloat(orderNetAmount * 100)),
                                        currency: currency,
                                        source: payment_token,
                                        capture: true,
                                        description: '(' + userData[0].email + ') Made an booking',
                                    }
                                }
                                console.log("payment_object === ", payment_object)
                                stripe.charges.create(payment_object, async function (err, charge) {
                                    console.log("==Payment===ERR!==>>*******************", err, charge);
                                    if (err) {
                                        let msg = config.get("error_msg.payment.error");
                                        switch (err.type) {
                                            case 'StripeCardError':
                                                // A declined card error
                                                msg = err.message; // => e.g. "Your card's expiration year is invalid."
                                                break;
                                            case 'StripeRateLimitError':
                                                // Too many requests made to the API too quickly
                                                break;
                                            case 'StripeInvalidRequestError':
                                                // Invalid parameters were supplied to Stripe's API
                                                msg = err.message
                                                break;
                                            case 'StripeAPIError':
                                                // An error occurred internally with Stripe's API
                                                break;
                                            case 'StripeConnectionError':
                                                // Some kind of error occurred during the HTTPS communication
                                                break;
                                            case 'StripeAuthenticationError':
                                                // You probably used an incorrect API key
                                                break;
                                            default:
                                                // Handle any other types of unexpected errors
                                                msg = config.get("error_msg.payment.error");
                                                break;
                                        }

                                        console.log("==Payment===ERR!==>>", err, msg);
                                        return sendResponse.sendErrorMessage(
                                            msg,
                                            reply, 400);
                                    }
                                    else {
                                        card_payment_id = charge.id
                                        payment_status = 1
                                        callback(null)
                                    }
                                }
                                );
                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }

                        }

                        else if ((unique_id) == "clover") {
                            payment_source = "clover";
                            let getCloverKeys = await Universal.getCloverKeys(request.dbName);
                            let aamount = Math.round(parseFloat(orderNetAmount));
                            let basic_auth = config.get("payment.clover.secret_token")
                            let header = {
                                Authorization: `Bearer ${basic_auth}`,
                                'Content-Type': `application/json`
                            };
                            var obj = {
                                ecomind: 'ecom',
                                amount: aamount,
                                currency: currency,
                                source: payment_token
                            }


                            let baseurll = (process.env.NODE_ENV == 'prod') ? `https://scl.clover.com/v1/charges` : `https://scl-sandbox.dev.clover.com/v1/charges`

                            let options = {
                                method: 'POST',
                                url: baseurll,
                                body: obj,
                                headers: header,
                                json: true
                            };

                            console.log("===========options======", JSON.stringify(options))
                            let cloverresult = await requestApi(options);

                            if (cloverresult.paid == true) {
                                payment_status = 1
                            }
                            else {
                                payment_status = 0
                            }
                            console.log(cloverresult)
                            callback(null)

                        }


                        else if ((unique_id) == config.get("payment.authorize_net.unique_id")) {
                            payment_source = "authorize_net";
                            let authorize_net_key_data = await Universal.getAuthorizeNetKeys(request.dbName)
                            let base_url = process.env.NODE_ENV == 'prod' ? 'https://api.authorize.net/xml/v1/request.api' : 'https://apitest.authorize.net/xml/v1/request.api'
                            let expirationDate = request.body.expirationDate
                            let ref_id = "ref_id_" + randomstring.generate({
                                length: 5,
                                charset: 'alphanumeric'
                            }).toUpperCase();
                            if (Object.keys(authorize_net_key_data).length > 0) {
                                let body = {};
                                let authnet_profile_id = request.body.authnet_profile_id !== undefined ? request.body.authnet_profile_id : "";
                                let authnet_payment_profile_id = request.body.authnet_payment_profile_id !== undefined ? request.body.authnet_payment_profile_id : "";

                                if (authnet_profile_id !== "" && authnet_payment_profile_id !== "") {
                                    body = {
                                        "createTransactionRequest": {
                                            "merchantAuthentication": {
                                                "name": authorize_net_key_data[config.get("payment.authorize_net.api_login_id")],
                                                "transactionKey": authorize_net_key_data[config.get("payment.authorize_net.transaction_key")]
                                            },
                                            "refId": ref_id,
                                            "transactionRequest": {
                                                "transactionType": "authCaptureTransaction",
                                                "amount": parseFloat(orderNetAmount),
                                                "profile": {
                                                    "customerProfileId": authnet_profile_id,
                                                    "paymentProfile": { "paymentProfileId": authnet_payment_profile_id }
                                                }
                                            }
                                        }
                                    }

                                    logger.debug("========body to send==========", body,
                                        body.createTransactionRequest.transactionRequest.profile)

                                    logger.debug("=======JSON.stringify(body)==========", JSON.stringify(body))
                                    var options = {
                                        'method': 'POST',
                                        'url': base_url,
                                        'headers': {
                                            'Content-Type': 'application/json'
                                        },
                                        body: body,
                                        json: true
                                    };
                                    web_request(options, async function (error, response, body) {
                                        logger.debug("====Body=====", error, body)
                                        if (error) {
                                            return sendResponse.sendErrorMessage(
                                                await Universal.getMsgText(
                                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                                reply, 400);
                                        }
                                        else {
                                            payment_status = 1;
                                            let result = body.trim();
                                            result = JSON.parse(result)
                                            logger.debug(result)

                                            if (result.messages.resultCode == "Error") {
                                                let errorMsg = result.messages.message[0].text
                                                sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                            } else if (result.messages.resultCode == "Ok") {
                                                card_payment_id = result.transactionResponse.transId;
                                                callback(null)
                                            } else {
                                                let errorMsg = "something went wrong during payment"
                                                sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                            }
                                        }
                                    })
                                } else {
                                    let errorMsg = "authnet_profile_id or authnet_payment_profile_id not found"
                                    sendResponse.sendErrorMessage(errorMsg, reply, 400);

                                    // body = {
                                    //     "createTransactionRequest": {
                                    //         "merchantAuthentication": {
                                    //             "name": authorize_net_key_data[config.get("payment.authorize_net.api_login_id")],
                                    //             "transactionKey": authorize_net_key_data[config.get("payment.authorize_net.transaction_key")]

                                    //         },
                                    //         "refId":ref_id,
                                    //         "transactionRequest": {
                                    //             "transactionType": "authCaptureTransaction",
                                    //             "amount": Math.round(parseFloat(orderNetAmount)),
                                    //             "payment": {
                                    //                 "creditCard": {
                                    //                     "cardNumber": paymentToken,
                                    //                     "expirationDate": expirationDate
                                    //                 }
                                    //             },
                                    //             "billTo": {
                                    //                 "firstName": userData[0].name,
                                    //             }
                                    //         }
                                    //     }
                                    // }
                                }


                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }
                        }
                        else if ((unique_id) == config.get("payment.paystack.unique_id") && enable_paystack_card_save == 1) {
                            payment_source = "paystack";
                            let paystack_secret_key_data = await Universal.getPaystackSecretKey(dbName);
                            logger.debug("====STRIP=DATA==>>", paystack_secret_key_data, 0)
                            console.log("paystack_secret_key_data>>>>>>>>>insideEnablePaystackCardsave>>>>paystack_secret_key_data>>>>>>>customer_payment_id>>>>>>>>>orderNetAmount>>>>>>>>payment_token", paystack_secret_key_data, customer_payment_id, orderNetAmount, payment_token)
                            //added new one by amit
                            let userData = await Universal.getUserData(dbName, request.headers.authorization)

                            if (paystack_secret_key_data && paystack_secret_key_data.length > 0) {
                                //this if-else condition made by amit for handling case when card already saved and card is not saved
                                //card is already saved
                                /**
                                 * new add by amit
                                 */
                                if ((payment_token === "" || payment_token === null || payment_token === undefined) && customer_payment_id) {
                                    let orderTotalAmount = parseInt(orderNetAmount)
                                    let options = {
                                        method: 'POST',
                                        url: 'https://api.paystack.co/transaction/charge_authorization',
                                        headers: {
                                            Authorization: 'Bearer ' + paystack_secret_key_data[0].value + '',
                                            'content-type': 'application/json'
                                        },
                                        body: '{"email":"' + userData[0].email + '","amount":"' + Math.round(parseFloat((orderTotalAmount) * 100)) + '","authorization_code" :"' + customer_payment_id + '"}'
                                    };

                                    web_request(options, function (err, response, body) {
                                        logger.debug("====Err With AuthorizationCode!==", err)
                                        console.log("PaymentWithSaveCard>>>>>>>>>>body", body)
                                        if (err) {
                                            return sendResponse.sendErrorMessage(
                                                Universal.getMsgText(
                                                    languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                reply, 400);
                                        } else {
                                            logger.debug("===BoDY===>>==", JSON.parse(body));
                                            let verifyData = JSON.parse(body);
                                            if (verifyData.data.status === "success") {
                                                payment_status = 1;
                                                card_payment_id = verifyData.data.reference;
                                                callback(null)
                                            } else {
                                                return sendResponse.sendErrorMessage(
                                                    Universal.getMsgText(
                                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                    reply, 400);
                                            }
                                        }
                                    })//---------------------------End--------------\\
                                } else {
                                    var options = {
                                        method: 'GET',
                                        url: 'https://api.paystack.co/transaction/verify/' + payment_token + '',
                                        headers: {
                                            Authorization: 'Bearer ' + paystack_secret_key_data[0].value + ''
                                        }
                                    };
                                    web_request(options, async function (err, response, body) {
                                        logger.debug("====Err!==", err)
                                        if (err) {
                                            return sendResponse.sendErrorMessage(
                                                Universal.getMsgText(
                                                    languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                reply, 400);
                                        }
                                        else {
                                            logger.debug("===BoDY===>>==", JSON.parse(body));
                                            //console.log("body>>>>>inTheCaseOfCardSave>>>>>>>>",JSON.parse(body))
                                            let verifyData = JSON.parse(body);
                                            if (verifyData.data.status == "success") {
                                                /**
                                                 * added new for save card by amit
                                                 */
                                                let paymentData = verifyData.data.authorization

                                                let user_id = await Universal.getUserId(request.headers.authorization, request.dbName)

                                                //check card is already save or not
                                                let getUserCard = await paymentController.getPaystackUserCard(request.dbName, paymentData, user_id)
                                                //console.log("getUserCard>>>>>>>>>>>",getUserCard)

                                                if (getUserCard.length > 0) {
                                                    payment_status = 1;
                                                    card_payment_id = verifyData.data.reference;
                                                    callback(null)
                                                } else {
                                                    let card_type = paymentData && paymentData.card_type ? paymentData.card_type : ""
                                                    let card_number = paymentData && paymentData.last4 ? paymentData.last4 : ""
                                                    let exp_month = paymentData && paymentData.exp_month ? paymentData.exp_month : ""
                                                    let exp_year = paymentData && paymentData.exp_year ? paymentData.exp_year : ""
                                                    let customer_payment_id = paymentData && paymentData.authorization_code ? paymentData.authorization_code : ""
                                                    let card_source = paymentData && paymentData.card_source ? paymentData.card_source : payment_source
                                                    let card_signature = paymentData && paymentData.signature ? paymentData.signature : ""      //that is store for unique entry of a card
                                                    let card_id = ""

                                                    console.log("care_signature is>>>>>>>>>>>>>>", card_signature)
                                                    let saveCard = await paymentController.addUserCards(request.dbName, user_id, card_type,
                                                        card_number, exp_month,
                                                        exp_year, customer_payment_id,
                                                        card_source, card_id, "", card_signature);
                                                    //console.log("saveCardis>>>>>>>>>>>>>>>>>>>",JSON.parse(saveCard))
                                                    /**
                                                    * end
                                                    */
                                                    payment_status = 1;
                                                    card_payment_id = verifyData.data.reference;
                                                    callback(null)
                                                }
                                            }
                                            else {
                                                return sendResponse.sendErrorMessage(
                                                    Universal.getMsgText(
                                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                    reply, 400);
                                            }

                                        }
                                    });
                                }
                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }

                        }
                        else if ((unique_id) == config.get("payment.paystack.unique_id")) {
                            console.log("paystack payment is running......................")
                            payment_source = "paystack";
                            let paystack_secret_key_data = await Universal.getPaystackSecretKey(request.dbName);
                            logger.debug("====STRIP=DATA==>>", paystack_secret_key_data, Math.round(parseFloat(productList[0].net_amount * 100)))

                            if (paystack_secret_key_data && paystack_secret_key_data.length > 0) {
                                var options = {
                                    method: 'GET',
                                    url: 'https://api.paystack.co/transaction/verify/' + payment_token + '',
                                    headers: {
                                        Authorization: 'Bearer ' + paystack_secret_key_data[0].value + ''
                                    }
                                };
                                web_request(options, function (err, response, body) {
                                    logger.debug("====Err!==", err)
                                    if (err) {
                                        return sendResponse.sendErrorMessage(
                                            Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        logger.debug("===BoDY===>>==", JSON.parse(body));
                                        let verifyData = JSON.parse(body);
                                        if (verifyData.data.status == "success") {
                                            payment_status = 1;
                                            card_payment_id = verifyData.data.reference;
                                            callback(null)
                                        }
                                        else {
                                            return sendResponse.sendErrorMessage(
                                                Universal.getMsgText(
                                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                                reply, 400);
                                        }

                                    }
                                });

                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }

                        }
                        else if ((unique_id) == config.get("payment.payuLatam.unique_id")) {
                            payment_source = "payuLatam";
                            logger.debug("========unique_id unique_id====", unique_id)
                            let payuLatam_api_key_data = await Universal.getpayuLatamApiKey(request.dbName);
                            let payuLatam_api_loginkey_data = await Universal.getpayuLatamApiLoginkey(request.dbName);
                            let payuLatam_api_merchant_data = await Universal.getpayuLatamMerchantId(request.dbName);
                            let payuLatam_api_account_data = await Universal.getpayuLatamAccountId(request.dbName);
                            let payuLatam_basic_auth_data = await Universal.getpayuLatamSecretKey(request.dbName);

                            logger.debug("========userCards===", userData)
                            if (payuLatam_api_key_data && payuLatam_api_key_data.length > 0 && payuLatam_api_loginkey_data && payuLatam_api_loginkey_data.length > 0) {

                                let userCards = await checkUserCards(request.dbName, userData[0].id, payment_source);
                                logger.debug("========userCards===", userCards)

                                let payment_object = {};
                                // if(customer_payment_id !=="" && card_id!==""){
                                payment_object = {
                                    "amount": Math.round(parseFloat(orderNetAmount)),
                                    "currency": currency,
                                    "customer_token": userCards[0].card_id,
                                    "customer": userCards[0].customer_payment_id,
                                    "capture": true,
                                    "description": '(' + userData[0].email + ') Make an order',
                                    "firstName": userData[0].firstname,
                                    "lastName": userData[0].lastname,
                                    "email": userData[0].email,
                                    "address": userData[0].customer_address,
                                    "payment_method": userCards[0].card_type,
                                    "ip_address": "157.36.245.5",
                                }
                                // }else{
                                //     payment_object = {
                                //         amount: Math.round(parseFloat(orderNetAmount*100)),
                                //         currency: currency,
                                //         source: payment_token,
                                //         capture:true,
                                //         description: '('+userData[0].email+') Made an booking',
                                //     }
                                // }


                                var payment_result = await authorizeAndCapturePayment(payment_object, payuLatam_api_loginkey_data[0].value, payuLatam_api_key_data[0].value, payuLatam_api_merchant_data[0].value, payuLatam_api_account_data[0].value, payuLatam_basic_auth_data[0].value)

                                if (payment_result.transactionResponse.state != 'DECLINED') {
                                    if (payment_result.transactionResponse.state == 'APPROVED') {
                                        payment_status = 1;
                                        card_payment_id = payment_result.transactionResponse.transactionId;
                                    } else if (payment_result.transactionResponse.state == 'PENDING') {
                                        payment_status = 0;
                                        card_payment_id = payment_result.transactionResponse.transactionId;
                                    }
                                    else if (payment_result.transactionResponse.state == 'SUBMITTED') {
                                        payment_status = 0;
                                        card_payment_id = payment_result.transactionResponse.transactionId;
                                    }


                                    callback(null)
                                } else {
                                    payment_status = 0;
                                    let msg = payment_result.transactionResponse.responseMessage;
                                    console.log("*********msg", msg);
                                    return sendResponse.sendErrorMessage(msg, reply, 400);

                                }

                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }

                        }


                        else if ((unique_id) == config.get("payment.flexpay.unique_id") || (unique_id) == "orange_money" || (unique_id) == "mpesa" || (unique_id) == "africell" || (unique_id) == "airtel_money") {

                            payment_source = unique_id;
                            let payment_object = {};
                            var phoneNumber = request.body.mobile_no;
                            let header = {
                                Authorization: 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJNRExmeXZyVjlyQ3MwZ3NGV2xJMiIsInJvbGVzIjpbIk1FUkNIQU5UIl0sImlzcyI6Ii9sb2dpbiIsImV4cCI6MTczNTY4NjAwMH0.J1MhbvqVAd8wzhGvGXKYA75mWa3zLX6et_yKT2qyrRY'
                            };
                            let aamount = Math.round(parseFloat(orderNetAmount));

                            var flexcode = `1|${phoneNumber}|${aamount}|${currency}`

                            var hash = crypto.createHash('sha256').update(flexcode).digest('hex');
                            payment_object = {

                                "merchant": "DUKA",
                                "type": "1",
                                "reference": "MM00555500",
                                "phone": phoneNumber,           /////"243817229571",//phoneNumber  old 243847396876
                                "amount": Math.round(parseFloat(orderNetAmount)),
                                "currency": currency,
                                "callbackUrl": "https://api.royoapps.com/api/v1/flexpay/callback"

                            }

                            let options = {
                                method: 'POST',
                                url: `https://backend.flexpay.cd/api/rest/v1/paymentService`,
                                body: payment_object,
                                headers: header,
                                json: true
                            };
                            console.log(options, "hhbikbfaffbj")
                            let flexpay = await requestApi(options);
                            console.log(flexpay, "flexpayflexpayflexpayflexpayflexpayflexpayflexpay")
                            if (flexpay.code == 0) {

                                console.log("herejjjjjjjjjjjjjj")
                                payment_status = 1
                                let query = "update cart set flexpay_id= ?,flexpay_status=4 where id =?"

                                let params = [flexpay.orderNumber, cartId]
                                await ExecuteQ.Query(request.dbName, query, params);


                            }
                            else {

                                payment_status = 0


                            }
                            console.log(flexpay)
                            callback(null)


                        }





                        else if ((unique_id) == config.get("payment.conekta.unique_id")) {
                            let conekta_data = await Universal.getConektaSecretKey(request.dbName);
                            let userData = await Universal.getUserData(request.dbName, request.headers.authorization);
                            payment_source = "conekta";
                            logger.debug("=====conekta_data===USR==DAT!==>>>", productList[0].net_amount, conekta_data, userData)

                            if (conekta_data && conekta_data.length > 0) {
                                let conekta = require('conekta');
                                conekta.api_key = conekta_data[0].value;
                                conekta.locale = 'es';
                                conekta.Order.create({
                                    "currency": "MXN",
                                    "customer_info": {
                                        "name": userData[0].name,
                                        "phone": userData[0].mobile_no,
                                        "email": userData[0].email
                                    },
                                    "line_items": [{
                                        "name": userData[0].name,
                                        "unit_price": Math.round(parseFloat(orderNetAmount * 100)),
                                        "quantity": 1
                                    }],
                                    "shipping_lines": [
                                        {
                                            "amount": 0
                                        }
                                    ],
                                    "shipping_contact": {
                                        "address": {
                                            street1: userData[0].customer_address,
                                            city: userData[0].customer_address,
                                            state: userData[0].address_line_2,
                                            postal_code: "78215",
                                            country: userData[0].customer_address,
                                            residential: true,
                                            object: "shipping_address"
                                        }
                                    },
                                    "charges": [
                                        {
                                            "payment_method": {
                                                "type": "card",
                                                "token_id": payment_token
                                            }
                                        }]
                                }).then(function (result) {
                                    logger.debug("JSON==Object==>", result.toObject());
                                    card_payment_id = result.toObject().id;
                                    payment_status = 1
                                    callback(null)
                                }, async function (error) {
                                    logger.debug("=======ERR!=====", error);
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                })
                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }
                        }
                        else if ((unique_id) == config.get("payment.razorpay.unique_id")) {

                            payment_source = "razorpay";
                            let razor_pay_data = await Universal.getRazorPayData(request.dbName);
                            logger.debug("======razor_pay_data=net_amount====>>", razor_pay_data, productList[0].net_amount * 100)
                            if (Object.keys(razor_pay_data).length > 0) {
                                web_request({
                                    method: 'POST',
                                    url: "https://" + razor_pay_data[config.get("payment.razorpay.publish_key")] + ":" + razor_pay_data[config.get("payment.razorpay.secret_key")] + "@api.razorpay.com/v1/payments/" + payment_token + "/capture",
                                    form: {
                                        amount: (orderNetAmount) * 100,
                                        currency: currency
                                    }
                                }, async function (error, response, body) {
                                    logger.debug("===RazorPayError====", error)
                                    // console.log('Status:', response.statusCode);
                                    // console.log('Headers:', JSON.stringify(response.headers));
                                    // console.log('Response:', body);
                                    if (error) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        payment_status = 1
                                        callback(null)
                                    }
                                });

                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }

                        }
                        else if ((unique_id) == config.get("payment.razorpay.unique_id")) {
                            payment_source = "razorpay";
                            let razor_pay_data = await Universal.getRazorPayData(request.dbName);
                            logger.debug("======razor_pay_data=net_amount====>>", razor_pay_data, productList[0].net_amount * 100)
                            if (Object.keys(razor_pay_data).length > 0) {
                                web_request({
                                    method: 'POST',
                                    url: "https://" + razor_pay_data[config.get("payment.razorpay.publish_key")] + ":" + razor_pay_data[config.get("payment.razorpay.secret_key")] + "@api.razorpay.com/v1/payments/" + payment_token + "/capture",
                                    form: {
                                        amount: (orderNetAmount) * 100,
                                        currency: "INR"
                                    }
                                }, async function (error, response, body) {
                                    logger.debug("===RazorPayError====", error)
                                    // console.log('Status:', response.statusCode);
                                    // console.log('Headers:', JSON.stringify(response.headers));
                                    // console.log('Response:', body);
                                    if (error) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        payment_status = 1
                                        callback(null)
                                    }
                                });

                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }

                        }
                        else if ((unique_id) == config.get("payment.myfatoorah.unique_id")) {
                            card_payment_id = payment_token;
                            payment_status = 1
                            payment_source = "myfatoorah";
                            transaction_id = myFatoorahInvoiceId || card_payment_id

                            callback(null)

                        }
                        // else if((unique_id)=="urway"){

                        //     card_payment_id = payment_token;
                        //     payment_status=1
                        //     payment_source="urway"

                        //     callback(null)

                        // }
                        else if ((unique_id) == "urway") {

                            payment_source = "urway";
                            let getUrwayKeys = await Universal.getUrwayKeys(request.dbName);
                            let payment_object = {};


                            let urway_user = getUrwayKeys.urway_user || 0;
                            let urway_password = getUrwayKeys.urway_password || 0;
                            let urway_merchent_key = getUrwayKeys.urway_merchantkey || 0;
                            console.log("==getUrwayKeys=>>>", getUrwayKeys);

                            if (urway_user !== 0 && urway_password !== 0 && urway_merchent_key !== 0) {
                                let payment_object = {};

                                let header = {
                                };
                                let aamount = Math.round(parseFloat(orderNetAmount));
                                var code = `123|${urway_user}|${urway_password}|${urway_merchent_key}|${aamount}|${currency}`

                                var hash = crypto.createHash('sha256').update(code).digest('hex');
                                payment_object =
                                {
                                    "terminalId": urway_user,
                                    "password": urway_password,
                                    "action": "1",
                                    "currency": currency,
                                    "customerEmail": userData[0].email,
                                    "address": "",
                                    "city": userData[0].customer_address,
                                    "zipcode": "",
                                    "state": userData[0].address_line_2,
                                    "country": "SA",
                                    "amount": aamount,
                                    "customerIp": "10.10.11.89",
                                    "merchantIp": "10.10.10.27",
                                    "tranid": "",
                                    "trackid": "123",
                                    "requestHash": hash,
                                    "tokenizationType": "1",
                                    "cardToken": payment_token,
                                    "udf1": "Test",
                                    "udf2": "",
                                    "udf3": "",
                                    "udf4": "",
                                    "udf5": ""

                                }


                                let baseUrl = (process.env.NODE_ENV == 'prod') ? `https://payments.urway-tech.com/URWAYPGService/transaction/jsonProcess/JSONrequest` : `https://payments-dev.urway-tech.com/URWAYPGService/transaction/jsonProcess/JSONrequest`;
                                baseUrl = `https://payments-dev.urway-tech.com/URWAYPGService/transaction/jsonProcess/JSONrequest`
                                console.log("====urway=base url=>", baseUrl)
                                let options = {
                                    method: 'POST',
                                    url: getUrwayKeys.urway_url,
                                    body: payment_object,
                                    headers: header,
                                    json: true
                                };
                                console.log("===========options======", JSON.stringify(options))
                                let urwayresult = await requestApi(options);
                                if (urwayresult.payid || urwayresult.responseCode == null) {
                                    payment_status = 1
                                } else payment_status = 0
                                console.log(urwayresult)
                                callback(null)
                            } else {
                                sendResponse.sendErrorMessage("keys not found", reply, 400);
                            }
                        }
                        else if ((unique_id).toLowerCase() == "firstatlanticcommerce") {
                            card_payment_id = payment_token;
                            payment_status = 1
                            payment_source = "firstatlanticcommerce";
                            callback(null)
                        }

                        else if ((unique_id) == "thawani") {

                            card_payment_id = payment_token;
                            payment_status = 1
                            payment_source = "thawani"

                            callback(null)

                        }
                        else if ((unique_id) == "sadad") {
                            card_payment_id = payment_token;
                            payment_status = 1
                            payment_source = "sadad"

                            callback(null)

                        }
                        else if ((unique_id) == "aamarpay") {

                            payment_source = "aamarpay";
                            card_payment_id = payment_token;
                            payment_status = 1
                            callback(null)

                        }
                        else if ((unique_id) == "hyperpay") {

                            payment_source = "hyperpay";
                            card_payment_id = payment_token;
                            payment_status = 1
                            callback(null)

                        }
                        else if ((unique_id) == "telr") {

                            payment_source = "telr";
                            card_payment_id = payment_token;
                            payment_status = 1
                            callback(null)

                        }
                        else if ((unique_id) == "datatrans") {

                            payment_source = "datatrans";
                            card_payment_id = payment_token;
                            payment_status = 1
                            callback(null)

                        }
                        else if ((unique_id) == config.get("payment.payhere.unique_id")) {

                            card_payment_id = payment_token;
                            payment_status = 1
                            payment_source = "payhere"
                            callback(null)

                        }
                        else if ((unique_id) == "applepay" || (unique_id) == "ApplePay" || (unique_id) == "applePay") {

                            card_payment_id = payment_token;
                            payment_status = 1
                            payment_source = "applepay"

                            callback(null)

                        }
                        else if ((unique_id) == config.get("payment.converge.unique_id")) {

                            card_payment_id = payment_token;
                            payment_status = 1
                            payment_source = "converge"
                            callback(null)

                        }
                        else if ((unique_id) == "tap") {
                            payment_source = "tap";
                            card_payment_id = payment_token;
                            payment_status = 1;

                            if (parseInt(payment_status_after_confirm) == 1) {
                                payment_status = 0;
                            }



                            callback(null);
                        }
                        else if ((unique_id) == config.get("payment.mPaisa.unique_id")) {
                            payment_source = "mPaisa";
                            card_payment_id = payment_token;
                            payment_status = 1
                            callback(null);
                        }
                        else if ((unique_id) == "sadadqa") {
                            payment_source = "sadadqa";
                            card_payment_id = payment_token;
                            payment_status = 1
                            callback(null);
                        }
                        else if ((unique_id) == "transbank") {
                            payment_source = "transbank";
                            card_payment_id = payment_token;
                            payment_status = 1
                            callback(null);
                        }
                        else if ((unique_id) == "paymaya") {
                            payment_source = "paymaya";
                            card_payment_id = payment_token;
                            payment_status = 1
                            callback(null);
                        }
                        else if ((unique_id) == config.get("payment.windcave.unique_id")) {
                            payment_source = "windcave";
                            card_payment_id = payment_token;
                            payment_status = 1
                            callback(null);
                        }
                        else if ((unique_id) == config.get("payment.paypal.unique_id")) {
                            payment_source = "paypal";
                            let paypal_api = process.env.NODE_ENV == 'prod' ? 'https://api.paypal.com' : 'https://api.sandbox.paypal.com'
                            let paypal_data = await Universal.getPaypalData(request.dbName);
                            logger.debug("========paypal==API==", paypal_api, paypal_data)
                            if (Object.keys(paypal_data).length > 0) {
                                let tokenData = await Universal.getAuthTokeOfPayPal(paypal_data[config.get("payment.paypal.client_key")], paypal_data[config.get("payment.paypal.secret_key")]);
                                var options = {
                                    'method': 'POST',
                                    'url': paypal_api + '/v2/checkout/orders/' + payment_token + '/capture',
                                    'headers': {
                                        'Authorization': 'Bearer ' + tokenData.access_token,
                                        // 'PayPal-Request-Id': '7b92603e-77ed-4896-8e78-5dea2050476a',
                                        'Content-Type': 'application/json'
                                    }
                                };
                                web_request(options, async function (error, response, body) {
                                    logger.debug("====Body=====", error, body)
                                    if (error) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        payment_status = 1
                                        card_payment_id = payment_token;
                                        callback(null)
                                    }
                                });

                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }
                        }
                        else if ((unique_id) == config.get("payment.checkout.unique_id")) {
                            payment_source = "checkout";

                            let checkout_data = await Universal.getCheckoutSecretKey(request.dbName);
                            logger.debug("======razor_pay_data=net_amount====>>", checkout_data)
                            if (Object.keys(checkout_data).length > 0) {
                                var headers = {
                                    'Accept': 'application/json',
                                    'Authorization': checkout_data[config.get("payment.checkout.secret_key")]//'sk_test_a7d262c3-15fd-4564-8aca-9e45ed879f57'
                                };

                                //console.log("headers ============= ",headers)

                                var dataString = {
                                    "source": {
                                        "type": "token",
                                        "token": payment_token//"tok_4gzeau5o2uqubbk6fufs3m7p54"
                                    },
                                    //"amount": amount,//6500,
                                    "amount": parseFloat(orderNetAmount),
                                    "currency": currency,//"USD",
                                    "reference": request.body.cartId ? request.body.cartId : '',//"ORD-5023-4E89",
                                    "metadata": {
                                        "card_id": card_id,
                                        "customer_payment_id": customer_payment_id
                                    }
                                };
                                console.log("dataString ============= ", dataString)
                                let checkout_api_url = (process.env.NODE_ENV == 'prod') ? 'https://api.checkout.com/payments' : 'https://api.sandbox.checkout.com/payments';
                                console.log("options ------- ------ ------ ", {
                                    method: 'POST',
                                    //url: "https://api.sandbox.checkout.com/payments",
                                    url: checkout_api_url,
                                    headers: headers,
                                    form: dataString
                                })
                                web_request({
                                    method: 'POST',
                                    //url: "https://api.sandbox.checkout.com/payments",
                                    url: checkout_api_url,
                                    headers: headers,
                                    form: dataString
                                }, async function (error, response, body) {
                                    // console.log("1#########################################################")
                                    // logger.debug("=== Checkout ====",error)
                                    // console.log("2#########################################################")
                                    // console.log(error)
                                    // console.log("3#########################################################")
                                    // console.log(response)
                                    // console.log("4#########################################################")
                                    // console.log(body)
                                    // console.log("5#########################################################")
                                    if (error) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        card_payment_id = body.id;
                                        payment_status = 1
                                        callback(null)
                                    }
                                });
                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }
                        }
                        else if ((unique_id) == config.get("payment.venmo.unique_id")) {
                            payment_source = "venmo";
                            let braintree_data = await Universal.getBraintreeData(request.dbName);
                            logger.debug("========braintree_data==API==", braintree_data);

                            if (Object.keys(braintree_data).length > 0) {
                                var braintree = require("braintree");
                                var gateway = braintree.connect({
                                    environment: process.env.NODE_ENV == 'prod' ? braintree.Environment.Production : braintree.Environment.Sandbox,
                                    merchantId: braintree_data[config.get("payment.venmo.merchant_id")],
                                    publicKey: braintree_data[config.get("payment.venmo.public_key")],
                                    privateKey: braintree_data[config.get("payment.venmo.private_key")]
                                });

                                gateway.transaction.sale({
                                    amount: orderNetAmount,
                                    paymentMethodNonce: payment_token,
                                    options: {
                                        submitForSettlement: true
                                    },
                                    deviceData: {}
                                }, async function (err, result) {
                                    if (err) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        if (result.success) {
                                            logger.debug("===braintree===response Id==>>>", result)
                                            card_payment_id = result.transaction.id;
                                            payment_status = 1
                                            callback(null)
                                        }
                                        else {
                                            return sendResponse.sendErrorMessage(
                                                await Universal.getMsgText(
                                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                                reply, 400);
                                        }

                                    }

                                });
                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }
                        }
                        else if ((unique_id).toLowerCase() == config.get("payment.braintree.unique_id")) {
                            payment_source = "braintree";
                            let braintree_data = await Universal.getBraintreeData(request.dbName);
                            logger.debug("========braintree_data==API==", braintree_data);

                            if (Object.keys(braintree_data).length > 0) {
                                var braintree = require("braintree");
                                var gateway = braintree.connect({
                                    //environment:process.env.NODE_ENV == 'prod'? braintree.Environment.Production:braintree.Environment.Sandbox,
                                    environment: braintree.Environment.Production,
                                    merchantId: braintree_data[config.get("payment.braintree.merchant_id")],
                                    publicKey: braintree_data[config.get("payment.braintree.public_key")],
                                    privateKey: braintree_data[config.get("payment.braintree.private_key")]
                                });

                                gateway.transaction.sale({
                                    amount: orderNetAmount,
                                    paymentMethodNonce: payment_token,
                                    options: {
                                        submitForSettlement: true
                                    },
                                    deviceData: {}
                                }, async function (err, result) {
                                    console.log(err, "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$", result)
                                    if (err) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        if (result.success) {
                                            logger.debug("===braintree===response Id==>>>", result)
                                            card_payment_id = result.transaction.id;
                                            payment_status = 1
                                            callback(null)
                                        }
                                        else {
                                            return sendResponse.sendErrorMessage(
                                                await Universal.getMsgText(
                                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                                reply, 400);
                                        }

                                    }

                                });
                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }
                        }
                        else if ((unique_id) == "zelle") {
                            logger.debug("===============zelle==========", zelle_receipt_url)
                            if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                                logger.debug("=======node zelle url============", zelle_receipt_url)
                                let msg = "please provide receipt for zelle";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            } else {
                                payment_source = "zelle"
                                callback(null)
                            }
                        }
                        else if ((unique_id) == "PipolPay") {
                            logger.debug("===============zelle==========", zelle_receipt_url)
                            if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                                logger.debug("=======node zelle url============", zelle_receipt_url)
                                let msg = "please provide receipt for PipolPay";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            } else {
                                payment_source = "PipolPay"
                                callback(null)
                            }
                        }
                        else if ((unique_id) == "oxxo") {
                            logger.debug("===============oxxo==========", zelle_receipt_url)
                            if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                                logger.debug("=======node oxxo url============",
                                    zelle_receipt_url)
                                let msg = "please provide receipt for oxxo";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            } else {
                                payment_status = 1;
                                payment_source = "oxxo"
                                callback(null)
                            }
                        }
                        else if (unique_id == "cred_movil") {
                            logger.debug("===============zelle==========", zelle_receipt_url)
                            if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                                logger.debug("=======node zelle url============", zelle_receipt_url)
                                let msg = "please provide receipt for cred movil";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            } else {
                                payment_source = "cred_movil"
                                callback(null)
                            }
                        }
                        else if ((unique_id) == "cashapp") {
                            logger.debug("===============cashapp==========", zelle_receipt_url)
                            if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                                logger.debug("=======node zelle url============", zelle_receipt_url)
                                let msg = "please provide receipt for cashapp";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            } else {
                                payment_source = "cashapp"
                                callback(null)
                            }
                        }
                        else if ((unique_id) == config.get("payment.squareup.unique_id")) {
                            payment_source = "squareup";
                            let squareData = await Universal.getSquareupSecretKey(dbName)

                            if (Object.keys(squareData).length > 0) {
                                var SquareConnect = require('square-connect');
                                // Set Square Connect credentials and environment
                                var defaultClient = SquareConnect.ApiClient.instance;
                                // Configure OAuth2 access token for authorization: oauth2
                                var oauth2 = defaultClient.authentications['oauth2'];
                                oauth2.accessToken = squareData.square_token;
                                // Set 'basePath' to switch between sandbox env and production env
                                // sandbox: https://connect.squareupsandbox.com
                                // production: https://connect.squareup.com
                                let basePathOfSequare = process.env.NODE_ENV == 'prod' ? 'https://connect.squareup.com' : 'https://connect.squareupsandbox.com';
                                logger.debug("=basePathOfSequare===", basePathOfSequare);
                                defaultClient.basePath = process.env.NODE_ENV == 'prod' ? 'https://connect.squareup.com' : 'https://connect.squareupsandbox.com'

                                let payment_object = {};
                                const idempotency_key = crypto.randomBytes(22).toString('hex');
                                var apiInstance = new SquareConnect.PaymentsApi();
                                // you cand Add some Optional params acc. to the requirements in the PaymentObj
                                //https://developer.squareup.com/reference/square/payments-api/create-payment/explorer
                                logger.debug("==withou,with=", parseInt(Math.round(parseFloat((orderNetAmount - referralAmount) * 100))), typeof parseInt(Math.round(parseFloat((orderNetAmount - referralAmount) * 100))), typeof Math.round(parseFloat((orderNetAmount - referralAmount) * 100)))
                                if (customer_payment_id !== "" && card_id !== "") {
                                    payment_object = {
                                        amount_money: {
                                            amount: parseInt(Math.round(parseFloat((orderNetAmount) * 100))),    // 100 Cent == $1.00 charge
                                            currency: currency
                                        },
                                        // currency: currency,
                                        source_id: card_id,
                                        customer_id: customer_payment_id,
                                        idempotency_key: idempotency_key,
                                        note: 'Made an booking'
                                    }
                                } else {
                                    payment_object = {
                                        source_id: payment_token,
                                        amount_money: {
                                            amount: parseInt(Math.round(parseFloat((orderNetAmount) * 100))),    // 100 Cent == $1.00 charge
                                            currency: currency
                                        },
                                        idempotency_key: idempotency_key,
                                        note: 'Made an booking'

                                    };
                                }
                                logger.debug("===payment_object=", payment_object);
                                apiInstance.createPayment(payment_object).then(function (data) {
                                    console.log('API called successfully. Returned data: ' + JSON.stringify(data));
                                    card_payment_id = data.payment.id;
                                    transaction_id = idempotency_key
                                    payment_status = 1
                                    callback(null);
                                }, function (error) {
                                    console.error(error);
                                    return sendResponse.sendErrorMessage(
                                        Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                });
                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }


                        }
                        else if ((unique_id) == config.get("payment.cybersource.unique_id")) {
                            payment_source = "cybersource";
                            let cyberSourceData = await Universal.getCyberSourceData(dbName);
                            logger.debug("==cyberSourceData====", cyberSourceData);
                            if (Object.keys(cyberSourceData).length > 0) {
                                var cybersourceRestApi = require('cybersource-rest-client');
                                try {
                                    var instance = new cybersourceRestApi.PaymentsApi({
                                        'authenticationType': process.env.NODE_ENV == 'prod' ? 'https_signature' : 'http_signature',
                                        'runEnvironment': process.env.NODE_ENV == 'prod' ? 'cybersource.environment.production' : 'cybersource.environment.SANDBOX',
                                        'merchantID': cyberSourceData.cybersource_merchant_id,
                                        'merchantKeyId': cyberSourceData.cybersource_merchant_key_id,
                                        'merchantsecretKey': cyberSourceData.cybersource_merchant_secret_key
                                    });
                                    var processingInformation = new cybersourceRestApi.Ptsv2paymentsProcessingInformation();
                                    processingInformation.commerceIndicator = 'internet';
                                    // var aggregatorInformation = new cybersourceRestApi.Ptsv2paymentsAggregatorInformation();


                                    var amountDetails = new cybersourceRestApi.Ptsv2paymentsOrderInformationAmountDetails();
                                    amountDetails.totalAmount = parseFloat(parseFloat(orderNetAmount));
                                    amountDetails.currency = 'AED';
                                    var orderInformation = new cybersourceRestApi.Ptsv2paymentsOrderInformation();
                                    orderInformation.amountDetails = amountDetails;

                                    // var billTo = new cybersourceRestApi.Ptsv2paymentsOrderInformationBillTo();
                                    //     billTo.country = userData[0].customer_address;
                                    //     billTo.firstName = userData[0].name;
                                    //     billTo.lastName = userData[0].name
                                    //     billTo.phoneNumber = userData[0].mobile_no
                                    //     billTo.address1 = userData[0].address_line_2
                                    //     billTo.locality = userData[0].customer_address;
                                    //     billTo.email = userData[0].email;
                                    //     billTo.address2 = userData[0].address_line_2;

                                    // orderInformation.billTo = billTo;
                                    var paymentInformation = new cybersourceRestApi.Ptsv2paymentsPaymentInformation();
                                    // var card = new cybersourceRestApi.Ptsv2paymentsPaymentInformationCard(); 
                                    var customer = new cybersourceRestApi.Ptsv2paymentsPaymentInformationCustomer();
                                    customer.customerId = payment_token;
                                    // card.expirationYear = cardData[0].exp_year
                                    // card.number = cardData[0].card_number;
                                    // card.expirationMonth = cardData[0].exp_month;
                                    // card.securityCode = await Universal.getDecryptData(cardData[0].cvc);
                                    // // customer.customer_payment_id
                                    // card.type = cardData[0].card_type;
                                    // paymentInformation.card = card;
                                    paymentInformation.customer = customer
                                    var cbrequest = new cybersourceRestApi.CreatePaymentRequest();
                                    // request.clientReferenceInformation = clientReferenceInformation;
                                    cbrequest.processingInformation = processingInformation;
                                    // request.aggregatorInformation = aggregatorInformation;
                                    cbrequest.orderInformation = orderInformation;
                                    cbrequest.paymentInformation = paymentInformation;
                                    cbrequest.processingInformation.capture = true;
                                    console.log('\n*************** Process Payment ********************* ');

                                    instance.createPayment(cbrequest, function (error, data, response) {
                                        if (error) {

                                            console.log('\nError in process a payment : ' + JSON.stringify(error));
                                            return sendResponse.sendErrorMessage(
                                                Universal.getMsgText(
                                                    languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                reply, 400);
                                        }
                                        else {
                                            console.log('\nData of process a payment : ' + JSON.stringify(response['status']), JSON.stringify(response['id']))
                                            card_payment_id = data.id;
                                            payment_status = 1
                                            callback(null);
                                        }
                                        // console.log('\nResponse of process a payment : ' + JSON.stringify(response));
                                        // console.log('\nResponse Code of process a payment : ' + JSON.stringify(response['status']));
                                        // callback(error, data);
                                    });
                                } catch (error) {
                                    logger.debug("======ERR!===>>", error)
                                    return sendResponse.sendErrorMessage(
                                        Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }

                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }

                        }
                        else if ((unique_id) == config.get("payment.paytab.unique_id")) {
                            console.log("############################## paytab 111111111111")
                            let payTabData = await Universal.getPayTabData(dbName);

                            payment_source = "paytab";
                            console.log("############################## paytab 222222222222", payTabData)
                            if (Object.keys(payTabData).length > 0) {
                                console.log("############################## paytab 333333333333", payTabData)
                                web_request.post({
                                    url: "https://www.paytabs.com/apiv2/verify_payment_transaction",
                                    method: "POST",
                                    form: {
                                        "merchant_email": payTabData.merchant_email,
                                        "secret_key": payTabData.paytabs_secret_key,
                                        // "merchant_email":"Kiran.girija@afoc.mil.ae", //payTabData.paytab_merchant_email,
                                        // "secret_key":"QGj2hCvxNdFnoA9QZe9jm8QSr2S44FcUmvWD7sbUFRh4rrUrG4L2cCUEENJJsVDPqAsy3EtIvLNXdHoTM9WYLRDqEm97hNWIophr",//payTabData.paytab_secret_key,
                                        "transaction_id": payment_token
                                    }

                                }, async function (error, response, body) {
                                    console.log("############################## paytab 44444444444444", payTabData)
                                    logger.debug("===paytabErr!===", error)
                                    if (error) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        card_payment_id = JSON.parse(body).transaction_id;
                                        payment_status = 1
                                        callback(null);
                                    }

                                })
                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }

                        } else if ((unique_id) == "safe2pay") {

                            payment_source = "safe2pay";

                            let safe2pay_keydata = await Universal.getSafe2Paykey(request.dbName);

                            let base_url = "https://payment.safe2pay.com.br/v2/Payment";

                            let IsSandbox = process.env.NODE_ENV == 'prod' ? false : true

                            // let expirationDate = request.body.expirationDate
                            let cvv = "123";

                            cvv = request.body.cvt !== undefined ? request.body.cvt : request.body.cvv;

                            let expMonth = request.body.expMonth;
                            let expYear = request.body.expYear;

                            let ref_id = "ref_id_" + randomstring.generate({
                                length: 5,
                                charset: 'alphanumeric'
                            }).toUpperCase();


                            if (Object.keys(safe2pay_keydata).length > 0) {
                                let body = {};
                                body = {
                                    "IsSandbox": IsSandbox,
                                    "Application": "Aplicação de teste",
                                    "Vendor": userData[0].firstname,
                                    "CallbackUrl": "https://callbacks.exemplo.com.br/api/Notify",
                                    "PaymentMethod": "2",
                                    "Customer": {
                                        "Name": userData[0].firstname,
                                        "Identity": ref_id,
                                        "Phone": userData[0].mobile_no,
                                        "Email": userData[0].email
                                    },
                                    "Products": [
                                        {
                                            "Code": ref_id,
                                            "Description": "order payment",
                                            "UnitPrice": parseFloat((orderNetAmount) * 100),
                                            "Quantity": 1
                                        }
                                    ],
                                    "PaymentObject": {
                                        "Holder": userData[0].firstname,
                                        "CardNumber": payment_token,
                                        "ExpirationDate": expMonth + "/" + expYear,//"12/2021",
                                        "SecurityCode": cvv
                                    }
                                }



                                logger.debug("=======JSON.stringify(body)==========", JSON.stringify(body))
                                var options = {
                                    'method': 'POST',
                                    'url': base_url,
                                    'headers': {
                                        'Content-Type': 'application/json',
                                        'x-api-key': safe2pay_keydata.safe2pay_apikey
                                    },
                                    body: body,
                                    json: true
                                };
                                web_request(options, async function (error, response, body) {
                                    logger.debug("====Body=====", error, body)
                                    if (error) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        payment_status = 1;
                                        callback(null);
                                    }
                                })


                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }
                        }
                        else if ((unique_id) == "authorize_net") {
                            payment_source = "authorize_net";
                            let authorize_net_key_data = await Universal.getAuthorizeNetKeys(request.dbName)
                            let base_url = process.env.NODE_ENV == 'prod' ? 'https://api.authorize.net/xml/v1/request.api' : 'https://apitest.authorize.net/xml/v1/request.api'
                            let expirationDate = request.body.expirationDate
                            let ref_id = "ref_id_" + randomstring.generate({
                                length: 5,
                                charset: 'alphanumeric'
                            }).toUpperCase();
                            if (Object.keys(authorize_net_key_data).length > 0) {
                                let body = {};
                                let authnet_profile_id = request.body.authnet_profile_id !== undefined ? request.body.authnet_profile_id : "";
                                let authnet_payment_profile_id = request.body.authnet_payment_profile_id !== undefined ? request.body.authnet_payment_profile_id : "";

                                if (authnet_profile_id !== "" && authnet_profile_id !== "") {
                                    body = {
                                        "createTransactionRequest": {
                                            "merchantAuthentication": {
                                                "name": authorize_net_key_data[config.get("payment.authorize_net.api_login_id")],
                                                "transactionKey": authorize_net_key_data[config.get("payment.authorize_net.transaction_key")]
                                            },
                                            "refId": ref_id,
                                            "transactionRequest": {
                                                "transactionType": "authCaptureTransaction",
                                                "amount": parseFloat(orderNetAmount),
                                                "profile": {
                                                    "customerProfileId": authnet_profile_id,
                                                    "paymentProfile": { "paymentProfileId": authnet_payment_profile_id }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    body = {
                                        "createTransactionRequest": {
                                            "merchantAuthentication": {
                                                "name": authorize_net_key_data[config.get("payment.authorize_net.api_login_id")],
                                                "transactionKey": authorize_net_key_data[config.get("payment.authorize_net.transaction_key")]

                                            },
                                            "refId": ref_id,
                                            "transactionRequest": {
                                                "transactionType": "authCaptureTransaction",
                                                "amount": parseFloat(orderNetAmount),
                                                "payment": {
                                                    "creditCard": {
                                                        "cardNumber": paymentToken,
                                                        "expirationDate": expirationDate
                                                    }
                                                },
                                                "billTo": {
                                                    "firstName": userData[0].name,
                                                }
                                            }
                                        }
                                    }
                                }

                                logger.debug("========body to send==========", body,
                                    body.createTransactionRequest.transactionRequest.profile)

                                logger.debug("=======JSON.stringify(body)==========", JSON.stringify(body))
                                var options = {
                                    'method': 'POST',
                                    'url': base_url,
                                    'headers': {
                                        'Content-Type': 'application/json'
                                    },
                                    body: body,
                                    json: true
                                };
                                web_request(options, async function (error, response, body) {
                                    logger.debug("====Body=====", error, body)
                                    if (error) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        payment_status = 1;
                                        let result = body.trim();
                                        result = JSON.parse(result)
                                        logger.debug(result)

                                        if (result.messages.resultCode == "Error") {
                                            let errorMsg = result.messages.message[0].text
                                            sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                        } else if (result.messages.resultCode == "Ok") {
                                            card_payment_id = result.transactionResponse.transId;
                                            callback(null)
                                        } else {
                                            let errorMsg = "something went wrong during payment"
                                            sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                        }
                                    }
                                });

                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }
                        }
                        else if ((unique_id) == "pago_facil") {
                            let pago_facil_key_data = await Universal.getPagofacilKeys(dbName);
                            let base_url = process.env.NODE_ENV == 'prod' ? 'https://api.pagofacil.tech/Wsrtransaccion/index/format/json' : 'https://sandbox.pagofacil.tech/Wsrtransaccion/index/format/json'
                            if (Object.keys(pago_facil_key_data).length > 0) {
                                let headers = {
                                    'Content-Type': 'multipart/form-data',
                                }

                                formData = {
                                    "method": "transaccion",
                                    "data[nombre]": tran_id,
                                    "data[apellidos]": success_url,
                                    "data[numeroTarjeta]": fail_url,
                                    "data[cvt]": cancel_url,
                                    "data[cp]": amount,
                                    "data[mesExpiracion]": currency,
                                    "data[anyoExpiracion]": signature_key,
                                    "data[monto]": desc,
                                    "data[idSucursal]": cus_name,
                                    "data[idUsuario]": cus_email,
                                    "data[idServicio]": cus_add1,
                                    "data[email]": cus_add2,
                                    "data[telefono]": cus_city,
                                    "data[celular]": cus_state,
                                    "data[calleyNumero]": cus_postcode,
                                    "data[colonia]": cus_country,
                                    "data[municipio]": cus_phone,
                                    "data[status]": "000599000730016",
                                    "data[estado]": "",
                                    "data[pais]": ""
                                }
                                logger.debug("========body to send==========", body)

                                logger.debug("=======JSON.stringify(body)==========", JSON.stringify(body))

                                var options = {
                                    method: 'POST',
                                    url: base_url,
                                    headers: headers,
                                    form: formData,
                                    json: true
                                };
                                web_request(options, async function (error, response, body) {
                                    logger.debug("====Body=====", error, body)
                                    if (error) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        payment_status = 1;
                                        let result = body.trim();
                                        result = JSON.parse(result)
                                        logger.debug(result)

                                        if (result.messages.resultCode == "Error") {
                                            let errorMsg = result.messages.message[0].text
                                            sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                        } else if (result.messages.resultCode == "Ok") {
                                            card_payment_id = result.transactionResponse.transId;
                                            callback(null)
                                        } else {
                                            let errorMsg = "something went wrong during payment"
                                            sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                        }
                                    }
                                });

                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }
                        }

                        else if ((unique_id) == "pago_facil") {
                            logger.debug("======dbname=======", request.dbName);
                            let pago_facil_key_data = await Universal.getPagofacilKeys(request.dbName);
                            logger.debug("=========pago data=======", pago_facil_key_data)
                            let base_url = process.env.NODE_ENV == 'prod' ? 'https://api.pagofacil.tech/Wsrtransaccion/index/format/json' : 'https://sandbox.pagofacil.tech/Wsrtransaccion/index/format/json'
                            let tran_id = "tran_id_" + randomstring.generate({
                                length: 5,
                                charset: 'alphanumeric'
                            }).toUpperCase();
                            let cvt = request.body.cvt;
                            let cp = request.body.cp;
                            let expMonth = request.body.expMonth;
                            let expYear = request.body.expYear;

                            logger.debug("==========pagofacil key data====", pago_facil_key_data)
                            if (Object.keys(pago_facil_key_data).length > 0) {
                                let headers = {
                                    'Content-Type': 'multipart/form-data',
                                }

                                formData = {
                                    "method": "transaccion",
                                    "data[nombre]": userData[0].firstname,
                                    "data[apellidos]": userData[0].firstname,
                                    "data[numeroTarjeta]": payment_token,
                                    "data[cvt]": cvt,
                                    "data[cp]": cp,
                                    "data[mesExpiracion]": expMonth,
                                    "data[anyoExpiracion]": expYear,
                                    "data[monto]": parseFloat(orderNetAmount).toString(),
                                    "data[idSucursal]": pago_facil_key_data.idSucursa,
                                    "data[idUsuario]": pago_facil_key_data.idUsuario,
                                    "data[idServicio]": "3",
                                    "data[email]": userData[0].email,
                                    "data[telefono]": userData[0].mobile_no,
                                    "data[celular]": userData[0].mobile_no,
                                    "data[calleyNumero]": userData[0].customer_address,
                                    "data[colonia]": userData[0].customer_address,
                                    "data[municipio]": userData[0].customer_address,
                                    "data[status]": "Sonora",
                                    "data[estado]": "México",
                                    "data[pais]": "México"
                                }
                                logger.debug("========formData to send==========", formData)

                                logger.debug("=======JSON.stringify(formData)==========", JSON.stringify(formData))

                                var options = {
                                    method: 'POST',
                                    url: base_url,
                                    headers: headers,
                                    form: formData,
                                    json: true
                                };
                                web_request(options, async function (error, response, body) {
                                    logger.debug("====Body=====", error, body)
                                    if (error) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        payment_status = 1;
                                        payment_source = "pago_facil"
                                        if (body.WebServices_Transacciones.transaccion.autorizado == "0") {
                                            return sendResponse.sendErrorMessage(body.WebServices_Transacciones.transaccion.texto,
                                                reply, 400)
                                        } else {
                                            card_payment_id = body.WebServices_Transacciones.transaccion.idTransaccion
                                            callback(null);
                                        }
                                    }
                                });

                            }
                            else {

                                return sendResponse.sendErrorMessage("keys not added", reply, 400)
                            }

                        }
                        else if ((unique_id) == config.get("payment.saferpay.unique_id")) {
                            payment_source = "saferpay";

                            let safer_pay_data = await Universal.getSaferPayData(dbName);
                            let saferTransactionData = await Execute.Query(dbName, `select saferpay.saferpay_request_id,saferpay.saferpay_token from saferpay where saferpay.saferpay_request_id=?`, [request.body.payment_token]);
                            if (saferTransactionData && saferTransactionData.length && Object.keys(safer_pay_data).length > 0) {
                                let payload = {
                                    "RequestHeader": {
                                        "SpecVersion": "1.20",
                                        "CustomerId": safer_pay_data.saferpay_customer_id,
                                        "RequestId": saferTransactionData[0].saferpay_request_id,
                                        "RetryIndicator": 0
                                    },
                                    "Token": saferTransactionData[0].saferpay_token
                                }

                                let username = safer_pay_data.saferpay_username;
                                let password = safer_pay_data.saferpay_password;

                                let authToken = "Basic " + new Buffer(username + ":" + password).toString("base64");

                                var headers = {
                                    "Content-type": "application/json",
                                    "accetp": "application/json; charset=utf-8",
                                    'Authorization': authToken
                                };

                                let url = "https://test.saferpay.com/api/Payment/v1/Transaction/Authorize";

                                if (process.env.NODE_ENV == 'prod')
                                    url = "https://www.saferpay.com/api/Payment/v1/Transaction/Authorize";

                                web_request({
                                    method: 'POST',
                                    url: url,
                                    headers: headers,
                                    body: payload,
                                    json: true
                                }, async function (error, response, body) {

                                    if (body && body.Behavior == 'ABORT') {
                                        console.log('Response:', body);
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        let payloadCapture = {
                                            "RequestHeader": {
                                                "SpecVersion": "1.20",
                                                "CustomerId": safer_pay_data.saferpay_customer_id,
                                                "RequestId": saferTransactionData[0].saferpay_request_id,
                                                "RetryIndicator": 0
                                            },
                                            "TransactionReference": {
                                                "TransactionId": body.Transaction.Id
                                            }
                                        }

                                        let CaptureUrl = "https://test.saferpay.com/api/Payment/v1/Transaction/Capture";

                                        if (process.env.NODE_ENV == 'prod')
                                            CaptureUrl = "https://www.saferpay.com/api/Payment/v1/Transaction/Capture";

                                        var catptureId = "";
                                        await web_request({
                                            method: 'POST',
                                            url: CaptureUrl,
                                            headers: headers,
                                            body: payloadCapture,
                                            json: true
                                        }, async (error, test, capdata) => {
                                            if (capdata && capdata.CaptureId) {
                                                catptureId = capdata.CaptureId
                                            }
                                        })

                                        card_payment_id = body.Transaction.Id;
                                        payment_status = 1

                                        await Execute.Query(request.dbName, `update saferpay set other=?, catpture_id=? where saferpay_request_id=?`, [card_payment_id, catptureId, request.body.payment_token]);
                                        callback(null);
                                        // sendResponse.sendSuccessData(body, constant.responseMessage.SUCCESS, reply, 200);
                                    }

                                    if (error) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                });

                            }
                            else {
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                    reply, 400);
                            }

                        }
                        else {
                            console.log("=======eerr---------=====", unique_id)
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else {
                        if (parseInt(wallet_module) === 1 && parseInt(paymentType) === 4) {
                            walletLeftAmount = parseFloat(wallet_amount) - parseFloat(orderNetAmount)
                            updateWalletQuery = "update user set wallet_amount=? where id=?"
                            await ExecuteQ.Query(request.dbName, updateWalletQuery, [walletLeftAmount, id]);
                            let query = "insert into user_wallet_transactions(user_id,amount,card_payment_id,by_admin,added_deduct_through,is_add) values(?,?,?,?,?,?)"
                            let params = [id, orderNetAmount, "", 0, 3, 0];
                            await ExecuteQ.Query(request.dbName, query, params);
                            payment_source = "wallet";
                            paymentType = 4;
                            callback(null)
                        } else {
                            callback(null)
                        }
                    }
                }
                catch (Err) {
                    console.log("===PAYMENt===ERR!===?", Err)
                    return sendResponse.sendErrorMessage(
                        await Universal.getMsgText(
                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                        reply, 400);
                }
            }
        }],
        checkProductQuantity: ['makePayment', function (callback) {


            var avail_query = "select p.id,p.name from product p where id IN (?) and p.purchased_quantity>=p.quantity";
            var stmt = multiConnection[request.dbName].query(avail_query, [productIds], function (err, data) {

                console.log(stmt.sql);

                if (err) {
                    var msg = "sorry! some of items are not available";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if (data && data.length > 0) {
                        var msg = data[0].name + " is not available";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        callback(null);
                    }
                }
            })

        }],
        checkResturantTime: ['checkProductQuantity', function (callback) {
            var sql = "select s.id from supplier_branch sb join supplier s on sb.supplier_id=s.id join supplier_timings st on st.supplier_id=s.id "
            sql += "where s.id IN (?) and st.week_id = ? and (st.is_open = 0 or st.end_time <= ?)"
            var stmt = multiConnection[request.dbName].query(sql, [sup_ids, order_day, order_time], function (err, data) {
                if (err) {
                    var msg = "error getting time";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if ((data && data.length > 0 && servicetype == 1) || (data && data.length > 0 && servicetype == 2)) {
                        let finalArr = data.map((value) => value.name)
                        let msgStr = finalArr.toString().replace(/,/g, ' and ')

                        var msg = "Sorry! " + msgStr + " is closed now";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        callback(null);
                    }
                }
            })

        }],
        getAddsOnDeliveryAdminCharge: ['checkResturantTime', async function (callback) {
            let ads_on_query = "select product_adds_on.product_id,cart_adds_on.*,cart.delivery_charges,cart.handling_admin,cart.handling_supplier from " +
                " cart_adds_on join cart on cart.id=cart_adds_on.cart_id join product_adds_on on product_adds_on.id=cart_adds_on.adds_on_id where cart_adds_on.cart_id=?  ";
            let ads_on_data = await ExecuteQ.Query(request.dbName, ads_on_query, [cartId]);
            let delivery_charges, handling_admin, handling_supplier;
            let checkTableBookMacTheme = await ExecuteQ.Query(request.dbName,
                "select `key`, value from tbl_setting where `key` = ? and value='1'", ["table_book_mac_theme"]);
            if (ads_on_data && ads_on_data.length > 0) {
                for (const [index, i] of ads_on_data.entries()) {
                    adds_on_arr.push({
                        product_id: i.product_id,
                        adds_on_name: i.adds_on_name,
                        adds_on_type_name: i.adds_on_type_name,
                        quantity: i.quantity,
                        price: i.price,
                        serial_number: i.serial_number
                    })
                    totalAddOnAmount = totalAddOnAmount + parseFloat(i.price) * parseInt(i.quantity);
                    adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + parseFloat(i.price) * parseInt(i.quantity);
                    if (index == (ads_on_data.length - 1)) {
                        if (checkTableBookMacTheme && checkTableBookMacTheme.length > 0) {
                            adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + delivery_admin_supplier_charge + parseFloat(user_service_charge) + parseFloat(tip_agent)

                        } else {
                            adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + delivery_admin_supplier_charge + parseFloat(user_service_charge) + parseFloat(tip_agent) + parseFloat(slot_price)

                        }
                        callback(null)
                    }
                }
            }
            else {
                if (checkTableBookMacTheme && checkTableBookMacTheme.length > 0) {
                    adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + delivery_admin_supplier_charge + parseFloat(user_service_charge) + parseFloat(tip_agent)

                } else {
                    adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + delivery_admin_supplier_charge + parseFloat(user_service_charge) + parseFloat(tip_agent) + parseFloat(slot_price)

                }
                callback(null)
            }
        }],
        promoCodeValidation: ['getAddsOnDeliveryAdminCharge', async function (callback) {
            var promo_categories_validation = false, promo_supplier_validation = false, is_supplier = 0, is_category = 0;
            try {
                if (request.body.promoId != 0) {
                    await promoCntrl.PromoValidation(request.dbName, request.body.promoCode, request.body.languageId, request.users.id);
                    var promo_type = await promoCntrl.PromoType(request.dbName, request.body.promoCode, request.body.languageId);
                    var promo_data = await promoCntrl.PromoData(request.dbName, request.body.promoCode, request.body.languageId);
                    if (promo_type.promoType == 1) {

                        outerloop: for (const i of JSON.parse(promo_data[0].detailsJson)) {
                            for (const j of productList) {
                                if (parseInt(i.categoryId) == parseInt(j.category_id)) {
                                    discounted_supplier_ids.push(j.supplier_id)
                                    promo_categories_validation = true
                                    break outerloop;
                                }
                            }
                        }
                        if (promo_categories_validation == false) {
                            if (parseInt(request.body.languageId) == 14) {
                                var msg = "Promo Code Is Not Valid For Selected Items"
                                throw msg

                            } else {
                                var msg = "رمز القسيمة غير صالح للعناصر المحددة"
                                throw msg
                            }
                        }
                        else {
                            // logger.debug("===ELSE===")
                            callback(null)
                        }
                    }
                    else {


                        outerloop: for (const i of JSON.parse(promo_data[0].detailsJson)) {
                            for (const j of productList) {
                                if (parseInt(i.supplierId) == parseInt(j.supplier_id)) {
                                    promo_supplier_validation = true
                                    discounted_supplier_ids.push(j.supplier_id)
                                    break outerloop;
                                }
                            }
                        }


                        if (promo_supplier_validation == false) {
                            logger.debug("====IF==")
                            if (parseInt(request.body.languageId) == 14) {
                                var msg = "Promo Code Is Not Valid For Selected Items"
                                throw msg

                            } else {
                                var msg = "رمز القسيمة غير صالح للعناصر المحددة"
                                throw msg
                            }
                        }
                        else {
                            callback(null)
                        }

                    }

                }
                else {
                    callback(null);
                }

            }
            catch (err) {
                // console.log("=======ERR!==",err)
                return sendResponse.sendErrorMessage(err, reply, 400);
            }
        }],
        genrateOrder: ['promoCodeValidation', async function (callback) {
            let isEqualDivideDeliveryCharges = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_equal_divide_delivery", "1"])
            sIds = _.uniq(supplierIds)
            console.log(JSON.stringify(supplier_product_data), "***********ddddddddddddddddddddddddd")

            async.each(supplier_product_data,

                async function (product, callback1) {
                    let deliveryCharges = 0, handlingAdmin = 0;
                    if (sIds.length > 1) {
                        if (product && product.length > 0) {
                            for (const [index_1, i] of product.entries()) {
                                handlingAdmin = handlingAdmin + parseFloat(i.tax)
                                deliveryCharges = isEqualDivideDeliveryCharges && isEqualDivideDeliveryCharges.length > 0 ? parseFloat(i.delivery_charges) / sIds.length : i.delivery_charge
                                // user_service_charge=isEqualDivideDeliveryCharges && isEqualDivideDeliveryCharges.length>0?i.handlingSupplier/sIds.length:i.handlingSupplier
                                user_service_charge = request.dbName == "epito_0495" ? i.handlingSupplier : user_service_charge
                                console.log("***deliveryCharges***", deliveryCharges, isEqualDivideDeliveryCharges.length, parseFloat(i.delivery_charges) / sIds.length);

                            }
                        }

                    }
                    console.log(deliveryCharges, "deliveryCharges&&&&&&&&&&&&&&&&&&&&&&&&&")
                    orderGengrateV2(request.service_type, deliveryChargeData, request.dbName, reply, product, user, paymentType, cartId, type, offset,
                        isAgent, booking_date_time, buffer_time,
                        duration, discounted_supplier_ids,
                        request.body.discountAmount,
                        request.body.promoCode,
                        request.body.promoId,
                        self_pickup,
                        booking_to_date,
                        booking_from_date,
                        from_address,
                        to_address,
                        api_version,
                        from_latitude,
                        to_latitude,
                        from_longitude,
                        to_longitude,
                        card_payment_id,
                        transaction_id,
                        payment_source,
                        preparation_time,
                        questions,
                        tip_agent,
                        referralAmount,
                        zelle_receipt_url,
                        user_service_charge,
                        pres_image1,
                        pres_image2,
                        pres_image3,
                        pres_image4,
                        pres_image5,
                        pres_description,
                        type_id,
                        payment_after_confirmation,
                        payment_status,
                        have_pet,
                        parking_instructions,
                        cleaner_in,
                        area_to_focus,
                        giftAmount,
                        donate_to_someone,
                        user_subscription_delivery,
                        user_subscription_id,
                        wallet_discount_amount,
                        schedule_date,
                        schedule_end_date,
                        is_schedule,
                        slot_price,
                        sIds,
                        table_id,
                        totalLoayaloyDiscountAmount,
                        loyalityPointDiscountAmount,
                        have_coin_change,
                        order_source,
                        is_dine_in,
                        agent_verification_code,
                        is_cutlery_required,
                        drop_off_date,
                        order_delivery_type,
                        vehicle_number,
                        handlingAdmin,
                        deliveryCharges,
                        delivery_company_id,
                        seating_capacity,
                        no_touch_delivery,
                        liquor_bottle_deposit_tax,
                        liquor_plt_deposit_tax,
                        grouping_id,
                        function (err, result) {
                            if (err) {
                                callback1(err);
                            } else {
                                order.id = result;
                                order_data.push(order.id);
                                callback1(null);
                            }
                        })

                }, function (err) {
                    if (err) {
                        callback(err);
                    }
                    else {
                        callback(null)
                    }
                });
        }],
        addScheduleSlots: ['genrateOrder', async (callback) => {

            let is_dine_in_with_food = request.body.is_dine_in_with_food == undefined ? 0 : request.body.is_dine_in_with_food

            let table_request_id = request.body.table_request_id == undefined ? 0 : request.body.table_request_id;

            let vendorOrderLimitCheck = await ExecuteQ.Query(request.dbName, "select * from tbl_setting where `key`=? and `value`=?", ["vendorOrderLimitSupplierWise", "1"])

            if (vendorOrderLimitCheck && vendorOrderLimitCheck.length > 0) {


                let slot_id = request.body.slot_id == undefined ? 0 : request.body.slot_id
                let day_id = moment(booking_date).day();
                let query = "insert into supplier_booked_slots(day_id,supplier_id,order_id,user_id,slot_id,booked_slots,booked_date,booking_date_time) values(?,?,?,?,?,?,?,?)"
                let params = [day_id, 1, order_data[0], request.users.id, slot_id, slots, booking_date, dateTime]

                await ExecuteQ.Query(request.dbName, query, params);
                callback(null);


            } else {
                if (parseInt(is_dine_in) == 1 && parseInt(table_request_id) > 0) {
                    // let slot_id = request.body.slot_id==undefined?0:request.body.slot_id
                    // let table_request_id = request.body.table_request_id
                    // let table_id = request.body.table_id
                    // let booked_slot_id = request.body.booked_slot_id
                    let data = await ExecuteQ.Query(request.dbName, "select * from user_table_booked where id=?", [table_request_id]);
                    if (data && data.length > 0) {

                    }
                    // let query = "update supplier_booked_slots set order_id =? where id=?";
                    // let params = [order_data[0],booked_slot_id];
                    // await ExecuteQ.Query(request.dbName,query,params);
                    let query = "update user_table_booked set order_id =? where id=?";
                    let params = [order_data[0], table_request_id];
                    await ExecuteQ.Query(request.dbName, query, params);
                    callback(null);

                }
                logger.debug("================tablebookig details=========", is_dine_in, is_dine_in_with_food)
                if (parseInt(is_dine_in_with_food) == 1 && parseInt(is_dine_in) == 1) {

                    let slot_id = request.body.slot_id == undefined ? 0 : request.body.slot_id
                    let day_id = moment(booking_date).day();
                    let query = "insert into supplier_booked_slots(day_id,supplier_id,order_id,user_id,slot_id,booked_slots,booked_date,booking_date_time) values(?,?,?,?,?,?,?,?)"
                    let params = [
                        day_id,
                        1,
                        order_data[0],
                        request.users.id,
                        slot_id,
                        slots,
                        booking_date,
                        dateTime
                    ]
                    await ExecuteQ.Query(request.dbName, query, params);
                    callback(null);
                }

                if (parseInt(is_schedule) == 1) {
                    let slot_id = request.body.slot_id == undefined ? 0 : request.body.slot_id
                    let day_id = moment(booking_date).day();
                    let query = "insert into supplier_booked_slots(day_id,supplier_id,order_id,user_id,slot_id,booked_slots,booked_date,booking_date_time) values(?,?,?,?,?,?,?,?)"
                    let params = [
                        day_id,
                        1,
                        order_data[0],
                        request.users.id,
                        slot_id,
                        slots,
                        booking_date,
                        dateTime
                    ]
                    await ExecuteQ.Query(request.dbName, query, params);
                    callback(null);
                } else {
                    callback(null);
                }
            }

        }],
        addOrderProduct: ['addScheduleSlots', function (callback) {
            // console.log("prom////",order_data);
            var index, order_id;
            async.each(supplier_product_data, function (p_data, callback2) {
                index = supplier_product_data.indexOf(p_data);
                order_id = order_data[parseInt(index)]
                // console.log("====p_data==",order_id,index);
                if (promoationType == 1) {
                    addPromotionProduct(request.dbName, reply, cartId, p_data, parseInt(order_id), user, languageId, function (err, result) {
                        if (err) {
                            logger.debug("========err1===============")
                            callback2(err);
                        } else {
                            logger.debug("==================else of add order product ========--=========")

                            callback2(null);
                        }
                    })
                }

                else {
                    console.log(cartId, "---------cartId-------")
                    console.log(p_data, "---------p_data----------")
                    console.log(order_id, "-----------order_id-----")
                    addOrderProduct(request.dbName, reply, cartId, p_data,
                        parseInt(order_id), user, type, duration, user_type_id, function (err, result) {
                            if (err) {
                                logger.debug("========err2===============")
                                callback2(err);
                            } else {
                                logger.debug("==================else of add order product =========**=========")

                                callback2(null);
                            }
                        })
                }
            }, function (err) {
                if (err) {
                    logger.debug("========err3 end===============")
                    callback(err);
                }
                else {
                    logger.debug("==================else of add order product =========end=========")
                    callback(null)
                }
            });
        }],
        getSupplierCommission: ['addOrderProduct', async function (callback) {
            let orderIds = order_data.toString();
            let sql = "select sp.commission/100 as supplier_commission,sp.pickup_commission/100 as pickup_commission, o.id as order_id, cp.supplier_id ," +
                " sp.vat_value,o.net_amount as total_price from orders o join " +
                " order_prices op on o.id = op.order_id join cart_products cp on cp.product_id = op.product_id join supplier" +
                " sp on sp.id = supplier_id where o.id in (" + orderIds + ") group by supplier_id"
            try {
                let data = await ExecuteQ.Query(request.dbName, sql, []);
                supplier_commission = data;
                callback(null)
            }
            catch (Err) {
                callback(Err)
            }

        }],
        addSupplierHandlingCharges: ['getSupplierCommission', async function (callback) {

            let handling_supplier_charges = 0;
            let commission_settings = await Universal.isCommissionDynamicEnabled(request.dbName);
            console.log("COMMISSION HANDLING #############################################", commission_settings)
            let commissionOnCategoryCheck = await Execute.Query(request.dbName,
                "select `key`,value from tbl_setting where `key`=? and value=? ", ["enable_supplier_commission_on_category", "1"]);
            if (commissionOnCategoryCheck && commissionOnCategoryCheck.length > 0) {
                let supplierCommision = 0;
                let catComquery = `select c.id as catId,c.name as catName,p.name as prodName,c.commission 
                from orders o join order_prices op on op.order_id = o.id
                join product p on p.id = op.product_id join categories c on c.id = p.category_id
                where o.id=? GROUP by catId`;

                let catComData = await Execute.Query(request.dbName, catComquery, [supplier_commission[0].order_id]);

                for (const [index, i] of catComData.entries()) {
                    supplierCommision += i.commission
                }

                for (let i = 0; i < supplier_commission.length; i++) {
                    let sc_total_price = supplier_commission[i].total_price;
                    console.log("3333333333333333333", sc_total_price)
                }

                let supplier_vat_value = (subTotal * parseFloat(supplier_commission[0].vat_value)) / 100;

                let orderComUpdateQuery = "update orders set supplier_commision=?,supplier_vat_value=? where id = ?";

                await Execute.Query(request.dbName, orderComUpdateQuery, [supplierCommision, supplier_vat_value,
                    supplier_commission[0].order_id])

                callback(null)



            } else {
                if (supplier_commission && supplier_commission.length) {

                    let supplier_vat_value = 0;

                    console.log("111111111111111111111111")

                    let admin_commision =0;

                    if (request.dbName == "yunofood_0906") {
                        admin_commision = request.body.admin_commission;
                    }
                    
                    let sql = "update orders set supplier_commision=?,supplier_vat_value=?,admin_commission=? where id = ?"

                    
                    console.log("111111111111111111111111")

                    for (let i = 0; i < supplier_commission.length; i++) {
                        console.log("2222222222222222222222222")
                        var sc_total_price = supplier_commission[i].total_price;
                        console.log("3333333333333333333", sc_total_price)
                        if (Object.keys(commission_settings).length > 0) {
                            console.log("44444444444444444444444444", commission_settings)
                            if (commission_settings.is_commission_dynamic == "1") {
                                let sc_total_price_data = await ExecuteQ.Query(request.dbName, "SELECT SUM(price * quantity)+" + totalAddOnAmount + " sub_total FROM `order_prices` WHERE order_id=? GROUP BY order_id", [supplier_commission[i].order_id])
                                console.log("555555555555555555555555555555")
                                if (sc_total_price_data[0] && sc_total_price_data[0].sub_total != "") {
                                    sc_total_price = sc_total_price_data[0].sub_total;
                                    console.log("666666666666666666666666", sc_total_price, supplier_vat_value)
                                }
                            }
                        }
                        console.log("77777777777777777777777777", sc_total_price)
                        if (parseInt(self_pickup) == 1) {
                            console.log("88888888888888888888888888", supplier_commission[i].pickup_commission, "*", sc_total_price)
                            handling_supplier_charges = supplier_commission[i].pickup_commission * sc_total_price;
                        } else {
                            console.log("9999999999999999999999999999999999", supplier_commission[i].supplier_commission, "*", sc_total_price)
                            handling_supplier_charges = supplier_commission[i].supplier_commission * sc_total_price;
                        }
                        supplier_vat_value = (parseFloat(handling_supplier_charges) * parseFloat(supplier_commission[0].vat_value)) / 100;

                        if (request.dbName == "northwesteats_0692") {

                            supplier_vat_value = request.body.vat_value;

                        }
                        
                        let stmt = multiConnection[request.dbName].query(sql, [handling_supplier_charges, supplier_vat_value,admin_commision, supplier_commission[i].order_id], function (err, data) {
                            console.log("==========stmt in add SupplierHandling charges=============", stmt.sql)
                            if (err) {
                                logger.debug("==========err in addSupplierHandlingCharges==========");
                                callback(err)
                            } else {
                                logger.debug("========== in addSupplierHandlingCharges====function======");
                                callback(null)
                            }
                        })
                    }

                } else {
                    callback(null);
                }
            }

        }],
        updatePurchasedQuantity: ['addSupplierHandlingCharges', async function (callback) {
            try {
                logger.debug("============in the update purchased quantity===============")
                var updateCartSql = "update product p inner join order_prices orp on orp.product_id=p.id " +
                    " inner join cart_products crp on crp.product_id=orp.product_id set p.purchased_quantity= p.purchased_quantity" +
                    " + orp.quantity where orp.order_id IN (?)";
                await ExecuteQ.Query(request.dbName, updateCartSql, [order_data])
                callback(null)
            }
            catch (Err) {
                callback(Err)
            }

        }],
        updateNetAmoountQuantity: ['updatePurchasedQuantity', async function (callback) {
            try {
                let updateAMountSql;
                console.log("===delivery_admin_supplier_charge==adds_on_delivery_admin_charges>", delivery_admin_supplier_charge, adds_on_delivery_admin_charges)
                if (sIds.length > 1) {
                    adds_on_delivery_admin_charges = adds_on_delivery_admin_charges - delivery_admin_supplier_charge
                    updateAMountSql = "update orders as ord " +
                        "set ord.net_amount=((select SUM(orss.price*orss.quantity) from order_prices orss where orss.order_id=ord.id )+(select IFNULL(cart.addOn,0) from cart where cart.id=ord.cart_id)+ord.handling_admin+ord.delivery_charges+ord.user_service_charge+ord.liquor_plt_deposit_tax+ord.liquor_bottle_deposit_tax)-ord.loyality_point_discount " +
                        "where ord.id IN(?)";
                }
                else {

                    updateAMountSql = "update orders as ord " +
                        "set ord.net_amount=((select SUM(orss.price*orss.quantity) from order_prices orss where orss.order_id=ord.id )+(select IFNULL(cart.addOn,0) from cart where cart.id=ord.cart_id)+ord.liquor_plt_deposit_tax+ord.liquor_bottle_deposit_tax+" + adds_on_delivery_admin_charges + ")-ord.loyality_point_discount " +
                        "where ord.id IN(?)";
                }
                let settingQuery = "SELECT *  FROM `tbl_setting` WHERE `key` LIKE 'without_amount_update' AND `value` LIKE '1'"
                let withoutAmountUpdate = await ExecuteQ.Query(request.dbName, settingQuery)
                if (withoutAmountUpdate && withoutAmountUpdate.length > 0) {

                }
                else {
                    await ExecuteQ.Query(request.dbName, updateAMountSql, [order_data]);
                }


                let orderDataQuery = `select net_amount from orders where id in (${order_data}) `;

                let netAmountDetails = await ExecuteQ.Query(request.dbName, orderDataQuery, []);

                console.log("============netAmountDetails=======", netAmountDetails);

                if (netAmountDetails && netAmountDetails.length > 0) {
                    console.log("=====netAmountDetails[0].net_amounts============", netAmountDetails[0].net_amount)
                    let netAmount = parseInt(netAmountDetails[0].net_amount);

                    if (request.dbName == "rushdelivery_0598") {
                        netAmount = netAmountDetails[0].net_amount;
                    }

                    console.log("=====netAmount========", netAmount)

                    if (netAmount <= 0) {
                        let query = `update orders set net_amount = 0 where id=${order_data}`
                        await ExecuteQ.Query(request.dbName, query, [])
                    }
                }

                callback(null);
            }
            catch (Err) {
                callback(Err)
            }
        }],
        applyPromocode: ['updateNetAmoountQuantity', async function (callback) {
            try {

                // ======used for storing an earned loyality point of particular user if applicable===
                let isLoyalityPointEnable = await ExecuteQ.Query(request.dbName,
                    "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
                    ["is_loyality_enable", "1"]);


                if (isLoyalityPointEnable && isLoyalityPointEnable.length > 0) {
                    let netOrderAmount = 0;
                    let orderAmountData = await ExecuteQ.Query(request.dbName, `select SUM(ord.net_amount) as netAmount from orders ord where ord.id IN (?)`, [order_data]);
                    netOrderAmount = orderAmountData && orderAmountData.length > 0 ? orderAmountData[0].netAmount : 0
                    logger.debug("=netOrderAmount===", orderNetAmount);
                    var userLoyalityPoint = 0, earnedAmount = 0;

                    let userLoayalityData = await ExecuteQ.Query(request.dbName, `select id,loyalty_points from user where id=?`, [request.users.id]);

                    userLoyalityPoint = userLoayalityData && userLoayalityData.length > 0 ? userLoayalityData[0].loyalty_points : 0
                    // let loyalityLevelData=await ExecuteQ.Query(request.dbName,`select name,id,image,total_loyality_points,is_for_all_category,per_point_order_amount,per_point_amount,per_point_amount_type from loyality_level where is_deleted=? order by total_loyality_points desc`,[0]);

                    let loyalityLevelData = await Universal.getUserLoyalityLevelData(request.dbName, [request.users.id]);

                    if (loyalityLevelData && loyalityLevelData.length > 0) {
                        for await (const [index, i] of loyalityLevelData.entries()) {
                            //first check which loyality level user exist
                            // if(parseInt(userLoyalityPoint)>=parseInt(i.total_loyality_points)){
                            // check is user applicabale for getting an loyality point 
                            if (parseFloat(i.per_point_order_amount) <= parseFloat(netOrderAmount)) {
                                if (parseInt(i.per_point_amount_type) == 1) {
                                    earnedAmount = parseFloat(netOrderAmount) * i.per_point_amount / 100
                                }
                                else {
                                    earnedAmount = i.per_point_amount
                                }
                            }
                            // }
                            if (index == loyalityLevelData.length - 1) {
                                if (parseInt(earnedAmount) == 0) {
                                    if (parseFloat(i.per_point_order_amount) <= parseFloat(netOrderAmount)) {
                                        if (parseInt(i.per_point_amount_type) == 1) {
                                            earnedAmount = parseFloat(netOrderAmount) * i.per_point_amount / 100
                                        }
                                        else {
                                            earnedAmount = i.per_point_amount
                                        }
                                    }
                                }
                            }

                        }
                    }
                    logger.debug("==LOYALITY==EARNED--AMOUNT==>>", earnedAmount);


                    let enable_min_loyality_points = await ExecuteQ.Query(request.dbName,
                        "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
                        ["enable_min_loyality_points", "1"]);


                    if (earnedAmount >= 0) {

                        if (enable_min_loyality_points && enable_min_loyality_points.length > 0) {
                            let minOrderAmountForLoyalityPoints = await ExecuteQ.Query(request.dbName,
                                "select `key`,`value` from tbl_setting where `key`=? ",
                                ["min_order_amount_for_loyality_points"]);

                            let loyalityPointsOnOrder = await ExecuteQ.Query(request.dbName,
                                "select `key`,`value` from tbl_setting where `key`=? ",
                                ["loyality_point_per_order"]);

                            console.log("cdeddc ................................", parseFloat(minOrderAmountForLoyalityPoints[0].value))
                            if (minOrderAmountForLoyalityPoints
                                && minOrderAmountForLoyalityPoints.length > 0) {
                                minOrderAmountForLoyalityPoints =
                                    parseFloat(minOrderAmountForLoyalityPoints[0].value) || 0
                            }

                            if (loyalityPointsOnOrder
                                && loyalityPointsOnOrder.length > 0) {
                                loyalityPointsOnOrder =
                                    parseFloat(loyalityPointsOnOrder[0].value) || 0

                            }
                            if (parseFloat(orderNetAmount) >=
                                parseFloat(minOrderAmountForLoyalityPoints)) {
                                let totalPoints = parseFloat(orderNetAmount) / parseInt(minOrderAmountForLoyalityPoints);
                                loyalityPointsOnOrder = parseInt(loyalityPointsOnOrder) * parseInt(totalPoints);
                                earnedAmount = earnedAmount * parseFloat(loyalityPointsOnOrder);
                                await ExecuteQ.Query(request.dbName,
                                    `insert into loyality_point_earning(user_id,order_id,earned_amount,earned_points) values(?,?,?,?)`,
                                    [request.users.id, order_data[0], earnedAmount + totalLoayaloyDiscountAmountByCat, loyalityPointsOnOrder])

                            }
                        } else {

                            await ExecuteQ.Query(request.dbName,
                                `insert into loyality_point_earning(user_id,order_id,earned_amount) values(?,?,?)`,
                                [request.users.id, order_data[0], earnedAmount])

                        }
                    }
                }

                //==========================

                let autoConfirmation = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_auto_confirmation", "1"])
                logger.debug("=====AutoConfrmtn===>>>", autoConfirmation);
                if (autoConfirmation && autoConfirmation.length > 0) {
                    var currentCDate = moment().utcOffset(offset);
                    var confirmedAt = currentCDate._d;
                    await ExecuteQ.Query(request.dbName, `update orders set status=?,confirmed_on=? where id IN(?)`, [1, confirmedAt, [order_data]])
                }
                callback(null)
            }
            catch (Err) {
                logger.debug("=Auto===Err!==", Err);
                callback(null)
            }
        }],
        orderInformation: ['applyPromocode', async function (callback) {

            var select_query = "select ors.grouping_id,ors.agent_verification_code,ors.wallet_discount_amount,ors.supplier_branch_id, usr.email as customer_email,IFNULL(CONCAT(usr.firstname,usr.lastname),'') AS customer_name,IFNULL(ors.pres_description,'') AS pres_description,ors.have_coin_change,ors.buffer_time, " +
                " ors.no_touch_delivery,ors.drop_off_date_utc,ors.drop_off_date,sp.id as supplier_id,sp.latitude as supplier_latitude,sp.longitude as supplier_longitude,sp.email as supplier_email,ors.user_service_charge,sp.name as supplier_name,ors.created_on,ors.schedule_date as delivery_date,ors.schedule_date as delivered_on,usr.mobile_no as customer_phone_number,usr.user_image as customer_image ,CAST(usr.id as CHAR(50)) as customer_id," +
                " spb.name as supplier_branch_name,spb.address as supplier_branch_address,spb.latitude as supplier_branch_latitude,spb.longitude as supplier_branch_longitude,ors.promo_discount,ors.promo_code,ors.payment_type,IFNULL(ors.comment, '') as comment,ors.remarks,ors.urgent_price," +
                " ors.urgent,ors.tip_agent,ors.net_amount,ors.delivery_charges,ors.handling_supplier," +
                " ors.handling_admin,CAST(ors.id AS CHAR) as order_id " +
                " from orders ors join order_prices op on op.order_id=ors.id join supplier inner join" +
                " supplier_branch spb on spb.id=op.supplier_branch_id inner join supplier sp " +
                " on sp.id=spb.supplier_id inner join user usr on usr.id=ors.user_id where ors.id IN (?) group by ors.id"
            let data = await ExecuteQ.Query(request.dbName, select_query, [order_data]);

            if (data && data.length > 0) {
                agentOrderDetail = data;

            }
            else {
                agentOrderDetail = []
            }
            callback(null)

        }],
        deliveryAddress: ["orderInformation", async function (callback) {
            var select_query = "select ors.id as order_id,usr.latitude,usr.longitude,usr.address_line_1,usr.address_line_2,usr.pincode,usr.city,usr.landmark, " +
                " usr.reference_address,IFNULL(usr.name,'') as name,usr.phone_number,usr.directions_for_delivery,usr.address_link,usr.customer_address from orders ors left join user_address usr on usr.id=ors.user_delivery_address where ors.id IN(?)"
            let deliveryData = await ExecuteQ.Query(request.dbName, select_query, [order_data]);
            logger.debug("=================in deliveryAddress-==============", agentOrderDetail, deliveryData)
            if (agentOrderDetail && agentOrderDetail.length > 0) {
                let branchData = await ExecuteQ.Query(request.dbName, `SELECT COUNT(DISTINCT(supplier_branch_id)) as branchCount 
        FROM order_prices where order_id IN(?)`,
                    [order_data]);
                for (var j = 0; j < agentOrderDetail.length; j++) {
                    agentOrderDetail[j].adds_on = adds_on_arr
                    agentOrderDetail[j].duration = duration;
                    agentOrderDetail[j].have_multiple_branch = branchData && branchData.length > 0 ? branchData[0].branchCount : 0
                    if (deliveryData && deliveryData.length > 0) {
                        for (var i = 0; i < deliveryData.length; i++) {
                            if (parseInt(deliveryData[i].order_id) == parseInt(agentOrderDetail[j].order_id)) {
                                deliveryData[i].type = 0;
                                agentOrderDetail[j].address = deliveryData[i]
                            }
                        }
                    }
                    else {
                        agentOrderDetail[j].address = {}
                    }
                    if (j == (agentOrderDetail.length - 1)) {
                        callback(null)
                    }
                }
            }
            else {
                callback(null)
            }
        }],
        orderItemData: ['deliveryAddress', async function (callback) {
            // supplier_branch_name: Joi.string().optional().allow(""),
            // supplier_branch_address: Joi.string().optional().allow(""),
            // latitude: Joi.number().optional().allow(""),
            // longitude: Joi.number().optional().allow(""),

            let select_query = "select spb.name as supplier_branch_name,spb.address as supplier_branch_address,spb.latitude,spb.longitude,op.handling_admin,op.id as order_price_id,op.order_id,op.quantity,op.price,op.product_id as item_id,op.product_name as item_name, " +
                " op.product_reference_id,op.product_dimensions,op.product_upload_reciept,op.product_owner_name,op.product_desc as item_desc,op.product_name as item_name,op.image_path from order_prices op left join supplier_branch spb on spb.id=op.supplier_branch_id where op.order_id IN(?)"
            let orderItemData = await ExecuteQ.Query(request.dbName, select_query, [order_data])
            // let st=multiConnection[request.dbName].query(select_query,[order_data],function(err,orderItemData){
            //     if(err){
            //         logger.debug("========err7===============")
            //         callback(err)
            //     }
            //     else{
            logger.debug("=================in orderItemData-==============", agentOrderDetail)

            var items = []
            // agentOrderItemDetail=orderItemData
            if (agentOrderDetail && agentOrderDetail.length > 0) {
                for (var j = 0; j < agentOrderDetail.length; j++) {
                    if (booking_date_time != "") {
                        agentOrderDetail[j].delivery_date = booking_date_time;
                    }
                    if (orderItemData && orderItemData.length > 0) {
                        for (var i = 0; i < orderItemData.length; i++) {
                            if (parseInt(orderItemData[i].order_id) == parseInt(agentOrderDetail[j].order_id)) {
                                items.push(orderItemData[i])
                                agentOrderDetail[j].items = items
                            }
                            if (i == (orderItemData.length - 1)) {
                                items = []
                            }
                        }
                    }
                    else {
                        agentOrderDetail[j].items = []
                    }
                    if (j == (agentOrderDetail.length - 1)) {
                        callback(null)
                    }
                }
            }
            else {
                callback(null)
            }

            //     }
            // })


        }],

        addOrderToAgent: ['orderItemData', async function (callback) {

            var final_data, agent_booking_array = [], api_key, secret_key;
            logger.debug("=======agentOrderDetail==>>===", agentArray);

            let supplierId = _.uniq(supplierIds);

            let delivery_type_check = await Universal.getDeliveryTypeKey(request.dbName);
            let disableAutoData = await Universal.getKeysValue(["disable_auto_assignment"], request.dbName);
            let getOrderTypeGrouping = await Universal.getOrderTypeGrouping(request.dbName);

            let disableAutoHome = await Universal.getKeysValue(["disable_auto_assignment_home_service"], request.dbName);

            console.log(disableAutoHome.length, "disableAutoHome.length")

            if (Object.keys(delivery_type_check).length > 0) {
                let supplierDetails = await ExecuteQ.Query(request.dbName,
                    "select id,is_own_delivery from supplier where id=?", [supplierId[0]]);
                if (supplierDetails && supplierDetails.length > 0) {
                    logger.debug("===========supplierDetails========", supplierDetails);
                    if (parseInt(supplierDetails[0].is_own_delivery) == 1) {
                        logger.debug("===========parseInt(supplierDetails[0].is_own_delivery)==1========", supplierDetails);
                        return callback(null)
                    }
                }
            }

            if (agentArray && agentArray.length > 0 && disableAutoHome.length == 0) {
                agentOrderDetail[0].user_id = agentArray[0].id
                _.each(agentArray, function (i) {
                    agentOrderDetail[0].user_id = i.id
                    agent_booking_array.push(i.id, order_data[0])
                })
                final_data = _.chunk(agent_booking_array, 2);

                var insert_query = "insert into  agent_orders(`agent_id`,`order_id`) values ?"
                let data = await ExecuteQ.Query(request.dbName, insert_query, [final_data]);

                try {
                    var GetAgentDbData = await getAgentDbInformation(request.dbName);
                    var agentConnection = await RunTimeAgentConnection(GetAgentDbData);
                    // logger.debug("---agentConnection-",agentConnection)
                    var api_key = await agent.KeyData(agentConnection, config.get("agent.api_key"));
                    var secret_key = await agent.KeyData(agentConnection, config.get("agent.db_secret_key"));
                    var assignOrder = await agent.AssignOrderToAgent(agentOrderDetail[0], api_key, secret_key)
                    // logger.debug("---api_key,secret_key=VALUE--",agentConnection,api_key,secret_key);
                    callback(null)
                }
                catch (err) {
                    logger.debug("========err9===============", err)
                    callback(err)
                }

            }
            else {

                var servicetype = await agent.screenInfo(request.dbName);

                logger.debug("======servicetype===", servicetype, self_pickup)


                let disableAgentOrderLocationAssign = await Universal.disableAgentOrderLocationAssignment(request.dbName);
                /***********************this check is used to disable order assignment notification at agent side******************** */
                logger.debug("==========disableAgentOrderLocationAssign========",
                    disableAgentOrderLocationAssign);
                if (disableAgentOrderLocationAssign) {
                    callback(null)
                }

                else if ((servicetype.app_type == 1 || servicetype.app_type == 2) && parseInt(self_pickup) == 0 && disableAutoData.length == 0) {
                    var GetAgentDbData = await getAgentDbInformation(request.dbName);
                    var agentConnection = await RunTimeAgentConnection(GetAgentDbData);
                    var api_key = await agent.KeyData(agentConnection, config.get("agent.api_key"));
                    var secret_key = await agent.KeyData(agentConnection, config.get("agent.db_secret_key"));

                    if (Object.keys(getOrderTypeGrouping).length > 0) {
                        // for(const [index,i] of agentOrderDetail.entries()){
                        let orders = {
                            ordersJson: agentOrderDetail
                        }
                        var assignOrder = await agent.AssignOrderToAgentByLocationV1(orders, api_key, secret_key);
                        callback(null)

                        //     if(index==(agentOrderDetail.length-1)){
                        //         callback(null)
                        //     }
                        // }
                    } else {
                        for (const [index, i] of agentOrderDetail.entries()) {
                            var assignOrder = await agent.AssignOrderToAgentByLocation(i, api_key, secret_key)
                            if (index == (agentOrderDetail.length - 1)) {
                                callback(null)
                            }
                        }
                    }
                }
                else if ((parseInt(type_id) == 1 || parseInt(type_id) == 2) && parseInt(self_pickup) == 0 && disableAutoData.length == 0) {
                    var GetAgentDbData = await getAgentDbInformation(request.dbName);
                    var agentConnection = await RunTimeAgentConnection(GetAgentDbData);

                    var api_key = await agent.KeyData(agentConnection, config.get("agent.api_key"));
                    var secret_key = await agent.KeyData(agentConnection, config.get("agent.db_secret_key"));

                    console.log("======getOrderTypeGrouping==========getOrderTypeGrouping===========", getOrderTypeGrouping);
                    if (Object.keys(getOrderTypeGrouping).length > 0) {
                        console.log("======getOrderTypeGrouping==========getOrderTypeGrouping=====22======", getOrderTypeGrouping);

                        // for(const [index,i] of agentOrderDetail.entries()){
                        let orders = {
                            ordersJson: agentOrderDetail
                        }
                        var assignOrder = await agent.AssignOrderToAgentByLocationV1(orders, api_key, secret_key);
                        callback(null)

                        //     if(index==(agentOrderDetail.length-1)){
                        //         callback(null)
                        //     }
                        // }
                    } else if (disableAutoHome.length != 0) {
                        console.log(agentOrderDetail, "agentOrderDetailagentOrderDetail")
                        agentOrderDetail[0].agent_id = agentArray[0].id
                        for (const [index, i] of agentOrderDetail.entries()) {
                            var assignOrder = await agent.AssignOrderToAgentByLocationV2(i, api_key, secret_key)
                            if (index == (agentOrderDetail.length - 1)) {
                                callback(null)
                            }
                        }
                    }
                    else {
                        for (const [index, i] of agentOrderDetail.entries()) {
                            var assignOrder = await agent.AssignOrderToAgentByLocation(i, api_key, secret_key)
                            if (index == (agentOrderDetail.length - 1)) {
                                callback(null)
                            }
                        }
                    }


                }
                else {
                    callback(null)
                }



            }
        }],
        notificationData: ['addOrderToAgent', async function (callback) {



            var getAgentDbData = await common.GetAgentDbInformation(request.dbName);
            var agentConnection = await common.RunTimeAgentConnection(getAgentDbData);
            var sqlQuery = "update cbl_user_orders set tip_agent=? where order_id=?";
            var agent_order_details = await ExecuteQ.QueryAgent(agentConnection, sqlQuery, [tip_agent, order_data[0]]);
            console.log("agent_order_details ======= ", agent_order_details)


            getvalues(request.dbName, reply, order.id, function (err, values) {
                if (err) {
                    logger.debug("========err10===============")
                    sendResponse.somethingWentWrongError(reply);
                }
                else {

                    customer_email = values.user_email
                    deviceToken = values.device_token;
                    deviceType = values.device_type;
                    userId = values.user_id;
                    userName = values.user_name;
                    deliveryDate = values.delivery_date;
                    request.category_id = values.category_id;
                    supplierEmail = values.email;
                    supplierPhone = values.phone;
                    branchToken = values.branch_token;
                    branchDeviceType = values.branch_device_type;
                    supplierId = values.supplier_id;
                    net_amount = values.net_amount;
                    supplierName = values.supplierName;
                    mobileNumber = values.mobileNumber;
                    countryCode = values.country_code
                    area = values.area;
                    landmark = values.customer_full_address;
                    address_link = values.address_link;
                    created_on = (request.dbName == '4n1deliverylive_0755') ? moment(values.created_on).format('MM/DD/YYYY  hh:mm:ss a') : moment(values.created_on).format('YYYY-MM-DD HH:mm a');
                    schedule_date = (request.dbName == '4n1deliverylive_0755') ? moment(values.schedule_date).format('MM/DD/YYYY hh:mm:ss a') : moment(values.schedule_date).format('YYYY-MM-DD HH:mm a');
                    houseNumber = values.pincode != null && values.pincode != undefined && values.pincode != "" ? (values.pincode).split(',') : "";
                    if (houseNumber[1]) {
                        building = houseNumber[1];
                        building = building.substring(2);
                    }
                    else {
                        building = '';
                    }

                    deliveryCharges = values.delivery_charges;
                    handling = parseFloat(values.handling_admin) + parseFloat(values.handling_supplier);
                    urgent_price = values.urgent_price;
                    quantity = values.quantity;
                    if (values.payment_type == 0) {
                        payment_type = 'CASH'
                    } else {
                        payment_type = 'CARD'
                    }
                    callback(null);
                }
            });

        }],
        sendPushNotificationToAdmin: ['notificationData', async function (cb) {
            var fcmToken = [], adminFcmToken = [];
            var cur_date = moment().utcOffset(offset);
            var created_on = (request.dbName == '4n1deliverylive_0755') ? moment(new Date()).utcOffset(offset).format('MM/DD/YYYY hh:mm:ss a') : moment(new Date()).utcOffset(offset).format('YYYY-MM-DD HH:mm a');
            suplrIds = _.uniq(supplierIds)
            let orderApprovalByAdmin = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['order_approval_by_admin'])
            if (orderApprovalByAdmin && orderApprovalByAdmin.length > 0)
                suplrIds = [];

            let adminData = await ExecuteQ.Query(request.dbName,
                "select lg.language_code,ad.fcm_token,ad.email,ad.id,ad.language_id from admin ad join language lg on lg.id=ad.language_id where is_active=1", []);

            if (adminData && adminData.length > 0) {
                let aData;
                for (const [index, i] of adminData.entries()) {
                    request.userLanguage = i.language_code;
                    adminFcmToken.push(i.fcm_token);
                    aData = {
                        "status": 0,
                        "message": await Universal.getMsgText(parseInt(i.language_id), request, 0),
                        "orderId": order_data[0],
                        "order_id": order_data,
                        "grouping_id": grouping_id,
                        "self_pickup": self_pickup,
                        "sound": "default",
                        "title": "order",
                        "tag": "newOrder"
                    }
                    await saveadminsNotifications(request.dbName, [i], supplierId, order_data[0],
                        aData.message, 1, i.id);
                }
                await lib.sendFcmPushNotification(adminFcmToken, aData, request.dbName);
            }

            var supplierDatas = [];

            if (suplrIds.length)
                supplierDatas = await ExecuteQ.Query(request.dbName,
                    "select s.device_token,s.device_type,s.id,sa.fcm_token from supplier s left join supplier_admin sa on sa.supplier_id=s.id  where s.id in (?)", suplrIds);

            if (supplierDatas.length)
                _.each(supplierDatas, function (i) {
                    if (i.fcm_token != "" && i.fcm_token != null && i.fcm_token != undefined) {
                        fcmToken.push(i.fcm_token)
                    }
                    else {
                        fcmToken.push(i.device_token)
                    }

                })

            var data = {
                "status": 0,
                "message": await Universal.getMsgText(14, request, 0),
                "orderId": order_data[0],
                "order_id": order_data,
                "grouping_id": grouping_id,
                "self_pickup": self_pickup,
                "sound": "default",
                "title": "order",
                "tag": "newOrder"
            }
            let sendNotificationToSupplier = true;
            if (orderApprovalByAdmin && orderApprovalByAdmin.length > 0)
                sendNotificationToSupplier = false;

            if (sendNotificationToSupplier)
                await savesuppliersNotifications(request.dbName, [supplierId], supplierId,
                    order_data[0], data.message, 1, userId);

            await lib.sendFcmPushNotification(fcmToken, data, request.dbName);
            cb(null)

        }],
        orderDetailD: ['sendPushNotificationToAdmin', async function (callback) {
            try {
                let productData = []
                var sql = "select p.id,c.type, c.menu_type,c.terminology,sp.recipe_pdf,p.is_product,os.user_service_charge,  os.cart_id,os.is_agent,c.id as category_id,s.name as supplier_name,spb.name as branch_name,spb.latitude,spb.longitude,s.address,s.id as supplier_id,s.phone,s.supplier_image,s.email,pp.can_urgent,pp.urgent_type,pp.urgent_value ,c.order,c.category_flow,op.supplier_branch_id,op.handling_admin,op.handling_supplier,op.id as order_price_id,op.quantity,pml.name,pml.measuring_unit,op.product_id,op.price,op.price as fixed_price,op.product_name,op.image_path,op.product_desc from order_prices op join " +
                    " product_ml pml on op.product_id = pml.product_id join orders os on os.id = op.order_id join product_pricing pp on op.product_id=pp.product_id and op.product_id=pp.product_id join product p on p.id = op.product_id left join supplier_branch spb on spb.id=op.supplier_branch_id join supplier s on s.id=spb.supplier_id left join supplier_branch_product sp on sp.product_id =op.product_id join categories c on c.id =sp.category_id  where op.order_id IN (?) group by product_id";

                let result = await ExecuteQ.Query(request.dbName, sql, [order_data]);

                for await (const [index, i] of result.entries()) {
                    let addonprice = 0;
                    i.adds_on = await getOrderAddsOn(request.dbName, i.cart_id, i.product_id);
                    if (i.adds_on && i.adds_on.length > 0) {
                        addonprice = await addonTotalPrice(i.adds_on, i.quantity)
                    }
                    productData.push({
                        user_service_charge: i.user_service_charge,
                        id: i.id,
                        quantity: i.quantity,
                        name: i.name,
                        image_path: i.image_path,
                        price: i.price,
                        addonprice: addonprice
                    })
                }
                orderDetails = productData;
                callback(null);

            }
            catch (Err) {
                sendResponse.somethingWentWrongError(reply);
            }

        }],
        sendNumber: ['orderDetailD', async function (cb) {
            cb(null);

        }],
        sendBranchPushNotification: ['sendNumber', function (cb) {
            cb(null);
        }],
        orderNumber: ['sendBranchPushNotification', function (cb) {
            var sql = 'select id from orders where user_id=?';
            multiConnection[request.dbName].query(sql, [id], function (err, result) {
                if (err) {
                    logger.debug("========err12===============")
                    console.log("err.....", err);
                    cb(err);
                }
                else {
                    count = result.length;
                    if (result.length == 1) {
                        flag = 1;
                    }
                    cb(null);
                }
            })
        }],
        sendAdminMail: ['orderNumber', async function (cb) {
            let adminEmailIds = [];
            console.log("*********supplierDatas**********", supplierDatas, sIds);
            let mail_to_all_admin = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ["subadmin_mail_on"]);

            if (mail_to_all_admin && mail_to_all_admin.length > 0 && mail_to_all_admin[0].value == 1) {
                var mail_query = "select email from supplier_admin where supplier_id IN(" + sIds + ")  "
            } else {
                var mail_query = "select `fcm_token`,`email`,`id` from admin where is_active=1 and is_superadmin=1 limit 1"
            }

            let adminData = await ExecuteQ.Query(request.dbName, mail_query, []);

            if (adminData && adminData.length > 0) {
                for (const [index, i] of adminData.entries()) {
                    adminEmailIds.push(i.email)
                }
            }
            console.log(orderDetails, "check order details----agentOrderDetail--------", agentOrderDetail)
            if (flag == 1) {

                emailTemp.UserFirstOrder(request, reply, customer_email, order.id, userName, mobileNumber, area, landmark, building, houseNumber[0], function (err, result) {
                    if (err) {
                        console.log("..****fb register email*****....", err);
                    }
                })
                if (sIds && sIds.length > 1) {
                    for (const [oIndex, o] of agentOrderDetail.entries()) {
                        let created_on_date = (request.dbName == '4n1deliverylive_0755') ? moment(o.created_on).format('MM/DD/YYYY  hh:mm:ss a') : moment(o.created_on).format('YYYY-MM-DD HH:mm a');
                        let schedule_on_date = (request.dbName == '4n1deliverylive_0755') ? moment(o.delivered_on).format('MM/DD/YYYY hh:mm:ss a') : moment(o.delivered_on).format('YYYY-MM-DD HH:mm a');
                        o.items[0]["user_service_charge"] = i.user_service_charge;
                        emailTemp.supplierNewOrder(request, reply, o.items, [], o.supplier_email,
                            o.order_id, o.supplier_name, o.customer_name, o.customer_phone_number, o.address["customer_address"], o.address["customer_address"], '',
                            o.address["customer_address"], o.address["customer_address"], o.net_amount, created_on_date, schedule_on_date, o.payment_type,
                            o.delivery_charges, o.handling_admin, 0, o.quantity, adds_on_arr, function (err, result) {
                                if (err) {
                                    console.log("..****fb register email*****....", err);
                                }
                            })
                    }
                }
                else {

                    emailTemp.supplierNewOrder(request, reply, orderDetails, adminEmailIds, supplierEmail,
                        order.id, supplierName, userName, mobileNumber, area, landmark, houseNumber[0],
                        address_link, building, net_amount, created_on, schedule_date, payment_type,
                        deliveryCharges, handling, urgent_price, quantity, adds_on_arr, function (err, result) {
                            if (err) {
                                console.log("..****fb register email*****....", err);
                            }
                        })
                }
            }
            else {

                if (sIds && sIds.length > 1) {
                    for (const [oIndex, o] of agentOrderDetail.entries()) {
                        let created_on_date = (request.dbName == '4n1deliverylive_0755') ? moment(o.created_on).format('MM/DD/YYYY  hh:mm:ss a') : moment(o.created_on).format('YYYY-MM-DD HH:mm a');
                        let schedule_on_date = (request.dbName == '4n1deliverylive_0755') ? moment(o.delivered_on).format('MM/DD/YYYY hh:mm:ss a') : moment(o.delivered_on).format('YYYY-MM-DD HH:mm a');
                        //delivery_date
                        o.items[0]["user_service_charge"] = o.user_service_charge;
                        emailTemp.supplierNewOrder(request, reply, o.items, [], o.supplier_email,
                            o.order_id, o.supplier_name, o.customer_name, o.customer_phone_number, o.address["customer_address"], o.address["customer_address"], '',
                            o.address["address_link"], o.address["building"], o.net_amount, created_on_date, schedule_on_date, o.payment_type,
                            o.delivery_charges, o.handling_admin, 0, o.quantity, adds_on_arr, function (err, result) {
                                if (err) {
                                    console.log("..****fb register email*****....", err);
                                }
                            })
                    }
                }
                else {
                    emailTemp.supplierNewOrder(request, reply, orderDetails, adminEmailIds, supplierEmail,
                        order.id, supplierName, userName, mobileNumber, area, landmark, houseNumber[0],
                        address_link, building, net_amount, created_on, schedule_date, payment_type,
                        deliveryCharges, handling, urgent_price, quantity, adds_on_arr, function (err, result) {
                            if (err) {
                                console.log("..****fb register email*****....", err);
                            }
                        });
                }
            }
            cb(null)
        }],


    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(order_data, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.genrateOrderBySupplierV2 = async function (request, reply) {

    console.log("request.body ########################################################################## ", request.body)
    let dbName = request.dbName
    let userDetails = await ExecuteQ.Query(request.dbName, "select * from user where access_token = ?", [request.body.accessToken])
    let customer_payment_id = request.body.customer_payment_id == undefined ? "" : request.body.customer_payment_id;
    let card_id = request.body.card_id == undefined ? "" : request.body.card_id;
    let payment_status = 0;
    var supplier_commission;
    // var id=request.users.id;
    var id = userDetails[0].id;
    var accessToken;
    var cartId;

    var productList;

    var languageId;
    var user = {};
    var order = {};

    var paymentType = 3;
    var promoationType;

    var deviceToken;
    var supplierId;
    var deviceType;
    var userId;
    let have_pet = request.body.have_pet == undefined ? 0 : request.body.have_pet
    let parking_instructions = request.body.parking_instructions == undefined ? "" : request.body.parking_instructions;
    let cleaner_in = request.body.cleaner_in == undefined ? 0 : request.body.cleaner_in;
    let area_to_focus = request.body.area_to_focus == undefined ? "" : request.body.area_to_focus;
    let donate_to_someone = request.body.donate_to_someone || 0;
    //  let userDetails = await ExecuteQ.Query(request.dbName,"select * from user where id = ?",[request.users.id])
    let user_type_id = userDetails[0].user_type_id
    if (user_type_id == undefined || user_type_id == ""
        || user_type_id == null || user_type_id == 0) {
        let user_type_details = await ExecuteQ.Query(request.dbName, "select * from user_types limit 1", []);
        logger.debug("============user_type_details------", user_type_details)
        if (user_type_details && user_type_details.length > 0) {
            user_type_id = user_type_details[0].id
        } else {
            user_type_id = 0
        }
    }
    var userName;
    var message;
    var deliveryDate;
    var supplierEmail, deliveryCharges, handling, urgent_price, quantity;
    var building, houseNumber, payment_type, schedule_date, supplierPhone, branchToken, branchDeviceType, net_amount, supplierName, created_on, mobileNumber, area, landmark, address_link;
    var type = 1;
    var count = 0, flag = 0, applyCode = 0;
    var is_active = 0;
    var orderDetails = [], supplierIds = [], supplier_product_data, order_data = [], pickup_delivered_address = [];
    var offset = request.body.offset != undefined && request.body.offset != "" && request.body.offset != null ? request.body.offset : 4
    logger.debug("==========", request.body);
    var agentIds = request.body.agentIds, isAgent = 0, agentArray, agentOrderDetail = {}, agentOrderItemDetail = [];
    var agentConnection, dateTime, booking_date, slots;
    let pres_image1 = request.body.pres_image1 != undefined ? request.body.pres_image1 : "";
    let pres_image2 = request.body.pres_image2 != undefined ? request.body.pres_image2 : "";
    let pres_image3 = request.body.pres_image3 != undefined ? request.body.pres_image3 : "";
    let pres_image4 = request.body.pres_image4 != undefined ? request.body.pres_image4 : "";
    let pres_image5 = request.body.pres_image5 != undefined ? request.body.pres_image5 : "";
    let pres_description = request.body.pres_description != undefined ? request.body.pres_description : "";
    var booking_date_time = request.body.date_time != undefined && request.body.date_time != "" ? request.body.date_time : "";
    var buffer_time = 0, duration = request.body.duration != undefined && request.body.duration != "" ? request.body.duration : 60;

    var from_address = request.body.from_address != undefined && request.body.from_address != "" ? request.body.from_address : "";
    var to_address = request.body.to_address != undefined && request.body.to_address != "" ? request.body.to_address : "";
    var booking_from_date = request.body.booking_from_date != undefined && request.body.booking_from_date != "" ? moment(request.body.booking_from_date).utcOffset(offset).format("YYYY-MM-DD HH:mm:ss") : "";
    var booking_to_date = request.body.booking_to_date != undefined && request.body.booking_to_date != "" ? moment(request.body.booking_to_date).utcOffset(offset).format("YYYY-MM-DD HH:mm:ss") : "";



    var from_latitude = request.body.from_latitude != undefined && request.body.from_latitude != "" ? request.body.from_latitude : 0.000000000
    var to_latitude = request.body.to_latitude != undefined && request.body.to_latitude != "" ? request.body.to_latitude : 0.000000000
    var from_longitude = request.body.from_longitude != undefined && request.body.from_longitude != "" ? request.body.from_longitude : 0.000000000
    var to_longitude = request.body.to_longitude != undefined && request.body.to_longitude != "" ? request.body.to_longitude : 0.000000000
    var servicetype = await agent.screenInfo(request.dbName);

    var tip_agent = request.body.tip_agent != undefined && request.body.tip_agent != "" && request.body.tip_agent != null ? request.body.tip_agent : 0

    if (booking_date_time != "") {
        dateTime = new Date(booking_date_time);
        booking_date = moment(dateTime).format("YYYY-MM-DD");
        slots = moment(dateTime).format("HH:mm:ss");
    }

    var liquor_bottle_deposit_tax = 0;
    var liquor_plt_deposit_tax = 0;
    var api_version = Universal.getVersioning(request.path);
    let order_day = request.body.order_day != undefined ? request.body.order_day : 0
    let type_id = request.body.type != undefined ? request.body.type : 0;
    let payment_after_confirmation = request.body.payment_after_confirmation != undefined ? request.body.payment_after_confirmation : 0;
    let order_time = request.body.order_time != undefined ? request.body.order_time : "00:00:00";

    var cat_ids = [], sup_ids = [];

    var discounted_supplier_ids = []
    var self_pickup = request.body.self_pickup != undefined && request.body.self_pickup != "" ? request.body.self_pickup : 0
    let adds_on_delivery_admin_charges = 0, delivery_admin_supplier_charge = 0, adds_on_arr = [], productIds = [];
    let unique_id = request.body.gateway_unique_id != undefined ? (request.body.gateway_unique_id) : "";
    let currency = request.body.currency != undefined ? request.body.currency : "usd";
    let payment_token = request.body.payment_token;
    let myFatoorahInvoiceId = request.body.invoiceId;
    let card_payment_id = "", payment_source = "";
    var transaction_id = "";
    let deliveryChargeAlgo = 0;//0 for radius wise 1 for supplier-product-max wise
    let deliveryChargeData = await Universal.getDeliveryChargeAlgo(request.dbName);
    if (deliveryChargeData && deliveryChargeData.length > 0) {
        deliveryChargeAlgo = deliveryChargeData[0].value;
    }

    var preparation_time = request.body.preparation_time != undefined ? request.body.preparation_time : "00:00:00";
    let drop_off_date = request.body.drop_off_date != undefined ? request.body.drop_off_date : ""
    let questionToBeSave = '';
    let addOn = request.body.addOn ? request.body.addOn : null;
    const questions = request.body.questions;
    const use_refferal = request.body.use_refferal || 0;
    const use_loyality_point = request.body.use_loyality_point || 0;
    const payer_id = request.body.payer_id || "";
    let referralAmount = 0, orderNetAmount = 0;
    let sIds;
    let zelle_receipt_url = request.body.payment_token !== undefined && request.body.payment_token !== null ? request.body.payment_token : ""
    let user_service_charge = request.body.user_service_charge !== undefined && request.body.user_service_charge !== "" && request.body.user_service_charge !== null ? request.body.user_service_charge : 0
    let user_gift_ids = request.body.user_gift_ids || [];
    let giftAmount = request.body.gift_amount || 0;
    let orderResonseObj = {};
    let countryCode = ""
    let customer_email = "";

    let wallet_discount_amount = request.body.wallet_discount_amount != undefined ? request.body.wallet_discount_amount : 0
    let wallet_amount_used = 0;

    let wallet_module = 0;

    let walletQuery = "select `key`,`value` from tbl_setting where `key`=? ";
    let walletData = await ExecuteQ.Query(request.dbName, walletQuery, ["wallet_module"]);
    let appLinkData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key` IN (?) ", [["android_app_url", "ios_app_url"]]);

    AdminMail = await Universal.getSuperAdminEmail(request.dbName);

    if (walletData && walletData.length > 0) {
        if (parseInt(walletData[0].value) === 1) {
            wallet_module = 1;
        }
    }



    let is_cutlery_required = request.body.is_cutlery_required == undefined ? 0 : request.body.is_cutlery_required
    let userWalletDetails = await ExecuteQ.Query(request.dbName, "select wallet_amount from user where id = ?", [id]);
    let wallet_amount = 0;

    let walletLeftAmount = 0;
    let is_paid_through_wallet = request.body.is_paid_through_wallet == undefined ? 0 : 1

    schedule_date = request.body.schedule_date !== undefined ? request.body.schedule_date : "";

    let schedule_end_date = request.body.schedule_end_date !== undefined ? request.body.schedule_end_date : "";
    let slot_id = request.body.slot_id == undefined ? 0 : request.body.slot_id
    let table_request_id = request.body.table_request_id

    let booked_slot_id = request.body.booked_slot_id


    logger.debug("========request.body.is_schedule======", request.body.is_schedule)
    let is_schedule = request.body.is_schedule !== undefined ? request.body.is_schedule : 0

    logger.debug("=================is_schedule=======", is_schedule)
    logger.debug("====schedule_end_date========schedule_end_date====", schedule_end_date, schedule_date)
    var user_subscription_delivery = 0, user_subscription_supplier_id = "", user_subscription_id = "";
    var user_subscription_data = request.body.user_subscription_data ? request.body.user_subscription_data : {}
    var slot_price = request.body.slot_price == undefined ? 0 : request.body.slot_price
    let is_dine_in = request.body.is_dine_in == undefined ? 0 : request.body.is_dine_in
    let table_id = request.body.table_id == undefined ? 0 : request.body.table_id;
    let have_coin_change = request.body.have_coin_change || 0;
    let loyalityPointDiscountAmount = 0, totalLoayaloyDiscountAmount = 0, totalLoayaloyDiscountAmountByCat = 0;
    let order_source = request.body.order_source != undefined ? request.body.order_source : 3;
    let totalAddOnAmount = 0;

    if (parseInt(is_dine_in) == 1 && parseInt(table_request_id) > 0) {
        let data = await ExecuteQ.Query(request.dbName, "select * from user_table_booked where id=?", [table_request_id]);
        logger.debug("=======table details======", data);
        if (data && data.length > 0) {
            schedule_date = data[0].schedule_date
            schedule_end_date = data[0].schedule_end_date
        }

    }

    let order_delivery_type = request.body.order_delivery_type == undefined ? 0 : request.body.order_delivery_type
    let agent_verification_code = Math.floor(Math.random() * 10000);
    let vehicle_number = request.body.vehicle_number !== undefined && request.body.vehicle_number !== null &&
        request.body.vehicle_number !== "" ? request.body.vehicle_number : ""
    let delivery_company_id = request.body.delivery_company_id != undefined && request.body.delivery_company_id != "" ? request.body.delivery_company_id : 0
    let seating_capacity = request.body.seating_capacity !== undefined && request.body.seating_capacity !== "" ? request.body.seating_capacity : 0

    let no_touch_delivery = request.body.no_touch_delivery !== undefined && request.body.no_touch_delivery !== "" ? request.body.no_touch_delivery : 0

    let payment_status_after_confirm = request.body.payment_status_after_confirm !== undefined && request.body.payment_status_after_confirm !== "" ? request.body.payment_status_after_confirm : 0


    async.auto({
        getValue: async function (callback) {
            if (!(request.body.cartId)) {
                var msg = "cart id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.promoCode)) {
                request.body.promoCode = 0;
            } else {
                applyCode = 1;
            }
            if (!(request.body.promoId)) {
                request.body.promoId = 0
            }

            if (!(request.body.discountAmount)) {
                request.body.discountAmount = 0;
            }

            if (request.body.paymentType == 0 ||
                request.body.paymentType == 1 ||
                request.body.paymentType == 2 ||
                request.body.paymentType == 3 ||
                request.body.paymentType == 4 ||
                request.body.paymentType == 5
            ) {
                paymentType = request.body.paymentType;
            }
            else {
                var msg = "Enter Payment Type"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            accessToken = request.body.accessToken;
            cartId = request.body.cartId;
            languageId = request.body.languageId;
            user.languageId = request.body.languageId;
            type = request.body.isPackage;

            callback(null);

        },
        checkDeliveryArea: ["getValue", async function (callback) {
            let cartQuery = `select *,sb.supplier_id, sb.latitude as supplier_latitude,sb.longitude as supplier_longitude,ua.latitude as user_latitude,ua.longitude as user_longitude
           from cart c 
           join supplier_branch sb on c.supplier_branch_id=sb.id 
           join user_address ua on c.user_id=ua.user_id 
           where c.id=${cartId}`;
            let cardData = await ExecuteQ.Query(request.dbName, cartQuery, []);
            //console.log('cardData',cardData);
            if (cardData.length) {
                from_latitude = cardData[0].supplier_latitude || 0.0;
                from_longitude = cardData[0].supplier_longitude || 0.0;
                liquor_plt_deposit_tax = cardData[0].liquor_plt_deposit_tax || 0.0;
                liquor_bottle_deposit_tax = cardData[0].liquor_bottle_deposit_tax || 0.0;
                to_latitude = cardData[0].user_latitude || 0.0
                to_longitude = cardData[0].user_longitude || 0.0;
                user_subscription_supplier_id = cardData[0].supplier_id
                callback(null);
            } else {
                callback(null)
            }



        }],
        agentValidation: ["checkDeliveryArea", async function (callback) {
            logger.debug("=======AGENT==IDS==", agentIds)
            if (agentIds && agentIds.length > 0) {
                var GetAgentDbData = await getAgentDbInformation(request.dbName);
                agentConnection = await RunTimeAgentConnection(GetAgentDbData);
                var sqlQuery = "select id from cbl_user where id IN(?) and deleted_by=?";
                var st = agentConnection.query(sqlQuery, [agentIds, 0], async function (err, agentData) {
                    // logger.debug("===ST==SQL",st.sql);
                    if (err) {
                        callback(err)
                    }

                    else {
                        if (agentData && agentData.length > 0) {
                            agentArray = agentData;
                            isAgent = 1;
                            try {
                                var booked_slots = await bookedSlots(agentConnection, booking_date, agentData[0].id);
                                buffer_time = await bufferTime(agentConnection);
                                var is_slots_booked = booked_slots.filter(function (val) {
                                    return slots.indexOf(val) != -1;
                                });
                                logger.debug("==========is_slots_booked====", is_slots_booked);
                                if (is_slots_booked && is_slots_booked.length > 0) {
                                    var msg = "Sorry! Agent Are Not Avail On This Slots"
                                    return sendResponse.sendErrorMessage(msg, reply, 400);
                                }
                                else {
                                    callback(null);
                                }
                            } catch (Err) {
                                logger.debug(Err)
                                return sendResponse.somethingWentWrongError(reply);
                            }

                        }

                        else {
                            var msg = "Invalid Agent"
                            //logger.debug("=======discounted_product_ids========",discounted_product_ids);
                            return sendResponse.sendErrorMessage(msg, reply, 400);
                        }
                    }
                })
            }
            else {
                var servicetype = await agent.screenInfo(request.dbName);
                if (servicetype.type == 1 || servicetype.type == 2) {
                    isAgent = 1
                    callback(null)
                }
                else {
                    callback(null)
                }
            }
        }
        ],

        getCartValue: ['agentValidation', function (callback) {

            console.log("12222222222222222222222222222")
            getCartProductList(request.dbName, reply, id, cartId, function (err, result) {
                console.log("33333333333333333333333333333333444444444444444", err, result)
                if (err) {
                    callback(err);
                } else {
                    promoationType = result[0].promoationType;

                    delivery_admin_supplier_charge = result && result.length > 0 ? parseFloat(result[0].handling_admin) + parseFloat(result[0].delivery_charges) : 0
                    productList = result;
                    supplier_product_data = groupBy(productList, "supplier_id");

                    if (request.service_type == 1 || request.service_type == 2) {
                        if (result[0].user_delivery_address == 0 && self_pickup == 0) {
                            let msg = "Please add address to continue"
                            return sendResponse.sendErrorMessage(msg, reply, 400);
                        }
                    }

                    _.each(productList, function (i) {

                        totalLoayaloyDiscountAmount = totalLoayaloyDiscountAmount + parseFloat(i.loyality_discount)
                        totalLoayaloyDiscountAmountByCat = totalLoayaloyDiscountAmountByCat + parseFloat(i.loyality_discount)
                        productIds.push(i.product_id)
                        supplierIds.push(i.supplier_id);
                        cat_ids.push(i.category_id);
                        sup_ids.push(i.supplier_id);

                    })

                    callback(null);
                }
            })
        }],
        walletCheck: ['getCartValue', async function (callback) {
            if (parseInt(wallet_module) === 1 && parseInt(paymentType) === 4) {
                orderNetAmount = productList[0].net_amount;
                wallet_amount = userWalletDetails[0].wallet_amount
                if (wallet_amount < orderNetAmount) {
                    return sendResponse.sendErrorMessage("Not enough wallet money", reply, 400);
                } else {
                    callback(null);
                }
            } else {
                callback(null);
            }

        }],
        referralDeduction: ['walletCheck', async function (callback) {
            orderNetAmount = (productList[0].net_amount);
            let referralFeatureData = await ExecuteQ.Query(request.dbName, "select * from tbl_setting where `key`=? and `value`=?", ["referral_feature", "1"])
            let referralBalLimitCheck = await ExecuteQ.Query(request.dbName, "select * from tbl_setting where `key`=? and `value`=?", ["enable_referral_bal_limit", "1"])

            if (referralFeatureData && referralFeatureData.length > 0) {
                if (use_refferal == 1) {
                    referralAmount = await Universal.getUserLeftReferralAmount(request.dbName, request.users.id);

                    if (referralAmount > 0) {
                        if (parseFloat(referralAmount) >= parseFloat(orderNetAmount)) {
                            referralAmount = orderNetAmount;
                        }
                        if (referralBalLimitCheck && referralBalLimitCheck.length > 0) {
                            let referBalLimit = await ExecuteQ.Query(request.dbName,
                                "select value from tbl_setting where `key`=?", ["referral_bal_limit_per_order"])
                            if (referBalLimit && referBalLimit.length > 0) {
                                if (parseFloat(referralAmount) >= parseFloat(referBalLimit[0].value)) {
                                    referralAmount = parseFloat(referBalLimit[0].value)
                                }
                            }
                        }
                        let usedRefQuery = "insert into referral_used(used_by,used_price) value (?,?)"
                        await ExecuteQ.Query(request.dbName, usedRefQuery, [request.users.id, referralAmount]);
                        orderNetAmount = parseFloat(orderNetAmount) - parseFloat(referralAmount)
                        logger.debug("=====orderNetAmount====referralAmount====1>>", orderNetAmount, referralAmount);
                        callback(null)
                    }
                    else {
                        logger.debug("=====orderNetAmount====referralAmount====2>>", orderNetAmount, referralAmount);
                        callback(null)
                    }

                }
                else {
                    logger.debug("=====orderNetAmount====referralAmount====3>>", orderNetAmount, referralAmount, request.dbName);
                    callback(null)
                }
            } else {
                callback(null)
            }
        }],
        loyalityPointDiscount: ['referralDeduction', async function (callback) {
            if (use_loyality_point == 1) {
                let userLoyality = await ExecuteQ.Query(request.dbName,
                    `select total_loyality_amount,used_loyality_amount from user where id=?`, [request.users.id]
                )
                loyalityPointDiscountAmount = parseFloat(userLoyality[0].total_loyality_amount) > parseFloat(userLoyality[0].used_loyality_amount) ? parseFloat(userLoyality[0].total_loyality_amount) - parseFloat(userLoyality[0].used_loyality_amount) : 0;

                loyalityPointDiscountAmount = parseFloat(loyalityPointDiscountAmount) >= parseFloat(orderNetAmount) ? parseFloat(orderNetAmount) : loyalityPointDiscountAmount;
                logger.debug("=====loyalityPointDiscountAmount=====", loyalityPointDiscountAmount);

                totalLoayaloyDiscountAmount = (parseFloat(totalLoayaloyDiscountAmount) + parseFloat(loyalityPointDiscountAmount)) >= parseFloat(orderNetAmount) ? parseFloat(orderNetAmount) : parseFloat(totalLoayaloyDiscountAmount) + parseFloat(loyalityPointDiscountAmount);
                logger.debug("=====totalLoayaloyDiscountAmount=====", totalLoayaloyDiscountAmount);

                await ExecuteQ.Query(request.dbName, `update user set used_loyality_amount=used_loyality_amount+? where id=?`, [loyalityPointDiscountAmount, request.users.id])
                callback(null)
            }
            else {
                logger.debug("=====orderNetAmount====referralAmount====3>>", orderNetAmount, referralAmount, request.dbName);
                callback(null)
            }
        }],
        giftDeduction: ['loyalityPointDiscount', async function (callback) {
            orderNetAmount = parseFloat(orderNetAmount) - parseFloat(totalLoayaloyDiscountAmount)
            logger.debug("=======AFTER==Loyalit=Sub==orderNetAmount,totalLoayaloyDiscountAmount=", orderNetAmount, totalLoayaloyDiscountAmount)
            if (user_gift_ids && user_gift_ids.length > 0) {
                // giftAmount
                let usedGiftData = await ExecuteQ.Query(request.dbName, "select id from user_gift_card  where id IN (?) and is_used=?", [user_gift_ids, 1]);
                if (usedGiftData && usedGiftData.length > 0) {
                    let msg = "gift already used"
                    return sendResponse.sendErrorMessage(msg, reply, 400);
                }
                else {
                    let userGiftData = await ExecuteQ.Query(request.dbName, `select id,price,price_type,percentage_value from 
                   user_gift_card where id IN(?) and is_used!=?`, [user_gift_ids, 1]);
                    if (userGiftData && userGiftData.length > 0) {
                        // for(const [index,i] of userGiftData.entries()){
                        //     if(parseInt(i.price_type)==1){
                        //         giftAmount=gift_amount;
                        //     }
                        //     else{
                        //         giftAmount=giftAmount+i.price;
                        //     }
                        // }
                        // logger.debug("====referralAmount==",referralAmount)
                        // referralAmount=referralAmount+giftAmount;
                        logger.debug("=referralAmount===giftAmount==", referralAmount, giftAmount);
                        await ExecuteQ.Query(request.dbName, `update user_gift_card set is_used=? where id IN(?) and is_used!=?`, [1, user_gift_ids, 1]
                        )
                        callback(null)
                    }
                    else {
                        let msg = "gift not exist"
                        return sendResponse.sendErrorMessage(msg, reply, 400);
                    }
                }
            }
            else {
                callback(null)
            }
        }],

        userSubscriptionDeduction: ['giftDeduction', async function (callback) {
            //orderNetAmount
            let isUserSubscriptionEnabled = await Universal.isUserSubscriptionEnabled(request.dbName);
            if (isUserSubscriptionEnabled == "1" && Object.keys(user_subscription_data).length !== 0 && user_subscription_data.constructor === Object) {
                var current_datetime = moment().utcOffset(offset).format('YYYY-MM-DD HH:mm:ss');
                let userSubscription = await ExecuteQ.Query(request.dbName, "select us.id,us.start_date,us.end_date,us.subscription_plan_id, usp.*, uspb.benefit_id,usb.title as benefit_title, usb.description as benefit_description, usb.benefit_id as benefit_unique_id, usb.benefit_type from user_subscription us join user_subscription_plans usp on us.subscription_plan_id=usp.id join user_subscription_plan_benefits uspb on us.subscription_plan_id=uspb.plan_id join user_subscription_benefits usb on uspb.benefit_id=usb.id where user_id=? and status='1' and is_deleted='0' and is_cancelled='0' and ('" + current_datetime + "' > start_date and '" + current_datetime + "' < end_date) and usb.is_blocked='0'", [request.users.id]);
                if (userSubscription[0]) {

                    var total_discount_amount = 0;
                    var benefit_types_list_ar = [];
                    var discount_amount_per_benefit_ar = [];

                    for (const userSub of userSubscription) {
                        if (Object.keys(user_subscription_data).indexOf(userSub.benefit_type) !== -1) {//contains key as FDW/FDM/FDY(benefit_type))
                            if (
                                userSub.benefit_type == 'FD' &&
                                parseFloat(productList[0].delivery_charges) > 0
                            ) { //FDW,FDM,FDY
                                if (
                                    user_subscription_data[userSub.benefit_type] &&
                                    parseFloat(user_subscription_data[userSub.benefit_type]) == parseFloat(productList[0].delivery_charges)
                                ) {//contains value equal to delivery charges
                                    user_subscription_delivery = 1
                                    orderNetAmount = parseFloat(orderNetAmount) - parseFloat(productList[0].delivery_charges);
                                    total_discount_amount += parseFloat(productList[0].delivery_charges);
                                    benefit_types_list_ar.push(userSub.benefit_type)
                                    discount_amount_per_benefit_ar.push(userSub.benefit_type + "(-" + productList[0].delivery_charges + ")")
                                }
                            } else if (
                                userSub.benefit_type == 'B1G1' &&
                                user_subscription_data[userSub.benefit_type] &&
                                user_subscription_data[userSub.benefit_type] > 0
                            ) { //B1G1W, B1G1M, B1G1Y
                                orderNetAmount = parseFloat(orderNetAmount) - parseFloat(user_subscription_data[userSub.benefit_type]);
                                total_discount_amount += parseFloat(user_subscription_data[userSub.benefit_type]);
                                benefit_types_list_ar.push(userSub.benefit_type)
                                discount_amount_per_benefit_ar.push(userSub.benefit_type + "(-" + user_subscription_data[userSub.benefit_type] + ")")
                            }
                        }
                    }
                    var benefit_types_list = benefit_types_list_ar.join(",");
                    var discount_amount_per_benefit = discount_amount_per_benefit_ar.join(",");
                    var sub_result = await ExecuteQ.Query(request.dbName, 'insert into orders_user_subscription (user_id,supplier_id,subscription_id,order_total_amount,total_discount_amount,benefit_types_list,discount_amount_per_benefit) value (?,?,?,?,?,?,?,?)', [
                        request.users.id,//user_id
                        user_subscription_supplier_id,//supplier_id
                        userSubscription[0].subscription_plan_id,//subscription_id
                        orderNetAmount,//order_total_amount
                        total_discount_amount,
                        benefit_types_list,
                        discount_amount_per_benefit
                    ])
                    user_subscription_id = sub_result.insertId;
                }
                else {
                    callback(null)
                }
            } else {
                callback(null)
            }
        }],
        makePayment: ['userSubscriptionDeduction', async function (callback) {

            logger.debug("===========request in fo======2=====", request.headers.authorization);
            try {
                let userData = await Universal.getUserData(dbName, request.headers.authorization);
                logger.debug("========service charnge====", user_service_charge)
                logger.debug("===========request in fo===========", dbName, parseFloat(((orderNetAmount + user_service_charge) - referralAmount) * 100));
                logger.debug("========unique_id unique_id====", unique_id)

                if (parseInt(paymentType) == 1 && payment_after_confirmation == 0) {

                    if ((unique_id) == config.get("payment.mumybene.unique_id")) {
                        payment_source = "mumybene";
                        let mumybene_key_data = await Universal.getMumybeneKeyData(dbName);
                        if (mumybene_key_data) {

                            var mumybene_username = mumybene_key_data[config.get("payment.mumybene.mumybene_username")]
                            var mumybene_password = mumybene_key_data[config.get("payment.mumybene.mumybene_password")]
                            var phoneNumber = request.body.mobile_no;// ? request.body.mobile_no : "0954755348";
                            var service_provider = request.body.service_provider;// ? request.body.mobile_no : "0954755348";
                            var paymentReference = "order_" + (+ new Date()); //"Testabc0112";

                            var transactionAmount = orderNetAmount//"100";
                            var baseUrl = "http://test.543.cgrate.co.zm:55555/Konik/KonikWs"

                            let xml = `<soapenv:Envelope
                               xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                               xmlns:kon="http://konik.cgrate.com">
                               <soapenv:Header xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                                   <wsse:Security xmlns:mustUnderstand="1">
                                       <wsse:UsernameToken xmlns:Id="UsernameToken-1" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
                                           <wsse:Username xmlns="http://konik.cgrate.com">`+ mumybene_username + `</wsse:Username>
                                           <wsse:Password xmlns:Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">`+ mumybene_password + `</wsse:Password>
                                       </wsse:UsernameToken>
                                   </wsse:Security>
                               </soapenv:Header>
                               <soapenv:Body>
                               <kon:processCustomerPayment>
                               <transactionAmount>`+ transactionAmount + `</transactionAmount>
                               <customerMobile>`+ phoneNumber + `</customerMobile>
                               <paymentReference>`+ paymentReference + `</paymentReference>
                               </kon:processCustomerPayment>
                               </soapenv:Body>
                               </soapenv:Envelope>`;
                            var options = {
                                method: 'POST',
                                url: baseUrl,
                                headers: {
                                    'Content-Type': 'text/xml;charset=utf-8',
                                    'Accept-Encoding': 'gzip,deflate',
                                    'Content-Length': xml.length
                                },
                                body: xml,
                                timeout: 60000
                            };

                            web_request(options, async function (error, response, body) { //0,1,6,7,48,62,63,75,565

                                if (error) {
                                    if (error.code == "ESOCKETTIMEDOUT") {


                                        let xml1 = `<soapenv:Envelope
                                           xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                                           xmlns:kon="http://konik.cgrate.com">
                                           <soapenv:Header xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                                               <wsse:Security xmlns:mustUnderstand="1">
                                                   <wsse:UsernameToken xmlns:Id="UsernameToken-1" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
                                                       <wsse:Username xmlns="http://konik.cgrate.com">`+ mumybene_username + `</wsse:Username>
                                                       <wsse:Password xmlns:Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">`+ mumybene_password + `</wsse:Password>
                                                   </wsse:UsernameToken>
                                               </wsse:Security>
                                           </soapenv:Header>
                                           <soapenv:Body>
                                           <kon:queryCustomerPayment>
                                           <paymentReference>`+ paymentReference + `</paymentReference>
                                           </kon:queryCustomerPayment>
                                           </soapenv:Body>
                                           </soapenv:Envelope>`;
                                        var options1 = {
                                            method: 'POST',
                                            url: "http://test.543.cgrate.co.zm:55555/Konik/KonikWs",
                                            headers: {
                                                'Content-Type': 'text/xml;charset=utf-8',
                                                'Accept-Encoding': 'gzip,deflate',
                                                'Content-Length': xml1.length
                                            },
                                            body: xml1
                                        };

                                        web_request(options1, async function (error1, response1, body1) {

                                            if (error1) {

                                                return sendResponse.sendErrorMessage(
                                                    await Universal.getMsgText(
                                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                    reply, 400);
                                            } else if (!error1 && response1.statusCode == 200) {

                                                var xml2js1 = require('xml2js');
                                                var parser1 = new xml2js1.Parser({ explicitArray: false, trim: true });
                                                parser1.parseString(body1, (err1, result1) => {

                                                    var responseCode1 = result1['env:Envelope']['env:Body']['ns2:queryCustomerPaymentResponse']['return']['responseCode']
                                                    if (responseCode1 == "0") {
                                                        var paymentID1 = result1['env:Envelope']['env:Body']['ns2:queryCustomerPaymentResponse']['return']['paymentID']
                                                        card_payment_id = paymentID1
                                                        transaction_id = paymentReference
                                                        payment_source = "543 (" + service_provider + ")"
                                                        payment_status = 1
                                                        callback(null)
                                                    } else {
                                                        return sendResponse.sendErrorMessage("Timeout: You did not respond to the prompt on your phone in time, please try again.", reply, 400);
                                                    }
                                                });
                                            } else {
                                                return sendResponse.sendErrorMessage(
                                                    await Universal.getMsgText(
                                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                    reply, 400);
                                            }
                                        });
                                    } else {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                } else if (!error && response.statusCode == 200) {
                                    var xml2js = require('xml2js');
                                    var parser = new xml2js.Parser({ explicitArray: false, trim: true });
                                    console.log("parser -- ", JSON.stringify(parser))
                                    parser.parseString(body, (err, result) => {
                                        var responseCode = result['env:Envelope']['env:Body']['ns2:processCustomerPaymentResponse']['return']['responseCode']
                                        console.log("responseCode ==== ", responseCode)
                                        if (responseCode == "0") {
                                            var paymentID = result['env:Envelope']['env:Body']['ns2:processCustomerPaymentResponse']['return']['paymentID']
                                            card_payment_id = paymentID
                                            transaction_id = paymentReference
                                            payment_source = "543 (" + service_provider + ")"
                                            payment_status = 1
                                            console.log("11111111111111111111111111111", paymentReference)
                                            callback(null)
                                        } else {
                                            //var responseMessage = result['env:Envelope']['env:Body']['ns2:processCustomerPaymentResponse']['return']['responseMessage']
                                            var responseMessage = "";
                                            if (responseCode == "17") {
                                                // responseMessage = "Timeout: You did not respond to the prompt on your phone in time, please try again.";
                                                responseMessage = "This transaction has timedout, please try again.";
                                            }
                                            else if (responseCode == "1") {
                                                responseMessage = "Insufficient funds: It appears your account has insufficient funds, please choose a different payment method"
                                            }
                                            else if (responseCode == "79") {
                                                responseMessage = "You're not currently registered to make payments. To register follow the instructions below:\n1. Add +260211840008 as a WhatsApp contact \n 2. Send “Hello” and follow the instructions \n"
                                            }
                                            else if (responseCode == "6") {
                                                responseMessage = "You're not currently registered to make payments. To register follow the instructions below:\n1. Add +260211840008 as a WhatsApp contact \n 2. Send “Hello” and follow the instructions \n"
                                            }
                                            else {
                                                responseMessage = "Sorry, an error occurred. Please try again"
                                            }
                                            console.log(responseCode, "---------responseMessage ------------------- ", responseMessage)

                                            return sendResponse.sendErrorMessage(responseMessage, reply, 400);
                                        }
                                    });
                                } else {
                                    console.log("0101010101010101010101010101010101010101")
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                            });
                        } else {
                            console.log("1212121212121212121212121212121212121212")
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else if ((unique_id) == config.get("payment.strip.unique_id")) {
                        payment_source = "stripe";
                        logger.debug("2222222222+===========request.dbName============", dbName)
                        let strip_secret_key_data = await Universal.getStripSecretKey(dbName);
                        logger.debug("111111111111111==card_id=customer_payment_id=STRIP=DATA==>>", card_id, customer_payment_id, strip_secret_key_data, Math.round(parseFloat(productList[0].net_amount * 100)))
                        if (strip_secret_key_data && strip_secret_key_data.length > 0) {
                            const stripe = require('stripe')(strip_secret_key_data[0].value);
                            let payment_object = {};
                            if (customer_payment_id !== "" && card_id !== "") {
                                payment_object = {
                                    amount: Math.round(parseFloat(orderNetAmount * 100)),
                                    currency: currency,
                                    source: card_id,
                                    customer: customer_payment_id,
                                    capture: true,
                                    description: '(' + userData[0].email + ') Made an booking',
                                }
                            } else {
                                payment_object = {
                                    amount: Math.round(parseFloat(orderNetAmount * 100)),
                                    currency: currency,
                                    source: payment_token,
                                    capture: true,
                                    description: '(' + userData[0].email + ') Made an booking',
                                }
                            }
                            console.log("payment_object === ", payment_object)
                            stripe.charges.create(payment_object, async function (err, charge) {
                                console.log("==Payment===ERR!==>>", err);
                                if (err) {
                                    let msg = config.get("error_msg.payment.error");
                                    switch (err.type) {
                                        case 'StripeCardError':
                                            // A declined card error
                                            msg = err.message; // => e.g. "Your card's expiration year is invalid."
                                            break;
                                        case 'StripeRateLimitError':
                                            // Too many requests made to the API too quickly
                                            break;
                                        case 'StripeInvalidRequestError':
                                            // Invalid parameters were supplied to Stripe's API
                                            msg = err.message
                                            break;
                                        case 'StripeAPIError':
                                            // An error occurred internally with Stripe's API
                                            break;
                                        case 'StripeConnectionError':
                                            // Some kind of error occurred during the HTTPS communication
                                            break;
                                        case 'StripeAuthenticationError':
                                            // You probably used an incorrect API key
                                            break;
                                        default:
                                            // Handle any other types of unexpected errors
                                            msg = config.get("error_msg.payment.error");
                                            break;
                                    }

                                    console.log("==Payment===ERR!==>>", err, msg);
                                    return sendResponse.sendErrorMessage(
                                        msg,
                                        reply, 400);
                                }
                                else {
                                    card_payment_id = charge.id
                                    payment_status = 1
                                    callback(null)
                                }
                            }
                            );
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.authorize_net.unique_id")) {
                        payment_source = "authorize_net";
                        let authorize_net_key_data = await Universal.getAuthorizeNetKeys(request.dbName)
                        let base_url = process.env.NODE_ENV == 'prod' ? 'https://api.authorize.net/xml/v1/request.api' : 'https://apitest.authorize.net/xml/v1/request.api'
                        let expirationDate = request.body.expirationDate
                        let ref_id = "ref_id_" + randomstring.generate({
                            length: 5,
                            charset: 'alphanumeric'
                        }).toUpperCase();
                        if (Object.keys(authorize_net_key_data).length > 0) {
                            let body = {};
                            let authnet_profile_id = request.body.authnet_profile_id !== undefined ? request.body.authnet_profile_id : "";
                            let authnet_payment_profile_id = request.body.authnet_payment_profile_id !== undefined ? request.body.authnet_payment_profile_id : "";

                            if (authnet_profile_id !== "" && authnet_payment_profile_id !== "") {
                                body = {
                                    "createTransactionRequest": {
                                        "merchantAuthentication": {
                                            "name": authorize_net_key_data[config.get("payment.authorize_net.api_login_id")],
                                            "transactionKey": authorize_net_key_data[config.get("payment.authorize_net.transaction_key")]
                                        },
                                        "refId": ref_id,
                                        "transactionRequest": {
                                            "transactionType": "authCaptureTransaction",
                                            "amount": parseFloat(orderNetAmount),
                                            "profile": {
                                                "customerProfileId": authnet_profile_id,
                                                "paymentProfile": { "paymentProfileId": authnet_payment_profile_id }
                                            }
                                        }
                                    }
                                }

                                logger.debug("========body to send==========", body,
                                    body.createTransactionRequest.transactionRequest.profile)

                                logger.debug("=======JSON.stringify(body)==========", JSON.stringify(body))
                                var options = {
                                    'method': 'POST',
                                    'url': base_url,
                                    'headers': {
                                        'Content-Type': 'application/json'
                                    },
                                    body: body,
                                    json: true
                                };
                                web_request(options, async function (error, response, body) {
                                    logger.debug("====Body=====", error, body)
                                    if (error) {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        payment_status = 1;
                                        let result = body.trim();
                                        result = JSON.parse(result)
                                        logger.debug(result)

                                        if (result.messages.resultCode == "Error") {
                                            let errorMsg = result.messages.message[0].text
                                            sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                        } else if (result.messages.resultCode == "Ok") {
                                            card_payment_id = result.transactionResponse.transId;
                                            callback(null)
                                        } else {
                                            let errorMsg = "something went wrong during payment"
                                            sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                        }
                                    }
                                })
                            } else {
                                let errorMsg = "authnet_profile_id or authnet_payment_profile_id not found"
                                sendResponse.sendErrorMessage(errorMsg, reply, 400);

                                // body = {
                                //     "createTransactionRequest": {
                                //         "merchantAuthentication": {
                                //             "name": authorize_net_key_data[config.get("payment.authorize_net.api_login_id")],
                                //             "transactionKey": authorize_net_key_data[config.get("payment.authorize_net.transaction_key")]

                                //         },
                                //         "refId":ref_id,
                                //         "transactionRequest": {
                                //             "transactionType": "authCaptureTransaction",
                                //             "amount": Math.round(parseFloat(orderNetAmount)),
                                //             "payment": {
                                //                 "creditCard": {
                                //                     "cardNumber": paymentToken,
                                //                     "expirationDate": expirationDate
                                //                 }
                                //             },
                                //             "billTo": {
                                //                 "firstName": userData[0].name,
                                //             }
                                //         }
                                //     }
                                // }
                            }


                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else if ((unique_id) == config.get("payment.peach.unique_id")) {
                        payment_source = "peach";
                        let peach_secret_key_data = await Universal.getPeachSecretKey(request.dbName);

                        //if(peach_secret_key_data && peach_secret_key_data.length>0){
                        if (Object.keys(peach_secret_key_data).length > 0) {
                            console.log("customer_payment_id ========== ", customer_payment_id)

                            let url = "https://test.oppwa.com/v1/registrations/" + customer_payment_id + "/payments";
                            let headers = {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'Authorization': 'Bearer ' + peach_secret_key_data[config.get("payment.peach.peach_auth_token")] //OGFjN2E0Yzk3MTEyOWYyMjAxNzExNjI2YWYxYjA4N2J8SlpSeFljNnRtbg==' 
                            };

                            var amountForPeachSandbox = parseInt(orderNetAmount);

                            let obj = {
                                'entityId': peach_secret_key_data[config.get("payment.peach.peach_entityid")],//'8ac7a4c771129f2401711626cae30c42',
                                'amount': amountForPeachSandbox,//orderNetAmount,
                                'currency': currency,
                                'paymentType': 'PA'
                            };

                            var options = {
                                method: 'POST',
                                url: url,
                                headers: headers,
                                form: obj,
                                json: true
                            };
                            web_request(options, async function (error, response, body) {
                                console.log(error, "##############################################################", JSON.stringify(body))
                                if (error) {
                                    console.log("11111111111111111 error ----- ", error)
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1
                                    card_payment_id = body.id;
                                    callback(null)
                                }
                            });


                        }
                        else {
                            console.log("222222222222222222222error ----- ", error)
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }

                    else if ((unique_id) == config.get("payment.paystack.unique_id")) {
                        payment_source = "paystack";
                        let paystack_secret_key_data = await Universal.getPaystackSecretKey(request.dbName);
                        logger.debug("====STRIP=DATA==>>", paystack_secret_key_data, Math.round(parseFloat(productList[0].net_amount * 100)))

                        if (paystack_secret_key_data && paystack_secret_key_data.length > 0) {
                            var options = {
                                method: 'GET',
                                url: 'https://api.paystack.co/transaction/verify/' + payment_token + '',
                                headers: {
                                    Authorization: 'Bearer ' + paystack_secret_key_data[0].value + ''
                                }
                            };
                            web_request(options, function (err, response, body) {
                                logger.debug("====Err!==", err)
                                if (err) {
                                    return sendResponse.sendErrorMessage(
                                        Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    logger.debug("===BoDY===>>==", JSON.parse(body));
                                    let verifyData = JSON.parse(body);
                                    if (verifyData.data.status == "success") {
                                        payment_status = 1;
                                        card_payment_id = verifyData.data.reference;
                                        callback(null)
                                    }
                                    else {
                                        return sendResponse.sendErrorMessage(
                                            Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }

                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.payuLatam.unique_id")) {
                        payment_source = "payuLatam";
                        logger.debug("========unique_id unique_id====", unique_id)
                        let payuLatam_api_key_data = await Universal.getpayuLatamApiKey(request.dbName);
                        let payuLatam_api_loginkey_data = await Universal.getpayuLatamApiLoginkey(request.dbName);
                        let payuLatam_api_merchant_data = await Universal.getpayuLatamMerchantId(request.dbName);
                        let payuLatam_api_account_data = await Universal.getpayuLatamAccountId(request.dbName);
                        let payuLatam_basic_auth_data = await Universal.getpayuLatamSecretKey(request.dbName);

                        logger.debug("========userCards===", userData)
                        if (payuLatam_api_key_data && payuLatam_api_key_data.length > 0 && payuLatam_api_loginkey_data && payuLatam_api_loginkey_data.length > 0) {

                            let userCards = await checkUserCards(request.dbName, userData[0].id, payment_source);
                            logger.debug("========userCards===", userCards)

                            let payment_object = {};
                            // if(customer_payment_id !=="" && card_id!==""){
                            payment_object = {
                                "amount": Math.round(parseFloat(orderNetAmount)),
                                "currency": currency,
                                "customer_token": userCards[0].card_id,
                                "customer": userCards[0].customer_payment_id,
                                "capture": true,
                                "description": '(' + userData[0].email + ') Make an order',
                                "firstName": userData[0].firstname,
                                "lastName": userData[0].lastname,
                                "email": userData[0].email,
                                "address": userData[0].customer_address,
                                "payment_method": userCards[0].card_type,
                                "ip_address": "157.36.245.5",
                            }
                            // }else{
                            //     payment_object = {
                            //         amount: Math.round(parseFloat(orderNetAmount*100)),
                            //         currency: currency,
                            //         source: payment_token,
                            //         capture:true,
                            //         description: '('+userData[0].email+') Made an booking',
                            //     }
                            // }


                            var payment_result = await authorizeAndCapturePayment(payment_object, payuLatam_api_loginkey_data[0].value, payuLatam_api_key_data[0].value, payuLatam_api_merchant_data[0].value, payuLatam_api_account_data[0].value, payuLatam_basic_auth_data[0].value)

                            if (payment_result.transactionResponse.state != 'DECLINED') {
                                if (payment_result.transactionResponse.state == 'APPROVED') {
                                    payment_status = 1;
                                    card_payment_id = payment_result.transactionResponse.transactionId;
                                } else if (payment_result.transactionResponse.state == 'PENDING') {
                                    payment_status = 0;
                                    card_payment_id = payment_result.transactionResponse.transactionId;
                                }
                                else if (payment_result.transactionResponse.state == 'SUBMITTED') {
                                    payment_status = 0;
                                    card_payment_id = payment_result.transactionResponse.transactionId;
                                }


                                callback(null)
                            } else {
                                payment_status = 0;
                                let msg = payment_result.transactionResponse.responseMessage;
                                console.log("*********msg", msg);
                                return sendResponse.sendErrorMessage(msg, reply, 400);

                            }

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.conekta.unique_id")) {
                        let conekta_data = await Universal.getConektaSecretKey(request.dbName);
                        let userData = await Universal.getUserData(request.dbName, request.headers.authorization);
                        payment_source = "conekta";
                        logger.debug("=====conekta_data===USR==DAT!==>>>", productList[0].net_amount, conekta_data, userData)

                        if (conekta_data && conekta_data.length > 0) {
                            let conekta = require('conekta');
                            conekta.api_key = conekta_data[0].value;
                            conekta.locale = 'es';
                            conekta.Order.create({
                                "currency": "MXN",
                                "customer_info": {
                                    "name": userData[0].name,
                                    "phone": userData[0].mobile_no,
                                    "email": userData[0].email
                                },
                                "line_items": [{
                                    "name": userData[0].name,
                                    "unit_price": Math.round(parseFloat(orderNetAmount * 100)),
                                    "quantity": 1
                                }],
                                "shipping_lines": [
                                    {
                                        "amount": 0
                                    }
                                ],
                                "shipping_contact": {
                                    "address": {
                                        street1: userData[0].customer_address,
                                        city: userData[0].customer_address,
                                        state: userData[0].address_line_2,
                                        postal_code: "78215",
                                        country: userData[0].customer_address,
                                        residential: true,
                                        object: "shipping_address"
                                    }
                                },
                                "charges": [
                                    {
                                        "payment_method": {
                                            "type": "card",
                                            "token_id": payment_token
                                        }
                                    }]
                            }).then(function (result) {
                                logger.debug("JSON==Object==>", result.toObject());
                                card_payment_id = result.toObject().id;
                                payment_status = 1
                                callback(null)
                            }, async function (error) {
                                logger.debug("=======ERR!=====", error);
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                    reply, 400);
                            })
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else if ((unique_id) == config.get("payment.razorpay.unique_id")) {
                        payment_source = "razorpay";
                        let razor_pay_data = await Universal.getRazorPayData(request.dbName);
                        logger.debug("======razor_pay_data=net_amount====>>", razor_pay_data, productList[0].net_amount * 100)
                        if (Object.keys(razor_pay_data).length > 0) {
                            web_request({
                                method: 'POST',
                                url: "https://" + razor_pay_data[config.get("payment.razorpay.publish_key")] + ":" + razor_pay_data[config.get("payment.razorpay.secret_key")] + "@api.razorpay.com/v1/payments/" + payment_token + "/capture",
                                form: {
                                    amount: (orderNetAmount) * 100,
                                    currency: "INR"
                                }
                            }, async function (error, response, body) {
                                logger.debug("===RazorPayError====", error)
                                // console.log('Status:', response.statusCode);
                                // console.log('Headers:', JSON.stringify(response.headers));
                                // console.log('Response:', body);
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1
                                    callback(null)
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.razorpay.unique_id")) {
                        payment_source = "razorpay";
                        let razor_pay_data = await Universal.getRazorPayData(request.dbName);
                        logger.debug("======razor_pay_data=net_amount====>>", razor_pay_data, productList[0].net_amount * 100)
                        if (Object.keys(razor_pay_data).length > 0) {
                            web_request({
                                method: 'POST',
                                url: "https://" + razor_pay_data[config.get("payment.razorpay.publish_key")] + ":" + razor_pay_data[config.get("payment.razorpay.secret_key")] + "@api.razorpay.com/v1/payments/" + payment_token + "/capture",
                                form: {
                                    amount: (orderNetAmount) * 100,
                                    currency: "INR"
                                }
                            }, async function (error, response, body) {
                                logger.debug("===RazorPayError====", error)
                                // console.log('Status:', response.statusCode);
                                // console.log('Headers:', JSON.stringify(response.headers));
                                // console.log('Response:', body);
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1
                                    callback(null)
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.myfatoorah.unique_id")) {

                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "myfatoorah"
                        transaction_id = myFatoorahInvoiceId

                        callback(null)

                    }
                    else if ((unique_id) == "urway") {

                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "urway"

                        callback(null)

                    }
                    else if ((unique_id) == "applepay" || (unique_id) == "ApplePay" || (unique_id) == "applePay") {

                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "applepay"

                        callback(null)

                    }
                    else if ((unique_id) == "thawani") {

                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "thawani"

                        callback(null)

                    }
                    else if ((unique_id) == "aamarpay") {

                        payment_source = "aamarpay";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null)

                    }
                    else if ((unique_id) == "hyperpay") {

                        payment_source = "hyperpay";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null)

                    }
                    else if ((unique_id) == "telr") {

                        payment_source = "telr";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null)

                    }
                    else if ((unique_id) == "datatrans") {

                        payment_source = "datatrans";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null)

                    }
                    else if ((unique_id) == config.get("payment.payhere.unique_id")) {

                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "payhere"
                        callback(null)

                    }
                    else if ((unique_id) == config.get("payment.converge.unique_id")) {

                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "converge"
                        callback(null)

                    }
                    else if ((unique_id) == config.get("payment.tap.unique_id")) {
                        payment_source = "tap";
                        card_payment_id = payment_token;
                        payment_status = 1;

                        if (parseInt(payment_status_after_confirm) == 1) {
                            payment_status = 0;
                        }



                        callback(null);
                    }
                    else if ((unique_id) == config.get("payment.mPaisa.unique_id")) {
                        payment_source = "mPaisa";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null);
                    }
                    else if ((unique_id) == "sadadqa") {
                        payment_source = "sadadqa";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null);
                    }
                    else if ((unique_id) == "transbank") {
                        payment_source = "transbank";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null);
                    }
                    else if ((unique_id) == "paymaya") {
                        payment_source = "paymaya";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null);
                    }
                    else if ((unique_id) == config.get("payment.windcave.unique_id")) {
                        payment_source = "windcave";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null);
                    }
                    else if ((unique_id) == config.get("payment.paypal.unique_id")) {
                        payment_source = "paypal";
                        let paypal_api = process.env.NODE_ENV == 'prod' ? 'https://api.paypal.com' : 'https://api.sandbox.paypal.com'
                        let paypal_data = await Universal.getPaypalData(request.dbName);
                        logger.debug("========paypal==API==", paypal_api, paypal_data)
                        if (Object.keys(paypal_data).length > 0) {
                            let tokenData = await Universal.getAuthTokeOfPayPal(paypal_data[config.get("payment.paypal.client_key")], paypal_data[config.get("payment.paypal.secret_key")]);
                            var options = {
                                'method': 'POST',
                                'url': paypal_api + '/v2/checkout/orders/' + payment_token + '/capture',
                                'headers': {
                                    'Authorization': 'Bearer ' + tokenData.access_token,
                                    // 'PayPal-Request-Id': '7b92603e-77ed-4896-8e78-5dea2050476a',
                                    'Content-Type': 'application/json'
                                }
                            };
                            web_request(options, async function (error, response, body) {
                                logger.debug("====Body=====", error, body)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1
                                    card_payment_id = payment_token;
                                    callback(null)
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else if ((unique_id) == config.get("payment.checkout.unique_id")) {
                        payment_source = "checkout";

                        let checkout_data = await Universal.getCheckoutSecretKey(request.dbName);
                        logger.debug("======razor_pay_data=net_amount====>>", checkout_data)
                        if (Object.keys(checkout_data).length > 0) {
                            var headers = {
                                'Accept': 'application/json',
                                'Authorization': checkout_data[config.get("payment.checkout.secret_key")]//'sk_test_a7d262c3-15fd-4564-8aca-9e45ed879f57'
                            };

                            //console.log("headers ============= ",headers)

                            var dataString = {
                                "source": {
                                    "type": "token",
                                    "token": payment_token//"tok_4gzeau5o2uqubbk6fufs3m7p54"
                                },
                                //"amount": amount,//6500,
                                "amount": parseFloat(orderNetAmount),
                                "currency": currency,//"USD",
                                "reference": request.body.cartId ? request.body.cartId : '',//"ORD-5023-4E89",
                                "metadata": {
                                    "card_id": card_id,
                                    "customer_payment_id": customer_payment_id
                                }
                            };
                            console.log("dataString ============= ", dataString)
                            let checkout_api_url = (process.env.NODE_ENV == 'prod') ? 'https://api.checkout.com/payments' : 'https://api.sandbox.checkout.com/payments';
                            console.log("options ------- ------ ------ ", {
                                method: 'POST',
                                //url: "https://api.sandbox.checkout.com/payments",
                                url: checkout_api_url,
                                headers: headers,
                                form: dataString
                            })
                            web_request({
                                method: 'POST',
                                //url: "https://api.sandbox.checkout.com/payments",
                                url: checkout_api_url,
                                headers: headers,
                                form: dataString
                            }, async function (error, response, body) {
                                // console.log("1#########################################################")
                                // logger.debug("=== Checkout ====",error)
                                // console.log("2#########################################################")
                                // console.log(error)
                                // console.log("3#########################################################")
                                // console.log(response)
                                // console.log("4#########################################################")
                                // console.log(body)
                                // console.log("5#########################################################")
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    card_payment_id = body.id;
                                    payment_status = 1
                                    callback(null)
                                }
                            });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else if ((unique_id) == config.get("payment.venmo.unique_id")) {
                        payment_source = "venmo";
                        let braintree_data = await Universal.getBraintreeData(request.dbName);
                        logger.debug("========braintree_data==API==", braintree_data);

                        if (Object.keys(braintree_data).length > 0) {
                            var braintree = require("braintree");
                            var gateway = braintree.connect({
                                environment: process.env.NODE_ENV == 'prod' ? braintree.Environment.Production : braintree.Environment.Sandbox,
                                merchantId: braintree_data[config.get("payment.venmo.merchant_id")],
                                publicKey: braintree_data[config.get("payment.venmo.public_key")],
                                privateKey: braintree_data[config.get("payment.venmo.private_key")]
                            });

                            gateway.transaction.sale({
                                amount: orderNetAmount,
                                paymentMethodNonce: payment_token,
                                options: {
                                    submitForSettlement: true
                                },
                                deviceData: {}
                            }, async function (err, result) {
                                if (err) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    if (result.success) {
                                        logger.debug("===braintree===response Id==>>>", result)
                                        card_payment_id = result.transaction.id;
                                        payment_status = 1
                                        callback(null)
                                    }
                                    else {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }

                                }

                            });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else if ((unique_id).toLowerCase() == config.get("payment.braintree.unique_id")) {
                        payment_source = "braintree";
                        let braintree_data = await Universal.getBraintreeData(request.dbName);
                        logger.debug("========braintree_data==API==", braintree_data);

                        if (Object.keys(braintree_data).length > 0) {
                            var braintree = require("braintree");
                            var gateway = braintree.connect({
                                //environment:process.env.NODE_ENV == 'prod'? braintree.Environment.Production:braintree.Environment.Sandbox,
                                environment: braintree.Environment.Production,
                                merchantId: braintree_data[config.get("payment.braintree.merchant_id")],
                                publicKey: braintree_data[config.get("payment.braintree.public_key")],
                                privateKey: braintree_data[config.get("payment.braintree.private_key")]
                            });

                            gateway.transaction.sale({
                                amount: orderNetAmount,
                                paymentMethodNonce: payment_token,
                                options: {
                                    submitForSettlement: true
                                },
                                deviceData: {}
                            }, async function (err, result) {
                                console.log(err, "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$", result)
                                if (err) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    if (result.success) {
                                        logger.debug("===braintree===response Id==>>>", result)
                                        card_payment_id = result.transaction.id;
                                        payment_status = 1
                                        callback(null)
                                    }
                                    else {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }

                                }

                            });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else if ((unique_id) == "zelle") {
                        logger.debug("===============zelle==========", zelle_receipt_url)
                        if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                            logger.debug("=======node zelle url============", zelle_receipt_url)
                            let msg = "please provide receipt for zelle";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            payment_source = "zelle"
                            callback(null)
                        }
                    }
                    else if ((unique_id) == "PipolPay") {
                        logger.debug("===============zelle==========", zelle_receipt_url)
                        if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                            logger.debug("=======node zelle url============", zelle_receipt_url)
                            let msg = "please provide receipt for PipolPay";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            payment_source = "PipolPay"
                            callback(null)
                        }
                    }
                    else if ((unique_id) == "oxxo") {
                        logger.debug("===============oxxo==========", zelle_receipt_url)
                        if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                            logger.debug("=======node oxxo url============",
                                zelle_receipt_url)
                            let msg = "please provide receipt for oxxo";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            payment_status = 1;
                            payment_source = "oxxo"
                            callback(null)
                        }
                    }
                    else if (unique_id == "cred_movil") {
                        logger.debug("===============zelle==========", zelle_receipt_url)
                        if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                            logger.debug("=======node zelle url============", zelle_receipt_url)
                            let msg = "please provide receipt for cred movil";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            payment_source = "cred_movil"
                            callback(null)
                        }
                    }
                    else if ((unique_id) == "cashapp") {
                        logger.debug("===============cashapp==========", zelle_receipt_url)
                        if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                            logger.debug("=======node zelle url============", zelle_receipt_url)
                            let msg = "please provide receipt for cashapp";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            payment_source = "cashapp"
                            callback(null)
                        }
                    }
                    else if ((unique_id) == config.get("payment.squareup.unique_id")) {
                        payment_source = "squareup";
                        let squareData = await Universal.getSquareupSecretKey(dbName)

                        if (Object.keys(squareData).length > 0) {
                            var SquareConnect = require('square-connect');
                            // Set Square Connect credentials and environment
                            var defaultClient = SquareConnect.ApiClient.instance;
                            // Configure OAuth2 access token for authorization: oauth2
                            var oauth2 = defaultClient.authentications['oauth2'];
                            oauth2.accessToken = squareData.square_token;
                            // Set 'basePath' to switch between sandbox env and production env
                            // sandbox: https://connect.squareupsandbox.com
                            // production: https://connect.squareup.com
                            let basePathOfSequare = process.env.NODE_ENV == 'prod' ? 'https://connect.squareup.com' : 'https://connect.squareupsandbox.com';
                            logger.debug("=basePathOfSequare===", basePathOfSequare);
                            defaultClient.basePath = process.env.NODE_ENV == 'prod' ? 'https://connect.squareup.com' : 'https://connect.squareupsandbox.com'

                            let payment_object = {};
                            const idempotency_key = crypto.randomBytes(22).toString('hex');
                            var apiInstance = new SquareConnect.PaymentsApi();
                            // you cand Add some Optional params acc. to the requirements in the PaymentObj
                            //https://developer.squareup.com/reference/square/payments-api/create-payment/explorer
                            logger.debug("==withou,with=", parseInt(Math.round(parseFloat((orderNetAmount - referralAmount) * 100))), typeof parseInt(Math.round(parseFloat((orderNetAmount - referralAmount) * 100))), typeof Math.round(parseFloat((orderNetAmount - referralAmount) * 100)))
                            if (customer_payment_id !== "" && card_id !== "") {
                                payment_object = {
                                    amount_money: {
                                        amount: parseInt(Math.round(parseFloat((orderNetAmount) * 100))),    // 100 Cent == $1.00 charge
                                        currency: currency
                                    },
                                    // currency: currency,
                                    source_id: card_id,
                                    customer_id: customer_payment_id,
                                    idempotency_key: idempotency_key,
                                    note: 'Made an booking'
                                }
                            } else {
                                payment_object = {
                                    source_id: payment_token,
                                    amount_money: {
                                        amount: parseInt(Math.round(parseFloat((orderNetAmount) * 100))),    // 100 Cent == $1.00 charge
                                        currency: currency
                                    },
                                    idempotency_key: idempotency_key,
                                    note: 'Made an booking'

                                };
                            }
                            logger.debug("===payment_object=", payment_object);
                            apiInstance.createPayment(payment_object).then(function (data) {
                                console.log('API called successfully. Returned data: ' + JSON.stringify(data));
                                card_payment_id = data.payment.id;
                                transaction_id = idempotency_key
                                payment_status = 1
                                callback(null);
                            }, function (error) {
                                console.error(error);
                                return sendResponse.sendErrorMessage(
                                    Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                    reply, 400);
                            });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }


                    }
                    else if ((unique_id) == config.get("payment.cybersource.unique_id")) {
                        payment_source = "cybersource";
                        let cyberSourceData = await Universal.getCyberSourceData(dbName);
                        logger.debug("==cyberSourceData====", cyberSourceData);
                        if (Object.keys(cyberSourceData).length > 0) {
                            var cybersourceRestApi = require('cybersource-rest-client');
                            try {
                                var instance = new cybersourceRestApi.PaymentsApi({
                                    'authenticationType': process.env.NODE_ENV == 'prod' ? 'https_signature' : 'http_signature',
                                    'runEnvironment': process.env.NODE_ENV == 'prod' ? 'cybersource.environment.production' : 'cybersource.environment.SANDBOX',
                                    'merchantID': cyberSourceData.cybersource_merchant_id,
                                    'merchantKeyId': cyberSourceData.cybersource_merchant_key_id,
                                    'merchantsecretKey': cyberSourceData.cybersource_merchant_secret_key
                                });
                                var processingInformation = new cybersourceRestApi.Ptsv2paymentsProcessingInformation();
                                processingInformation.commerceIndicator = 'internet';
                                // var aggregatorInformation = new cybersourceRestApi.Ptsv2paymentsAggregatorInformation();


                                var amountDetails = new cybersourceRestApi.Ptsv2paymentsOrderInformationAmountDetails();
                                amountDetails.totalAmount = parseFloat(parseFloat(orderNetAmount));
                                amountDetails.currency = 'AED';
                                var orderInformation = new cybersourceRestApi.Ptsv2paymentsOrderInformation();
                                orderInformation.amountDetails = amountDetails;

                                // var billTo = new cybersourceRestApi.Ptsv2paymentsOrderInformationBillTo();
                                //     billTo.country = userData[0].customer_address;
                                //     billTo.firstName = userData[0].name;
                                //     billTo.lastName = userData[0].name
                                //     billTo.phoneNumber = userData[0].mobile_no
                                //     billTo.address1 = userData[0].address_line_2
                                //     billTo.locality = userData[0].customer_address;
                                //     billTo.email = userData[0].email;
                                //     billTo.address2 = userData[0].address_line_2;

                                // orderInformation.billTo = billTo;
                                var paymentInformation = new cybersourceRestApi.Ptsv2paymentsPaymentInformation();
                                // var card = new cybersourceRestApi.Ptsv2paymentsPaymentInformationCard(); 
                                var customer = new cybersourceRestApi.Ptsv2paymentsPaymentInformationCustomer();
                                customer.customerId = payment_token;
                                // card.expirationYear = cardData[0].exp_year
                                // card.number = cardData[0].card_number;
                                // card.expirationMonth = cardData[0].exp_month;
                                // card.securityCode = await Universal.getDecryptData(cardData[0].cvc);
                                // // customer.customer_payment_id
                                // card.type = cardData[0].card_type;
                                // paymentInformation.card = card;
                                paymentInformation.customer = customer
                                var cbrequest = new cybersourceRestApi.CreatePaymentRequest();
                                // request.clientReferenceInformation = clientReferenceInformation;
                                cbrequest.processingInformation = processingInformation;
                                // request.aggregatorInformation = aggregatorInformation;
                                cbrequest.orderInformation = orderInformation;
                                cbrequest.paymentInformation = paymentInformation;
                                cbrequest.processingInformation.capture = true;
                                console.log('\n*************** Process Payment ********************* ');

                                instance.createPayment(cbrequest, function (error, data, response) {
                                    if (error) {

                                        console.log('\nError in process a payment : ' + JSON.stringify(error));
                                        return sendResponse.sendErrorMessage(
                                            Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                            reply, 400);
                                    }
                                    else {
                                        console.log('\nData of process a payment : ' + JSON.stringify(response['status']), JSON.stringify(response['id']))
                                        card_payment_id = data.id;
                                        payment_status = 1
                                        callback(null);
                                    }
                                    // console.log('\nResponse of process a payment : ' + JSON.stringify(response));
                                    // console.log('\nResponse Code of process a payment : ' + JSON.stringify(response['status']));
                                    // callback(error, data);
                                });
                            } catch (error) {
                                logger.debug("======ERR!===>>", error)
                                return sendResponse.sendErrorMessage(
                                    Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                    reply, 400);
                            }

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.paytab.unique_id")) {
                        console.log("############################## paytab 111111111111")
                        let payTabData = await Universal.getPayTabData(dbName);

                        payment_source = "paytab";
                        console.log("############################## paytab 222222222222", payTabData)
                        if (Object.keys(payTabData).length > 0) {
                            console.log("############################## paytab 333333333333", payTabData)
                            web_request.post({
                                url: "https://www.paytabs.com/apiv2/verify_payment_transaction",
                                method: "POST",
                                form: {
                                    "merchant_email": payTabData.merchant_email,
                                    "secret_key": payTabData.paytabs_secret_key,
                                    // "merchant_email":"Kiran.girija@afoc.mil.ae", //payTabData.paytab_merchant_email,
                                    // "secret_key":"QGj2hCvxNdFnoA9QZe9jm8QSr2S44FcUmvWD7sbUFRh4rrUrG4L2cCUEENJJsVDPqAsy3EtIvLNXdHoTM9WYLRDqEm97hNWIophr",//payTabData.paytab_secret_key,
                                    "transaction_id": payment_token
                                }

                            }, async function (error, response, body) {
                                console.log("############################## paytab 44444444444444", payTabData)
                                logger.debug("===paytabErr!===", error)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    card_payment_id = JSON.parse(body).transaction_id;
                                    payment_status = 1
                                    callback(null);
                                }

                            })
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    } else if ((unique_id) == "safe2pay") {

                        payment_source = "safe2pay";

                        let safe2pay_keydata = await Universal.getSafe2Paykey(request.dbName);

                        let base_url = "https://payment.safe2pay.com.br/v2/Payment";

                        let IsSandbox = process.env.NODE_ENV == 'prod' ? false : true

                        // let expirationDate = request.body.expirationDate
                        let cvv = "123";

                        cvv = request.body.cvt !== undefined ? request.body.cvt : request.body.cvv;

                        let expMonth = request.body.expMonth;
                        let expYear = request.body.expYear;

                        let ref_id = "ref_id_" + randomstring.generate({
                            length: 5,
                            charset: 'alphanumeric'
                        }).toUpperCase();


                        if (Object.keys(safe2pay_keydata).length > 0) {
                            let body = {};
                            body = {
                                "IsSandbox": IsSandbox,
                                "Application": "Aplicação de teste",
                                "Vendor": userData[0].firstname,
                                "CallbackUrl": "https://callbacks.exemplo.com.br/api/Notify",
                                "PaymentMethod": "2",
                                "Customer": {
                                    "Name": userData[0].firstname,
                                    "Identity": ref_id,
                                    "Phone": userData[0].mobile_no,
                                    "Email": userData[0].email
                                },
                                "Products": [
                                    {
                                        "Code": ref_id,
                                        "Description": "order payment",
                                        "UnitPrice": parseFloat((orderNetAmount) * 100),
                                        "Quantity": 1
                                    }
                                ],
                                "PaymentObject": {
                                    "Holder": userData[0].firstname,
                                    "CardNumber": payment_token,
                                    "ExpirationDate": expMonth + "/" + expYear,//"12/2021",
                                    "SecurityCode": cvv
                                }
                            }



                            logger.debug("=======JSON.stringify(body)==========", JSON.stringify(body))
                            var options = {
                                'method': 'POST',
                                'url': base_url,
                                'headers': {
                                    'Content-Type': 'application/json',
                                    'x-api-key': safe2pay_keydata.safe2pay_apikey
                                },
                                body: body,
                                json: true
                            };
                            web_request(options, async function (error, response, body) {
                                logger.debug("====Body=====", error, body)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1;
                                    callback(null);
                                }
                            })


                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else if ((unique_id) == "authorize_net") {
                        payment_source = "authorize_net";
                        let authorize_net_key_data = await Universal.getAuthorizeNetKeys(request.dbName)
                        let base_url = process.env.NODE_ENV == 'prod' ? 'https://api.authorize.net/xml/v1/request.api' : 'https://apitest.authorize.net/xml/v1/request.api'
                        let expirationDate = request.body.expirationDate
                        let ref_id = "ref_id_" + randomstring.generate({
                            length: 5,
                            charset: 'alphanumeric'
                        }).toUpperCase();
                        if (Object.keys(authorize_net_key_data).length > 0) {
                            let body = {};
                            let authnet_profile_id = request.body.authnet_profile_id !== undefined ? request.body.authnet_profile_id : "";
                            let authnet_payment_profile_id = request.body.authnet_payment_profile_id !== undefined ? request.body.authnet_payment_profile_id : "";

                            if (authnet_profile_id !== "" && authnet_profile_id !== "") {
                                body = {
                                    "createTransactionRequest": {
                                        "merchantAuthentication": {
                                            "name": authorize_net_key_data[config.get("payment.authorize_net.api_login_id")],
                                            "transactionKey": authorize_net_key_data[config.get("payment.authorize_net.transaction_key")]
                                        },
                                        "refId": ref_id,
                                        "transactionRequest": {
                                            "transactionType": "authCaptureTransaction",
                                            "amount": Math.round(parseFloat(orderNetAmount)),
                                            "profile": {
                                                "customerProfileId": authnet_profile_id,
                                                "paymentProfile": { "paymentProfileId": authnet_payment_profile_id }
                                            }
                                        }
                                    }
                                }
                            } else {
                                body = {
                                    "createTransactionRequest": {
                                        "merchantAuthentication": {
                                            "name": authorize_net_key_data[config.get("payment.authorize_net.api_login_id")],
                                            "transactionKey": authorize_net_key_data[config.get("payment.authorize_net.transaction_key")]

                                        },
                                        "refId": ref_id,
                                        "transactionRequest": {
                                            "transactionType": "authCaptureTransaction",
                                            "amount": parseFloat(orderNetAmount),
                                            "payment": {
                                                "creditCard": {
                                                    "cardNumber": paymentToken,
                                                    "expirationDate": expirationDate
                                                }
                                            },
                                            "billTo": {
                                                "firstName": userData[0].name,
                                            }
                                        }
                                    }
                                }
                            }

                            logger.debug("========body to send==========", body,
                                body.createTransactionRequest.transactionRequest.profile)

                            logger.debug("=======JSON.stringify(body)==========", JSON.stringify(body))
                            var options = {
                                'method': 'POST',
                                'url': base_url,
                                'headers': {
                                    'Content-Type': 'application/json'
                                },
                                body: body,
                                json: true
                            };
                            web_request(options, async function (error, response, body) {
                                logger.debug("====Body=====", error, body)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1;
                                    let result = body.trim();
                                    result = JSON.parse(result)
                                    logger.debug(result)

                                    if (result.messages.resultCode == "Error") {
                                        let errorMsg = result.messages.message[0].text
                                        sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                    } else if (result.messages.resultCode == "Ok") {
                                        card_payment_id = result.transactionResponse.transId;
                                        callback(null)
                                    } else {
                                        let errorMsg = "something went wrong during payment"
                                        sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                    }
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else if ((unique_id) == "pago_facil") {
                        let pago_facil_key_data = await Universal.getPagofacilKeys(dbName);
                        let base_url = process.env.NODE_ENV == 'prod' ? 'https://api.pagofacil.tech/Wsrtransaccion/index/format/json' : 'https://sandbox.pagofacil.tech/Wsrtransaccion/index/format/json'
                        if (Object.keys(pago_facil_key_data).length > 0) {
                            let headers = {
                                'Content-Type': 'multipart/form-data',
                            }

                            formData = {
                                "method": "transaccion",
                                "data[nombre]": tran_id,
                                "data[apellidos]": success_url,
                                "data[numeroTarjeta]": fail_url,
                                "data[cvt]": cancel_url,
                                "data[cp]": amount,
                                "data[mesExpiracion]": currency,
                                "data[anyoExpiracion]": signature_key,
                                "data[monto]": desc,
                                "data[idSucursal]": cus_name,
                                "data[idUsuario]": cus_email,
                                "data[idServicio]": cus_add1,
                                "data[email]": cus_add2,
                                "data[telefono]": cus_city,
                                "data[celular]": cus_state,
                                "data[calleyNumero]": cus_postcode,
                                "data[colonia]": cus_country,
                                "data[municipio]": cus_phone,
                                "data[status]": "000599000730016",
                                "data[estado]": "",
                                "data[pais]": ""
                            }
                            logger.debug("========body to send==========", body)

                            logger.debug("=======JSON.stringify(body)==========", JSON.stringify(body))

                            var options = {
                                method: 'POST',
                                url: base_url,
                                headers: headers,
                                form: formData,
                                json: true
                            };
                            web_request(options, async function (error, response, body) {
                                logger.debug("====Body=====", error, body)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1;
                                    let result = body.trim();
                                    result = JSON.parse(result)
                                    logger.debug(result)

                                    if (result.messages.resultCode == "Error") {
                                        let errorMsg = result.messages.message[0].text
                                        sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                    } else if (result.messages.resultCode == "Ok") {
                                        card_payment_id = result.transactionResponse.transId;
                                        callback(null)
                                    } else {
                                        let errorMsg = "something went wrong during payment"
                                        sendResponse.sendErrorMessage(errorMsg, reply, 400);
                                    }
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }

                    else if ((unique_id) == "pago_facil") {
                        logger.debug("======dbname=======", request.dbName);
                        let pago_facil_key_data = await Universal.getPagofacilKeys(request.dbName);
                        logger.debug("=========pago data=======", pago_facil_key_data)
                        let base_url = process.env.NODE_ENV == 'prod' ? 'https://api.pagofacil.tech/Wsrtransaccion/index/format/json' : 'https://sandbox.pagofacil.tech/Wsrtransaccion/index/format/json'
                        let tran_id = "tran_id_" + randomstring.generate({
                            length: 5,
                            charset: 'alphanumeric'
                        }).toUpperCase();
                        let cvt = request.body.cvt;
                        let cp = request.body.cp;
                        let expMonth = request.body.expMonth;
                        let expYear = request.body.expYear;

                        logger.debug("==========pagofacil key data====", pago_facil_key_data)
                        if (Object.keys(pago_facil_key_data).length > 0) {
                            let headers = {
                                'Content-Type': 'multipart/form-data',
                            }

                            formData = {
                                "method": "transaccion",
                                "data[nombre]": userData[0].firstname,
                                "data[apellidos]": userData[0].firstname,
                                "data[numeroTarjeta]": payment_token,
                                "data[cvt]": cvt,
                                "data[cp]": cp,
                                "data[mesExpiracion]": expMonth,
                                "data[anyoExpiracion]": expYear,
                                "data[monto]": parseFloat(orderNetAmount).toString(),
                                "data[idSucursal]": pago_facil_key_data.idSucursa,
                                "data[idUsuario]": pago_facil_key_data.idUsuario,
                                "data[idServicio]": "3",
                                "data[email]": userData[0].email,
                                "data[telefono]": userData[0].mobile_no,
                                "data[celular]": userData[0].mobile_no,
                                "data[calleyNumero]": userData[0].customer_address,
                                "data[colonia]": userData[0].customer_address,
                                "data[municipio]": userData[0].customer_address,
                                "data[status]": "Sonora",
                                "data[estado]": "México",
                                "data[pais]": "México"
                            }
                            logger.debug("========formData to send==========", formData)

                            logger.debug("=======JSON.stringify(formData)==========", JSON.stringify(formData))

                            var options = {
                                method: 'POST',
                                url: base_url,
                                headers: headers,
                                form: formData,
                                json: true
                            };
                            web_request(options, async function (error, response, body) {
                                logger.debug("====Body=====", error, body)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1;
                                    payment_source = "pago_facil"
                                    if (body.WebServices_Transacciones.transaccion.autorizado == "0") {
                                        return sendResponse.sendErrorMessage(body.WebServices_Transacciones.transaccion.texto,
                                            reply, 400)
                                    } else {
                                        card_payment_id = body.WebServices_Transacciones.transaccion.idTransaccion
                                        callback(null);
                                    }
                                }
                            });

                        }
                        else {

                            return sendResponse.sendErrorMessage("keys not added", reply, 400)
                        }

                    }
                    else if ((unique_id) == config.get("payment.saferpay.unique_id")) {
                        payment_source = "saferpay";

                        let safer_pay_data = await Universal.getSaferPayData(dbName);
                        let saferTransactionData = await Execute.Query(dbName, `select saferpay.saferpay_request_id,saferpay.saferpay_token from saferpay where saferpay.saferpay_request_id=?`, [request.body.payment_token]);
                        if (saferTransactionData && saferTransactionData.length && Object.keys(safer_pay_data).length > 0) {
                            let payload = {
                                "RequestHeader": {
                                    "SpecVersion": "1.20",
                                    "CustomerId": safer_pay_data.saferpay_customer_id,
                                    "RequestId": saferTransactionData[0].saferpay_request_id,
                                    "RetryIndicator": 0
                                },
                                "Token": saferTransactionData[0].saferpay_token
                            }

                            let username = safer_pay_data.saferpay_username;
                            let password = safer_pay_data.saferpay_password;

                            let authToken = "Basic " + new Buffer(username + ":" + password).toString("base64");

                            var headers = {
                                "Content-type": "application/json",
                                "accetp": "application/json; charset=utf-8",
                                'Authorization': authToken
                            };

                            let url = "https://test.saferpay.com/api/Payment/v1/Transaction/Authorize";

                            if (process.env.NODE_ENV == 'prod')
                                url = "https://www.saferpay.com/api/Payment/v1/Transaction/Authorize";

                            web_request({
                                method: 'POST',
                                url: url,
                                headers: headers,
                                body: payload,
                                json: true
                            }, async function (error, response, body) {

                                if (body && body.Behavior == 'ABORT') {
                                    console.log('Response:', body);
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    let payloadCapture = {
                                        "RequestHeader": {
                                            "SpecVersion": "1.20",
                                            "CustomerId": safer_pay_data.saferpay_customer_id,
                                            "RequestId": saferTransactionData[0].saferpay_request_id,
                                            "RetryIndicator": 0
                                        },
                                        "TransactionReference": {
                                            "TransactionId": body.Transaction.Id
                                        }
                                    }

                                    let CaptureUrl = "https://test.saferpay.com/api/Payment/v1/Transaction/Capture";

                                    if (process.env.NODE_ENV == 'prod')
                                        CaptureUrl = "https://www.saferpay.com/api/Payment/v1/Transaction/Capture";

                                    var catptureId = "";
                                    await web_request({
                                        method: 'POST',
                                        url: CaptureUrl,
                                        headers: headers,
                                        body: payloadCapture,
                                        json: true
                                    }, async (error, test, capdata) => {
                                        if (capdata && capdata.CaptureId) {
                                            catptureId = capdata.CaptureId
                                        }
                                    })

                                    card_payment_id = body.Transaction.Id;
                                    payment_status = 1

                                    await Execute.Query(request.dbName, `update saferpay set other=?, catpture_id=? where saferpay_request_id=?`, [card_payment_id, catptureId, request.body.payment_token]);
                                    callback(null);
                                    // sendResponse.sendSuccessData(body, constant.responseMessage.SUCCESS, reply, 200);
                                }

                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }

                    }
                    else {
                        console.log("=======eerr---------=====", unique_id)
                        return sendResponse.sendErrorMessage(
                            await Universal.getMsgText(
                                languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                            reply, 400);
                    }
                }
                else {
                    if (parseInt(wallet_module) === 1 && parseInt(paymentType) === 4) {
                        walletLeftAmount = parseFloat(wallet_amount) - parseFloat(orderNetAmount)
                        updateWalletQuery = "update user set wallet_amount=? where id=?"
                        await ExecuteQ.Query(request.dbName, updateWalletQuery, [walletLeftAmount, id]);
                        let query = "insert into user_wallet_transactions(user_id,amount,card_payment_id,by_admin,added_deduct_through,is_add) values(?,?,?,?,?,?)"
                        let params = [id, orderNetAmount, "", 0, 3, 0];
                        await ExecuteQ.Query(request.dbName, query, params);
                        payment_source = "wallet";
                        paymentType = 4;
                        callback(null)
                    } else {
                        callback(null)
                    }
                }
            }
            catch (Err) {
                logger.debug("======ERR!===?", Err)
                return sendResponse.sendErrorMessage(
                    await Universal.getMsgText(
                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                    reply, 400);
            }
        }],
        checkProductQuantity: ['makePayment', function (callback) {


            var avail_query = "select p.id,p.name from product p where id IN (?) and p.purchased_quantity>=p.quantity";
            var stmt = multiConnection[request.dbName].query(avail_query, [productIds], function (err, data) {

                console.log(stmt.sql);

                if (err) {
                    var msg = "sorry! some of items are not available";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if (data && data.length > 0) {
                        var msg = data[0].name + " is not available";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        callback(null);
                    }
                }
            })
            // let avail_query="select p.id,p.name,(p.quantity-p.purchased_quantity) as available  from product p where id IN (?)";
            // let stmt=multiConnection[request.dbName].query(avail_query,[productIds],function(err,data){
            //     logger.debug("===========check product quanity===",stmt.sql)
            //     if(err){
            //             var msg = "sorry! some of items are not available";
            //             sendResponse.sendErrorMessage(msg,reply,500);
            //         }
            //         else{
            //             logger.debug("==========productList============",productList)
            //             _.each(productList,(i,index)=>{
            //                 if(data[index].available>0){
            //                     if(!(i.product_id==data[index].id && data[index].available>=parseInt(i.quantity))){
            //                         logger.debug("=======check product quantity======2222222==========",i.product_id,data[index].id,data[index].available,parseInt(i.quantity))
            //                         var msg = data[index].name +" is not available";
            //                         sendResponse.sendErrorMessage(msg,reply,500);
            //                     }
            //                 }
            //             })


            //             callback(null);
            //             // if(data && data.length>0){
            //             //     var msg = data[0].name +" is not available";
            //             //     sendResponse.sendErrorMessage(msg,reply,500);
            //             // }
            //             // else{
            //             //     callback(null);
            //             // }
            //         }
            //    })
        }],
        checkResturantTime: ['checkProductQuantity', function (callback) {
            var sql = "select s.id from supplier_branch sb join supplier s on sb.supplier_id=s.id join supplier_timings st on st.supplier_id=s.id "
            sql += "where s.id IN (?) and st.week_id = ? and (st.is_open = 0 or st.end_time <= ?)"
            var stmt = multiConnection[request.dbName].query(sql, [sup_ids, order_day, order_time], function (err, data) {
                logger.debug("==TIME-QUERY==>", stmt.sql)
                if (err) {
                    var msg = "error getting time";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if ((data && data.length > 0 && servicetype == 1) || (data && data.length > 0 && servicetype == 2)) {
                        let finalArr = data.map((value) => value.name)
                        let msgStr = finalArr.toString().replace(/,/g, ' and ')

                        var msg = "Sorry! " + msgStr + " is closed now";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        callback(null);
                    }
                }
            })

        }],
        getAddsOnDeliveryAdminCharge: ['checkResturantTime', async function (callback) {
            let ads_on_query = "select product_adds_on.product_id,cart_adds_on.*,cart.delivery_charges,cart.handling_admin,cart.handling_supplier from " +
                " cart_adds_on join cart on cart.id=cart_adds_on.cart_id join product_adds_on on product_adds_on.id=cart_adds_on.adds_on_id where cart_adds_on.cart_id=?  ";
            let ads_on_data = await ExecuteQ.Query(request.dbName, ads_on_query, [cartId]);
            let delivery_charges, handling_admin, handling_supplier;
            let checkTableBookMacTheme = await ExecuteQ.Query(request.dbName,
                "select `key`, value from tbl_setting where `key` = ? and value='1'", ["table_book_mac_theme"])
            logger.debug(ads_on_data)
            logger.debug("=========adds_on_delivery_admin_charges+delivery_admin_supplier_charge+parseFloat(user_service_charge)+parseFloat(tip_agent)+parseFloat(slot_price)============================",
                adds_on_delivery_admin_charges, delivery_admin_supplier_charge, parseFloat(user_service_charge), parseFloat(tip_agent), parseFloat(slot_price))
            if (ads_on_data && ads_on_data.length > 0) {
                for (const [index, i] of ads_on_data.entries()) {
                    adds_on_arr.push({
                        product_id: i.product_id,
                        adds_on_name: i.adds_on_name,
                        adds_on_type_name: i.adds_on_type_name,
                        quantity: i.quantity,
                        price: i.price,
                        serial_number: i.serial_number
                    })
                    totalAddOnAmount = totalAddOnAmount + parseFloat(i.price) * parseInt(i.quantity);
                    logger.debug("===========================")
                    adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + parseFloat(i.price) * parseInt(i.quantity);
                    logger.debug("=adds_on_delivery_admin_charges==", adds_on_delivery_admin_charges)
                    if (index == (ads_on_data.length - 1)) {
                        if (checkTableBookMacTheme && checkTableBookMacTheme.length > 0) {
                            adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + delivery_admin_supplier_charge + parseFloat(user_service_charge) + parseFloat(tip_agent)

                        } else {
                            adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + delivery_admin_supplier_charge + parseFloat(user_service_charge) + parseFloat(tip_agent) + parseFloat(slot_price)

                        }
                        // delivery_charges=i.delivery_charges!=null?parseFloat(i.delivery_charges):0
                        // handling_admin=i.handling_admin!=null?parseFloat(i.handling_admin):0
                        // handling_supplier=i.handling_supplier!=null?parseFloat(i.handling_supplier):0


                        logger.debug("===adds_on_delivery_admin_charges=", adds_on_delivery_admin_charges)
                        callback(null)
                    }
                }
            }
            else {
                if (checkTableBookMacTheme && checkTableBookMacTheme.length > 0) {
                    adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + delivery_admin_supplier_charge + parseFloat(user_service_charge) + parseFloat(tip_agent)

                } else {
                    adds_on_delivery_admin_charges = adds_on_delivery_admin_charges + delivery_admin_supplier_charge + parseFloat(user_service_charge) + parseFloat(tip_agent) + parseFloat(slot_price)

                }
                callback(null)
            }
        }],
        promoCodeValidation: ['getAddsOnDeliveryAdminCharge', async function (callback) {
            logger.debug("============adds_on_delivery_admin_charges=========", adds_on_delivery_admin_charges)
            var promo_categories_validation = false, promo_supplier_validation = false, is_supplier = 0, is_category = 0;
            try {
                if (request.body.promoId != 0) {
                    await promoCntrl.PromoValidation(request.dbName, request.body.promoCode, request.body.languageId, request.users.id);
                    var promo_type = await promoCntrl.PromoType(request.dbName, request.body.promoCode, request.body.languageId);
                    logger.debug("==promo_type=", promo_type.promoType);
                    var promo_data = await promoCntrl.PromoData(request.dbName, request.body.promoCode, request.body.languageId);
                    if (promo_type.promoType == 1) {

                        outerloop: for (const i of JSON.parse(promo_data[0].detailsJson)) {
                            logger.debug("======CAT=ID========", i.categoryId)
                            for (const j of productList) {
                                logger.debug("==============", j.category_id)
                                if (parseInt(i.categoryId) == parseInt(j.category_id)) {
                                    discounted_supplier_ids.push(j.supplier_id)
                                    promo_categories_validation = true
                                    break outerloop;
                                }
                            }
                        }
                        logger.debug("==AFTE==lOPP=I=", promo_categories_validation, promo_supplier_validation)
                        if (promo_categories_validation == false) {
                            logger.debug("====IF=D=", request.body.languageId)
                            if (parseInt(request.body.languageId) == 14) {
                                var msg = "Promo Code Is Not Valid For Selected Items"
                                throw msg

                            } else {
                                var msg = "رمز القسيمة غير صالح للعناصر المحددة"
                                throw msg
                            }
                        }
                        else {
                            // logger.debug("===ELSE===")
                            callback(null)
                        }
                    }
                    else {


                        outerloop: for (const i of JSON.parse(promo_data[0].detailsJson)) {
                            logger.debug("==PROMO==LOOP==")
                            for (const j of productList) {
                                logger.debug("==PRODUCT=LOOP==", i.supplierId, j.supplierId)
                                if (parseInt(i.supplierId) == parseInt(j.supplier_id)) {
                                    promo_supplier_validation = true
                                    discounted_supplier_ids.push(j.supplier_id)
                                    break outerloop;
                                }
                            }
                        }


                        logger.debug("==AFTE==lOPP=ELSE=", promo_categories_validation, promo_supplier_validation)
                        if (promo_supplier_validation == false) {
                            logger.debug("====IF==")
                            if (parseInt(request.body.languageId) == 14) {
                                var msg = "Promo Code Is Not Valid For Selected Items"
                                throw msg

                            } else {
                                var msg = "رمز القسيمة غير صالح للعناصر المحددة"
                                throw msg
                            }
                        }
                        else {
                            callback(null)
                        }

                    }

                }
                else {
                    callback(null);
                }

            }
            catch (err) {
                // console.log("=======ERR!==",err)
                return sendResponse.sendErrorMessage(err, reply, 400);
            }
        }],
        genrateOrder: ['promoCodeValidation', function (callback) {

            sIds = _.uniq(supplierIds)
            console.log("genrateOrder------------------------------Length---", supplier_product_data, sIds)
            async.each(supplier_product_data,
                async function (product, callback1) {
                    let deliveryCharges = 0, handlingAdmin = 0;
                    logger.debug("===============user_service_charge=============", user_service_charge);
                    logger.debug("====schedule_end_date========schedule_end_date==2==", schedule_end_date, schedule_date)
                    if (sIds.length > 1) {

                        if (product && product.length > 0) {
                            for (const [index_1, i] of product.entries()) {
                                handlingAdmin = handlingAdmin + parseFloat(i.tax)
                                deliveryCharges = i.delivery_charge
                                user_service_charge = i.handlingSupplier

                            }
                        }

                    }
                    console.debug("===========product=====>>>>>>>>>", product, handlingAdmin, deliveryCharges);



                    orderGengrateV2(request.service_type, deliveryChargeData, request.dbName, reply, product, user, paymentType, cartId, type, offset,
                        isAgent, booking_date_time, buffer_time,
                        duration, discounted_supplier_ids,
                        request.body.discountAmount,
                        request.body.promoCode,
                        request.body.promoId,
                        self_pickup,
                        booking_to_date,
                        booking_from_date,
                        from_address,
                        to_address,
                        api_version,
                        from_latitude,
                        to_latitude,
                        from_longitude,
                        to_longitude,
                        card_payment_id,
                        transaction_id,
                        payment_source,
                        preparation_time,
                        questions,
                        tip_agent,
                        referralAmount,
                        zelle_receipt_url,
                        user_service_charge,
                        pres_image1,
                        pres_image2,
                        pres_image3,
                        pres_image4,
                        pres_image5,
                        pres_description,
                        type_id,
                        payment_after_confirmation,
                        payment_status,
                        have_pet,
                        parking_instructions,
                        cleaner_in,
                        area_to_focus,
                        giftAmount,
                        donate_to_someone,
                        user_subscription_delivery,
                        user_subscription_id,
                        wallet_discount_amount,
                        schedule_date,
                        schedule_end_date,
                        is_schedule,
                        slot_price,
                        sIds,
                        table_id,
                        totalLoayaloyDiscountAmount,
                        loyalityPointDiscountAmount,
                        have_coin_change,
                        order_source,
                        is_dine_in,
                        agent_verification_code,
                        is_cutlery_required,
                        drop_off_date,
                        order_delivery_type,
                        vehicle_number,
                        handlingAdmin,
                        deliveryCharges,
                        delivery_company_id,
                        seating_capacity,
                        no_touch_delivery,
                        liquor_bottle_deposit_tax,
                        liquor_plt_deposit_tax,
                        function (err, result) {
                            if (err) {
                                callback1(err);
                            } else {
                                order.id = result;
                                order_data.push(order.id);
                                logger.debug("===========orderData==========", order_data, order.id)
                                callback1(null);
                            }
                        })

                }, function (err) {
                    if (err) {
                        callback(err);
                    }
                    else {
                        callback(null)
                    }
                });
        }],
        addScheduleSlots: ['genrateOrder', async (callback) => {

            let is_dine_in_with_food = request.body.is_dine_in_with_food == undefined ? 0 : request.body.is_dine_in_with_food

            let table_request_id = request.body.table_request_id == undefined ? 0 : request.body.table_request_id;

            let vendorOrderLimitCheck = await ExecuteQ.Query(request.dbName, "select * from tbl_setting where `key`=? and `value`=?", ["vendorOrderLimitSupplierWise", "1"])

            if (vendorOrderLimitCheck && vendorOrderLimitCheck.length > 0) {


                let slot_id = request.body.slot_id == undefined ? 0 : request.body.slot_id
                let day_id = moment(booking_date).day();
                let query = "insert into supplier_booked_slots(day_id,supplier_id,order_id,user_id,slot_id,booked_slots,booked_date,booking_date_time) values(?,?,?,?,?,?,?,?)"
                let params = [day_id, 1, order_data[0], request.users.id, slot_id, slots, booking_date, dateTime]

                await ExecuteQ.Query(request.dbName, query, params);
                callback(null);


            } else {
                if (parseInt(is_dine_in) == 1 && parseInt(table_request_id) > 0) {
                    // let slot_id = request.body.slot_id==undefined?0:request.body.slot_id
                    // let table_request_id = request.body.table_request_id
                    // let table_id = request.body.table_id
                    // let booked_slot_id = request.body.booked_slot_id
                    let data = await ExecuteQ.Query(request.dbName, "select * from user_table_booked where id=?", [table_request_id]);
                    if (data && data.length > 0) {

                    }
                    // let query = "update supplier_booked_slots set order_id =? where id=?";
                    // let params = [order_data[0],booked_slot_id];
                    // await ExecuteQ.Query(request.dbName,query,params);
                    let query = "update user_table_booked set order_id =? where id=?";
                    let params = [order_data[0], table_request_id];
                    await ExecuteQ.Query(request.dbName, query, params);
                    callback(null);

                }
                logger.debug("================tablebookig details=========", is_dine_in, is_dine_in_with_food)
                if (parseInt(is_dine_in_with_food) == 1 && parseInt(is_dine_in) == 1) {

                    let slot_id = request.body.slot_id == undefined ? 0 : request.body.slot_id
                    let day_id = moment(booking_date).day();
                    let query = "insert into supplier_booked_slots(day_id,supplier_id,order_id,user_id,slot_id,booked_slots,booked_date,booking_date_time) values(?,?,?,?,?,?,?,?)"
                    let params = [
                        day_id,
                        1,
                        order_data[0],
                        request.users.id,
                        slot_id,
                        slots,
                        booking_date,
                        dateTime
                    ]
                    await ExecuteQ.Query(request.dbName, query, params);


                    //    let orderBranchSupplierDetails = await ExecuteQ.Query(request.dbName,
                    //     " select o.created_on,o.schedule_date,o.schedule_end_date,o.supplier_branch_id as branch_id,sb.supplier_id from orders o join supplier_branch sb on o.supplier_branch_id=sb.id where o.id=? ",
                    //     order_data[0]);
                    //     let is_dine_in_only = request.body.is_dine_in_only==undefined?0:1
                    // if(parseInt(is_dine_in_only)==1){
                    //     schedule_date = orderBranchSupplierDetails[0].created_on;
                    //     schedule_end_date = orderBranchSupplierDetails[0].schedule_end_date;
                    // }else{
                    //     let query2 = "insert into user_table_booked(branch_id,user_id,table_id,slot_Id,schedule_date,schedule_end_date,supplier_id,order_id) "
                    //     query2+= " values(?,?,?,?,?,?,?,?)"; 

                    //     let params2 = [
                    //         orderBranchSupplierDetails[0].branch_id,
                    //         request.users.id,
                    //         table_id,
                    //         slot_id,
                    //         schedule_date,
                    //         schedule_end_date,
                    //         orderBranchSupplierDetails[0].supplier_id,
                    //         order_data[0]
                    //         ]
                    //     await ExecuteQ.Query(request.dbName,query2,params2);
                    // }
                    callback(null);
                }

                if (parseInt(is_schedule) == 1) {
                    let slot_id = request.body.slot_id == undefined ? 0 : request.body.slot_id
                    let day_id = moment(booking_date).day();
                    let query = "insert into supplier_booked_slots(day_id,supplier_id,order_id,user_id,slot_id,booked_slots,booked_date,booking_date_time) values(?,?,?,?,?,?,?,?)"
                    let params = [
                        day_id,
                        1,
                        order_data[0],
                        request.users.id,
                        slot_id,
                        slots,
                        booking_date,
                        dateTime
                    ]
                    await ExecuteQ.Query(request.dbName, query, params);
                    callback(null);
                } else {
                    callback(null);
                }
            }

        }],
        addOrderProduct: ['addScheduleSlots', function (callback) {
            // console.log("prom////",order_data);
            var index, order_id;
            async.each(supplier_product_data, function (p_data, callback2) {
                index = supplier_product_data.indexOf(p_data);
                order_id = order_data[parseInt(index)]
                // console.log("====p_data==",order_id,index);
                if (promoationType == 1) {
                    addPromotionProduct(request.dbName, reply, cartId, p_data, parseInt(order_id), user, languageId, function (err, result) {
                        if (err) {
                            logger.debug("========err1===============")
                            callback2(err);
                        } else {
                            logger.debug("==================else of add order product ========--=========")

                            callback2(null);
                        }
                    })
                }

                else {



                    addOrderProduct(request.dbName, reply, cartId, p_data,
                        parseInt(order_id), user, type, duration, user_type_id, function (err, result) {
                            if (err) {
                                logger.debug("========err2===============")
                                callback2(err);
                            } else {
                                logger.debug("==================else of add order product =========**=========")

                                callback2(null);
                            }
                        })
                }
            }, function (err) {
                if (err) {
                    logger.debug("========err3 end===============")
                    callback(err);
                }
                else {
                    logger.debug("==================else of add order product =========end=========")
                    callback(null)
                }
            });
        }],
        getSupplierCommission: ['addOrderProduct', async function (callback) {
            let orderIds = order_data.toString();
            let sql = "select sp.commission/100 as supplier_commission,sp.pickup_commission/100 as pickup_commission, o.id as order_id, cp.supplier_id ," +
                " sp.vat_value,o.net_amount as total_price from orders o join " +
                " order_prices op on o.id = op.order_id join cart_products cp on cp.product_id = op.product_id join supplier" +
                " sp on sp.id = supplier_id where o.id in (" + orderIds + ") group by supplier_id"
            try {
                let data = await ExecuteQ.Query(request.dbName, sql, []);
                supplier_commission = data;
                callback(null)
            }
            catch (Err) {
                callback(Err)
            }

        }],
        addSupplierHandlingCharges: ['getSupplierCommission', async function (callback) {//is_commission_dynamic

            let handling_supplier_charges = 0;
            let commission_settings = await Universal.isCommissionDynamicEnabled(request.dbName);
            console.log("COMMISSION HANDLING #############################################", commission_settings)
            let commissionOnCategoryCheck = await Execute.Query(request.dbName,
                "select `key`,value from tbl_setting where `key`=? and value=? ", ["enable_supplier_commission_on_category", "1"]);
            if (commissionOnCategoryCheck && commissionOnCategoryCheck.length > 0) {
                let supplierCommision = 0;
                let catComquery = `select c.id as catId,c.name as catName,p.name as prodName,c.commission 
                   from orders o join order_prices op on op.order_id = o.id
                   join product p on p.id = op.product_id join categories c on c.id = p.category_id
                   where o.id=? GROUP by catId`;

                let catComData = await Execute.Query(request.dbName, catComquery, [supplier_commission[0].order_id]);

                for (const [index, i] of catComData.entries()) {
                    supplierCommision += i.commission
                }

                for (let i = 0; i < supplier_commission.length; i++) {
                    let sc_total_price = supplier_commission[i].total_price;
                    console.log("3333333333333333333", sc_total_price)
                }

                let supplier_vat_value = (subTotal * parseFloat(supplier_commission[0].vat_value)) / 100;

                let orderComUpdateQuery = "update orders set supplier_commision=?,supplier_vat_value=? where id = ?";

                await Execute.Query(request.dbName, orderComUpdateQuery, [supplierCommision, supplier_vat_value,
                    supplier_commission[0].order_id])

                callback(null)



            } else {
                if (supplier_commission && supplier_commission.length) {

                    let supplier_vat_value = 0;

                    console.log("111111111111111111111111")
                    let sql = "update orders set supplier_commision=?,supplier_vat_value=? where id = ?"
                    console.log("111111111111111111111111")

                    for (let i = 0; i < supplier_commission.length; i++) {
                        console.log("2222222222222222222222222")
                        var sc_total_price = supplier_commission[i].total_price;
                        console.log("3333333333333333333", sc_total_price)
                        if (Object.keys(commission_settings).length > 0) {
                            console.log("44444444444444444444444444", commission_settings)
                            if (commission_settings.is_commission_dynamic == "1") {
                                let sc_total_price_data = await ExecuteQ.Query(request.dbName, "SELECT SUM(price * quantity)+" + totalAddOnAmount + " sub_total FROM `order_prices` WHERE order_id=? GROUP BY order_id", [supplier_commission[i].order_id])
                                console.log("555555555555555555555555555555")
                                if (sc_total_price_data[0] && sc_total_price_data[0].sub_total != "") {
                                    sc_total_price = sc_total_price_data[0].sub_total;
                                    console.log("666666666666666666666666", sc_total_price, supplier_vat_value)
                                }
                            }
                        }
                        console.log("77777777777777777777777777", sc_total_price)
                        if (parseInt(self_pickup) == 1) {
                            console.log("88888888888888888888888888", supplier_commission[i].pickup_commission, "*", sc_total_price)
                            handling_supplier_charges = supplier_commission[i].pickup_commission * sc_total_price;
                        } else {
                            console.log("9999999999999999999999999999999999", supplier_commission[i].supplier_commission, "*", sc_total_price)
                            handling_supplier_charges = supplier_commission[i].supplier_commission * sc_total_price;
                        }
                        supplier_vat_value = (parseFloat(handling_supplier_charges) * parseFloat(supplier_commission[0].vat_value)) / 100;

                        let stmt = multiConnection[request.dbName].query(sql, [handling_supplier_charges, supplier_vat_value, supplier_commission[i].order_id], function (err, data) {
                            logger.debug("==========stmt in add SupplierHandling charges=============", stmt.sql)
                            if (err) {
                                logger.debug("==========err in addSupplierHandlingCharges==========");
                                callback(err)
                            } else {
                                logger.debug("========== in addSupplierHandlingCharges====function======");
                                callback(null)
                            }
                        })
                    }

                } else {
                    callback(null);
                }
            }

        }],
        updatePurchasedQuantity: ['addSupplierHandlingCharges', async function (callback) {
            try {
                logger.debug("============in the update purchased quantity===============")
                var updateCartSql = "update product p inner join order_prices orp on orp.product_id=p.id " +
                    " inner join cart_products crp on crp.product_id=orp.product_id set p.purchased_quantity= p.purchased_quantity" +
                    " + orp.quantity where orp.order_id IN (?)";
                await ExecuteQ.Query(request.dbName, updateCartSql, [order_data])
                callback(null)
            }
            catch (Err) {
                callback(Err)
            }

        }],
        updateNetAmoountQuantity: ['updatePurchasedQuantity', async function (callback) {
            try {
                let updateAMountSql;
                console.log("===delivery_admin_supplier_charge==adds_on_delivery_admin_charges>", delivery_admin_supplier_charge, adds_on_delivery_admin_charges)

                if (sIds.length > 1) {
                    adds_on_delivery_admin_charges = adds_on_delivery_admin_charges - delivery_admin_supplier_charge

                    updateAMountSql = "update orders as ord " +
                        "set ord.net_amount=((select SUM(orss.price*orss.quantity) from order_prices orss where orss.order_id=ord.id )+(select IFNULL(cart.addOn,0) from cart where cart.id=ord.cart_id)+ord.handling_admin+ord.delivery_charges+ord.user_service_charge+ord.liquor_plt_deposit_tax+ord.liquor_bottle_deposit_tax)-ord.loyality_point_discount " +
                        "where ord.id IN(?)";
                }
                else {
                    updateAMountSql = "update orders as ord " +
                        "set ord.net_amount=((select SUM(orss.price*orss.quantity) from order_prices orss where orss.order_id=ord.id )+(select IFNULL(cart.addOn,0) from cart where cart.id=ord.cart_id)+ord.liquor_plt_deposit_tax+ord.liquor_bottle_deposit_tax+" + adds_on_delivery_admin_charges + ")-ord.loyality_point_discount " +
                        "where ord.id IN(?)";
                }

                await ExecuteQ.Query(request.dbName, updateAMountSql, [order_data]);




                callback(null);
            }
            catch (Err) {
                callback(Err)
            }
        }],
        applyPromocode: ['updateNetAmoountQuantity', async function (callback) {
            try {

                // ======used for storing an earned loyality point of particular user if applicable===
                let isLoyalityPointEnable = await ExecuteQ.Query(request.dbName,
                    "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
                    ["is_loyality_enable", "1"]);


                if (isLoyalityPointEnable && isLoyalityPointEnable.length > 0) {

                    let orderDataQuery = `select net_amount from orders where id=${order_data}`;

                    let netAmountDetails = await ExecuteQ.Query(request.dbName, orderDataQuery, []);

                    console.log("============netAmountDetails=======", netAmountDetails);

                    if (netAmountDetails && netAmountDetails.length > 0) {
                        let netAmount = parseInt(netAmountDetails[0].net_amount);
                        if (netAmount <= 0) {
                            let query = `update orders set net_amount = 0 where id=${order_data}`
                            await ExecuteQ.Query(request.dbName, query, [])
                        }
                    }

                    let netOrderAmount = 0;
                    let orderAmountData = await ExecuteQ.Query(request.dbName, `select SUM(ord.net_amount) as netAmount from orders ord where ord.id IN (?)`, [order_data]);
                    netOrderAmount = orderAmountData && orderAmountData.length > 0 ? orderAmountData[0].netAmount : 0
                    console.log("=netOrderAmount===", netOrderAmount);
                    let userLoyalityPoint = 0, earnedAmount = 0;

                    let userLoayalityData = await ExecuteQ.Query(request.dbName, `select id,loyalty_points from user where id=?`, [request.users.id]);

                    userLoyalityPoint = userLoayalityData && userLoayalityData.length > 0 ? userLoayalityData[0].loyalty_points : 0
                    // let loyalityLevelData=await ExecuteQ.Query(request.dbName,`select name,id,image,total_loyality_points,is_for_all_category,per_point_order_amount,per_point_amount,per_point_amount_type from loyality_level where is_deleted=? order by total_loyality_points desc`,[0]);

                    let loyalityLevelData = await Universal.getUserLoyalityLevelData(request.dbName, [request.users.id]);

                    if (loyalityLevelData && loyalityLevelData.length > 0) {
                        for await (const [index, i] of loyalityLevelData.entries()) {
                            //first check which loyality level user exist
                            // if(parseInt(userLoyalityPoint)>=parseInt(i.total_loyality_points)){
                            // check is user applicabale for getting an loyality point 
                            if (parseFloat(i.per_point_order_amount) <= parseFloat(netOrderAmount)) {
                                if (parseInt(i.per_point_amount_type) == 1) {
                                    earnedAmount = parseFloat(netOrderAmount) * i.per_point_amount / 100
                                }
                                else {
                                    earnedAmount = i.per_point_amount
                                }
                            }
                            // }
                            if (index == loyalityLevelData.length - 1) {
                                if (parseInt(earnedAmount) == 0) {
                                    if (parseFloat(i.per_point_order_amount) <= parseFloat(netOrderAmount)) {
                                        if (parseInt(i.per_point_amount_type) == 1) {
                                            earnedAmount = parseFloat(netOrderAmount) * i.per_point_amount / 100
                                        }
                                        else {
                                            earnedAmount = i.per_point_amount
                                        }
                                    }
                                }
                            }

                        }
                    }
                    logger.debug("==LOYALITY==EARNED--AMOUNT==>>", earnedAmount);


                    let enable_min_loyality_points = await ExecuteQ.Query(request.dbName,
                        "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
                        ["enable_min_loyality_points", "1"]);


                    if (earnedAmount >= 0) {

                        if (enable_min_loyality_points && enable_min_loyality_points.length > 0) {
                            let minOrderAmountForLoyalityPoints = await ExecuteQ.Query(request.dbName,
                                "select `key`,`value` from tbl_setting where `key`=? ",
                                ["min_order_amount_for_loyality_points"]);

                            let loyalityPointsOnOrder = await ExecuteQ.Query(request.dbName,
                                "select `key`,`value` from tbl_setting where `key`=? ",
                                ["loyality_point_per_order"]);

                            if (minOrderAmountForLoyalityPoints
                                && minOrderAmountForLoyalityPoints.length > 0) {
                                minOrderAmountForLoyalityPoints =
                                    parseFloat(minOrderAmountForLoyalityPoints[0].value) || 1000
                            }

                            if (loyalityPointsOnOrder
                                && loyalityPointsOnOrder.length > 0) {
                                loyalityPointsOnOrder =
                                    parseFloat(loyalityPointsOnOrder[0].value) || 5

                            }

                            if (parseFloat(orderNetAmount) >=
                                parseFloat(minOrderAmountForLoyalityPoints)) {

                                let totalPoints = parseFloat(orderNetAmount) / parseInt(minOrderAmountForLoyalityPoints);
                                loyalityPointsOnOrder = parseInt(loyalityPointsOnOrder) * parseInt(totalPoints);

                                earnedAmount = earnedAmount * parseFloat(loyalityPointsOnOrder);

                                await ExecuteQ.Query(request.dbName,
                                    `insert into loyality_point_earning(user_id,order_id,earned_amount,earned_points) values(?,?,?,?)`,
                                    [request.users.id, order_data[0], earnedAmount + totalLoayaloyDiscountAmountByCat, loyalityPointsOnOrder])

                            }
                        } else {

                            await ExecuteQ.Query(request.dbName,
                                `insert into loyality_point_earning(user_id,order_id,earned_amount) values(?,?,?)`,
                                [request.users.id, order_data[0], earnedAmount])

                        }
                    }
                }

                //==========================

                let autoConfirmation = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_auto_confirmation", "1"])
                logger.debug("=====AutoConfrmtn===>>>", autoConfirmation);
                if (autoConfirmation && autoConfirmation.length > 0) {
                    var currentCDate = moment().utcOffset(offset);
                    var confirmedAt = currentCDate._d;
                    await ExecuteQ.Query(request.dbName, `update orders set status=?,confirmed_on=? where id IN(?)`, [1, confirmedAt, [order_data]])
                }
                callback(null)
            }
            catch (Err) {
                logger.debug("=Auto===Err!==", Err);
                callback(null)
            }
        }],
        orderInformation: ['applyPromocode', async function (callback) {

            var select_query = "select ors.agent_verification_code,ors.wallet_discount_amount,ors.supplier_branch_id, usr.email as customer_email,IFNULL(CONCAT(usr.firstname,usr.lastname),'') AS customer_name,IFNULL(ors.pres_description,'') AS pres_description,ors.have_coin_change,ors.buffer_time, " +
                " ors.no_touch_delivery,ors.drop_off_date_utc,ors.drop_off_date,sp.id as supplier_id,sp.latitude as supplier_latitude,sp.longitude as supplier_longitude,ors.user_service_charge,sp.name as supplier_name,ors.created_on,ors.schedule_date as delivery_date,ors.schedule_date as delivered_on,usr.mobile_no as customer_phone_number,usr.user_image as customer_image ,CAST(usr.id as CHAR(50)) as customer_id," +
                " spb.name as supplier_branch_name,spb.address as supplier_branch_address,spb.latitude as supplier_branch_latitude,spb.longitude as supplier_branch_longitude,ors.promo_discount,ors.promo_code,ors.payment_type,IFNULL(ors.comment, '') as comment,ors.remarks,ors.urgent_price," +
                " ors.urgent,ors.tip_agent,ors.net_amount,ors.delivery_charges,ors.handling_supplier," +
                " ors.handling_admin,CAST(ors.id AS CHAR) as order_id " +
                " from orders ors join order_prices op on op.order_id=ors.id join supplier inner join" +
                " supplier_branch spb on spb.id=op.supplier_branch_id inner join supplier sp " +
                " on sp.id=spb.supplier_id inner join user usr on usr.id=ors.user_id where ors.id IN (?) group by ors.id"
            let data = await ExecuteQ.Query(request.dbName, select_query, [order_data]);
            if (data && data.length > 0) {
                agentOrderDetail = data;

            }
            else {
                agentOrderDetail = []
            }
            callback(null)

        }],
        deliveryAddress: ["orderInformation", async function (callback) {
            var select_query = "select ors.id as order_id,usr.latitude,usr.longitude,usr.address_line_1,usr.address_line_2,usr.pincode,usr.city,usr.landmark, " +
                " usr.reference_address,IFNULL(usr.name,'') as name,usr.phone_number,usr.directions_for_delivery,usr.address_link,usr.customer_address from orders ors left join user_address usr on usr.id=ors.user_delivery_address where ors.id IN(?)"
            let deliveryData = await ExecuteQ.Query(request.dbName, select_query, [order_data]);
            logger.debug("=================in deliveryAddress-==============", agentOrderDetail, deliveryData)
            if (agentOrderDetail && agentOrderDetail.length > 0) {
                let branchData = await ExecuteQ.Query(request.dbName, `SELECT COUNT(DISTINCT(supplier_branch_id)) as branchCount 
           FROM order_prices where order_id IN(?)`,
                    [order_data]);
                for (var j = 0; j < agentOrderDetail.length; j++) {
                    agentOrderDetail[j].adds_on = adds_on_arr
                    agentOrderDetail[j].duration = duration;
                    agentOrderDetail[j].have_multiple_branch = branchData && branchData.length > 0 ? branchData[0].branchCount : 0
                    if (deliveryData && deliveryData.length > 0) {
                        for (var i = 0; i < deliveryData.length; i++) {
                            if (parseInt(deliveryData[i].order_id) == parseInt(agentOrderDetail[j].order_id)) {
                                deliveryData[i].type = 0;
                                agentOrderDetail[j].address = deliveryData[i]
                            }
                        }
                    }
                    else {
                        agentOrderDetail[j].address = {}
                    }
                    if (j == (agentOrderDetail.length - 1)) {
                        callback(null)
                    }
                }
            }
            else {
                callback(null)
            }
        }],
        orderItemData: ['deliveryAddress', async function (callback) {
            // supplier_branch_name: Joi.string().optional().allow(""),
            // supplier_branch_address: Joi.string().optional().allow(""),
            // latitude: Joi.number().optional().allow(""),
            // longitude: Joi.number().optional().allow(""),
            let select_query = "select spb.name as supplier_branch_name,spb.address as supplier_branch_address,spb.latitude,spb.longitude,op.handling_admin,op.id as order_price_id,op.order_id,op.quantity,op.price,op.product_id as item_id,op.product_name as item_name, " +
                " op.product_reference_id,op.product_dimensions,op.product_upload_reciept,op.product_owner_name,op.product_desc as item_desc,op.product_name as item_name,op.image_path from order_prices op left join supplier_branch spb on spb.id=op.supplier_branch_id where op.order_id IN(?)"
            let orderItemData = await ExecuteQ.Query(request.dbName, select_query, [order_data])
            // let st=multiConnection[request.dbName].query(select_query,[order_data],function(err,orderItemData){
            //     if(err){
            //         logger.debug("========err7===============")
            //         callback(err)
            //     }
            //     else{
            logger.debug("=================in orderItemData-==============", agentOrderDetail)

            var items = []
            // agentOrderItemDetail=orderItemData
            if (agentOrderDetail && agentOrderDetail.length > 0) {
                for (var j = 0; j < agentOrderDetail.length; j++) {
                    if (booking_date_time != "") {
                        agentOrderDetail[j].delivery_date = booking_date_time;
                    }
                    if (orderItemData && orderItemData.length > 0) {
                        for (var i = 0; i < orderItemData.length; i++) {
                            if (parseInt(orderItemData[i].order_id) == parseInt(agentOrderDetail[j].order_id)) {
                                items.push(orderItemData[i])
                                agentOrderDetail[j].items = items
                            }
                            if (i == (orderItemData.length - 1)) {
                                items = []
                            }
                        }
                    }
                    else {
                        agentOrderDetail[j].items = []
                    }
                    if (j == (agentOrderDetail.length - 1)) {
                        callback(null)
                    }
                }
            }
            else {
                callback(null)
            }

            //     }
            // })


        }],

        addOrderToAgent: ['orderItemData', async function (callback) {

            var final_data, agent_booking_array = [], api_key, secret_key;
            logger.debug("=======agentOrderDetail==>>===", agentArray);
            let supplierId = _.uniq(supplierIds);
            //is_enable_delivery_type
            let delivery_type_check = await Universal.getDeliveryTypeKey(request.dbName);

            if (Object.keys(delivery_type_check).length > 0) {
                let supplierDetails = await ExecuteQ.Query(request.dbName,
                    "select id,is_own_delivery from supplier where id=?", [supplierId[0]]);
                if (supplierDetails && supplierDetails.length > 0) {
                    logger.debug("===========supplierDetails========", supplierDetails);
                    if (parseInt(supplierDetails[0].is_own_delivery) == 1) {
                        logger.debug("===========parseInt(supplierDetails[0].is_own_delivery)==1========", supplierDetails);
                        return callback(null)
                    }
                }
            }

            if (agentArray && agentArray.length > 0) {
                agentOrderDetail[0].user_id = agentArray[0].id
                _.each(agentArray, function (i) {
                    agentOrderDetail[0].user_id = i.id
                    agent_booking_array.push(i.id, order_data[0])
                })
                final_data = _.chunk(agent_booking_array, 2);

                var insert_query = "insert into  agent_orders(`agent_id`,`order_id`) values ?"
                let data = await ExecuteQ.Query(request.dbName, insert_query, [final_data]);
                // multiConnection[request.dbName].query(insert_query,[final_data],async function(err,data){
                //     if(err){
                //         logger.debug("========err8===============")
                //         callback(err)
                //     }
                //     else{
                try {
                    var GetAgentDbData = await getAgentDbInformation(request.dbName);
                    var agentConnection = await RunTimeAgentConnection(GetAgentDbData);
                    // logger.debug("---agentConnection-",agentConnection)
                    var api_key = await agent.KeyData(agentConnection, config.get("agent.api_key"));
                    var secret_key = await agent.KeyData(agentConnection, config.get("agent.db_secret_key"));
                    var assignOrder = await agent.AssignOrderToAgent(agentOrderDetail[0], api_key, secret_key)
                    // logger.debug("---api_key,secret_key=VALUE--",agentConnection,api_key,secret_key);
                    callback(null)
                }
                catch (err) {
                    logger.debug("========err9===============", err)
                    callback(err)
                }
                //     }
                // })
            }
            else {

                var servicetype = await agent.screenInfo(request.dbName);

                logger.debug("======servicetype===", servicetype, self_pickup)


                let disableAgentOrderLocationAssign = await Universal.disableAgentOrderLocationAssignment(request.dbName);
                /***********************this check is used to disable order assignment notification at agent side******************** */
                logger.debug("==========disableAgentOrderLocationAssign========",
                    disableAgentOrderLocationAssign);
                if (disableAgentOrderLocationAssign) {
                    callback(null)
                }

                else if ((servicetype.app_type == 1 || servicetype.app_type == 2) && parseInt(self_pickup) == 0) {
                    var GetAgentDbData = await getAgentDbInformation(request.dbName);
                    var agentConnection = await RunTimeAgentConnection(GetAgentDbData);
                    var api_key = await agent.KeyData(agentConnection, config.get("agent.api_key"));
                    var secret_key = await agent.KeyData(agentConnection, config.get("agent.db_secret_key"));
                    for (const [index, i] of agentOrderDetail.entries()) {
                        var assignOrder = await agent.AssignOrderToAgentByLocation(i, api_key, secret_key)
                        if (index == (agentOrderDetail.length - 1)) {
                            callback(null)
                        }
                    }
                }
                else if ((parseInt(type_id) == 1 || parseInt(type_id) == 2) && parseInt(self_pickup) == 0) {
                    var GetAgentDbData = await getAgentDbInformation(request.dbName);
                    var agentConnection = await RunTimeAgentConnection(GetAgentDbData);
                    var api_key = await agent.KeyData(agentConnection, config.get("agent.api_key"));
                    var secret_key = await agent.KeyData(agentConnection, config.get("agent.db_secret_key"));
                    for (const [index, i] of agentOrderDetail.entries()) {
                        var assignOrder = await agent.AssignOrderToAgentByLocation(i, api_key, secret_key)
                        if (index == (agentOrderDetail.length - 1)) {
                            callback(null)
                        }
                    }
                }
                else {
                    callback(null)
                }



            }
        }],
        notificationData: ['addOrderToAgent', async function (callback) {




            var getAgentDbData = await common.GetAgentDbInformation(request.dbName);
            var agentConnection = await common.RunTimeAgentConnection(getAgentDbData);
            var sqlQuery = "update cbl_user_orders set tip_agent=? where order_id=?";
            var agent_order_details = await ExecuteQ.QueryAgent(agentConnection, sqlQuery, [tip_agent, order_data[0]]);
            console.log("agent_order_details ======= ", agent_order_details)


            getvalues(request.dbName, reply, order.id, function (err, values) {
                if (err) {
                    logger.debug("========err10===============")
                    sendResponse.somethingWentWrongError(reply);
                }
                else {
                    customer_email = values.user_email
                    deviceToken = values.device_token;
                    deviceType = values.device_type;
                    userId = values.user_id;
                    userName = values.user_name;
                    deliveryDate = values.delivery_date;
                    request.category_id = values.category_id;
                    supplierEmail = values.email;
                    supplierPhone = values.phone;
                    branchToken = values.branch_token;
                    branchDeviceType = values.branch_device_type;
                    supplierId = values.supplier_id;
                    net_amount = values.net_amount;
                    supplierName = values.supplierName;
                    mobileNumber = values.mobileNumber;
                    countryCode = values.country_code
                    area = values.area;
                    landmark = values.customer_full_address;
                    address_link = values.address_link;
                    created_on = moment(values.created_on).format('YYYY-MM-DD HH:mm');
                    schedule_date = moment(values.schedule_date).format('YYYY-MM-DD HH:mm');
                    houseNumber = values.pincode != null && values.pincode != undefined && values.pincode != "" ? (values.pincode).split(',') : "";
                    if (houseNumber[1]) {
                        building = houseNumber[1];
                        building = building.substring(2);
                    }
                    else {
                        building = '';
                    }

                    deliveryCharges = values.delivery_charges;
                    handling = parseFloat(values.handling_admin) + parseFloat(values.handling_supplier);
                    urgent_price = values.urgent_price;
                    quantity = values.quantity;
                    if (values.payment_type == 0) {
                        payment_type = 'CASH'
                    } else {
                        payment_type = 'CARD'
                    }
                    callback(null);
                }
            });

        }],
        sendPushNotificationToAdmin: ['notificationData', async function (cb) {
            var fcmToken = [];
            var cur_date = moment().utcOffset(offset);
            var created_on = new Date();
            var suplrIds = _.uniq(supplierIds)
            logger.debug("===Supplier==Deevice==..", supplierIds, suplrIds);
            let orderApprovalByAdmin = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['order_approval_by_admin'])
            if (orderApprovalByAdmin && orderApprovalByAdmin.length > 0)
                suplrIds = [];

            let adminData = await ExecuteQ.Query(request.dbName,
                "select `fcm_token`,`email`,`id` from admin where is_active=1", [])
            let supplierDatas = [];

            if (suplrIds.length)
                supplierDatas = await ExecuteQ.Query(request.dbName,
                    "select `device_token`,`device_type`,`id` from supplier where id in (?)", suplrIds)

            logger.debug("==adminData==supplierDatas=", adminData, supplierDatas);




            adminData.forEach(element => {
                fcmToken.push(element.fcm_token)
            });

            if (supplierDatas.length)
                _.each(supplierDatas, function (i) {
                    fcmToken.push(i.device_token)
                })

            var data = {
                "status": 0,
                "message": await Universal.getMsgText(14, request, 0),
                "orderId": order_data[0],
                "self_pickup": self_pickup,
                "sound": "default"
            }



            await saveadminsNotifications(request.dbName, adminData, supplierId, order_data[0],
                data.message, 1, userId);

            let sendNotificationToSupplier = true;
            if (orderApprovalByAdmin && orderApprovalByAdmin.length > 0)
                sendNotificationToSupplier = false;

            if (sendNotificationToSupplier)
                await savesuppliersNotifications(request.dbName, [supplierId], supplierId,
                    order_data[0], data.message, 1, userId);

            await lib.sendFcmPushNotification(fcmToken, data, request.dbName);
            logger.debug("=====NOTCATION==Cb=>>", data, request.dbName)
            cb(null)




        }],
        orderDetailD: ['sendPushNotificationToAdmin', async function (callback) {
            try {
                console.log('orderDetails-----------------', request.dbName);
                let productData = []
                var sql = "select p.id,c.type, c.menu_type,c.terminology,sp.recipe_pdf,p.is_product,os.cart_id,os.is_agent,c.id as category_id,s.name as supplier_name,spb.name as branch_name,spb.latitude,spb.longitude,s.address,s.id as supplier_id,s.phone,s.supplier_image,s.email,pp.can_urgent,pp.urgent_type,pp.urgent_value ,c.order,c.category_flow,op.supplier_branch_id,op.handling_admin,op.handling_supplier,op.id as order_price_id,op.quantity,pml.name,pml.measuring_unit,op.product_id,op.price,op.price as fixed_price,op.product_name,op.image_path,op.product_desc from order_prices op join " +
                    " product_ml pml on op.product_id = pml.product_id join orders os on os.id = op.order_id join product_pricing pp on op.product_id=pp.product_id and op.product_id=pp.product_id join product p on p.id = op.product_id left join supplier_branch spb on spb.id=op.supplier_branch_id join supplier s on s.id=spb.supplier_id left join supplier_branch_product sp on sp.product_id =op.product_id join categories c on c.id =sp.category_id  where op.order_id IN (?) group by product_id";
                logger.debug("+===========order id in final==========");

                let result = await ExecuteQ.Query(request.dbName, sql, [order_data]);

                for await (const [index, i] of result.entries()) {
                    let addonprice = 0;
                    i.adds_on = await getOrderAddsOn(request.dbName, i.cart_id, i.product_id);
                    logger.debug("========result.addon====", i.addon)
                    if (i.adds_on && i.adds_on.length > 0) {
                        addonprice = await addonTotalPrice(i.adds_on, i.quantity)
                    }
                    productData.push({
                        id: i.id,
                        quantity: i.quantity,
                        name: i.name,
                        image_path: i.image_path,
                        price: i.price,
                        addonprice: addonprice
                    })
                }
                orderDetails = productData;
                logger.debug("=orderDetails========>>>", orderDetails)
                callback(null);
            }
            catch (Err) {
                sendResponse.somethingWentWrongError(reply);
            }

        }],
        sendNumber: ['orderDetailD', async function (cb) {
            let twilioata = await Universal.getTwilioData(request.dbName);
            let androidLinkData = _.filter(appLinkData, function (item) {
                return item.key == "android_app_url"
            });
            let iosLinkData = _.filter(appLinkData, function (item) {
                return item.key == "ios_app_url"
            });
            let iosLink = iosLinkData && iosLinkData.length > 0 ? iosLinkData[0].value : "";
            let andLink = androidLinkData && androidLinkData.length > 0 ? androidLinkData[0].value : "";
            logger.debug("=========TWilio==DATA!=========>>", twilioata);
            if (Object.keys(twilioata).length > 0) {
                var client = require('twilio')(twilioata[config.get("twilio.s_id")], twilioata[config.get("twilio.auth_key")]);
                var smsOptions = {
                    from: twilioata[config.get("twilio.number_key")],
                    to: countryCode + mobileNumber.toString().replace(/\s/g, ''),
                    body: 'Your order has been registered with TUBER. Download the TUBER app to access the details \n Android:' + andLink + ' \n IOS:' + iosLink + ''
                };
                client.messages.create(smsOptions, function (err, message) {
                    console.log("===appLinkData=iosLink=smsOptions==phone======Twilio==ER!==", iosLink, smsOptions, countryCode + mobileNumber.toString().replace(/\s/g, ''), err, message)
                });
            }
            cb(null);
            // var smsOptions = {
            //     from: "+18447077820",
            //     To: supplierPhone!=undefined && supplierPhone!="" && supplierPhone!=null ?supplierPhone.toString():"",
            //     Body: "NEW ORDER"
            // };
            // client.messages.create(smsOptions, function (err, message) {
            //     // console.log("err,vngfsdbgjkdfshb",err)
            //     cb(null);
            // });

        }],
        sendBranchPushNotification: ['sendNumber', function (cb) {
            console.log("device1..*************branch push notificatio,,,,,,,,", branchToken, branchDeviceType);
            console.log("..........................branch..........");
            cb(null);
        }],
        orderNumber: ['sendBranchPushNotification', function (cb) {


            var sql = 'select id from orders where user_id=?';
            multiConnection[request.dbName].query(sql, [id], function (err, result) {
                if (err) {
                    logger.debug("========err12===============")
                    console.log("err.....", err);
                    cb(err);
                }
                else {
                    count = result.length;
                    if (result.length == 1) {
                        flag = 1;
                    }
                    cb(null);
                }
            })
        }],
        sendAdminMail: ['orderNumber', function (cb) {


            let descriptionForTuber = supplier_product_data[0][0].special_instructions != undefined && supplier_product_data[0][0].special_instructions !== "" && supplier_product_data[0][0].special_instructions != null && supplier_product_data[0][0].special_instructions != 0 ? supplier_product_data[0][0].special_instructions : ""
            console.log(descriptionForTuber, "descriptionForTuberdescriptionForTuberdescriptionForTuber")
            if (flag == 1) {
                //   emailTemp.UserFirstOrder(request,reply,customer_email,order.id,userName,mobileNumber,area,landmark,building,houseNumber[0],function(err,result){
                //       if(err){
                //           console.log("..****fb register email*****....",err);
                //       }
                //   })
                emailTemp.supplierNewOrder(request, reply, orderDetails, AdminMail, supplierEmail,
                    order.id, supplierName, userName, mobileNumber, area, landmark, houseNumber[0],
                    address_link, building, net_amount, created_on, schedule_date, payment_type,
                    deliveryCharges, handling, urgent_price, quantity, adds_on_arr, function (err, result) {
                        if (err) {
                            console.log("..****fb register email*****....", err);
                        }
                    })
            }
            else {
                emailTemp.supplierNewOrder(request, reply, orderDetails, AdminMail, supplierEmail,
                    order.id, supplierName, userName, mobileNumber, area, landmark, houseNumber[0],
                    address_link, building, net_amount, created_on, schedule_date, payment_type,
                    deliveryCharges, handling, urgent_price, quantity, adds_on_arr, function (err, result) {
                        if (err) {
                            console.log("..****fb register email*****....", err);
                        }
                    })
            }
            logger.debug("======LAST=CB(())=>>")
            cb(null)
        }],

    }, function (err, result) {
        logger.debug(".......err.fina,.....................", err);
        if (err) {
            logger.debug("========err16===============")
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(order_data, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}



async function saveadminsNotifications(dbName, data, supplierId, orderId, message, status, user_id) {
    return new Promise(async (resolve, reject) => {
        try {
            for (const [index, i] of data.entries()) {
                var sql = "insert into push_notifications(user_id,supplier_id,order_id,notification_message,notification_status,is_admin) values(?,?,?,?,?,?) ";
                let params = [i.id, supplierId, orderId, message, status, 1]

                await ExecuteQ.Query(dbName, sql, params);
                if (index == data.length - 1) {
                    resolve()
                }
            }
        } catch (e) {
            logger.debug("=====ERR!==PUSH=NT=SVE=>>", e);
            resolve(e)
        }
    })
}

async function savesuppliersNotifications(dbName, data, supplierId, orderId, message, status, user_id) {
    return new Promise(async (resolve, reject) => {
        try {
            for (const [index, i] of data.entries()) {
                var sql = "insert into push_notifications(user_id,supplier_id,order_id,notification_message,notification_status,is_supplier) values(?,?,?,?,?,?) ";
                let params = [i, supplierId, orderId, message, status, 1]

                await ExecuteQ.Query(dbName, sql, params);
                if (index == data.length - 1) {
                    resolve()
                }
            }
        } catch (e) {
            logger.debug(e);
            reject(e)
        }
    })
}

async function checkDeliveryArea(dbName, cartId) {
    return new Promise((resolve, reject) => {

    })
}

async function getCartDetails(dbName, cartId) {
    return new Promise(async (resolve, reject) => {
        let query = "select u.id as user_id, c.id as cart_id, u.latitude," +
            "u.longitude,cp.supplier_id from cart c join user u " +
            "on c.user_id = u.id join cart_products cp on " +
            "cp.cart_id = c.id where c.id = ? "
        let params = [cartId]
        try {
            let data = await ExecuteQ.Query(dbName, query, params);
            resolve(data);
        } catch (err) {
            logger.debug("===============error in getCartDetails==========", err)
            reject()
        }

    })
}



exports.multiSearch = function (request, reply) {
    var supplierBranchId;
    var categoryId;
    var languageId;
    var searchList;
    var data = {};

    async.auto({
        getValue: function (callback) {
            if (!(request.body.supplierBranchId)) {
                var msg = "supplier Branch  Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.categoryId)) {
                var msg = "category id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.searchList)) {
                var msg = "search List not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            supplierBranchId = request.body.supplierBranchId;
            categoryId = request.body.categoryId;
            languageId = request.body.languageId;
            searchList = request.body.searchList;
            searchList = searchList.split(',');
            callback(null);
        },
        productList: ['getValue', function (callback) {
            //console.log("nd",searchList)
            getSerachProduct(request.dbName, reply, supplierBranchId, categoryId, languageId, searchList, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    data.list = result;
                    callback(null, data);
                }
            })
        }],
        final: ['productList', function (callback) {
            callback(null);
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.deliveryType = function (request, reply) {
    var supplierBranchId = 0;
    var languageId = 0;
    var areaId;
    var data = {};
    async.auto({
        getValue: function (callback) {
            if (!(request.body.supplierBranchId)) {
                var msg = "supplier Branch  Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.areaId)) {
                var msg = "area id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            supplierBranchId = request.body.supplierBranchId;
            languageId = request.body.languageId;
            areaId = request.body.areaId;
            callback(null);
        },
        getDeliveryValue: function (callback) {
            getDeliveryData(request.dbName, reply, supplierBranchId, languageId, areaId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    data.list = result;
                    callback(null);
                }
            })
        }
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}



exports.resendOtp = function (request, reply) {
    var accessToken;
    var otp;
    var mobileNumber;
    var countryCode;
    let email = "";
    let twilio_authy_id = "";
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            callback(null);
        },
        getNumber: ['getValue', async function (callback) {
            try {
                var sql = "select mobile_no ,country_code,email,twilio_authy_id from user where access_token = ? ";
                let result = await ExecuteQ.Query(request.dbName, sql, [accessToken])
                // multiConnection[request.dbName].query(sql, [accessToken], function (err, result) {
                //     if (err) {
                //         var msg = "something went wrong";
                //         sendResponse.sendErrorMessage(msg,res,500);
                //     }
                //     else {
                mobileNumber = result[0].mobile_no;
                countryCode = result[0].country_code;
                email = result[0].email;
                twilio_authy_id = result[0].twilio_authy_id
                callback(null, result);
                //     }
                // })
            }
            catch (Err) {
                var msg = "something went wrong";
                sendResponse.sendErrorMessage(msg, res, 500);
            }
        }],
        genrateNumber: ['getNumber', async function (callback) {
            otp = Math.floor(Math.random() * 90000) + 10000;
            let twilioata = await Universal.getTwilioData(request.dbName);
            let twilioAuthyData = await Universal.getTwilioAuthyData(request.dbName);
            logger.debug("=========TWilio==DATA!=========>>", twilioata);
            let muthofunData = await Universal.getMuthoFunData(request.dbName);
            let message = "Hi there, Your One Time Password is : " + otp

            let keccelMsgData = await Universal.getKeccelMessagingKeys(request.dbName);

            let expert_texting = await Universal.getExpertTextingData(request.dbName);



            if (Object.keys(muthofunData).length > 0) {
                var options = {
                    method: 'GET',
                    url: "http://clients.muthofun.com:8901/esmsgw/sendsms.jsp?user=" + muthofunData["muthofun_username"] + "&password=" + muthofunData["muthofun_password"] + "&mobiles=" + countryCode + mobileNumber.toString() + "&sms=" + message + "&unicode=1"
                };
                web_request(options, function (err, body) {
                    logger.debug("==muthofun===Err===", err)
                    // callback(null);
                })

            }

            else if (Object.keys(keccelMsgData).length > 0) {
                var options = {
                    method: 'GET',
                    url: " https://api.keccel.com/otp/generate.asp",
                    body:
                    {
                        "token": keccelMsgData["keccel_sms_token"],
                        "from": keccelMsgData["keccel_from"],
                        "to": countryCode + mobileNumber.toString(),
                        "message": "Hi there, Your One Time Password is :  %OTP%",
                        "lifetime": 180
                    },
                    json: true

                };
                web_request(options, function (err, body) {
                    logger.debug("==keccelMsgData===Err===", body)
                    callback(null);
                })
            }


            else if (Object.keys(twilioAuthyData).length > 0 &&
                parseInt(twilioAuthyData.is_twilio_authy_enable) === 1) {

                //    let authyData = {
                //        email: userDetail.email,
                //        phone: mobileNumber,
                //        country_code: countryCode,
                //    };
                //    console.log("$$$$$$$$$$", authyData);
                //    let userAuthy = await smsManager.createAuthyUser(
                //        twilioAuthyData.authy_production_key,
                //        authyData
                //    );
                //    console.log("Authy wala user", userAuthy);

                //    if (userAuthy) {
                //        twilio_authy_id = userAuthy.user.id;
                //    }

                let sendOtp = await smsManager.sendToken(
                    twilioAuthyData.authy_production_key,
                    twilio_authy_id
                );
                console.log("&&&&&&&&&&", sendOtp);
                callback(null);

            }
            else if (Object.keys(twilioata).length > 0) {
                var client = require('twilio')(twilioata[config.get("twilio.s_id")], twilioata[config.get("twilio.auth_key")]);
                var smsOptions = {
                    from: twilioata[config.get("twilio.number_key")],
                    to: countryCode + mobileNumber.toString(),
                    body: "Hi there, Your One Time Password for " + request.business_name + " is : " + otp
                };
                client.messages.create(smsOptions, function (err, message) {
                    logger.debug("=========Twilio==ER!==", err)
                    // if (err) {
                    //     console.log("err",err)
                    // }
                    // else {
                    //     //console.log(message.sid);
                    // }
                });
            } else if (Object.keys(expert_texting).length > 0) {
                let url = `https://www.experttexting.com/ExptRestApi/sms/json/Message/Send?username=${expert_texting['expert_texting_username']}&api_key=${expert_texting['expert_texting_api_key']}&api_secret=${expert_texting['expert_texting_secret_key']}&from=DEFAULT&to=${countryCode + mobileNumber.toString()}&text=${message}&type=text`;

                logger.debug("==url===", url);

                var options = {
                    method: 'GET',
                    url: url
                };
                web_request(options, function (err, response) {
                    logger.debug("==muthofun===Err===", err, response.statusCode, response.body)
                    callback(null);
                })

            }
            else {
                otp = 12345
            }
            logger.debug("============OTP==>", otp)
            callback(null);
        }],
        otpSaveInDb: ['genrateNumber', async function (callback) {
            try {
                var sql = " update user set otp = ? where access_token = ? ";
                await ExecuteQ.Query(request.dbName, sql, [otp, accessToken]);
                // multiConnection[request.dbName].query(sql,[otp,accessToken],function(err,result){
                //     if(err){
                //         var msg = "db error :";
                //         return sendResponse.sendErrorMessage(msg,reply,500);
                //     }else{
                callback(null);
                //     }
                // })
            }
            catch (Err) {
                var msg = "db error :";
                return sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}



exports.supplierRating = function (request, reply) {
    var accessToken;
    var supplierId;
    var rating;
    var comment;
    var data = {};
    var reviewId = 0;
    let orderId = request.body.orderId || 0
    var comments = {};

    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.supplierId)) {
                var msg = "supplier Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.rating) {
                data.rating = request.body.rating;
            } else {
                data.rating = 0;
            }
            if (request.body.comment) {
                data.comment = request.body.comment;
            } else {
                data.comment = "";
            }
            data.accessToken = request.body.accessToken;
            data.supplierId = request.body.supplierId;
            data.order_id = orderId;
            callback(null);
        },
        checkAccessToken: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, data.accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    data.id = result.id;
                    callback(null);
                }
            })
        }],
        insertComment: ['checkAccessToken', function (callback) {
            insertReview(request.dbName, reply, data, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    reviewId = result;
                    callback(null);
                }
            })
        }],
        getReview: ['insertComment', function (callback) {
            getReviewSupplier(request.dbName, reply, reviewId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    comments.comment = result.comment;
                    comments.rating = result.rating;
                    comments.supplier_name = result.name;
                    comments.id = reviewId;
                    callback(null);
                }
            })
        }],
        addSupplierRating: ['getReview', function (callback) {
            addsupplierRating(request.dbName, reply, request.body.rating, request.body.supplierId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(comments, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}



exports.getMyFavourite = function (request, reply) {

    var accessToken;
    var areaId;
    var supplierId;
    var languageId;
    var list = {};
    var id;
    var supplierList;
    var temp = [];
    var latitude;
    var longitude;
    console.log("--------qq------", request.body.latitude, request.body.longitude)
    if (request.headers.secretdbkey != undefined && request.headers.secretdbkey != "") {
        var decipher = crypto.createDecipher(algorithm, crypto_password)
        var decDbName = decipher.update(request.headers.secretdbkey, 'hex', 'utf8')
        decDbName += decipher.final('utf8');
        console.log("==DB_NAME==", decDbName)
        dbConnection = multiConnection[decDbName]
    }
    else {
        dbConnection = connection
    }

    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            // if(!(request.body.areaId)){
            //     var msg = "area Id not found";
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }

            latitude = request.body.latitude;
            longitude = request.body.longitude
            accessToken = request.body.accessToken;
            languageId = 14;
            callback(null);
        },
        getUserId: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    id = result.id;
                    callback(err);
                }
            })
        }],
        getSupplierList: ['getUserId', function (callback) {
            console.log("---------------------", latitude, longitude)
            getfavSupplier(request.dbName, reply, id, languageId, latitude, longitude, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    supplierList = result;
                    callback(null);
                }
            })
        }],
        supplierCategory: ['getSupplierList', async function (callback) {
            var len = supplierList.length;
            if (len == 0) {
                callback(null, supplierList);
            }
            else {
                // for(var i =0;i<len;i++){
                //     (function(i){
                for await (const [indx, i] of supplierList.entries()) {
                    var sql = "select sc.supplier_id as id,c.image,c.supplier_placement_level,sc.category_id,IF(EXISTS(select categories.id from categories where parent_id=sc.category_id limit 1),1,0) as is_subcategory,cml.name as category_name,cml.description,c.order,c.category_flow from supplier_category sc join categories_ml cml on sc.category_id = cml.category_id " +
                        " join categories c on c.id = sc.category_id " +
                        " where sc.supplier_id = " + i.supplier_id + " and cml.language_id = " + languageId + " GROUP BY c.id";
                    let result = await ExecuteQ.Query(request.dbName, sql, []);
                    supplierList[indx].category = [];

                    var leng = result.length;
                    for await (const [indx2, j] of result.entries()) {
                        supplierList[indx].category.push(j);
                    }
                    supplierList[indx].timing = []
                    let timing = await getSupTiming(request.dbName, i.supplier_id)
                    supplierList[indx].timing = timing
                    if (indx == (len - 1)) {
                        callback(null, supplierList);
                    }
                }

            }

        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({ favourites: supplierList }, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}



exports.changePassword = async function (request, reply) {
    var accessToken;
    var oldPassword;
    var newPassword;
    var languageId;
    let userData;
    async.auto({
        getValue: async function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.oldPassword)) {
                var msg = "oldPassword  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.newPassword)) {
                var msg = "new password  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            newPassword = request.body.newPassword;
            oldPassword = request.body.oldPassword;
            accessToken = request.body.accessToken;
            languageId = request.body.languageId;
            userData = await ExecuteQ.Query(request.dbName, `select email from user where access_token=?`, [accessToken])
            callback(null);
        },
        changePassword: ["getValue", function (callback) {

            changeUserPassword(request, request.dbName, reply, accessToken, newPassword, oldPassword, languageId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }],
        sentEmail: ["getValue", "changePassword", function (callback) {
            emailTemp.userChangepassword(request, reply, userData[0].email, newPassword, function (err, result) {
                // if(err){
                console.log("..****register email*****....", err);
                // }
            });
            callback(null)
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.CHANGE_PASSWORD, reply, 200);
        }
    })
}



exports.onOffNotification = function (request, reply) {
    var accesstoken;
    var status;
    var languageId;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }



            if (request.body.status == 0 || request.body.status == 1) {
                status = request.body.status;
            } else {
                var msg = "status not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accesstoken = request.body.accessToken;
            languageId = request.body.languageId;
            callback(null);
        },
        setValue: ['getValue', function (callback) {
            notificationInfo(request.dbName, reply, accesstoken, status, languageId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }]

    }, async function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            let message = parseInt(request.body.status) == 0 ? "Notifications disable" : "Notifications enable"
            return sendResponse.sendErrorMessageWithTranslation(request, message, reply, 200);
        }
    })
}


exports.notificationLanguage = function (request, reply) {
    var accessToken;
    var languageId;
    console.log("......", request.body);
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.languageId == 14 || request.body.languageId == 15) {
                languageId = request.body.languageId;
            } else {
                var msg = "invalid language id pass";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            callback(null);
        },
        checkAccessToken: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    var id = result.id;
                    callback(null);
                }
            })
        }],
        updateLanguageId: ['checkAccessToken', function (callback) {
            notificationLang(request.dbName, reply, accessToken, languageId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }],
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.historyOrder = function (request, reply) {
    var accessToken;
    var userId;
    var historyData = {};
    var orderHistory;
    var final = [];
    var temp = {}, orderCount = 0;
    var languageId;
    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            languageId = request.body.languageId;
            callback(null);
        },
        getCustomerId: ['getValues', function (callback) {

            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })

        }],
        getHistoryOrder: ['getCustomerId', function (callback) {

            getHistoryOrder(request.dbName, reply, userId, 1, request.body, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    orderHistory = result;
                    callback(null);
                }
            })


        }],
        getHistoryOrderCount: ['getHistoryOrder', function (callback) {

            getHistoryOrderCount(request.dbName, reply, userId, 1, request.body, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    orderCount = result
                    callback(null);
                }
            })

        }],
        // agentStatus:['getHistoryOrderCount',function(callback){
        //     var final_data=[];
        //     // var orderHistory= data.orders
        //     var leng=orderHistory.length,agentConnection={}
        //     if(leng>0){
        //     async.each(orderHistory,async function (i, callback2)
        //         {
        //             // console.log("===",i.id,i.status,i.is_agent)
        //             if(i.is_agent==1){
        //              var getAgentDbData=await common.GetAgentDbInformation(request.dbName);
        //                logger.debug("===AGENT==CONNECTION==>>==2=",Object.entries(agentConnection).length)
        //                if(Object.entries(agentConnection).length===0){
        //                    agentConnection=await common.RunTimeAgentConnection(getAgentDbData);
        //                }
        //             var sqlQuery="select `status` from cbl_user_orders  where order_id=?";
        //             agentConnection.query(sqlQuery,[i.order_id],function(err,statusData){
        //                 if (err) {
        //                     sendResponse.somethingWentWrongError(res);
        //                 }
        //                 else{
        //                     console.log("====statusData====",i.status)
        //                     if(statusData && statusData.length>0){
        //                         i.status=i.status>5?i.status:statusData[0].status
        //                         final_data.push(i)
        //                         callback2(null)
        //                     }
        //                     else{
        //                         final_data.push(i)
        //                         callback2(null)
        //                     }
        //                 }
        //             });
        //         }
        //         else{
        //             final_data.push(i)
        //             callback2(null)
        //         }

        // },function(err) {
        //     if (err) {
        //         callback(err);
        //     }
        //     else{
        //         // console.log("====final_data=++ENR",final_data)
        //         var order_data=_.sortBy(final_data,'id').reverse();
        //         orderHistory=order_data
        //         callback(null)
        //     }
        //   });
        // }
        // else{
        //     callback(null)
        // }
        // }],
        getProductDetails: ['getHistoryOrderCount', async function (callback) {
            var leng = orderHistory.length, totalProductPrice = 0;
            let shipStationData = await Universal.getShippingData(request.dbName);
            var details = {};
            if (leng != 0) {
                for (const [index, i] of orderHistory.entries()) {
                    var result = await getProdcutDetailsV1(request.dbName, reply, i.order_id, i.is_package, i.pricing_type, languageId)

                    if (result.length) {
                        logger.debug("=====orderHistory[i].status====", i.status)
                        // 0,1,3,4
                        // if(orderHistory[i].status==1
                        //     || orderHistory[i].status==0
                        //     || orderHistory[i].status==3
                        //     || orderHistory[i].status==4
                        //     || orderHistory[i].status==10
                        //     || orderHistory[i].status==11
                        //     )


                        // {
                        details.discountAmount = i.discountAmount;
                        details.shippingData = [];
                        if (Object.keys(shipStationData).length > 0) {
                            details.shippingData = await Universal.getShippingOrderDetail(shipStationData, "JUSTCBD-" + i.order_id);
                        }
                        details.delivered_on = i.delivered_on;
                        details.delivery_charges = i.delivery_charges;
                        details.handling_admin = i.handling_admin
                        details.handling_supplier = i.handling_supplier
                        details.user_service_charge = orderHistory[index].user_service_charge
                        details.referral_amount = orderHistory[index].referral_amount;
                        if (i.delivered_on == '0000-00-00 00:00:00') {
                            details.delivered_on = moment(i.schedule_date).format();
                        }
                        else {
                            details.delivered_on = moment(i.delivered_on).format();
                        }
                        details.duration = i.duration
                        // details.delivery_charges=orderHistory[i].delivery_charges
                        if (result && result.length > 0) {
                            _.each(result, function (i) {
                                totalProductPrice = totalProductPrice + parseFloat(i.fixed_price)
                            })
                        }
                        details.order_price = parseFloat(totalProductPrice);
                        details.net_amount = i.net_amount
                        details.tip_agent = i.tip_agent
                        details.created_by = i.created_by;
                        details.approve_rejection_reason = i.approve_rejection_reason;
                        details.payment_status = i.payment_status;
                        details.type = i.type;
                        details.payment_after_confirmation = i.payment_after_confirmation;
                        // details.net_amount = parseFloat(orderHistory[i].net_amount);
                        details.order_id = i.order_id;
                        details.area_id = i.area_id;
                        details.supplier_branch_id = i.supplier_branch_id;
                        details.supplier_id = i.id;
                        details.logo = i.logo
                        details.addOn = i.addOn
                        details.service_date = moment(i.schedule_date).format();
                        // console.log("..............",date)
                        //console.log("..............a",details.service_date)
                        // console.log("=orderHistory[i].is_agent=",orderHistory[i].is_agent)

                        details.status = i.status
                        details.near_on = moment(i.near_on).format();
                        details.shipped_on = moment(i.shipped_on).format();
                        details.schedule_order = i.schedule_order
                        details.shipped_on = moment(i.shipped_on).format();
                        details.payment_type = i.payment_type;
                        details.created_on = moment(i.created_on).format();
                        details.product = result;
                        details.is_agent = i.is_agent;
                        details.product_count = result.length;
                        details.measuring_unit = result.measuring_unit;
                        details.user_delivery_address = i.user_delivery_address;
                        details.schedule_order = i.schedule_order;
                        details.supplier_name =
                            //    console.log("=======details===========",details)
                            final.push(details);
                        details = {};
                        totalProductPrice = 0
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                        // }
                        // else{
                        //     if(i == (leng-1)){
                        //     callback(null);
                        //     }
                        // }
                    }
                    else {
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                    }
                }

                // for(var i = 0;i<leng;i++){
                //     (function(i){

                //         logger.debug("=====orderHistory[i].order_id====",orderHistory[i].order_id)
                //         // final=[]
                //         getProdcutDetails(request.dbName,reply,orderHistory[i].order_id,orderHistory[i].is_package,orderHistory[i].pricing_type,languageId,function(err,result){
                //             if(err){
                //                 callback(err);
                //             }else{
                //             }
                //         })
                //     }(i));
                // }
            }
            else {
                callback(null);
            }
        }],
        getAddress: ['getProductDetails', function (callback) {
            console.log("1111111", final)
            var len = final.length;
            var temp = {};
            if (len != 0) {
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        //   console.log(".......i..",i);
                        getAddressAccordingId(request.dbName, reply, final[i].user_delivery_address, function (err, result) {
                            if (err) {
                                callback(err);

                            } else {
                                if (result.length) {
                                    result = result[0];
                                    temp.address_line_1 = result.address_line_1;
                                    temp.address_line_2 = result.address_line_2;
                                    temp.pincode = result.pincode;
                                    temp.city = result.city;
                                    temp.landmark = result.landmark;
                                    final[i].delivery_address = temp;
                                    temp = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                } else {
                                    final[i].delivery_address = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                }
                            }
                        })
                    }(i));
                }
            } else {
                callback(null);
            }
        }],
        final: ['getProductDetails', function (callback) {
            // console.log("2222",final)
            // var result=final.sort(func.sort_by('order_id', true, parseInt));
            temp.orderHistory = final;
            temp.count = orderCount
            callback(null);
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}
/**
 * @desc used for listing an order history of users in web/app side
 */
exports.historyOrderV2 = async function (request, reply) {
    let service_type = await ExecuteQ.Query(request.dbName, "select app_type from screen_flow", [])
    let orderGrouping = await Universal.getKeysValue(["order_grouping"], request.dbName)
    var accessToken;
    var userId;
    var historyData = {};
    var orderHistory;
    var final = [];
    var temp = {}, orderCount = 0;
    var languageId;
    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            languageId = request.body.languageId;
            callback(null);
        },
        getCustomerId: ['getValues', function (callback) {

            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })

        }],
        getHistoryOrder: ['getCustomerId', function (callback) {

            getHistoryOrder(request.dbName, reply, userId, 1, request.body, orderGrouping, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    orderHistory = result;
                    callback(null);
                }
            })


        }],
        getHistoryOrderCount: ['getHistoryOrder', function (callback) {

            getHistoryOrderCount(request.dbName, reply, userId, 1, request.body, orderGrouping, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    orderCount = result
                    callback(null);
                }
            })

        }],
        // agentStatus:['getHistoryOrderCount',function(callback){
        //     var final_data=[];
        //     // var orderHistory= data.orders
        //     var leng=orderHistory.length,agentConnection={}
        //     if(leng>0){
        //     async.each(orderHistory,async function (i, callback2)
        //         {
        //             // console.log("===",i.id,i.status,i.is_agent)
        //             if(i.is_agent==1){
        //              var getAgentDbData=await common.GetAgentDbInformation(request.dbName);
        //                logger.debug("===AGENT==CONNECTION==>>==2=",Object.entries(agentConnection).length)
        //                if(Object.entries(agentConnection).length===0){
        //                    agentConnection=await common.RunTimeAgentConnection(getAgentDbData);
        //                }
        //             var sqlQuery="select `status` from cbl_user_orders  where order_id=?";
        //             agentConnection.query(sqlQuery,[i.order_id],function(err,statusData){
        //                 if (err) {
        //                     sendResponse.somethingWentWrongError(res);
        //                 }
        //                 else{
        //                     console.log("====statusData====",i.status)
        //                     if(statusData && statusData.length>0){
        //                         i.status=i.status>5?i.status:statusData[0].status
        //                         final_data.push(i)
        //                         callback2(null)
        //                     }
        //                     else{
        //                         final_data.push(i)
        //                         callback2(null)
        //                     }
        //                 }
        //             });
        //         }
        //         else{
        //             final_data.push(i)
        //             callback2(null)
        //         }

        // },function(err) {
        //     if (err) {
        //         callback(err);
        //     }
        //     else{
        //         // console.log("====final_data=++ENR",final_data)
        //         var order_data=_.sortBy(final_data,'id').reverse();
        //         orderHistory=order_data
        //         callback(null)
        //     }
        //   });
        // }
        // else{
        //     callback(null)
        // }
        // }],
        getProductDetails: ['getHistoryOrderCount', async function (callback) {
            var leng = orderHistory.length, totalProductPrice = 0;
            let shipStationData = await Universal.getShippingData(request.dbName);
            var details = {};
            if (leng != 0) {
                for (const [index, i] of orderHistory.entries()) {
                    var result = await getProdcutDetailsV1(request.dbName, reply, i.order_id, i.is_package, i.pricing_type, languageId)

                    if (result.length) {
                        if (orderGrouping && orderGrouping.length > 0) {
                            details.order_ids = i.order_ids.split(",")
                        }
                        details.grouping_id = i.grouping_id

                        logger.debug("=====orderHistory[i].status====", i.status)
                        // 0,1,3,4
                        // if(orderHistory[i].status==1
                        //     || orderHistory[i].status==0
                        //     || orderHistory[i].status==3
                        //     || orderHistory[i].status==4
                        //     || orderHistory[i].status==10
                        //     || orderHistory[i].status==11
                        //     )


                        // {
                        details.total_order_price = await totalOrderPrice(request.dbName, i.order_id)
                        details.discountAmount = i.discountAmount;
                        details.slot_price = i.slot_price
                        details.shippingData = [];
                        if (Object.keys(shipStationData).length > 0) {
                            details.shippingData = await Universal.getShippingOrderDetail(shipStationData, "JUSTCBD-" + i.order_id);
                        }
                        details.delivered_on = i.delivered_on;
                        details.delivery_charges = i.delivery_charges;
                        details.handling_admin = i.handling_admin
                        details.handling_supplier = i.handling_supplier
                        details.user_service_charge = orderHistory[index].user_service_charge
                        details.referral_amount = orderHistory[index].referral_amount;
                        if (i.delivered_on == '0000-00-00 00:00:00') {
                            details.delivered_on = moment(i.schedule_date).format();
                        }
                        else {
                            details.delivered_on = moment(i.delivered_on).format();
                        }
                        details.duration = i.duration
                        // details.delivery_charges=orderHistory[i].delivery_charges
                        if (result && result.length > 0) {
                            _.each(result, function (i) {
                                totalProductPrice = totalProductPrice + parseFloat(i.fixed_price)
                            })
                        }
                        details.supplier_name = orderHistory[0].supplier_name
                        details.supplier_logo = orderHistory[0].supplier_logo
                        details.random_order_id = orderHistory[0].random_order_id
                        details.gift_amount = i.gift_amount
                        details.is_schedule = i.is_schedule
                        details.self_pickup = i.self_pickup
                        details.schedule_end_date = i.schedule_end_date;
                        details.order_price = parseFloat(totalProductPrice);
                        details.net_amount = i.net_amount - (i.discountAmount) - (orderHistory[index].referral_amount) - (i.wallet_discount_amount);
                        details.tip_agent = i.tip_agent
                        details.created_by = i.created_by;
                        details.approve_rejection_reason = i.approve_rejection_reason;
                        details.payment_status = i.payment_status;
                        details.type = i.type;
                        details.payment_after_confirmation = i.payment_after_confirmation;
                        // details.net_amount = parseFloat(orderHistory[i].net_amount);
                        details.order_id = i.order_id;
                        details.area_id = i.area_id;
                        details.supplier_branch_id = i.supplier_branch_id;
                        details.supplier_id = i.id;
                        details.logo = i.logo
                        details.addOn = i.addOn
                        details.service_date = moment(i.schedule_date).format();
                        details.type = result[0].type
                        details.terminology = result[0].terminology
                        details.service_type = service_type[0].app_type

                        // console.log("..............",date)
                        //console.log("..............a",details.service_date)
                        // console.log("=orderHistory[i].is_agent=",orderHistory[i].is_agent)

                        details.status = i.status
                        details.near_on = moment(i.near_on).format();
                        details.shipped_on = moment(i.shipped_on).format();
                        details.schedule_order = i.schedule_order
                        details.shipped_on = moment(i.shipped_on).format();
                        details.payment_type = i.payment_type;
                        details.created_on = moment(i.created_on).format();
                        details.product = result;
                        details.is_agent = i.is_agent;
                        details.product_count = result.length;
                        details.measuring_unit = result.measuring_unit;
                        details.user_delivery_address = i.user_delivery_address;
                        details.schedule_order = i.schedule_order;
                        details.supplier_name =
                            //    console.log("=======details===========",details)
                            final.push(details);
                        details = {};
                        totalProductPrice = 0
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                        // }
                        // else{
                        //     if(i == (leng-1)){
                        //     callback(null);
                        //     }
                        // }
                    }
                    else {
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                    }
                }

                // for(var i = 0;i<leng;i++){
                //     (function(i){

                //         logger.debug("=====orderHistory[i].order_id====",orderHistory[i].order_id)
                //         // final=[]
                //         getProdcutDetails(request.dbName,reply,orderHistory[i].order_id,orderHistory[i].is_package,orderHistory[i].pricing_type,languageId,function(err,result){
                //             if(err){
                //                 callback(err);
                //             }else{
                //             }
                //         })
                //     }(i));
                // }
            }
            else {
                callback(null);
            }
        }],
        getAddress: ['getProductDetails', function (callback) {
            console.log("1111111", final)
            var len = final.length;
            var temp = {};
            if (len != 0) {
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        //   console.log(".......i..",i);
                        getAddressAccordingId(request.dbName, reply, final[i].user_delivery_address, function (err, result) {
                            if (err) {
                                callback(err);

                            } else {
                                if (result.length) {
                                    result = result[0];
                                    temp.address_line_1 = result.address_line_1;
                                    temp.address_line_2 = result.address_line_2;
                                    temp.pincode = result.pincode;
                                    temp.city = result.city;
                                    temp.landmark = result.landmark;
                                    final[i].delivery_address = temp;
                                    temp = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                } else {
                                    final[i].delivery_address = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                }
                            }
                        })
                    }(i));
                }
            } else {
                callback(null);
            }
        }],
        final: ['getProductDetails', function (callback) {
            // console.log("2222",final)
            // var result=final.sort(func.sort_by('order_id', true, parseInt));
            temp.orderHistory = final;
            temp.count = orderCount
            callback(null);
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.upcomingOrder = function (request, reply) {

    var accessToken, upcoming_data;

    var userId;
    var upcoming = {};
    var statusArr = [];
    var orderIdData = {};
    var languageId;
    var orderHistory;
    var final = [];
    var temp = {}, orderCount = 0;
    //  console.log("access",request.body.accessToken);
    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "please enter languageId";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            languageId = request.body.languageId;
            callback(null);
        },
        getCustomerId: ['getValues', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {

                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        /*        getStatus :['getCustomerId',function(callback)
                {
                    var sql = ' select status , id , order_id from schedule_order where user_id = ? and active = 0 ';
                    multiConnection[dbName].query(sql,[userId],function(err,result)
                    {
                        if(err){
                            var msg = "some thing went wrong ";
                            sendResponse.sendErrorMessage(msg,reply,500);
                        }else{
                            //console.log("result",result);
                            if(result.length>0)
                            {
        
                                statusArr=result;
        
                                console.log("............statusArr..........",statusArr);
        
                                //console.log(statusArr);
                                callback(null);
                            }
        
                            else {
                                statusArr=[];
                                callback(null);
                            }
        
                        }
                    })
        
                }],
                getRecurring:['getStatus',function(callback)
                {
                    if(statusArr.length>0)
                    {
                        getScheduleOrder(reply,userId,statusArr ,function(err,result)
                        {
                            if(err){
                                callback(err);
                            }else{
                               //console.log("result111",result.length);
                                upcoming.schedule=result;
                                // console.log(result);
                               callback(null);
                            }
                        });
                    }
                    else
                    {
                         callback(null);
                    }
        
                }],*/
        /*  ScheduleOrderGenrate : ['getRecurring',function(callback)
          {
              if(statusArr.length>0)
              {
                  var orderDetails = upcoming.schedule;
                  genrateScheduleOrder(reply,accessToken,orderDetails,userId,function(err,result){
                      if(err){
                          callback(err);
  
                      }else{
                    //      console.log("result2222",result);
  
                          console.log("...............result................",result);
                          if(result.length){
                              orderId = result.id;
                              orderIdData.id=result;
                          }else{
                              orderId = 0;
                              orderIdData.id=0;
  
                          }
  
                          callback(null);
                      }
                  })
              } else {
                   callback(null);
              }
          }],*/
        /* insertOrderPrices:['ScheduleOrderGenrate',function(callback)
         {
             if(statusArr.length>0)
             {
                 var orderDetails = upcoming.schedule;
                 var ids=orderIdData.id;
                 if(ids==undefined)
                 {
                    callback(null);
                 }
                 else
                 {
                     insertOrderPrice1(reply,ids,statusArr,function(err,result)
                     {
                         if(err){
                             callback(err);
                         }else{
                 //            console.log("result333",result);
                             callback(null);
                         }
                     })
                 }
             }
             else {
                 callback(null);
             }
         }],*/
        /*       deactivateScheduleStatus:['insertOrderPrices',function(callback)
               {
                   if(statusArr.length>0) {
                       for(var i=0;i<statusArr.length;i++) {
                           (function(i) {
                               var sql = 'update schedule_order set active =1 where id = ?';
                               multiConnection[dbName].query(sql ,[statusArr[i].id],function(err,result) {
                                   if(err)
                                       callback(err);
                                   if(i==statusArr.length-1) {
                                        callback(null);
                                   }
                               })
                           })(i);
                       }
                   }
                   else
                   {
                       callback(null);
                   }
               }],*/
        getUpcomingOrder: ['getCustomerId', function (callback) {
            logger.debug("========CB1===")


            getUpcomingHistory(request.dbName, reply, userId, request.body, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    //   logger.debug("result444",result);
                    orderHistory = result;
                    // logger.debug("resssssss",result);
                    callback(null);
                }
            })

        }],
        getUpcomingOrderCount: ['getUpcomingOrder', function (callback) {

            getUpcomingHistoryCount(request.dbName, reply, userId, request.body, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    orderCount = result
                    callback(null);
                }
            })

        }],
        // agentStatus:['getUpcomingOrderCount',async function(callback){
        //     var final_data=[];
        //     // var orderHistory= data.orders
        //     var leng=orderHistory.length,agentConnection={}
        //     if(leng>0){
        //     async.each(orderHistory,async function (i, callback2)
        //         {
        //             logger.debug("===",i.id,i.status,i.is_agent,i.order_id)
        //             if(i.is_agent==1){
        //             var getAgentDbData=await common.GetAgentDbInformation(request.dbName);
        //             logger.debug("===AGENT==CONNECTION==>>==2=",Object.entries(agentConnection).length)
        //             if(Object.entries(agentConnection).length===0){
        //                 agentConnection=await common.RunTimeAgentConnection(getAgentDbData);
        //             }
        //             var sqlQuery="select `status` from cbl_user_orders  where order_id=?";
        //             agentConnection.query(sqlQuery,[i.order_id],function(err,statusData){
        //                 if (err) {
        //                     sendResponse.somethingWentWrongError(res);
        //                 }
        //                 else{
        //                     logger.debug("====statusData====",statusData[0].status)
        //                     if(statusData && statusData.length>0){
        //                         if(i.status==1){
        //                          i.status=statusData[0].status
        //                         }
        //                         final_data.push(i)
        //                         callback2(null)
        //                     }
        //                     else{
        //                         final_data.push(i)
        //                         callback2(null)
        //                     }
        //                 }
        //             });
        //         }
        //         else{
        //             final_data.push(i)
        //             callback2(null)
        //         }

        // },function(err) {
        //     if (err) {
        //         callback(err);
        //     }
        //     else{
        //         logger.debug("====final_data=++ENR===============1==>>",final_data)
        //         var order_data=_.sortBy(final_data,'order_id').reverse();
        //         logger.debug("====final_data=++ENR=============2==>>",order_data)
        //         orderHistory=order_data
        //         callback(null)
        //     }
        //   });
        // }
        // else{
        //     callback(null)
        // }
        // }],
        getProductDetails: ['getUpcomingOrderCount', async function (callback) {
            var leng = orderHistory.length, totalProductPrice = 0;
            // logger.debug("======ORDER==HIST==",leng,orderHistory)
            let shipStationData = await Universal.getShippingData(request.dbName);
            var details = {};
            if (leng != 0) {
                for (const [index, i] of orderHistory.entries()) {
                    var result = await getProdcutDetailsV1(request.dbName, reply, i.order_id, i.is_package, i.pricing_type, languageId)
                    if (result.length) {
                        logger.debug("=====orderHistory[i].status====", i.status)
                        // 0,1,3,4
                        // if(orderHistory[i].status==1
                        //     || orderHistory[i].status==0
                        //     || orderHistory[i].status==3
                        //     || orderHistory[i].status==4
                        //     || orderHistory[i].status==10
                        //     || orderHistory[i].status==11
                        //     )


                        // {
                        details.delivery_charges = i.delivery_charges;
                        details.referral_amount = orderHistory[index].referral_amount;
                        details.user_service_charge = orderHistory[index].user_service_charge
                        details.shippingData = [];
                        if (Object.keys(shipStationData).length > 0) {
                            details.shippingData = await Universal.getShippingOrderDetail(shipStationData, "JUSTCBD-" + i.order_id);
                        }
                        details.discountAmount = i.discountAmount;
                        if (i.delivered_on == '0000-00-00 00:00:00') {
                            details.delivered_on = moment(i.schedule_date).format();
                        }
                        else {
                            details.delivered_on = moment(i.delivered_on).format();
                        }
                        details.handling_admin = i.handling_admin
                        details.handling_supplier = i.handling_supplier
                        details.created_by = i.created_by;
                        details.approve_rejection_reason = i.approve_rejection_reason;
                        details.payment_status = i.payment_status;
                        details.type = i.type;
                        details.payment_after_confirmation = i.payment_after_confirmation;
                        details.duration = i.duration
                        details.self_pickup = i.self_pickup

                        // details.delivery_charges=orderHistory[i].delivery_charges
                        if (result && result.length > 0) {
                            _.each(result, function (i) {
                                totalProductPrice = totalProductPrice + parseFloat(i.fixed_price)
                            })
                        }
                        details.order_price = parseFloat(totalProductPrice);
                        details.net_amount = i.net_amount
                        details.tip_agent = i.tip_agent
                        // details.net_amount = parseFloat(orderHistory[i].net_amount);
                        details.order_id = i.order_id;
                        details.area_id = i.area_id;
                        details.supplier_branch_id = i.supplier_branch_id;
                        details.supplier_id = i.id;
                        details.logo = i.logo
                        details.service_date = moment(i.schedule_date).format();
                        // console.log("..............",date)
                        //console.log("..............a",details.service_date)
                        // console.log("=orderHistory[i].is_agent=",orderHistory[i].is_agent)

                        details.status = i.status
                        details.near_on = moment(i.near_on).format();
                        details.shipped_on = moment(i.shipped_on).format();
                        details.schedule_order = i.schedule_order
                        details.shipped_on = moment(i.shipped_on).format();
                        details.payment_type = i.payment_type;
                        details.created_on = moment(i.created_on).format();
                        details.product = result;
                        details.is_agent = i.is_agent;
                        details.addOn = i.addOn
                        details.product_count = result.length;
                        details.measuring_unit = result.measuring_unit;
                        details.user_delivery_address = i.user_delivery_address;
                        details.schedule_order = i.schedule_order;
                        console.log("=======details===========", details)
                        final.push(details);
                        details = {};
                        totalProductPrice = 0
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                        // }
                        // else{
                        //     if(i == (leng-1)){
                        //     callback(null);
                        //     }
                        // }
                    }
                    else {
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                    }
                }

                // for(var i = 0;i<leng;i++){
                //     (function(i){

                //         logger.debug("=====orderHistory[i].order_id====",orderHistory[i].order_id)
                //         // final=[]
                //         getProdcutDetails(request.dbName,reply,orderHistory[i].order_id,orderHistory[i].is_package,orderHistory[i].pricing_type,languageId,function(err,result){
                //             if(err){
                //                 callback(err);
                //             }else{
                //             }
                //         })
                //     }(i));
                // }
            }
            else {
                callback(null);
            }
        }],
        getAddress: ['getProductDetails', function (callback) {
            // logger.debug("======final in getAddress============",final)
            var len = final.length;
            var temp = {};
            if (len != 0) {
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        getAddressAccordingId(request.dbName, reply, final[i].user_delivery_address, function (err, result) {
                            if (err) {
                                callback(err);
                            } else {
                                if (result.length) {
                                    result = result[0];
                                    temp.address_line_1 = result.address_line_1;
                                    temp.address_line_2 = result.address_line_2;
                                    temp.pincode = result.pincode;
                                    temp.city = result.city;
                                    temp.landmark = result.landmark;
                                    final[i].delivery_address = temp;
                                    temp = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                } else {
                                    final[i].delivery_address = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                }
                            }
                        })
                    }(i));
                }
            } else {
                callback(null);
            }
        }],
        final: ['getAddress', function (callback) {
            logger.debug(".......final",);
            // var result=final.sort(func.sort_by('order_id', true, parseInt));
            // logger.debug("+=========result after final==========",result)
            temp.orderHistory = final;
            temp.count = orderCount;
            callback(null);
        }]

    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            // console.log(".............temp...............................",temp);
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

/**
 * @description used for listing an pending order of users in web/app
 */
exports.upcomingOrderV2 = async function (request, reply) {
    let service_type = await ExecuteQ.Query(request.dbName, "select app_type from screen_flow", [])
    let orderGrouping = await Universal.getKeysValue(["order_grouping"], request.dbName)
    var accessToken, upcoming_data;
    var userId;
    var upcoming = {};
    var statusArr = [];
    var orderIdData = {};
    var languageId;
    var orderHistory;
    var final = [];
    var temp = {}, orderCount = 0;
    //  console.log("access",request.body.accessToken);
    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "please enter languageId";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            languageId = request.body.languageId;
            callback(null);
        },
        getCustomerId: ['getValues', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {

                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        getUpcomingOrder: ['getCustomerId', function (callback) {
            logger.debug("========CB1===")



            getUpcomingHistory(request.dbName, reply, userId, request.body, orderGrouping, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    //   logger.debug("result444",result);
                    orderHistory = result;
                    // logger.debug("resssssss",result);
                    callback(null);
                }
            })

        }],
        getUpcomingOrderCount: ['getUpcomingOrder', function (callback) {

            getUpcomingHistoryCount(request.dbName, reply, userId, request.body, orderGrouping, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    orderCount = result
                    callback(null);
                }
            })

        }],
        // agentStatus:['getUpcomingOrderCount',async function(callback){
        //     var final_data=[];
        //     // var orderHistory= data.orders
        //     var leng=orderHistory.length,agentConnection={}
        //     if(leng>0){
        //     async.each(orderHistory,async function (i, callback2)
        //         {
        //             logger.debug("===",i.id,i.status,i.is_agent,i.order_id)
        //             if(i.is_agent==1){
        //             var getAgentDbData=await common.GetAgentDbInformation(request.dbName);
        //             logger.debug("===AGENT==CONNECTION==>>==2=",Object.entries(agentConnection).length)
        //             if(Object.entries(agentConnection).length===0){
        //                 agentConnection=await common.RunTimeAgentConnection(getAgentDbData);
        //             }
        //             var sqlQuery="select `status` from cbl_user_orders  where order_id=?";
        //             agentConnection.query(sqlQuery,[i.order_id],function(err,statusData){
        //                 if (err) {
        //                     sendResponse.somethingWentWrongError(res);
        //                 }
        //                 else{
        //                     logger.debug("====statusData====",statusData[0].status)
        //                     if(statusData && statusData.length>0){
        //                         if(i.status==1){
        //                          i.status=statusData[0].status
        //                         }
        //                         final_data.push(i)
        //                         callback2(null)
        //                     }
        //                     else{
        //                         final_data.push(i)
        //                         callback2(null)
        //                     }
        //                 }
        //             });
        //         }
        //         else{
        //             final_data.push(i)
        //             callback2(null)
        //         }

        // },function(err) {
        //     if (err) {
        //         callback(err);
        //     }
        //     else{
        //         logger.debug("====final_data=++ENR===============1==>>",final_data)
        //         var order_data=_.sortBy(final_data,'order_id').reverse();
        //         logger.debug("====final_data=++ENR=============2==>>",order_data)
        //         orderHistory=order_data
        //         callback(null)
        //     }
        //   });
        // }
        // else{
        //     callback(null)
        // }
        // }],
        getProductDetails: ['getUpcomingOrderCount', async function (callback) {
            var leng = orderHistory.length, totalProductPrice = 0;
            // logger.debug("======ORDER==HIST==",leng,orderHistory)
            let shipStationData = await Universal.getShippingData(request.dbName);
            var details = {};
            if (leng != 0) {
                for (const [index, i] of orderHistory.entries()) {
                    var result = await getProdcutDetailsV1(request.dbName, reply, i.order_id, i.is_package, i.pricing_type, languageId)
                    if (result.length) {
                        if (orderGrouping && orderGrouping.length > 0) {
                            details.order_ids = i.order_ids.split(",")
                        }
                        details.grouping_id = i.grouping_id
                        logger.debug("=====orderHistory[i].status====", i.status)
                        // 0,1,3,4
                        // if(orderHistory[i].status==1
                        //     || orderHistory[i].status==0
                        //     || orderHistory[i].status==3
                        //     || orderHistory[i].status==4
                        //     || orderHistory[i].status==10
                        //     || orderHistory[i].status==11
                        //     )


                        // {

                        details.total_order_price = await totalOrderPrice(request.dbName, i.order_id)
                        details.delivery_charges = i.delivery_charges;
                        details.referral_amount = orderHistory[index].referral_amount;
                        details.user_service_charge = orderHistory[index].user_service_charge
                        details.shippingData = [];
                        if (Object.keys(shipStationData).length > 0) {
                            // details.shippingData=await Universal.getShippingOrderDetail(shipStationData,"JUSTCBD-"+i.order_id);
                        }
                        details.discountAmount = i.discountAmount;
                        if (i.delivered_on == '0000-00-00 00:00:00') {
                            details.delivered_on = moment(i.schedule_date).format();
                        }
                        else {
                            details.delivered_on = moment(i.delivered_on).format();
                        }
                        // s.name as supplier_name,s.logo as supplier_logo
                        details.supplier_name = orderHistory[0].supplier_name
                        details.supplier_logo = orderHistory[0].supplier_logo

                        details.gift_amount = i.gift_amount
                        details.is_schedule = i.is_schedule
                        details.schedule_end_date = i.schedule_end_date
                        details.handling_admin = i.handling_admin
                        details.progress_on = moment(i.progress_on).format();
                        details.from_latitude = i.from_latitude != undefined && i.from_latitude != "" ? i.from_latitude : 0.0
                        details.to_latitude = i.to_latitude != undefined && i.to_latitude != "" ? i.to_latitude : 0.0
                        details.to_longitude = i.to_longitude != undefined && i.to_longitude != "" ? i.to_longitude : 0.0
                        details.from_longitude = i.from_longitude != undefined && i.from_longitude != "" ? i.from_longitude : 0.0
                        details.handling_supplier = i.handling_supplier
                        details.created_by = i.created_by;
                        details.approve_rejection_reason = i.approve_rejection_reason;
                        details.payment_status = i.payment_status;
                        details.type = i.type;
                        details.payment_after_confirmation = i.payment_after_confirmation;
                        details.duration = i.duration
                        details.self_pickup = i.self_pickup
                        details.type = result[0].type
                        details.terminology = result[0].terminology
                        details.service_type = service_type[0].app_type

                        // details.delivery_charges=orderHistory[i].delivery_charges
                        if (result && result.length > 0) {
                            _.each(result, function (i) {
                                totalProductPrice = totalProductPrice + parseFloat(i.fixed_price)
                            })
                        }
                        details.order_price = parseFloat(totalProductPrice);
                        details.net_amount = i.net_amount - (i.discountAmount) - (orderHistory[index].referral_amount) - (i.wallet_discount_amount);
                        details.tip_agent = i.tip_agent
                        // details.net_amount = parseFloat(orderHistory[i].net_amount);
                        details.order_id = i.order_id;
                        details.area_id = i.area_id;
                        details.supplier_branch_id = i.supplier_branch_id;
                        details.delivery_min_time = i.delivery_min_time;
                        details.delivery_max_time = i.delivery_max_time;
                        details.random_order_id = orderHistory[0].random_order_id
                        // s.delivery_min_time,s.delivery_max_time
                        details.supplier_id = i.id;
                        details.logo = i.logo
                        details.service_date = moment(i.schedule_date).format();
                        // console.log("..............",date)
                        //console.log("..............a",details.service_date)
                        // console.log("=orderHistory[i].is_agent=",orderHistory[i].is_agent)

                        details.status = i.status
                        details.near_on = moment(i.near_on).format();
                        details.shipped_on = moment(i.shipped_on).format();
                        details.schedule_order = i.schedule_order
                        details.shipped_on = moment(i.shipped_on).format();
                        details.payment_type = i.payment_type;
                        details.created_on = moment(i.created_on).format();
                        details.product = result;
                        details.is_agent = i.is_agent;
                        details.addOn = i.addOn
                        details.product_count = result.length;
                        details.measuring_unit = result.measuring_unit;
                        details.user_delivery_address = i.user_delivery_address;
                        details.schedule_order = i.schedule_order;
                        console.log("=======details===========", details)
                        final.push(details);
                        details = {};
                        totalProductPrice = 0
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                        // }
                        // else{
                        //     if(i == (leng-1)){
                        //     callback(null);
                        //     }
                        // }
                    }
                    else {
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                    }
                }

                // for(var i = 0;i<leng;i++){
                //     (function(i){

                //         logger.debug("=====orderHistory[i].order_id====",orderHistory[i].order_id)
                //         // final=[]
                //         getProdcutDetails(request.dbName,reply,orderHistory[i].order_id,orderHistory[i].is_package,orderHistory[i].pricing_type,languageId,function(err,result){
                //             if(err){
                //                 callback(err);
                //             }else{
                //             }
                //         })
                //     }(i));
                // }
            }
            else {
                callback(null);
            }
        }],
        getAddress: ['getProductDetails', function (callback) {
            // logger.debug("======final in getAddress============",final)
            var len = final.length;
            var temp = {};
            if (len != 0) {
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        getAddressAccordingId(request.dbName, reply, final[i].user_delivery_address, function (err, result) {
                            if (err) {
                                callback(err);
                            } else {
                                if (result.length) {
                                    result = result[0];
                                    temp.address_line_1 = result.address_line_1;
                                    temp.address_line_2 = result.address_line_2;
                                    temp.pincode = result.pincode;
                                    temp.city = result.city;
                                    temp.landmark = result.landmark;
                                    final[i].delivery_address = temp;
                                    temp = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                } else {
                                    final[i].delivery_address = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                }
                            }
                        })
                    }(i));
                }
            } else {
                callback(null);
            }
        }],
        final: ['getAddress', function (callback) {
            logger.debug(".......final",);
            // var result=final.sort(func.sort_by('order_id', true, parseInt));
            // logger.debug("+=========result after final==========",result)
            temp.orderHistory = final;
            temp.count = orderCount;
            callback(null);
        }]

    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            // console.log(".............temp...............................",temp);
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}



exports.laundarySupplier = function (request, reply) {

    var areaId;
    var date;
    var time;
    var categoryId;
    var languageId;
    var list = {};
    var supplier;
    console.log("...", request.body);
    async.auto({
        getValue: function (callback) {
            if (!(request.body.date)) {
                var msg = "pick Up Date not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.time)) {
                var msg = "pick up time not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.areaId)) {
                var msg = "area Id time not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.categoryId)) {
                var msg = "category id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.languageId)) {
                var msg = "language id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            date = request.body.date;
            time = request.body.time;
            areaId = request.body.areaId;
            categoryId = request.body.categoryId;
            languageId = request.body.languageId;
            callback(null);
        },
        checkSupplierList: ['getValue', function (callback) {
            laundarySupplier(request.dbName, reply, date, time, areaId, categoryId, languageId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    supplier = result;
                    // list.supplierList = result;
                    callback(null);
                }
            })
        }],
        supplier_banner: ['checkSupplierList', function (callback) {
            var advertisements = 3;
            var sql = 'select distinct(a.supplier_id) as id from advertisements a join ads_sponsor_areas ads on a.id = ads.advertisement_id ' +
                'join supplier_category sc on sc.category_id=ads.category_id join supplier s on s.id = sc.supplier_id join supplier_timings st on ' +
                ' st.supplier_id = s.id join supplier_branch sb on s.id = sb.supplier_id join supplier_delivery_areas sbd on sbd.supplier_id = s.id ' +
                ' join supplier_ml sml on s.id = sml.supplier_id ' +
                ' where sc.category_id = ? ' +
                ' and s.is_live = ? and s.is_active = ? and s.is_deleted = 0 and sbd.area_id = ? and sb.is_live = ? ' +
                ' and sml.language_id = ? and sb.is_deleted = ? and sbd.is_deleted = ? ' +
                ' and st.week_id =? and a.advertisement_type = ? and ads.category_id = ? and ads.area_id = ? and ads.is_deleted =0 ' +
                ' and a.is_deleted =0 and st.is_open IN(?,?) and st.start_time <= ? and st.end_time >= ?';
            multiConnection[dbName].query(sql, [categoryId, 1, 1, areaId, 1, languageId, 0, 0, date, advertisements, categoryId, areaId, 1, 2, time, time], function (err, result) {
                if (err) {
                    console.log("eee", err);
                    var msg = "db error :";
                    return sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if (supplier.length) {
                        if (result.length) {
                            for (var i = 0; i < supplier.length; i++) {
                                (function (i) {
                                    supplier[i].is_sponsor = 0;
                                    for (var j = 0; j < result.length; j++) {
                                        (function (j) {
                                            if (supplier[i].id == result[j].id) {
                                                supplier[i].is_sponsor = 1
                                                if (i == supplier.length - 1 && j == result.length - 1) {
                                                    list.supplierList = supplier;
                                                    callback(null);

                                                }
                                            }
                                            else {
                                                if (i == supplier.length - 1 && j == result.length - 1) {
                                                    list.supplierList = supplier;
                                                    callback(null);

                                                }
                                            }
                                        }(j))
                                    }
                                }(i))
                            }
                        }
                        else {
                            for (var i = 0; i < supplier.length; i++) {
                                (function (i) {
                                    supplier[i].is_sponsor = 0;
                                    if (i == supplier.length - 1) {
                                        list.supplierList = supplier;
                                        callback(null);
                                    }
                                }(i))
                            }
                        }
                    }
                    else {
                        list.supplierList = [];
                        callback(null);
                    }
                }
            })
        }],
        resetPackage: ['supplier_banner', function (callback) {
            if (supplier.length) {
                for (var i = 0; i < supplier.length; i++) {
                    (function (i) {
                        if (supplier[i].onOffComm == 1) {
                            if (supplier[i].is_sponsor == 1) {
                                supplier[i].new_package = 4
                            }
                            else {
                                supplier[i].new_package = 0
                            }
                            supplier[i].commission_package = 3;
                        }
                        else {
                            if (supplier[i].is_sponsor == 1) {
                                supplier[i].new_package = 4
                            }
                            else {
                                supplier[i].new_package = 0
                            }
                            supplier[i].commission_package = 4;

                        }
                        if (i == (supplier.length - 1)) {
                            callback(null);
                        }
                    }(i))
                }
            }
            else {
                callback(null)
            }

        }],
        getPlatinumPackage: ['resetPackage', function (callback) {
            if (supplier.length) {
                getPackage(request.dbName, reply, 2, categoryId, function (err, platinum) {
                    if (err) {
                        console.log("err", err);
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        var len = platinum.length;
                        if (len) {
                            var supplierLength = supplier.length;
                            for (var i = 0; i < supplierLength; i++) {
                                (function (i) {
                                    for (var j = 0; j < len; j++) {
                                        (function (j) {
                                            if (platinum[j].supplier_id == supplier[i].id) {
                                                if (supplier[i].is_sponsor == 0) {
                                                    supplier[i].new_package = 3;
                                                }
                                                supplier[i].commission_package = 2;
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                            else {
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                        }(j))
                                    }
                                }(i))
                            }
                        }
                        else {
                            callback(null)
                        }

                    }
                });
            }
            else {
                callback(null)
            }
        }],
        getGoldPackage: ['resetPackage', function (callback) {
            if (supplier.length) {
                getPackage(request.dbName, reply, 0, categoryId, function (err, gold) {
                    if (err) {
                        console.log("err", err);
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        var len = gold.length;
                        if (len) {
                            var supplierLength = supplier.length;
                            for (var i = 0; i < supplierLength; i++) {
                                (function (i) {
                                    for (var j = 0; j < len; j++) {
                                        (function (j) {
                                            if (gold[j].supplier_id == supplier[i].id) {

                                                if (supplier[i].is_sponsor == 0) {
                                                    supplier[i].new_package = 2;
                                                }
                                                supplier[i].commission_package = 0;
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                            else {
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                        }(j))
                                    }
                                }(i))
                            }
                        }
                        else {
                            callback(null)
                        }

                    }
                });
            }
            else {
                callback(null)
            }
        }],
        getSilverPackage: ['resetPackage', function (callback) {
            if (supplier.length) {
                getPackage(request.dbName, reply, 1, categoryId, function (err, silver) {
                    if (err) {
                        console.log("err", err);
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        var len = silver.length;
                        if (len) {
                            var supplierLength = supplier.length;
                            for (var i = 0; i < supplierLength; i++) {
                                (function (i) {
                                    for (var j = 0; j < len; j++) {
                                        (function (j) {
                                            if (silver[j].supplier_id == supplier[i].id) {
                                                supplier[i].commission_package = 1;
                                                if (supplier[i].is_sponsor == 0) {
                                                    supplier[i].new_package = 1;
                                                }
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                            else {
                                                if (j == (len - 1) && i == (supplierLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                        }(j))
                                    }
                                }(i))
                            }
                        }
                        else {
                            callback(null);
                        }
                    }
                });
            }
            else {
                callback(null)
            }
        }],
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            var data = list.supplierList;
            if (data.length) {
                var result1 = data.sort(func.sort_by('new_package', true, parseInt));
                //console.log("result",result1);
                list.supplierList = result1;
            }
            else {
                list.supplierList = [];
            }


            return sendResponse.sendSuccessData(list, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}



exports.trackOrderList = function (request, reply) {
    var languageId;
    var userId;
    var list = {};
    var accessToken;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            callback(null);
        },
        getCustomerId: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        getList: ['getCustomerId', function (callback) {
            getTrackOrderList(request.dbName, reply, userId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    list.list = result;
                    callback(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(list, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}



/*exports.trackOrder = function(request,reply){
    var accessToken;
    var orderId;
    async.auto({
        getValue:function(callback){
            if(!(request.body.accessToken)){
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg,reply,400);
            }
            if(!(request.body.orderId)){
                var msg = "order Id not found";
                return sendResponse.sendErrorMessage(msg,reply,400);
            }
            accessToken = request.body.accessToken;
            orderId = request.body.orderId;
        }
    },function(err,result){
        if(err){

        }else{

        }
    })
}*/


exports.facebookLogin = function (request, reply) {

    var phoneNo = 0;
    var facebookToken;
    var accessToken;
    var name;
    var email;
    var image;
    var userId;
    var details = {};
    var deviceToken;
    var deviceType;
    var area_id;
    let old_token;
    var dbConnection
    if (request.headers.secretdbkey != undefined && request.headers.secretdbkey != "") {
        var decipher = crypto.createDecipher(algorithm, crypto_password)
        var decDbName = decipher.update(request.headers.secretdbkey, 'hex', 'utf8')
        decDbName += decipher.final('utf8');
        console.log("==DB_NAME==", decDbName)
        dbConnection = multiConnection[decDbName]
    }
    else {
        dbConnection = connection
    }

    async.auto({
        getvalue: async function (callback) {

            let emailData = await ExecuteQ.Query(request.dbName, `select email,id from user where email=?`, [request.body.email])

            if (!(request.body.facebookToken)) {
                var msg = "facebook Token not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.name)) {
                var msg = "name not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            // if(!(request.body.email) && emailData.length<=0){
            //     var msg = "email not found";
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            // if(!(request.body.image)){
            //     var msg = "image not found";
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            if (!(request.body.deviceToken)) {
                var msg = "device token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.deviceType)) {
                var msg = "device type Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (request.body.phoneNo) {
                phoneNo = request.body.phoneNo;
            } else {
                phoneNo = 0;
            }



            accessToken = func.encrypt(request.body.facebookToken + new Date());
            area_id = request.body.areaId;
            facebookToken = request.body.facebookToken;
            image = request.body.image || "";
            email = request.body.email;
            name = request.body.name;
            deviceType = request.body.deviceType;
            deviceToken = request.body.deviceToken;
            callback(null);
        },
        checkExits: ['getvalue', function (callback) {
            checkLoginWithfb(request.dbName, reply, facebookToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    if (result.length) {
                        userId = result[0].id;
                        old_token = result[0].access_token;
                        callback(null);
                    } else {
                        userId = 0;
                        callback(null);
                    }
                }
            })
        }],
        insertData: ['checkExits', function (callback) {
            if (userId == 0) {
                registerUser(request.dbName, reply, facebookToken, name, email, image, phoneNo, 0, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        if (result.insertId) {
                            userId = result.insertId;
                            callback(null);
                        } else {
                            var msg = "something went wrong";
                            return sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                    }
                })
            } else {
                callback(null);
            }
        }],
        getUserData: ['insertData', function (callback) {
            if (userId != 0) {
                getUserData(request.dbName, reply, userId, async function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        if (result.length) {
                            details.notification_status = result[0].notification_status;
                            details.email = result[0].email;
                            details.fb_access_token = result[0].fb_access_token
                            details.google_access_token = result[0].google_access_token
                            details.mobile_no = result[0].mobile_no;
                            details.firstname = result[0].firstname;
                            details.id = result[0].id;
                            details.referral_id = result[0].referral_id;
                            details.user_image = result[0].user_image;
                            details.device_token = result[0].device_token;
                            details.country_code = result[0].country_code;
                            details.device_type = result[0].device_type;
                            details.otp_verified = result[0].otp_verified;
                            details.user_created_id = result[0].user_created_id;
                            details.message_id = result[0].message_id;
                            old_token = accessToken;
                            let rides_registeration_input = {
                                email: email,
                                language_id: 1,
                                access_token: accessToken,
                                fcm_id: details.device_token,
                                name: details.firstname,
                                phone_code: details.country_code,
                                phone_number: details.mobile_no,
                                device_type: details.device_type == 1 ? "Ios" : "android",
                                address: "chandigarh",
                                latitude: request.body.latitude != undefined ? request.body.latitude : 30.7333,
                                longitude: request.body.longitude != undefined ? request.body.longitude : 76.7794,
                                gender: "male",
                                timezone: request.body.zone_offset != undefined && request.body.zone_offset !== "" && request.body.zone_offset != null ? request.body.zone_offset : "+05:30",
                                profile_pic: details.user_image
                            }

                            let user_created_id = randomize('A0', 30);
                            // console.log("===11111111111=uuid=====",user_created_id);
                            let reffer_code = "REF-" + randomstring.generate({
                                length: 5,
                                charset: 'alphabetic'
                            }).toUpperCase();

                            if (details.referral_id == null || details.referral_id == "") {
                                await ExecuteQ.Query(request.dbName, "update user set referral_id=? where id=?", [reffer_code, userId]);
                                details.referral_id = reffer_code
                            }
                            if (details.user_created_id == null || details.user_created_id == "") {
                                await ExecuteQ.Query(request.dbName, "update user set user_created_id=? where id=?", [user_created_id, userId]);
                                details.user_created_id = user_created_id
                            }

                            let rideRegistrationEnable = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_registeration']);

                            logger.debug("====rideRegistrationEnable=", rideRegistrationEnable)
                            if (rideRegistrationEnable && rideRegistrationEnable.length > 0) {
                                let baseUrlRideData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_base_url'])
                                let baseUrl = baseUrlRideData && baseUrlRideData.length > 0 ? baseUrlRideData[0].value : config.get("server.rides.api_link");
                                let dbSecretKeyData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_db_secret_key']);
                                let dbSecretKey = dbSecretKeyData && dbSecretKeyData.length > 0 ? dbSecretKeyData[0].value : "";
                                logger.debug("======baseUrlRideData==baseUrl==dbSecretKey=>>", baseUrlRideData, baseUrl, dbSecretKey);

                                if (parseInt(rideRegistrationEnable[0].value) == 1) {
                                    await common.ridesRegisteration(baseUrl, rides_registeration_input, dbSecretKey);
                                }
                            }

                            callback(null);
                        } else {
                            var msg = "something went wrong";
                            return sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                    }
                })
            } else {
                callback(null)
            }
        }],
        updateAccessToken: ['getUserData', 'insertData', async function (callback) {
            if (userId != 0) {
                if (details.otp_verified == 1) {
                    var sql = "update user set access_token = ?, device_token = ?,device_type = ?,is_logged_in = ?,is_active = 1 where id = ? ";
                }
                else {
                    var sql = "update user set access_token = ?, device_token = ?,device_type = ?,is_logged_in = ?,is_active = 1 where id = ? ";
                }
                let login_datas = {
                    "language_id": 1,
                    "old_token": old_token,
                    "email": email,
                    "latitude": request.body.latitude != undefined ? request.body.latitude : 30.7333,
                    "longitude": request.body.longitude != undefined ? request.body.longitude : 76.7794,
                    "new_token": accessToken
                }
                let rideRegistrationEnable = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_registeration']);
                logger.debug("====rideRegistrationEnable=", rideRegistrationEnable);
                if (rideRegistrationEnable && rideRegistrationEnable.length > 0) {
                    let baseUrlRideData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_base_url'])
                    let baseUrl = baseUrlRideData && baseUrlRideData.length > 0 ? baseUrlRideData[0].value : config.get("server.rides.api_link");
                    let dbSecretKeyData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_db_secret_key']);
                    let dbSecretKey = dbSecretKeyData && dbSecretKeyData.length > 0 ? dbSecretKeyData[0].value : "";
                    logger.debug("======baseUrlRideData==baseUrl==dbSecretKey=>>", baseUrlRideData, baseUrl, dbSecretKey);

                    if (parseInt(rideRegistrationEnable[0].value) == 1) {
                        await common.updateRidesOldToken(baseUrl, login_datas, dbSecretKey);
                    }
                }
            }
            else {
                let login_datas = {
                    "language_id": 1,
                    "old_token": old_token,
                    "email": email,
                    "latitude": request.body.latitude != undefined ? request.body.latitude : 30.7333,
                    "longitude": request.body.longitude != undefined ? request.body.longitude : 76.7794,
                    "new_token": accessToken
                }
                let rideRegistrationEnable = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_registeration']);
                logger.debug("====rideRegistrationEnable=", rideRegistrationEnable);
                if (rideRegistrationEnable && rideRegistrationEnable.length > 0) {
                    let baseUrlRideData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_base_url'])
                    let baseUrl = baseUrlRideData && baseUrlRideData.length > 0 ? baseUrlRideData[0].value : config.get("server.rides.api_link");
                    let dbSecretKeyData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_db_secret_key']);
                    let dbSecretKey = dbSecretKeyData && dbSecretKeyData.length > 0 ? dbSecretKeyData[0].value : "";
                    logger.debug("======baseUrlRideData==baseUrl==dbSecretKey=>>", baseUrlRideData, baseUrl, dbSecretKey);

                    if (parseInt(rideRegistrationEnable[0].value) == 1) {
                        await common.updateRidesOldToken(baseUrl, login_datas, dbSecretKey);
                    }
                }
                var sql = "update user set access_token = ?, device_token = ?,device_type = ?,is_logged_in = ?,is_active = 1 where id = ? ";
            }
            var id = details.id;
            await ExecuteQ.Query(request.dbName, sql, [accessToken, deviceToken, deviceType, 1, id]);
            // multiConnection[request.dbName].query(sql,[accessToken,deviceToken,deviceType,1,id],function(err,result){
            //     if(err){
            //         var msg = "db error :";
            //         sendResponse.sendErrorMessage(msg,reply,500);
            //     }else{
            details.access_token = accessToken;
            callback(null);
            //     }
            // })
        }],
        sendMail: ['getUserData', 'insertData', function (cb) {
            if (userId == 0) {
                emailTemp.userRegister(request, reply, AdminMail, details.firstname, '', details.email, function (err, result) {
                    if (err) {
                        console.log("..****fb register email*****....", err);
                    }
                })
            }
            cb(null);
        }],
        scheduleOrderCount: ['sendMail', function (callback) {
            logger.debug("..................accessToken................", accessToken);
            if (accessToken) {
                logger.debug("==============in 3==========", request.dbName);
                // getScheduleOrders(request.dbName,reply,accessToken,function (err,result) {
                //     if(err){
                //         callback(err);
                //     }
                //     else{
                console.log("********details*******if*********");
                details.scheduleOrders = 0;
                callback(null)
                //     }
                // })
            }
            else {
                logger.debug("**********************details**************else**********");
                details.scheduleOrders = 0;
                callback(null);
            }

        }],
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(details, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.googleLogin = function (request, reply) {
    var phoneNo = 0;
    var googleToken;
    var accessToken;
    var name;
    var email;
    var image;
    var userId;
    var is_active;
    var details = {};
    var deviceToken;
    var deviceType;
    var area_id;
    let old_token;
    async.auto({
        getvalue: function (callback) {
            if (!(request.body.googleToken)) {
                var msg = "google Token not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.name)) {
                var msg = "name not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.email)) {
                var msg = "email not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            // if(!(request.body.image)){
            //     var msg = "image not found";
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            if (!(request.body.deviceToken)) {
                var msg = "device token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.deviceType)) {
                var msg = "device type Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (request.body.phoneNo) {
                phoneNo = request.body.phoneNo;
            } else {
                phoneNo = 0;
            }



            accessToken = func.encrypt(request.body.facebookToken + new Date());
            area_id = request.body.areaId;
            googleToken = request.body.googleToken;
            image = request.body.image || "";
            email = request.body.email;
            name = request.body.name;
            deviceType = request.body.deviceType;
            deviceToken = request.body.deviceToken;
            callback(null);
        },
        checkExits: ['getvalue', function (callback) {
            checkLoginWithGoogle(request.dbName, reply, googleToken, email, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    if (result && result.length > 0) {
                        is_active = result[0].is_active;
                        userId = result[0].id;
                        old_token = result[0].access_token;
                        callback(null);
                    } else {
                        userId = 0;
                        callback(null);
                    }
                }
            })
        }],
        insertData: ['checkExits', function (callback) {
            if (userId == 0) {
                registerUserV1(request.dbName, reply, googleToken, name, email, image, phoneNo, 0, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        if (result.insertId) {
                            userId = result.insertId;
                            callback(null);
                        } else {
                            var msg = "something went wrong";
                            return sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                    }
                })
            } else {
                callback(null);
            }
        }],
        getUserData: ['insertData', function (callback) {
            if (userId != 0) {
                // if (!is_active) {
                //     var msg = "This user is not active";
                //     return sendResponse.sendErrorMessage(msg,reply,500);
                // }

                getUserData(request.dbName, reply, userId, async function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        if (result.length) {
                            details.notification_status = result[0].notification_status;
                            details.email = result[0].email;
                            details.google_access_token = result[0].google_access_token;
                            details.fb_access_token = result[0].fb_access_token;
                            details.mobile_no = result[0].mobile_no;
                            details.firstname = result[0].firstname;
                            details.id = result[0].id;
                            details.user_image = result[0].user_image;
                            details.referral_id = result[0].referral_id;
                            details.device_token = result[0].device_token;
                            details.country_code = result[0].country_code;
                            details.device_type = result[0].device_type;
                            details.otp_verified = result[0].otp_verified;
                            details.user_created_id = result[0].user_created_id;
                            old_token = accessToken;

                            let rides_registeration_input = {
                                email: email,
                                language_id: 1,
                                access_token: accessToken,
                                fcm_id: details.device_token,
                                name: details.firstname,
                                phone_code: details.country_code,
                                phone_number: details.mobile_no,
                                device_type: details.device_type == 1 ? "Ios" : "android",
                                address: "chandigarh",
                                latitude: request.body.latitude != undefined ? request.body.latitude : 30.7333,
                                longitude: request.body.longitude != undefined ? request.body.longitude : 76.7794,
                                gender: "male",
                                timezone: request.body.zone_offset != undefined && request.body.zone_offset !== "" && request.body.zone_offset != null ? request.body.zone_offset : "+05:30",
                                profile_pic: details.user_image
                            }

                            let rideRegistrationEnable = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_registeration']);

                            logger.debug("====rideRegistrationEnable=", rideRegistrationEnable)

                            if (rideRegistrationEnable && rideRegistrationEnable.length > 0) {
                                let baseUrlRideData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_base_url'])
                                let baseUrl = baseUrlRideData && baseUrlRideData.length > 0 ? baseUrlRideData[0].value : config.get("server.rides.api_link");
                                let dbSecretKeyData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_db_secret_key']);
                                let dbSecretKey = dbSecretKeyData && dbSecretKeyData.length > 0 ? dbSecretKeyData[0].value : "";
                                logger.debug("======baseUrlRideData==baseUrl==dbSecretKey=>>", baseUrlRideData, baseUrl, dbSecretKey);

                                if (parseInt(rideRegistrationEnable[0].value) == 1) {
                                    await common.ridesRegisteration(baseUrl, rides_registeration_input, dbSecretKey);
                                }
                            }

                            callback(null);

                        } else {
                            var msg = "something went wrong";
                            return sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                    }
                })
            } else {
                callback(null)
            }
        }],
        updateAccessToken: ['getUserData', 'insertData', async function (callback) {
            if (userId != 0) {
                if (details.otp_verified == 1) {
                    var sql = "update user set access_token = ?, device_token = ?,device_type = ?,is_logged_in = ?,is_active = 1 where id = ? ";
                }
                else {
                    var sql = "update user set access_token = ?, device_token = ?,device_type = ?,is_logged_in = ?,is_active = 1 where id = ? ";
                }
                let login_datas = {
                    "language_id": 1,
                    "old_token": old_token,
                    "email": email,
                    "latitude": request.body.latitude != undefined ? request.body.latitude : 30.7333,
                    "longitude": request.body.longitude != undefined ? request.body.longitude : 76.7794,
                    "new_token": accessToken
                }
                let rideRegistrationEnable = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_registeration']);
                logger.debug("====rideRegistrationEnable=", rideRegistrationEnable);
                if (rideRegistrationEnable && rideRegistrationEnable.length > 0) {
                    let baseUrlRideData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_base_url'])
                    let baseUrl = baseUrlRideData && baseUrlRideData.length > 0 ? baseUrlRideData[0].value : config.get("server.rides.api_link");
                    let dbSecretKeyData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_db_secret_key']);
                    let dbSecretKey = dbSecretKeyData && dbSecretKeyData.length > 0 ? dbSecretKeyData[0].value : "";
                    logger.debug("======baseUrlRideData==baseUrl==dbSecretKey=>>", baseUrlRideData, baseUrl, dbSecretKey);

                    if (parseInt(rideRegistrationEnable[0].value) == 1) {
                        await common.updateRidesOldToken(baseUrl, login_datas, dbSecretKey);
                    }
                }
            }
            else {
                let login_datas = {
                    "language_id": 1,
                    "old_token": old_token,
                    "email": email,
                    "latitude": request.body.latitude != undefined ? request.body.latitude : 30.7333,
                    "longitude": request.body.longitude != undefined ? request.body.longitude : 76.7794,
                    "new_token": accessToken
                }
                let rideRegistrationEnable = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_registeration']);
                logger.debug("====rideRegistrationEnable=", rideRegistrationEnable);
                if (rideRegistrationEnable && rideRegistrationEnable.length > 0) {
                    let baseUrlRideData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_base_url'])
                    let baseUrl = baseUrlRideData && baseUrlRideData.length > 0 ? baseUrlRideData[0].value : config.get("server.rides.api_link");
                    let dbSecretKeyData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=?", ['ride_db_secret_key']);
                    let dbSecretKey = dbSecretKeyData && dbSecretKeyData.length > 0 ? dbSecretKeyData[0].value : "";
                    logger.debug("======baseUrlRideData==baseUrl==dbSecretKey=>>", baseUrlRideData, baseUrl, dbSecretKey);

                    if (parseInt(rideRegistrationEnable[0].value) == 1) {
                        await common.updateRidesOldToken(baseUrl, login_datas, dbSecretKey);
                    }
                }
                var sql = "update user set access_token = ?, device_token = ?,device_type = ?,is_logged_in = ?,is_active = 1 where id = ? ";
            }
            var id = details.id;
            await ExecuteQ.Query(request.dbName, sql, [accessToken, deviceToken, deviceType, 1, id]);
            details.access_token = accessToken;
            callback(null);

        }],
        sendMail: ['getUserData', 'insertData', function (cb) {
            if (userId == 0) {
                emailTemp.userRegister(request, reply, AdminMail, details.firstname, '', details.email, function (err, result) {
                    if (err) {
                        console.log("..****fb register email*****....", err);
                    }
                })
            }
            cb(null);
        }],
        scheduleOrderCount: ['sendMail', function (callback) {
            logger.debug("..................accessToken................", accessToken);
            if (accessToken) {
                logger.debug("==============in 3==========", request.dbName);
                details.scheduleOrders = 0;
                callback(null)
            }
            else {
                logger.debug("**********************details**************else**********");
                details.scheduleOrders = 0;
                callback(null);
            }

        }],
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(details, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.packageCategory = function (request, reply) {
    var areaId;
    var languageId;
    var Json;
    var data = [];
    var details = {};
    var time = new Date()
    var time1 = new Date(time);
    time1.setMinutes(time.getMinutes() + 00);
    time1.setHours(time.getHours() + 4);
    var time2 = time1.toTimeString().split(" ")[0]

    async.auto({
        getValue: function (callback) {
            if (!(request.body.areaId)) {
                var msg = "area Id found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            areaId = request.body.areaId;
            languageId = request.body.languageId;
            console.log("...1.......", request.body)
            callback(null);
        },
        getCategory: ['getValue', function (callback) {
            console.log("......2.......")
            getCategoryPackage(request.dbName, reply, areaId, languageId, function (err, result) {
                console.log(".....e.r...", err, result)
                if (err) {
                    callback(err);
                } else {
                    if (result.length) {
                        for (var i = 0; i < result.length; i++) {
                            (function (i) {
                                if (result[i].status) {
                                    if (result[i].start_time <= time2 && result[i].end_time >= time2) {
                                        if (i == result.length - 1) {
                                            Json = result;
                                            callback(null);
                                        }
                                    }
                                    else {
                                        result[i].status = 0;
                                        if (i == result.length - 1) {
                                            Json = result;
                                            callback(null);
                                        }
                                    }
                                }
                                else {
                                    if (i == result.length - 1) {
                                        Json = result;
                                        callback(null);
                                    }
                                }

                            }(i))
                        }

                    }
                    else {
                        Json = []
                        callback(null);
                    }
                }
            })
        }],
        manageJson: ['getCategory', function (callback) {
            // console.log("..........",Json)
            if (Json.length) {
                var len = Json.length;
                var len1 = Json.length;
                var k = 0;
                /*  var len = Json.length;
                    console.log("...............manage category json length......................",len);
                  for(var i = 0;i < len;i++){
                      (function(i){
                          var temp = [];
                          Json[i].category = [];
                          var tt = Json[i].category;
                          /!*               tt.push({category_name:Json[i].name,category_id:Json[i].category_id});*!/
                          temp.push(Json[i]);
                          for(var k = (i);k < (i+1);k++){
                              (function(k){
                                  if(Json[(i)].supplier_name == Json[k].supplier_name){
                                      tt.push({category_name:Json[k].name,category_id:Json[k].category_id,category_flow:Json[k].category_flow,order:Json[k].order});
                                  }
                              }(k));
                              data.push(Json[i]);
                              temp = [];
                          }
                      }(i));
                  }
                  if(i == len){
                      details.supplierList = data;
                      callback(null);
                  }*/
                for (var i = 0; i < len; i++) {

                    Json[i].category = [];
                    for (var j = i; j < len1; j++) {
                        (function (j) {
                            if (Json[i].supplier_id == Json[j].supplier_id) {
                                k = j;
                                (Json[i].category).push({ category_name: Json[j].name, category_id: Json[j].category_id, category_flow: Json[j].category_flow, order: Json[j].order })
                                if (j == (len1 - 1)) {
                                    data.push(Json[i]);
                                    i = k;
                                    if (i == (len - 1)) {
                                        console.log("..finish..");
                                        details.supplierList = data;
                                        callback(null);
                                    }

                                }
                            }
                            else {
                                if (j == (len1 - 1)) {
                                    data.push(Json[i]);
                                    i = k;
                                    if (i == (len - 1)) {
                                        details.supplierList = data;
                                        callback(null);
                                    }
                                }
                            }
                        }(j))
                    }
                }
            }
            else {
                callback(null)
            }

        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({ list: data }, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.packageProduct = function (request, reply) {
    var areaId;
    var languageId;
    var supplierBranchId;
    var categoryId;
    var details = {};
    console.log(".....", request.body)
    async.auto({
        getValue: function (callback) {
            if (!(request.body.areaId)) {
                var msg = "area Id found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.supplierBranchId)) {
                var msg = "supplier-BranchId not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.categoryId)) {
                var msg = "category Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            areaId = request.body.areaId;
            languageId = request.body.languageId;
            supplierBranchId = request.body.supplierBranchId;
            categoryId = request.body.categoryId;
            callback(null);
        },
        getProductList: ['getValue', function (callback) {
            getPackageList(request.dbName, reply, supplierBranchId, categoryId, languageId, areaId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    console.log("...............", result)
                    details.list = result;
                    callback(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(details, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}




function currencyAccCountry(dbName, res, countryId, callback) {
    var sql = " select c.id,c.conversion_rate ,c.currency_name,c.currency_symbol,c.currency_description from currency_country cc join currency_conversion c ";
    sql += " on cc.currency_conversion_id = c.id where cc.country_id = ? ";

    multiConnection[dbName].query(sql, [countryId], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }

    })

}

function productDetails(res, languageId, cateDetailId, callback) {
    var sql = "select p.bar_code ,p.product_desc ,p.sku ,p.recurring_possible, pi.image_path, pl.name from product p join product_image pi ";
    sql += " on p.id = pi.product_id join product_ml pl on p.id = pl.product_id ";
    sql += " where pl.language_id = ? and p.is_live = ? and p.category_id = ?"

    multiConnection[dbName].query(sql, [languageId, 1, cateDetailId], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }

    })
}


function getsubcategorySuppliersD(dbName, res, supplierId, languageId, subcategoryId, callback) {
    var sql = "select c.image ,c.icon,ml.name from supplier_category sc join categories c on c.id = sc.detailed_sub_category_id ";
    sql += " join categories_ml ml on c.id = ml.category_id where ml.language_id = ? and c.is_live = ? ";
    sql += " and sc.supplier_id = ? and sc.sub_category_id = ?";

    multiConnection[dbName].query(sql, [languageId, 1, supplierId, subcategoryId], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }

    })

}


function getSubcategoryDetails(dbName, res, languageId, subcategoryId, callback) {
    var sql = "select c.image, c.icon, ml.name from categories c join categories_ml ml ";
    sql += " on c.id = ml.category_id ";
    sql += " where c.parent_id = ? and ml.language_id = ? and c.is_live = ?";
    multiConnection[dbName].query(sql, [subcategoryId, languageId, 1], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }

    })
}



async function languageLists(dbName, res, callback) {
    try {
        var sql = "select id,language_code,language_name,language_code,rtl,country_code from language ";
        sql += " where is_live = ?";
        let result = await ExecuteQ.Query(dbName, sql, [1]);
        // multiConnection[dbName].query(sql, [1], function (err, result) {
        //     if (err) {
        //         console.log("errrrr2",err);

        //         var msg = "something went wrong";
        //         sendResponse.sendErrorMessage(msg,res,500);
        //     }
        //     else {
        callback(null, result);
        //     }

        // })
    }
    catch (Err) {
        var msg = "something went wrong";
        sendResponse.sendErrorMessage(msg, res, 500);
    }
}

function areaLists(dbName, res, zoneId, languageId, callback) {
    var sql = "select ar.id,arml.name from area ar join area_ml arml ";
    sql += " on ar.id = arml.area_id ";
    sql += " where ar.is_live = ? and ar.is_deleted = ? and ar.zone_id IN (" + zoneId + ") and arml.language_id = ? order by arml.name ";

    multiConnection[dbName].query(sql, [1, 0, languageId], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }

    })

}
function areaListsMl(dbName, res, zoneId, callback) {
    var sql = "select ar.id,arml.name,arml.language_id from area ar join area_ml arml ";
    sql += " on ar.id = arml.area_id ";
    sql += " where ar.is_live = ? and ar.is_deleted = ? and ar.zone_id IN (" + zoneId + ") order by arml.name ";
    multiConnection[dbName].query(sql, [1, 0], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }

    })

}

function zoneLists(dbName, res, cityId, languageId, callback) {
    var sql = "select zo.id,zoml.name from zone zo join zone_ml zoml ";
    sql += "  on zo.id = zoml.zone_id "
    sql += " where zo.is_live = ? and zo.is_deleted = ? and zo.city_id = ? and zoml.language_id = ?";

    multiConnection[dbName].query(sql, [1, 0, cityId, languageId], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }

    })

}


function cityLists(dbName, res, countryId, languageId, callback) {
    var sql = "select ct.id,ctml.name from city ct join city_ml ctml ";
    sql += " on ct.id = ctml.city_id ";
    sql += " where ct.is_live = ? and ct.is_deleted = ? and ct.country_id = ? and ctml.language_id = ?";

    multiConnection[dbName].query(sql, [1, 0, countryId, languageId], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }

    })

}

function cityListsMl(dbName, res, countryId, languageId, callback) {
    var sql = "select ct.id,ctml.name,ctml.language_id from city ct join city_ml ctml ";
    sql += " on ct.id = ctml.city_id ";
    sql += " where ct.is_live = ? and ct.is_deleted = ? and ct.country_id = ? ";
    multiConnection[dbName].query(sql, [1, 0, countryId], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }

    })

}

function countryLists(dbName, res, languageId, callback) {
    var sql = "select cn.id,cnml.name from country cn join country_ml cnml ";
    sql += " on cn.id = cnml.country_id ";
    sql += " where cn.is_live = ? and cn.is_deleted = ? and cnml.language_id = ?";

    multiConnection[dbName].query(sql, [1, 0, languageId], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            // console.log("====RESULT==",result);
            callback(null, result);
        }

    })
}
function countryListsMl(dbName, res, callback) {
    var sql = "select cn.id,cnml.name,cnml.language_id from country cn join country_ml cnml ";
    sql += " on cn.id = cnml.country_id ";
    sql += " where cn.is_live = ? and cn.is_deleted = ?";
    multiConnection[dbName].query(sql, [1, 0], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            // console.log("====RESULT==",result);
            callback(null, result);
        }
    })
}


async function categoryListing(dbName, res, languageId, dbConnection, latitude, longitude, categoryId, callback) {
    try {

        var cat_data = await Universal.AllParentCat(dbName, languageId, undefined, 0, categoryId);

        // var cat_data=await Universal.AllParentCatByLocation(dbName,languageId,dbConnection,latitude,longitude);
        // var supplier_cat_data=await AllSuppParentCat(req.dbName,req.query.language_id,suppier_id);
        var all_sub_cat = await Universal.AllSubCat(dbName, languageId, 0, undefined);

        var final_data = await Universal.finalCatData(cat_data, all_sub_cat);
        callback(null, final_data);
    }
    catch (err) {
        logger.error(err);
        sendResponse.somethingWentWrongError(res);
    }

    // var sql = "select distinct cml.name,st.delivery_radius,ct.is_quantity,sb.id as supplier_branch_id, ct.is_agent, ct.type, ct.agent_list, ct.order, ct.new_order, ct.id, ct.supplier_placement_level, ct.image, ct.icon, "
    //    sql += "cml.description, ct.category_flow, (6371 * acos (cos ( radians("+latitude+") )* cos( radians( st.latitude ) )* cos( radians( st.longitude ) - radians("+longitude+") ) "
    //    sql += "+ sin ( radians("+latitude+") )* sin( radians( st.latitude ) ))) AS distance,st.latitude,st.longitude from categories ct "
    //    sql += "join categories_ml cml on ct.id = cml.category_id join supplier_category  sc on sc.category_id = ct.id join supplier st on st.id = sc.supplier_id  join supplier_branch sb on sb.supplier_id = st.id "
    //    sql += "where ct.parent_id = ? and ct.is_deleted = ? and ct.is_live = ? and cml.language_id = ? and is_default = ? group by cml.name having distance<st.delivery_radius order by new_order "

    // // logger.debug(dbConnection)
    // var stmt = multiConnection[dbName].query(sql, [0,0,1,languageId,0], function (err, result) {
    //     logger.debug("==============query============category_listing=====",stmt.sql)
    //     if (err) {
    //         console.log("--------------------hew-------------",err)
    //         var msg = "something went wrong";
    //         sendResponse.sendErrorMessage(msg,res,500);
    //     }
    //     else {
    //         callback(null, result);
    //     }
    // })

}
async function categoryListingV1(req, dbName, res, languageId,
    dbConnection, latitude, longitude, categoryId, requiredSettingArray, callback) {
    try {
        let disable_sub_category = req.query.disable_sub_category != undefined ? parseInt(req.query.disable_sub_category) : 0
        //let categorySData=await ExecuteQ.Query(dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["category_sequence","1"]);

        console.log("===========cate id==========2=====", categoryId)
        var cat_data = await Universal.AllParentCatV1(dbName, languageId, undefined, 0, categoryId, requiredSettingArray);
        let all_sub_cat = []

        if (disable_sub_category == 1) {
            // var cat_data=await Universal.AllParentCatByLocation(dbName,languageId,dbConnection,latitude,longitude);
            // var supplier_cat_data=await AllSuppParentCat(req.dbName,req.query.language_id,suppier_id);
            all_sub_cat = []
        }
        else {
            all_sub_cat = await Universal.AllSubCatV1(dbName, languageId, 0, undefined, requiredSettingArray);
        }
        console.log(cat_data, "cat_datacat_data");
        console.log(all_sub_cat, "all_sub_catall_sub_cat")
        var final_data = await Universal.finalCatData(cat_data, all_sub_cat);

        final_data = _.sortBy(final_data, 'sequence_no')

        let enableCategoryGeofence = requiredSettingArray && requiredSettingArray['enable_geofence_wise_categories'] ? requiredSettingArray['enable_geofence_wise_categories'] : [];


        if (enableCategoryGeofence && enableCategoryGeofence.length > 0) {
            if (final_data && final_data.length > 0) {
                let finalResult = [];
                for (const [index, i] of final_data.entries()) {
                    let result = await Universal.checkLocationWiseCategories(dbName, latitude, longitude,
                        i.id)

                    if (result && result.length > 0) {
                        finalResult.push(i);
                    }

                }
                callback(null, finalResult);
            } else {
                callback(null, [])
            }
        } else {
            callback(null, final_data);
        }
    }
    catch (err) {
        logger.error(err);
        sendResponse.somethingWentWrongError(res);
    }

    // var sql = "select distinct cml.name,st.delivery_radius,ct.is_quantity,sb.id as supplier_branch_id, ct.is_agent, ct.type, ct.agent_list, ct.order, ct.new_order, ct.id, ct.supplier_placement_level, ct.image, ct.icon, "
    //    sql += "cml.description, ct.category_flow, (6371 * acos (cos ( radians("+latitude+") )* cos( radians( st.latitude ) )* cos( radians( st.longitude ) - radians("+longitude+") ) "
    //    sql += "+ sin ( radians("+latitude+") )* sin( radians( st.latitude ) ))) AS distance,st.latitude,st.longitude from categories ct "
    //    sql += "join categories_ml cml on ct.id = cml.category_id join supplier_category  sc on sc.category_id = ct.id join supplier st on st.id = sc.supplier_id  join supplier_branch sb on sb.supplier_id = st.id "
    //    sql += "where ct.parent_id = ? and ct.is_deleted = ? and ct.is_live = ? and cml.language_id = ? and is_default = ? group by cml.name having distance<st.delivery_radius order by new_order "

    // // logger.debug(dbConnection)
    // var stmt = multiConnection[dbName].query(sql, [0,0,1,languageId,0], function (err, result) {
    //     logger.debug("==============query============category_listing=====",stmt.sql)
    //     if (err) {
    //         console.log("--------------------hew-------------",err)
    //         var msg = "something went wrong";
    //         sendResponse.sendErrorMessage(msg,res,500);
    //     }
    //     else {
    //         callback(null, result);
    //     }
    // })

}
// async function categoryListingV1(req,dbName,res,languageId,dbConnection,latitude,longitude,categoryId,callback){
//     try{
//         let disable_sub_category=req.query.disable_sub_category!=undefined?parseInt(req.query.disable_sub_category):0


//         var cat_data=await Universal.AllParentCat(dbName,languageId,undefined,0,categoryId);
//         let all_sub_cat=[]

//         if(disable_sub_category==1){
//             // var cat_data=await Universal.AllParentCatByLocation(dbName,languageId,dbConnection,latitude,longitude);
//             // var supplier_cat_data=await AllSuppParentCat(req.dbName,req.query.language_id,suppier_id);
//                 all_sub_cat=[]
//         }
//         else{
//             all_sub_cat=await Universal.AllSubCat(dbName,languageId,0,undefined);
//         }

//         var final_data=await Universal.finalCatData(cat_data,all_sub_cat);
//         final_data = _.sortBy(final_data,'sequence_no')

//         callback(null, final_data);
//     }
//     catch(err){
//         logger.error(err);
//         sendResponse.somethingWentWrongError(res);
//     }

//     // var sql = "select distinct cml.name,st.delivery_radius,ct.is_quantity,sb.id as supplier_branch_id, ct.is_agent, ct.type, ct.agent_list, ct.order, ct.new_order, ct.id, ct.supplier_placement_level, ct.image, ct.icon, "
//     //    sql += "cml.description, ct.category_flow, (6371 * acos (cos ( radians("+latitude+") )* cos( radians( st.latitude ) )* cos( radians( st.longitude ) - radians("+longitude+") ) "
//     //    sql += "+ sin ( radians("+latitude+") )* sin( radians( st.latitude ) ))) AS distance,st.latitude,st.longitude from categories ct "
//     //    sql += "join categories_ml cml on ct.id = cml.category_id join supplier_category  sc on sc.category_id = ct.id join supplier st on st.id = sc.supplier_id  join supplier_branch sb on sb.supplier_id = st.id "
//     //    sql += "where ct.parent_id = ? and ct.is_deleted = ? and ct.is_live = ? and cml.language_id = ? and is_default = ? group by cml.name having distance<st.delivery_radius order by new_order "

//     // // logger.debug(dbConnection)
//     // var stmt = multiConnection[dbName].query(sql, [0,0,1,languageId,0], function (err, result) {
//     //     logger.debug("==============query============category_listing=====",stmt.sql)
//     //     if (err) {
//     //         console.log("--------------------hew-------------",err)
//     //         var msg = "something went wrong";
//     //         sendResponse.sendErrorMessage(msg,res,500);
//     //     }
//     //     else {
//     //         callback(null, result);
//     //     }
//     // })

// }

function appVersion(res, callback) {
    var sql = "select ios_version,android_version,is_forced_ios,is_forced_android from user_app_version ORDER BY id DESC LIMIT 1"
    multiConnection[dbName].query(sql, [], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }

    })


}


async function supplierDetail(dbName, res, supplierId, languageId, branchId, categoryId, callback) {
    try {
        var sql = " select sb.min_order,sb.delivery_charges,sc.onOffComm,s.nationality,s.facebook_link,s.linkedin_link,s.brand,s.speciality,s.iso,s.phone,s.country_code,s.description,s.delivery_prior_total_time as delivery_prior_time,s.delivery_min_time,s.delivery_max_time,s.urgent_delivery_time,s.supplier_image," +
            "s.logo,s.business_start_date,s.rating,s.total_reviews,s.status,s.email,s.trade_license_no,s.urgent_type,s.urgent_price,s.is_urgent,s.total_reviews, " +
            " s.rating,s.payment_method,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address, " +
            "if((select Count(*) from supplier_branch where supplier_branch.supplier_id=" + connection.escape(supplierId) + " and supplier_branch.is_deleted=0)>1,1,0) as is_multi_branch  from supplier s join supplier_ml sml on s.id = sml.supplier_id join supplier_branch sb on s.id = sb.supplier_id " +
            " join supplier_category sc on sc.supplier_id = s.id " +
            " where s.id = ? and sb.id = ? and sml.language_id  = ? GROUP BY sb.id";
        let result = await ExecuteQ.Query(dbName, sql, [supplierId, branchId, languageId])

        callback(null, result);

    }
    catch (Err) {
        var msg = "something went wrong";
        sendResponse.sendErrorMessage(msg, res, 500);
    }
}

async function getSupplierSubcategory(dbName, res, supplierId, languageId, categoryId, callback) {
    var sql = "select ml.category_id as sub_category_id,ml.category_id as  category_id,IF((select count(*)  from questions where questions.category_id=ml.category_id) > 0,1,0 ) as is_question,c.image ,ml.description,c.icon,ml.name,c.id, c.menu_type,IF ((select count(*) from categories cts where cts.parent_id=ml.category_id and cts.is_deleted=0)>0, 1, 0) as is_subcategory from supplier_category " +
        " sc join categories c on  sc.sub_category_id = c.id ";
    sql += "join categories_ml ml on sc.sub_category_id = ml.category_id where ml.language_id = ? and c.is_live = ? ";
    sql += " and sc.supplier_id = ? and sc.category_id = ? and c.is_deleted = ? and c.id !=" + parseInt(categoryId) + " UNION ";

    sql += " select ml.category_id as sub_category_id,ml.category_id as  category_id,IF((select count(*)  from questions where questions.category_id=ml.category_id) > 0,1,0 ) as is_question,c.image ,ml.description,c.icon,ml.name,c.id, c.menu_type,IF ((select count(*) from categories cts where cts.parent_id=ml.category_id and cts.is_deleted=0)>0, 1, 0) as is_subcategory from supplier_category " +
        " sc join categories c on  sc.detailed_sub_category_id	 = c.id ";
    sql += "join categories_ml ml on sc.detailed_sub_category_id = ml.category_id where ml.language_id = ? and c.is_live = ? ";
    sql += " and sc.supplier_id = ? and sc.detailed_sub_category_id = ? and c.is_deleted = ? and c.id !=" + parseInt(categoryId) + " UNION ";

    sql += "select ml.category_id as sub_category_id,ml.category_id as  category_id,IF((select count(*)  from questions where questions.category_id=ml.category_id) > 0,1,0 ) as is_question,c.image ,ml.description,c.icon,ml.name,c.id, c.menu_type,IF ((select count(*) from categories cts where cts.parent_id=ml.category_id and cts.is_deleted=0)>0, 1, 0) as is_subcategory from supplier_category " +
        " sc join categories c on  sc.detailed_sub_category_id = c.id ";
    sql += "join categories_ml ml on sc.detailed_sub_category_id = ml.category_id where ml.language_id = ? and c.is_live = ? ";
    sql += " and sc.supplier_id = ? and sc.sub_category_id = ? and c.is_deleted = ?  and c.id !=" + parseInt(categoryId) + " ";

    try {
        let result = await ExecuteQ.Query(dbName, sql, [languageId, 1, supplierId, categoryId, 0, languageId, 1, supplierId, categoryId, 0, languageId, 1, supplierId, categoryId, 0]);
        callback(null, result);

    }
    catch (Err) {
        var msg = "something went wrong";
        sendResponse.sendErrorMessage(msg, res, 500);
    }

}

const getSupplierSubcategoryV1 = (dbName, res, supplier_id, languageId, cat_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            let subIds = [], catData = [];
            let subCateData = await ExecuteQ.Query(dbName, `select id,parent_id from categories where parent_id=?`, [cat_id]);
            if (subCateData && subCateData.length > 0) {
                for (const [index, i] of subCateData.entries()) {
                    subIds.push(i.id)
                }
            }
            let supplierCateData;
            if (subIds && subIds.length > 0) {
                for (const [index, i] of subIds.entries()) {
                    let isUptoSubCate = await ExecuteQ.Query(dbName, `select detailed_sub_category_id,sub_category_id
                from supplier_category sc where  sc.sub_category_id=? or sc.detailed_sub_category_id=?   and supplier_id=?`, [i, i, supplier_id]);
                    if (isUptoSubCate && isUptoSubCate.length > 0) {
                        if (parseInt(isUptoSubCate[0].detailed_sub_category_id) != 0 && parseInt(isUptoSubCate[0].sub_category_id) == cat_id) {
                            sql = `select ml.category_id as sub_category_id,IF((select count(*)  from questions where questions.category_id=ml.category_id) > 0,1,0 ) as is_question,c.image ,ml.description,c.icon,ml.name,c.id,IF ((select count(*) from categories cts where cts.parent_id=ml.category_id and cts.is_deleted=0)>0, 1, 0) as is_subcategory from supplier_category sc inner join categories c on c.id=sc.detailed_sub_category_id 
                        join categories_ml ml on c.id=ml.category_id where sc.detailed_sub_category_id=? and  sc.supplier_id=? and c.is_deleted=? and ml.language_id = ? group by name`
                            supplierCateData = await ExecuteQ.Query(dbName, sql, [i, supplier_id, 0, languageId]);
                            if (supplierCateData && supplierCateData.length > 0) {
                                catData.push(supplierCateData[0])
                            }

                        }
                        else {
                            sql = `select ml.category_id as sub_category_id,IF((select count(*)  from questions where questions.category_id=ml.category_id) > 0,1,0 ) as is_question,c.image ,ml.description,c.icon,ml.name,c.id,IF ((select count(*) from categories cts where cts.parent_id=ml.category_id and cts.is_deleted=0)>0, 1, 0) as is_subcategory from supplier_category sc inner join categories c on c.id=sc.sub_category_id 
                        join categories_ml ml on c.id=ml.category_id where sc.sub_category_id=?   and  sc.supplier_id=? and c.is_deleted=? and ml.language_id = ? group by name`

                            supplierCateData = await ExecuteQ.Query(dbName, sql, [i, supplier_id, 0, languageId]);
                            if (supplierCateData && supplierCateData.length > 0) {
                                catData.push(supplierCateData[0])
                            }

                        }
                    }
                    if (index == subIds.length - 1) {
                        resolve(catData)
                    }
                }
            }
            else {
                resolve(catData)
            }
        }
        catch (Err) {
            logger.debug("=====ERR!==", Err)
        }
    })


}


async function getSubCategoryDetails(dbName, res, languageId, categoryId, callback) {
    try {
        var sql = "select c.id sub_category_id,c.id category_id,c.image,c.icon,ml.name,ml.description, c.menu_type,IF ((select count(*) from categories cts where cts.parent_id=c.id and cts.is_deleted=0)>0, 1, 0) as is_subcategory from categories c join categories_ml ml ";
        sql += " on c.id = ml.category_id ";
        sql += " where c.parent_id = ? and ml.language_id = ? and c.is_deleted  = 0 and c.is_live = ?";
        let result = await ExecuteQ.Query(dbName, sql, [categoryId, languageId, 1]);
        callback(null, result);
    }
    catch (Err) {
        var msg = "something went wrong";
        sendResponse.sendErrorMessage(msg, res, 500);
    }

}

async function getFrontAd(req, dbName, res, dbConnection, latitude, longitude, offset, categoryId, requiredSettingArray, callback) {
    let mUnit = await Universal.getMeausringUnitV1(dbName, requiredSettingArray);

    var current_time = moment().utcOffset(offset).format('YYYY-MM-DD');
    if (parseInt(categoryId) == 0) {
        var sql = "select s.delivery_radius,s.name as supplier_name,a.id,a.flow_banner_type,cc.type,cc.menu_type,cc.name as category_name, cc.category_order, cc.supplier_placement_level, cc.category_flow,a.category_id, a.banner_type,a.branch_id, a.category_id, IF((select count(*) from categories where parent_id = a.category_id),1,0) as is_subcategory, a.phone_image,"
        sql += "a.phone_video,a.website_video,a.website_image,a.name, a.supplier_id, a.branch_id,(" + mUnit + " * acos (cos (radians(" + latitude + ")) * cos(radians(s.latitude))* cos("
        sql += "radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + "))* sin(radians(s.latitude)))) AS distance  from advertisements a "
        sql += "left join supplier_branch sb on sb.id = a.branch_id join categories cc on cc.id = a.category_id join supplier s on s.id = a.supplier_id where a.is_active = 1 and  s.is_active = 1  and s.is_deleted = 0 and a.advertisement_type = 0 and "
        sql += "a.is_deleted = 0   and ((DATE(a.start_date) <= '" + current_time + "' and DATE(a.end_date) >= '" + current_time + "') or( DATE(a.start_date) = '0000-00-00' and DATE(a.end_date) = '0000-00-00' ))  and cc.is_live = 1 GROUP BY name having s.delivery_radius>=distance ORDER BY a.orders DESC"

    }
    else {
        var sql = "select s.delivery_radius,s.name as supplier_name,a.id,a.flow_banner_type,cc.type,cc.menu_type,cc.name as category_name, cc.category_order, cc.supplier_placement_level, cc.category_flow,a.category_id, a.banner_type,a.branch_id, a.category_id, IF((select count(*) from categories where parent_id = a.category_id),1,0) as is_subcategory, a.phone_image,"
        sql += "a.phone_video,a.website_video,a.website_image,a.name, a.supplier_id, a.branch_id,(" + mUnit + " * acos (cos (radians(" + latitude + ")) * cos(radians(s.latitude))* cos("
        sql += "radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + "))* sin(radians(s.latitude)))) AS distance  from advertisements a "
        sql += "left join supplier_branch sb on sb.id = a.branch_id join categories cc on cc.id = a.category_id join supplier s on s.id = a.supplier_id where a.is_active = 1 and  s.is_active = 1  and s.is_deleted = 0 and a.advertisement_type = 0 and "
        sql += "a.is_deleted = 0   and ((DATE(a.start_date) <= '" + current_time + "' and DATE(a.end_date) >= '" + current_time + "') or( DATE(a.start_date) = '0000-00-00' and DATE(a.end_date) = '0000-00-00' ))  and cc.is_live = 1 and cc.id=" + categoryId + " GROUP BY name having s.delivery_radius>=distance ORDER BY a.orders DESC"
    }

    try {
        let result = await ExecuteQ.Query(dbName, sql, []);
        console.log("=================result========+", result);
        callback(null, result);
    }
    catch (Err) {
        logger.debug("===Err!=", Err)
        var msg = "something went wrong";
        sendResponse.sendErrorMessage(msg, res, 500);
    }
}


const getSupTime = (dbName, supId) => {
    return new Promise(async (resolve, reject) => {
        let sql = "select week_id,start_time,end_time,is_open from supplier_timings where supplier_id = ?";
        let data = await ExecuteQ.Query(dbName, sql, [supId])
        resolve(data);
    })
}


async function getAllBrands(res, languageId, dbName, callback) {
    logger.debug("====languageId,dbName=====", languageId, dbName)
    var sql = "select `cb`.`cat_id`,`brm`.`name`,`br`.`image`,`br`.`id` from `brands` `br` join `brands_ml` `brm` on brm.brand_id=br.id left join `cat_brands` `cb` on `cb`.`brand_id`=`br`.`id` where `brm`.`language_id`=? and `br`.`deleted_by`=? group by `br`.`id`";
    try {
        let result = await ExecuteQ.Query(dbName, sql, [languageId, 0]);
        callback(null, result);
    }
    catch (Err) {
        logger.debug("==Err!==", Err)
        var msg = "something went wrong";
        sendResponse.sendErrorMessage(msg, res, 500);
    }
    // var statement= multiConnection[dbName].query(sql, [languageId,0], function (err, result)
    // {
    //      console.log("...................front add...................",err,result,statement.sql);
    //     if (err) {
    //         console.log("-------------ererr ----------2")
    //         var msg = "something went wrong";
    //         sendResponse.sendErrorMessage(msg,res,500);
    //     }
    //     else {
    // callback(null, result);
    //     }
    // })
}

async function getOffer(req, planQuery, mUnit, dbName, service_type, res, lanuageId, user_id,
    latitude, longitude, categoryId, service_type, user_type_check,
    user_type_id, filter_by,
    callback) {

    let hideOutOfStockProduct = await ExecuteQ.Query(dbName,
        "select `key`, value from tbl_setting where `key`=? and value=1", ["hide_out_of_stock_product"]);
    let outOfStockCheck = "";

    if (hideOutOfStockProduct && hideOutOfStockProduct.length > 0) {
        outOfStockCheck = "and p.quantity>p.purchased_quantity"
    }

    let userLoyalityLevleIds = [], loyalitPointDiscountAmount = 0,
        loyalityLevelDiscountAmount = 0,
        perProductLoyalityDiscount = 0

    var todayDate = new Date();
    let radius_check_query = "";
    // having distance<=s.delivery_radius
    // if(service_type==1){
    radius_check_query = "having distance<=delivery_radius"
    // }
    // else{
    //     radius_check_query=""
    // }
    var sql = ""

    let orderTypeCondition = ""

    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }


    if (user_type_check && user_type_check.length > 0) {

        if (parseInt(categoryId) == 0) {
            sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"addon_limit\": \"', pr.addon_limit,'\", ','\"is_mandatory\": \"', pr.is_mandatory,'\",     ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from (select user_type_id,is_out_network, tax_exempt, latitude,if(display_price=price,0,1) AS discount,base_delivery_charges,longitude,parent_id,radius_price,delivery_radius,type,is_dine,payment_after_confirmation,is_agent,is_liquor,agent_list,duration, pricing_type, avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
            sql += " parent_category_id,can_urgent, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
            sql += "is_dine_in,is_allergy_product,allergy_description,is_scheduled,is_subscription_required,purchase_limit,product_id, supplier_id,supplier_branch_id,self_pickup,supplier_name, supplier_image,cart_image_upload,order_instructions,quantity, purchased_quantity,distance ";
            sql += "from (select ";
            //    sql += "";
            sql += " sbp.category_id as parent_category_id,s.is_dine_in, s.is_out_network as is_out_network , p.is_allergy_product,p.allergy_description,s.is_scheduled,p.is_subscription_required,p.purchase_limit,p.quantity as quantity,p.parent_id,p.payment_after_confirmation,p.cart_image_upload,p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,ct.is_dine,ct.type,ct.menu_type,ct.agent_list,ct.order_instructions,ct.is_quantity as is_quantity, p.duration as duration,";
            sql += "p.is_product as is_product, p.tax_exempt as tax_exempt,  ct.is_agent,ct.is_liquor,pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";
            sql += "pp.urgent_type,pp.user_type_id,p.item_unavailable, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
            sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup, s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,s.base_delivery_charges,sb.delivery_radius as delivery_radius, s.logo as supplier_image, (" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from "

            sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
            sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
            sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = p.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




            sql += "where pp.is_deleted = 0 and is_supplier_product_approved=1 and pp.user_type_id=" + user_type_id + " and  ct.is_live=1 and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
            sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + " and s.is_deleted = 0 " + orderTypeCondition + " and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
            sql += "pp.price_type DESC) selection GROUP BY product_id " + radius_check_query + " order by offer_id DESC limit 10 offset 0) as temp ";


        }
        else {
            let cateIds = []
            let subCateData = await ExecuteQ.Query(dbName, `select id,parent_id from categories where parent_id!=? and is_deleted=?`, [0, 0])

            if (subCateData && subCateData.length > 0) {
                let subIds = Universal.getNestedChildrenIds(subCateData, categoryId);
                logger.debug("=====subIds==>>", subIds);
                if (subIds && subIds.length > 0) {
                    cateIds = subIds;
                }
                else {
                    cateIds.push(categoryId)
                }
            }
            else {
                cateIds.push(categoryId)
            }
            logger.debug("=====cateIds==>>", cateIds);
            sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"addon_limit\": \"', pr.addon_limit,'\", ','\"is_mandatory\": \"', pr.is_mandatory,'\",  ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"base_delivery_charges\": \"', sd.base_delivery_charges, '\", ','\"distance_value\": \"', sd.distance_value,'\"','}') SEPARATOR ','),''),']') AS bData from supplier_delivery_charges sd where sd.supplier_id=temp.supplier_id ) as base_delivery_charges_array,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id and isDelete=0 ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from (select user_type_id,latitude ,tax_exempt, is_out_network, if(display_price=price,0,1) AS discount,base_delivery_charges,longitude,parent_id,radius_price,delivery_radius,type,is_dine,payment_after_confirmation,is_agent,is_liquor,agent_list,duration, pricing_type, avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
            sql += "  parent_category_id,can_urgent, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
            sql += "is_dine_in,is_allergy_product,allergy_description,is_scheduled,is_subscription_required,purchase_limit,product_id, supplier_id,supplier_branch_id,self_pickup,supplier_name,cart_image_upload,order_instructions,supplier_image, quantity, purchased_quantity,distance ";
            sql += "from (select ";
            sql += " sbp.category_id as parent_category_id,s.is_dine_in,p.is_allergy_product, s.is_out_network as is_out_network, p.allergy_description,s.is_scheduled,p.is_subscription_required,p.purchase_limit,p.quantity as quantity,p.parent_id, p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,p.payment_after_confirmation,ct.type,ct.menu_type,ct.is_dine,ct.agent_list,ct.order_instructions,p.cart_image_upload ,ct.is_quantity as is_quantity, p.duration as duration,";
            sql += "p.is_product as is_product,   p.tax_exempt as tax_exempt,ct.is_agent,ct.is_liquor,  pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";
            sql += "pp.urgent_type,pp.user_type_id, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
            sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup,   s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,s.base_delivery_charges,sb.delivery_radius as delivery_radius, s.logo as supplier_image,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from "

            sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
            sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
            sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = sbp.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




            sql += "where pp.is_deleted = 0  and is_supplier_product_approved=1 and pp.user_type_id=" + user_type_id + " and  ct.is_live=1 and ct.id=" + categoryId + " and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
            sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + "    and s.is_deleted = 0 " + orderTypeCondition + " and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
            sql += "pp.price_type DESC) selection GROUP BY product_id " + radius_check_query + " order by offer_id DESC limit 20 offset 0) as temp";
        }
    } else {

        if (parseInt(categoryId) == 0) {
            sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"addon_limit\": \"', pr.addon_limit,'\", ','\"is_mandatory\": \"', pr.is_mandatory,'\",  ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"base_delivery_charges\": \"', sd.base_delivery_charges, '\", ','\"distance_value\": \"', sd.distance_value,'\"','}') SEPARATOR ','),''),']') AS bData from supplier_delivery_charges sd where sd.supplier_id=temp.supplier_id ) as base_delivery_charges_array,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id  and isDelete=0  ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from (select latitude,is_out_network, tax_exempt, if(display_price=price,0,1) AS discount,base_delivery_charges,longitude,parent_id,radius_price,delivery_radius,type,payment_after_confirmation,is_dine,is_agent,is_liquor,agent_list,duration, pricing_type, avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
            sql += " parent_category_id,can_urgent, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
            sql += "is_dine_in,is_allergy_product,allergy_description,is_scheduled,is_subscription_required,purchase_limit,product_id, supplier_id,supplier_branch_id,self_pickup,supplier_name, supplier_image,cart_image_upload,order_instructions,quantity, purchased_quantity, distance ";
            sql += "from (select ";
            sql += " sbp.category_id as parent_category_id,s.is_dine_in,p.is_allergy_product, s.is_out_network as is_out_network ,p.allergy_description,s.is_scheduled,p.is_subscription_required,p.purchase_limit,p.quantity as quantity,p.parent_id, p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,ct.type,ct.menu_type,ct.is_dine,ct.agent_list,ct.order_instructions,p.payment_after_confirmation,p.cart_image_upload,ct.is_quantity as is_quantity, p.duration as duration,";
            sql += "p.is_product as is_product,   p.tax_exempt as tax_exempt, ct.is_agent,ct.is_liquor,  pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";
            sql += "pp.urgent_type, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
            sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup, s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,s.base_delivery_charges,sb.delivery_radius as delivery_radius, s.logo as supplier_image,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from "

            sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
            sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
            sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = p.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




            sql += "where pp.is_deleted = 0 and is_supplier_product_approved=1 and  ct.is_live=1 and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
            sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + "    and s.is_deleted = 0 " + orderTypeCondition + " and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
            sql += "pp.price_type DESC) selection GROUP BY product_id " + radius_check_query + " order by offer_id DESC limit 20 offset 0) as temp";
        }
        else {
            let cateIds = []
            let subCateData = await ExecuteQ.Query(dbName, `select id,parent_id from categories where parent_id!=? and is_deleted=?`, [0, 0])
            if (subCateData && subCateData.length > 0) {
                let subIds = Universal.getNestedChildrenIds(subCateData, categoryId);
                logger.debug("=====subIds==>>", subIds);
                if (subIds && subIds.length > 0) {
                    cateIds = subIds;
                }
                else {
                    cateIds.push(categoryId)
                }
            }
            else {
                cateIds.push(categoryId)
            }

            logger.debug("=====cateIds==>>", cateIds);
            sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"addon_limit\": \"', pr.addon_limit,'\", ','\"is_mandatory\": \"', pr.is_mandatory,'\",  ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"bottle_count\": \"', pdt.bottle_count, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"base_delivery_charges\": \"', sd.base_delivery_charges, '\", ','\"distance_value\": \"', sd.distance_value,'\"','}') SEPARATOR ','),''),']') AS bData from supplier_delivery_charges sd where sd.supplier_id=temp.supplier_id ) as base_delivery_charges_array,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id   and isDelete=0 ),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from (select latitude, is_out_network, tax_exempt, if(display_price=price,0,1) AS discount,longitude,base_delivery_charges,parent_id,radius_price,delivery_radius,is_dine,type,payment_after_confirmation,is_agent,is_liquor,agent_list,duration, pricing_type, avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
            sql += "can_urgent, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
            sql += "  parent_category_id,is_dine_in,is_allergy_product,allergy_description,is_scheduled,is_subscription_required,purchase_limit,product_id, supplier_id,supplier_branch_id,self_pickup,supplier_name,cart_image_upload,order_instructions,supplier_image, quantity, purchased_quantity,distance ";
            sql += "from (select ";
            sql += " s.is_dine_in,p.is_allergy_product, s.is_out_network as is_out_network, p.allergy_description,s.is_scheduled,p.is_subscription_required,p.purchase_limit,p.quantity as quantity,p.parent_id, p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,ct.type,ct.is_dine,ct.menu_type,ct.agent_list,ct.order_instructions,p.payment_after_confirmation,p.cart_image_upload, ct.is_quantity as is_quantity, p.duration as duration,";
            sql += " sbp.category_id as parent_category_id,p.is_product as is_product,  p.tax_exempt as tax_exempt,ct.is_agent,ct.is_liquor,  pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";
            sql += "pp.urgent_type, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
            sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup,   s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,s.base_delivery_charges,sb.delivery_radius as delivery_radius, s.logo as supplier_image,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( sb.latitude ) )*";
            sql += "cos( radians( sb.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from "

            sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
            sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
            sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = sbp.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




            sql += "where pp.is_deleted = 0 and is_supplier_product_approved=1 and  ct.is_live=1 and ct.id=" + categoryId + " and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
            sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + "   and s.is_deleted = 0 " + orderTypeCondition + " and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
            sql += "pp.price_type DESC) selection GROUP BY product_id " + radius_check_query + " order by offer_id DESC limit 10 offset 0) as temp";
        }

    }

    let result = []
    result = await ExecuteQ.QueryV1(req, dbName, sql, [])

    //  result = await getProductVariants(req.dbName,result);



    if (parseInt(user_id) !== 0) {

        var user_data = await ExecuteQ.Query(req.dbName,
            `select total_loyality_amount,used_loyality_amount,
            id,loyalty_points from user where access_token = ?`,
            [req.headers.authorization]);

        let isLoyalityPointEnable = await ExecuteQ.Query(req.dbName,
            "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
            ["is_loyality_enable", "1"]);

        if (isLoyalityPointEnable && isLoyalityPointEnable.length > 0) {



            let loyalityLevelData = await Universal.getUserLoyalityLevelData(req.dbName, user_data[0].id);

            loyalitPointDiscountAmount = parseFloat(user_data[0].total_loyality_amount) - parseFloat(user_data[0].used_loyality_amount);

            let loyalityLevelCateData = []
            if (loyalityLevelData && loyalityLevelData.length > 0) {
                for await (const [index, i] of loyalityLevelData.entries()) {
                    userLoyalityLevleIds.push(i.id)
                }
                loyalityLevelCateData = await ExecuteQ.Query(req.dbName, `select id,discount_price,price_type,category_id,supplier_id from loyality_level_category_assignment where loyality_level_id IN (?)`, [userLoyalityLevleIds]);
            }

            let productData = result
            logger.debug("=====productData==>", productData)
            if (loyalityLevelCateData && loyalityLevelCateData.length > 0) {

                for await (const [ind, j] of loyalityLevelCateData.entries()) {
                    perProductLoyalityDiscount = 0;
                    if (productData && productData.length > 0) {

                        for await (const [index, i] of productData.entries()) {
                            logger.debug("========j.category_id==============",
                                j.category_id, i.parent_category_id, j.supplier_id, i.supplier_id, req.query.supplier_id)
                            if (parseInt(j.category_id) == parseInt(i.parent_category_id)
                                && parseInt(j.supplier_id) == i.supplier_id) {

                                if (j.price_type == 1) {
                                    perProductLoyalityDiscount = parseFloat(i.price) * parseFloat(j.discount_price) / 100
                                }
                                else {
                                    perProductLoyalityDiscount = parseFloat(j.discount_price)
                                }

                                loyalityLevelDiscountAmount = loyalityLevelDiscountAmount + perProductLoyalityDiscount
                                logger.debug("==perProductLoyalityDiscount==loyalityLevelDiscountAmount=>>", perProductLoyalityDiscount, loyalityLevelDiscountAmount)
                                i.perProductLoyalityDiscount = perProductLoyalityDiscount
                            }
                        }
                    }
                }
            }
            // pData.product_data=productData
            // if(productList && productList.length>0){
            //     for await( const [index,i] of productList.entries()){

            //     }
            // }

        }
    }




    var adds_on_ar = [], adds_on, final_json = {};
    if (result && result.length > 0) {
        for (var i = 0; i < result.length; i++) {
            adds_on = _.groupBy(JSON.parse(result[i].adds_on), "name");
            _.each(adds_on, function (value, key, object) {
                final_json.name = key
                final_json.value = value
                final_json.addon_limit = value[0].addon_limit
                final_json.is_mandatory = value[0].is_mandatory
                adds_on_ar.push(final_json);
                final_json = {}
            })
            result[i].adds_on = adds_on_ar
            adds_on_ar = []

            result[i].base_delivery_charges_array = result[i] && result[i].base_delivery_charges_array ? JSON.parse(result[i].base_delivery_charges_array) : []

            if (result[i].pricing_type == 1) {
                result[i].hourly_price = JSON.parse(result[i].price);
                result[i].price_type = 1;

            } else {
                result[i].price_type = 0;
                delete result[i].hourly_price;
            }
            if (i == result.length - 1) {
                callback(null, result);
            }
        }
    }
    else {
        callback(null, result);
    }

}

function getProductVariants(dbName, products) {
    return new Promise(async (resolve, reject) => {
        try {

            let productIds = [];
            for (const [index, i] of products.entries()) {
                productIds.push(products[index].product_id);
            }

            let vsql = `select cv.name,variants.id as vaiant_id,variants.value,product_variants.product_id,
            product_variants.id from product_variants inner join variants on variants.id=product_variants.variant_id
            join cat_variants cv on cv.id = variants.cat_variant_id where product_variants.product_id  IN(${productIds.join(",")})`;

            let vData = await ExecuteQ.Query(dbName, vsql, [productIds.join(",")])

            // console.log("==============i.variant ======",vData)

            for (const [index, i] of products.entries()) {
                console.log("==============i.variant ======",
                    i.product_id,
                    // vData.filter(v=>{console.log(v) })
                );
                let variant = [];

                for (const [x, j] of vData.entries()) {
                    if (parseInt(j.product_id) == parseInt(i.product_id)) {
                        variant.push(j)
                    }

                }
                i.variant = variant;

                console.log("==============i.variant ======", i.variant)
                if (index == (products.length - 1)) {
                    resolve(products)
                }
            }


            // resolve(products);


            // for (const [index, i] of products.entries()) {

            //     var vsql = "select cv.name,variants.id as vaiant_id,variants.value,product_variants.product_id,product_variants.id from product_variants inner join variants on variants.id=product_variants.variant_id join cat_variants cv on cv.id = variants.cat_variant_id where product_variants.product_id=?";

            //     var vData = await ExecuteQ.Query(dbName, vsql, [products[index].product_id])

            //     products[index].variant = vData;
            //     if (index == (products.length - 1)) {
            //         resolve(products)
            //     }

            // }
        } catch (err) {
            logger.debug(err)
            reject(err)
        }
    })
}

async function getOfferV1(
    req, planQuery
    , mUnit, dbName, service_type, res,
    lanuageId, user_id,
    latitude, longitude,
    categoryId, service_type,
    user_type_check,
    user_type_id, filter_by,
    callback) {

    let hideOutOfStockProduct = await ExecuteQ.Query(dbName,
        "select `key`, value from tbl_setting where `key`=? and value=1", ["hide_out_of_stock_product"]);
    let outOfStockCheck = "";

    if (hideOutOfStockProduct && hideOutOfStockProduct.length > 0) {
        outOfStockCheck = "and p.quantity>p.purchased_quantity"
    }

    let userLoyalityLevleIds = [], loyalitPointDiscountAmount = 0,
        loyalityLevelDiscountAmount = 0,
        perProductLoyalityDiscount = 0

    var todayDate = new Date();
    let radius_check_query = "";
    // having distance<=s.delivery_radius
    // if(service_type==1){
    radius_check_query = "having distance<=delivery_radius"
    // }
    // else{
    //     radius_check_query=""
    // }
    var sql = ""

    let orderTypeCondition = ""

    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }


    if (user_type_check && user_type_check.length > 0) {

        if (parseInt(categoryId) == 0) {
            sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"addon_limit\": \"', pr.addon_limit,'\", ','\"is_mandatory\": \"', pr.is_mandatory,'\",     ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from (select user_type_id,latitude,if(display_price=price,0,1) AS discount,base_delivery_charges,longitude,parent_id,radius_price,delivery_radius,type,is_dine,payment_after_confirmation,is_agent,agent_list,duration, pricing_type, avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
            sql += " parent_category_id,can_urgent, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
            sql += "is_dine_in,is_allergy_product,allergy_description,is_scheduled,is_subscription_required,purchase_limit,product_id, supplier_id,supplier_branch_id,self_pickup,supplier_name, supplier_image,cart_image_upload,order_instructions,quantity, purchased_quantity,distance,is_under_zone ";
            sql += "from (select ";
            //    sql += "";

            sql += " sbp.category_id as parent_category_id,s.is_dine_in,p.is_allergy_product,p.allergy_description,s.is_scheduled,p.is_subscription_required,p.purchase_limit,p.quantity as quantity,p.parent_id,p.payment_after_confirmation,p.cart_image_upload,p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,ct.is_dine,ct.type,ct.menu_type,ct.agent_list,ct.order_instructions,ct.is_quantity as is_quantity, p.duration as duration,";

            sql += "IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone,"

            sql += "p.is_product as is_product,ct.is_agent,pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";
            sql += "pp.urgent_type,pp.user_type_id,p.item_unavailable, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
            sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup, s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,s.base_delivery_charges,sb.delivery_radius as delivery_radius, s.logo as supplier_image, (" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from "

            sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
            sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
            sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = p.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




            sql += "where pp.is_deleted = 0  and is_supplier_product_approved=1  and pp.user_type_id=" + user_type_id + " and  ct.is_live=1 and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
            sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + " and s.is_deleted = 0 " + orderTypeCondition + " and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
            sql += "pp.price_type DESC) selection GROUP BY product_id having is_under_zone>0 order by offer_id DESC limit 10 offset 0) as temp ";


        }
        else {
            let cateIds = []
            let subCateData = await ExecuteQ.Query(dbName, `select id,parent_id from categories where parent_id!=? and is_deleted=?`, [0, 0])

            if (subCateData && subCateData.length > 0) {
                let subIds = Universal.getNestedChildrenIds(subCateData, categoryId);
                logger.debug("=====subIds==>>", subIds);
                if (subIds && subIds.length > 0) {
                    cateIds = subIds;
                }
                else {
                    cateIds.push(categoryId)
                }
            }
            else {
                cateIds.push(categoryId)
            }
            logger.debug("=====cateIds==>>", cateIds);
            sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"addon_limit\": \"', pr.addon_limit,'\", ','\"is_mandatory\": \"', pr.is_mandatory,'\",  ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"base_delivery_charges\": \"', sd.base_delivery_charges, '\", ','\"distance_value\": \"', sd.distance_value,'\"','}') SEPARATOR ','),''),']') AS bData from supplier_delivery_charges sd where sd.supplier_id=temp.supplier_id ) as base_delivery_charges_array,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from (select user_type_id,latitude,if(display_price=price,0,1) AS discount,base_delivery_charges,longitude,parent_id,radius_price,delivery_radius,type,is_dine,payment_after_confirmation,is_agent,agent_list,duration, pricing_type, avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
            sql += "  parent_category_id,can_urgent, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
            sql += "is_dine_in,is_allergy_product,allergy_description,is_scheduled,is_subscription_required,purchase_limit,product_id, supplier_id,supplier_branch_id,self_pickup,supplier_name,cart_image_upload,order_instructions,supplier_image, quantity, purchased_quantity,distance,is_under_zone ";
            sql += "from (select ";
            sql += " sbp.category_id as parent_category_id,s.is_dine_in,p.is_allergy_product,p.allergy_description,s.is_scheduled,p.is_subscription_required,p.purchase_limit,p.quantity as quantity,p.parent_id, p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,p.payment_after_confirmation,ct.type,ct.menu_type,ct.is_dine,ct.agent_list,ct.order_instructions,p.cart_image_upload ,ct.is_quantity as is_quantity, p.duration as duration,";

            sql += "IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone,"


            sql += "p.is_product as is_product,ct.is_agent,  pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";
            sql += "pp.urgent_type,pp.user_type_id, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
            sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup, s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,s.base_delivery_charges,sb.delivery_radius as delivery_radius, s.logo as supplier_image,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from "

            sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
            sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
            sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = sbp.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




            sql += "where pp.is_deleted = 0 and is_supplier_product_approved=1   and pp.user_type_id=" + user_type_id + " and  ct.is_live=1 and ct.id=" + categoryId + " and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
            sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + "    and s.is_deleted = 0 " + orderTypeCondition + " and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
            sql += "pp.price_type DESC) selection GROUP BY product_id having is_under_zone>0 order by offer_id DESC limit 20 offset 0) as temp";
        }
    } else {

        if (parseInt(categoryId) == 0) {
            sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"addon_limit\": \"', pr.addon_limit,'\", ','\"is_mandatory\": \"', pr.is_mandatory,'\",  ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"base_delivery_charges\": \"', sd.base_delivery_charges, '\", ','\"distance_value\": \"', sd.distance_value,'\"','}') SEPARATOR ','),''),']') AS bData from supplier_delivery_charges sd where sd.supplier_id=temp.supplier_id ) as base_delivery_charges_array,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from (select latitude,if(display_price=price,0,1) AS discount,base_delivery_charges,longitude,parent_id,radius_price,delivery_radius,type,payment_after_confirmation,is_dine,is_agent,agent_list,duration, pricing_type, avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
            sql += " parent_category_id,can_urgent, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
            sql += "is_dine_in,is_allergy_product,allergy_description,is_scheduled,is_subscription_required,purchase_limit,product_id, supplier_id,supplier_branch_id,self_pickup,supplier_name, supplier_image,cart_image_upload,order_instructions,quantity, purchased_quantity, distance,is_under_zone ";
            sql += "from (select ";
            sql += " sbp.category_id as parent_category_id,s.is_dine_in,p.is_allergy_product,p.allergy_description,s.is_scheduled,p.is_subscription_required,p.purchase_limit,p.quantity as quantity,p.parent_id, p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,ct.type,ct.menu_type,ct.is_dine,ct.agent_list,ct.order_instructions,p.payment_after_confirmation,p.cart_image_upload,ct.is_quantity as is_quantity, p.duration as duration,";

            sql += "IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone,"


            sql += "p.is_product as is_product,ct.is_agent,  pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";
            sql += "pp.urgent_type, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
            sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup, s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,s.base_delivery_charges,sb.delivery_radius as delivery_radius, s.logo as supplier_image,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( sb.latitude ) )* cos( radians( sb.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from "

            sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
            sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
            sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = p.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




            sql += "where pp.is_deleted = 0 and is_supplier_product_approved=1   and  ct.is_live=1 and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
            sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + "    and s.is_deleted = 0 " + orderTypeCondition + " and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
            sql += "pp.price_type DESC) selection GROUP BY product_id having is_under_zone>0 order by offer_id DESC limit 20 offset 0) as temp";
        }
        else {
            let cateIds = []
            let subCateData = await ExecuteQ.Query(dbName, `select id,parent_id from categories where parent_id!=? and is_deleted=?`, [0, 0])
            if (subCateData && subCateData.length > 0) {
                let subIds = Universal.getNestedChildrenIds(subCateData, categoryId);
                logger.debug("=====subIds==>>", subIds);
                if (subIds && subIds.length > 0) {
                    cateIds = subIds;
                }
                else {
                    cateIds.push(categoryId)
                }
            }
            else {
                cateIds.push(categoryId)
            }

            logger.debug("=====cateIds==>>", cateIds);
            sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"addon_limit\": \"', pr.addon_limit,'\", ','\"is_mandatory\": \"', pr.is_mandatory,'\",  ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"base_delivery_charges\": \"', sd.base_delivery_charges, '\", ','\"distance_value\": \"', sd.distance_value,'\"','}') SEPARATOR ','),''),']') AS bData from supplier_delivery_charges sd where sd.supplier_id=temp.supplier_id ) as base_delivery_charges_array,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from (select latitude,if(display_price=price,0,1) AS discount,longitude,base_delivery_charges,parent_id,radius_price,delivery_radius,is_dine,type,payment_after_confirmation,is_agent,agent_list,duration, pricing_type, avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
            sql += "can_urgent, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
            sql += "  parent_category_id,is_dine_in,is_allergy_product,allergy_description,is_scheduled,is_subscription_required,purchase_limit,product_id, supplier_id,supplier_branch_id,self_pickup,supplier_name,cart_image_upload,order_instructions,supplier_image, quantity, purchased_quantity,distance,is_under_zone ";
            sql += "from (select ";
            sql += " s.is_dine_in,p.is_allergy_product,p.allergy_description,s.is_scheduled,p.is_subscription_required,p.purchase_limit,p.quantity as quantity,p.parent_id, p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,ct.type,ct.is_dine,ct.menu_type,ct.agent_list,ct.order_instructions,p.payment_after_confirmation,p.cart_image_upload, ct.is_quantity as is_quantity, p.duration as duration,";
            sql += " sbp.category_id as parent_category_id,p.is_product as is_product,ct.is_agent,  pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";

            sql += "IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone,"


            sql += "pp.urgent_type, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
            sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup, s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,s.base_delivery_charges,sb.delivery_radius as delivery_radius, s.logo as supplier_image,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( sb.latitude ) )*";
            sql += "cos( radians( sb.longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( sb.latitude ) ))) AS distance from "

            sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
            sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
            sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = sbp.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




            sql += "where pp.is_deleted = 0 and is_supplier_product_approved=1   and  ct.is_live=1 and ct.id=" + categoryId + " and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
            sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + "   and s.is_deleted = 0 " + orderTypeCondition + " and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
            sql += "pp.price_type DESC) selection GROUP BY product_id having is_under_zone>0 order by offer_id DESC limit 10 offset 0) as temp";
        }

    }

    let result = []
    result = await ExecuteQ.QueryV1(req, dbName, sql, [])

    if (parseInt(user_id) !== 0) {

        var user_data = await ExecuteQ.Query(req.dbName,
            `select total_loyality_amount,used_loyality_amount,
            id,loyalty_points from user where access_token = ?`,
            [req.headers.authorization]);

        let isLoyalityPointEnable = await ExecuteQ.Query(req.dbName,
            "select `key`,`value` from tbl_setting where `key`=? and `value`=?",
            ["is_loyality_enable", "1"]);

        if (isLoyalityPointEnable && isLoyalityPointEnable.length > 0) {



            let loyalityLevelData = await Universal.getUserLoyalityLevelData(req.dbName, user_data[0].id);

            loyalitPointDiscountAmount = parseFloat(user_data[0].total_loyality_amount) - parseFloat(user_data[0].used_loyality_amount);

            let loyalityLevelCateData = []
            if (loyalityLevelData && loyalityLevelData.length > 0) {
                for await (const [index, i] of loyalityLevelData.entries()) {
                    userLoyalityLevleIds.push(i.id)
                }
                loyalityLevelCateData = await ExecuteQ.Query(req.dbName, `select id,discount_price,price_type,category_id,supplier_id from loyality_level_category_assignment where loyality_level_id IN (?)`, [userLoyalityLevleIds]);
            }

            let productData = result
            logger.debug("=====productData==>", productData)
            if (loyalityLevelCateData && loyalityLevelCateData.length > 0) {

                for await (const [ind, j] of loyalityLevelCateData.entries()) {
                    perProductLoyalityDiscount = 0;
                    if (productData && productData.length > 0) {

                        for await (const [index, i] of productData.entries()) {
                            logger.debug("========j.category_id==============",
                                j.category_id, i.parent_category_id, j.supplier_id, i.supplier_id, req.query.supplier_id)
                            if (parseInt(j.category_id) == parseInt(i.parent_category_id)
                                && parseInt(j.supplier_id) == i.supplier_id) {

                                if (j.price_type == 1) {
                                    perProductLoyalityDiscount = parseFloat(i.price) * parseFloat(j.discount_price) / 100
                                }
                                else {
                                    perProductLoyalityDiscount = parseFloat(j.discount_price)
                                }

                                loyalityLevelDiscountAmount = loyalityLevelDiscountAmount + perProductLoyalityDiscount
                                logger.debug("==perProductLoyalityDiscount==loyalityLevelDiscountAmount=>>", perProductLoyalityDiscount, loyalityLevelDiscountAmount)
                                i.perProductLoyalityDiscount = perProductLoyalityDiscount
                            }
                        }
                    }
                }
            }
            // pData.product_data=productData
            // if(productList && productList.length>0){
            //     for await( const [index,i] of productList.entries()){

            //     }
            // }

        }
    }




    var adds_on_ar = [], adds_on, final_json = {};
    if (result && result.length > 0) {
        for (var i = 0; i < result.length; i++) {
            adds_on = _.groupBy(JSON.parse(result[i].adds_on), "name");
            _.each(adds_on, function (value, key, object) {
                final_json.name = key
                final_json.value = value
                final_json.addon_limit = value[0].addon_limit
                final_json.is_mandatory = value[0].is_mandatory
                adds_on_ar.push(final_json);
                final_json = {}
            })
            result[i].adds_on = adds_on_ar
            adds_on_ar = []

            result[i].base_delivery_charges_array = result[i] && result[i].base_delivery_charges_array ? JSON.parse(result[i].base_delivery_charges_array) : []

            if (result[i].pricing_type == 1) {
                result[i].hourly_price = JSON.parse(result[i].price);
                result[i].price_type = 1;

            } else {
                result[i].price_type = 0;
                delete result[i].hourly_price;
            }
            if (i == result.length - 1) {
                callback(null, result);
            }
        }
    }
    else {
        callback(null, result);
    }

}
async function getOfferByCategory(req, dbName, service_type, res,
    lanuageId, user_id,
    latitude, longitude, user_type_check,
    user_type_id, filter_by, planQueryExist,
    callback) {

    var todayDate = new Date()
    let radius_check_query = "", prod_final_json = {}, prod_arr = [];
    // having distance<=s.delivery_radius
    // if(service_type==1){
    radius_check_query = "having distance<=delivery_radius"
    // }
    // else{
    //     radius_check_query=""
    // }

    let mUnit = await Universal.getMeausringUnit(dbName);
    var sql = ""

    let planQuery = "";
    if (planQueryExist) {
        planQuery = planQueryExist
    } else {
        let subScriptionData = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])
        planQuery = subScriptionData && subScriptionData.length > 0 ? "and ss.status='active'" : ""
    }

    let hideOutOfStockProduct = await ExecuteQ.Query(dbName,
        "select `key`, value from tbl_setting where `key`=? and value=1", ["hide_out_of_stock_product"]);
    let outOfStockCheck = "";

    if (hideOutOfStockProduct && hideOutOfStockProduct.length > 0) {
        outOfStockCheck = "and p.quantity>p.purchased_quantity"
    }




    let orderTypeCondition = ""

    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }


    if (user_type_check && user_type_check.length > 0) {
        sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=temp.product_id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"base_delivery_charges\": \"', sd.base_delivery_charges, '\", ','\"distance_value\": \"', sd.distance_value,'\"','}') SEPARATOR ','),''),']') AS bData from supplier_delivery_charges sd where sd.supplier_id=temp.supplier_id ) as base_delivery_charges_array,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from( select latitude,if(display_price=price,0,1) AS discount,longitude,parent_id,radius_price,delivery_radius,cate_name,type,payment_after_confirmation,is_agent,agent_list,duration, pricing_type, avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
        sql += "can_urgent,is_allergy_product,allergy_description,parent_category_id, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
        sql += "product_id, supplier_id,supplier_branch_id,self_pickup,cart_image_upload,order_instructions,supplier_name, supplier_image, quantity, purchased_quantity,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( latitude ) )*";
        sql += "cos( radians( longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( latitude ) ))) AS distance ";
        sql += "from (select ";
        sql += " p.is_allergy_product,p.allergy_description,ct.id as parent_category_id,p.quantity as quantity,p.parent_id, p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,ct.name as cate_name,p.payment_after_confirmation,ct.is_agent,ct.is_liquor,ct.type,ct.menu_type,ct.order_instructions,ct.cart_image_upload,ct.agent_list, ct.is_quantity as is_quantity, p.duration as duration,";
        sql += "p.purchase_limit,p.is_product as is_product,pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";
        sql += "pp.urgent_type, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
        sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup, s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,sb.delivery_radius as delivery_radius, s.logo as supplier_image from "

        sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
        sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
        sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = sbp.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




        sql += "where pp.is_deleted = 0  and is_supplier_product_approved=1   and pp.user_type_id=" + user_type_id + " and  ct.is_live=1 and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
        sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + "  and s.is_deleted = 0 and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
        sql += "pp.price_type DESC) selection GROUP BY product_id " + radius_check_query + " order by offer_id DESC limit 10 offset 0) as temp";

    } else {
        sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=temp.product_id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"base_delivery_charges\": \"', sd.base_delivery_charges, '\", ','\"distance_value\": \"', sd.distance_value,'\"','}') SEPARATOR ','),''),']') AS bData from supplier_delivery_charges sd where sd.supplier_id=temp.supplier_id ) as base_delivery_charges_array,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from( select latitude,if(display_price=price,0,1) AS discount,longitude,parent_id,radius_price,delivery_radius,cate_name,type,is_agent,payment_after_confirmation,agent_list,adds_on,duration, pricing_type,  avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
        sql += "can_urgent,is_allergy_product,allergy_description,parent_category_id, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
        sql += "product_id, supplier_id,supplier_branch_id,self_pickup,cart_image_upload,order_instructions,supplier_name, supplier_image, quantity, purchased_quantity,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( latitude ) )*";
        sql += "cos( radians( longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( latitude ) ))) AS distance ";
        sql += "from (select";
        sql += " p.is_allergy_product,p.allergy_description,ct.id as parent_category_id,p.quantity as quantity,p.parent_id, p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,p.payment_after_confirmation,ct.name as cate_name,ct.is_agent,ct.is_liquor,ct.type,ct.menu_type,ct.order_instructions,ct.cart_image_upload,ct.agent_list, ct.is_quantity as is_quantity, p.duration as duration,";
        sql += "p.purchase_limit,p.is_product as is_product,pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";
        sql += "pp.urgent_type, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
        sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup, s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,sb.delivery_radius as delivery_radius, s.logo as supplier_image from "

        sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
        sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
        sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = sbp.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




        sql += "where pp.is_deleted = 0 and is_supplier_product_approved=1   and  ct.is_live=1 and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
        sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + "  and s.is_deleted = 0 and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
        sql += "pp.price_type DESC) selection GROUP BY product_id " + radius_check_query + " order by offer_id DESC limit 10 offset 0) as temp";
    }

    //IF((select count(*)  from questions where questions.category_id =p.sub_category_id ) > 0,1,0 ) as is_question

    let result = []
    let isCacheOnData = await ExecuteQ.Query(dbName, "select onOff,reset,cachTime from cache", []);
    // HGET

    // console.log(".............sql......................",sql);
    // result=await ExecuteQ.QueryV1(req,dbName,sql,[]);
    result = []
    var adds_on_ar = [], adds_on, final_json = {};
    if (result && result.length > 0) {
        for (var i = 0; i < result.length; i++) {
            // console.log('result[i].adds_on',typeof result[i].adds_on);
            // console.log('result[i].adds_on',result[i].adds_on);
            result[i].base_delivery_charges_array = result[i] && result[i].base_delivery_charges_array ? JSON.parse(result[i].base_delivery_charges_array) : []

            adds_on = _.groupBy(JSON.parse(result[i].adds_on), "name");
            _.each(adds_on, function (value, key, object) {
                final_json.name = key
                final_json.value = value
                adds_on_ar.push(final_json);
                final_json = {}
            })
            result[i].adds_on = adds_on_ar
            adds_on_ar = []
            if (result[i].pricing_type == 1) {
                result[i].hourly_price = JSON.parse(result[i].price);
                result[i].price_type = 1;

            } else {
                result[i].price_type = 0;
                delete result[i].hourly_price;
            }
            if (i == result.length - 1) {
                let product_group_by = _.groupBy(result, "cate_name");
                // logger.debug("====Length==",Object.keys(product_group_by),product_group_by);

                _.each(product_group_by, function (value, key, objects) {

                    prod_final_json.name = key

                    prod_final_json.value = value

                    prod_arr.push(prod_final_json);
                    // logger.debug("===>>>",prod_final_json)
                    prod_final_json = {}
                })

                callback(null, prod_arr);
            }
        }
    }
    else {
        callback(null, result);
    }

    //     }
    // })
}

async function getOfferByCategoryV1(req, dbName, service_type, res,
    lanuageId, user_id,
    latitude, longitude, user_type_check,
    user_type_id, filter_by, planQueryExist,
    callback) {

    var todayDate = new Date()
    let radius_check_query = "", prod_final_json = {}, prod_arr = [];
    // having distance<=s.delivery_radius
    // if(service_type==1){
    radius_check_query = "having distance<=delivery_radius"
    // }
    // else{
    //     radius_check_query=""
    // }

    let mUnit = await Universal.getMeausringUnit(dbName);
    var sql = ""

    let planQuery = "";
    if (planQueryExist) {
        planQuery = planQueryExist
    } else {
        let subScriptionData = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])
        planQuery = subScriptionData && subScriptionData.length > 0 ? "and ss.status='active'" : ""
    }

    let hideOutOfStockProduct = await ExecuteQ.Query(dbName,
        "select `key`, value from tbl_setting where `key`=? and value=1", ["hide_out_of_stock_product"]);
    let outOfStockCheck = "";

    if (hideOutOfStockProduct && hideOutOfStockProduct.length > 0) {
        outOfStockCheck = "and p.quantity>p.purchased_quantity"
    }




    let orderTypeCondition = ""

    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }


    if (user_type_check && user_type_check.length > 0) {
        sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=temp.product_id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"base_delivery_charges\": \"', sd.base_delivery_charges, '\", ','\"distance_value\": \"', sd.distance_value,'\"','}') SEPARATOR ','),''),']') AS bData from supplier_delivery_charges sd where sd.supplier_id=temp.supplier_id ) as base_delivery_charges_array,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from( select latitude,if(display_price=price,0,1) AS discount,longitude,parent_id,radius_price,delivery_radius,cate_name,type,payment_after_confirmation,is_agent,agent_list,duration, pricing_type, avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
        sql += "can_urgent,is_allergy_product,allergy_description,parent_category_id, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
        sql += "product_id, supplier_id,supplier_branch_id,self_pickup,cart_image_upload,order_instructions,supplier_name, supplier_image, quantity, purchased_quantity,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( latitude ) )*";
        sql += "cos( radians( longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( latitude ) ))) AS distance ";
        sql += "from (select ";
        sql += " p.is_allergy_product,p.allergy_description,ct.id as parent_category_id,p.quantity as quantity,p.parent_id, p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,ct.name as cate_name,p.payment_after_confirmation,ct.is_agent,ct.type,ct.menu_type,ct.order_instructions,ct.cart_image_upload,ct.agent_list, ct.is_quantity as is_quantity, p.duration as duration,";

        sql += "IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone,";


        sql += "p.purchase_limit,p.is_product as is_product,pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";
        sql += "pp.urgent_type, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
        sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup, s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,sb.delivery_radius as delivery_radius, s.logo as supplier_image from "

        sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
        sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
        sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = sbp.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




        sql += "where pp.is_deleted = 0  and is_supplier_product_approved=1  and pp.user_type_id=" + user_type_id + " and  ct.is_live=1 and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
        sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + "  and s.is_deleted = 0 and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
        sql += "pp.price_type DESC) selection GROUP BY product_id having is_under_zone>0 order by offer_id DESC limit 10 offset 0) as temp";

    } else {
        sql = "select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=temp.product_id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"base_delivery_charges\": \"', sd.base_delivery_charges, '\", ','\"distance_value\": \"', sd.distance_value,'\"','}') SEPARATOR ','),''),']') AS bData from supplier_delivery_charges sd where sd.supplier_id=temp.supplier_id ) as base_delivery_charges_array,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id = temp.product_id and product_favourite.user_id = " + user_id + " and product_favourite.status = 1), 1, 0) as is_favourite,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id),1,0 ) as is_question,IF(EXISTS(select product.id from product where  product.parent_id = temp.parent_id and temp.parent_id!=0), 1, 0) as is_variant from( select latitude,if(display_price=price,0,1) AS discount,longitude,parent_id,radius_price,delivery_radius,cate_name,type,is_agent,payment_after_confirmation,agent_list,adds_on,duration, pricing_type,  avg_rating, is_quantity, is_product, price_type, offer_id, fixed_price,delivery_charges,handling_supplier, handling_admin,";
        sql += "can_urgent,is_allergy_product,allergy_description,parent_category_id, urgent_type, category_id,detailed_sub_category_id,sub_category_id, price, offer_name, display_price, measuring_unit, product_desc, name, image_path,";
        sql += "product_id, supplier_id,supplier_branch_id,self_pickup,cart_image_upload,order_instructions,supplier_name, supplier_image, quantity, purchased_quantity,(" + mUnit + " * acos (cos ( radians(" + latitude + ") )* cos( radians( latitude ) )*";
        sql += "cos( radians( longitude ) - radians(" + longitude + ") )+ sin ( radians(" + latitude + ") )* sin( radians( latitude ) ))) AS distance ";
        sql += "from (select";
        sql += " p.is_allergy_product,p.allergy_description,ct.id as parent_category_id,p.quantity as quantity,p.parent_id, p.purchased_quantity as purchased_quantity, p.avg_rating as avg_rating,p.payment_after_confirmation,ct.name as cate_name,ct.is_agent,ct.type,ct.menu_type,ct.order_instructions,ct.cart_image_upload,ct.agent_list, ct.is_quantity as is_quantity, p.duration as duration,";

        sql += "IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone,";


        sql += "p.purchase_limit,p.is_product as is_product,pp.pricing_type as price_type, pp.id as offer_id,pp.delivery_charges as delivery_charges, pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent,";
        sql += "pp.urgent_type, p.category_id, p.detailed_sub_category_id,p.sub_category_id, sb.supplier_id,sb.id as supplier_branch_id,pp.pricing_type, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit,";
        sql += "pml.product_desc, pml.name, pi.image_path, p.id as product_id,s.self_pickup as self_pickup, s.name as supplier_name,sb.latitude,sb.longitude,s.radius_price,sb.delivery_radius as delivery_radius, s.logo as supplier_image from "

        sql += "supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
        sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id "
        sql += "join product_pricing pp on pp.product_id = p.id join categories ct on ct.id = sbp.category_id left join supplier_image si on si.supplier_id = sb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id "




        sql += "where pp.is_deleted = 0  and is_supplier_product_approved=1  and  ct.is_live=1 and ct.is_deleted=0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and (pi.imageOrder =1) and sb.is_deleted = 0 and p.is_deleted = 0 and pml.language_id = " + lanuageId + " ";
        sql += "" + planQuery + " and s.is_live = 1  " + outOfStockCheck + "  and s.is_deleted = 0 and pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY ";
        sql += "pp.price_type DESC) selection GROUP BY product_id having is_under_zone>0 order by offer_id DESC limit 10 offset 0) as temp";
    }

    //IF((select count(*)  from questions where questions.category_id =p.sub_category_id ) > 0,1,0 ) as is_question

    let result = []
    let isCacheOnData = await ExecuteQ.Query(dbName, "select onOff,reset,cachTime from cache", []);
    // HGET

    // console.log(".............sql......................",sql);
    // result=await ExecuteQ.QueryV1(req,dbName,sql,[]);
    result = []
    var adds_on_ar = [], adds_on, final_json = {};
    if (result && result.length > 0) {
        for (var i = 0; i < result.length; i++) {
            // console.log('result[i].adds_on',typeof result[i].adds_on);
            // console.log('result[i].adds_on',result[i].adds_on);
            result[i].base_delivery_charges_array = result[i] && result[i].base_delivery_charges_array ? JSON.parse(result[i].base_delivery_charges_array) : []

            adds_on = _.groupBy(JSON.parse(result[i].adds_on), "name");
            _.each(adds_on, function (value, key, object) {
                final_json.name = key
                final_json.value = value
                adds_on_ar.push(final_json);
                final_json = {}
            })
            result[i].adds_on = adds_on_ar
            adds_on_ar = []
            if (result[i].pricing_type == 1) {
                result[i].hourly_price = JSON.parse(result[i].price);
                result[i].price_type = 1;

            } else {
                result[i].price_type = 0;
                delete result[i].hourly_price;
            }
            if (i == result.length - 1) {
                let product_group_by = _.groupBy(result, "cate_name");
                // logger.debug("====Length==",Object.keys(product_group_by),product_group_by);

                _.each(product_group_by, function (value, key, objects) {

                    prod_final_json.name = key

                    prod_final_json.value = value

                    prod_arr.push(prod_final_json);
                    // logger.debug("===>>>",prod_final_json)
                    prod_final_json = {}
                })

                callback(null, prod_arr);
            }
        }
    }
    else {
        callback(null, result);
    }

    //     }
    // })
}

function collections(dbName, res, product, callback) {
    var product = product;
    var length = product.length;
    var data;
    var flag = {};
    var listing = [];
    async.auto({
        getDetailsSubCategory: function (callback) {
            data = _.uniq(_.pluck(product, 'detailed_name'));
            callback(null);
        },
        setObject: ['getDetailsSubCategory', function (callback) {
            if (data.length) {
                for (var i = 0; i < data.length; i++) {
                    var tmp = [];
                    for (var k = 0; k < length; k++) {
                        if (data[i] == product[k].detailed_name) {
                            tmp.push(product[k])
                        }
                    }
                    flag.DetailSubName = data[i];
                    flag.product = tmp;
                    for (var k = 0; k < tmp.length; k++) {
                        (function (k) {
                            flag.product[k].id = tmp[k].product_id;
                        }(k));
                    }
                    listing.push({ DetailSubName: data[i], product: tmp });
                    tmp = [];
                }
            }
            callback(null);
        }],
    }, function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            callback(null, listing);
        }
    })
}
/**
 * @description used for fetch an all product data like its variant,customizaiton etc
 * @param {*} version 
 * @param {*} dbName 
 * @param {*} res 
 * @param {*} productId 
 * @param {*} languageId 
 * @param {*} supplierBranchId 
 * @param {*} pricing_type 
 * @param {*} offer 
 * @param {*} user_type_check 
 * @param {*} user_type_id 
 * @param {*} user_id 
 * @param {*} current_date 
 * @param {*} callback 
 */
var getProductDetail = async function (version, dbName, res, productId,
    languageId, supplierBranchId, pricing_type, offer, user_type_check, user_type_id,
    user_id, current_date, callback) {
    try {
        let user_type_condition_one = ""
        let user_type_condition_two = ""

        if (user_type_check && user_type_check.length > 0) {
            user_type_condition_one = "and pc.user_type_id=" + user_type_id + " "
            user_type_condition_two = "and pr.user_type_id=" + user_type_id + " "
        }


        // Adding productCustomTabDescriptionLabel per supplier
        let tblSettingSql = "";
        let tblSettingSql_Inner = "";
        const settingDataKeys = await func.getSettingDataKeyAndValue(dbName, ['isProductCustomTabDescriptionEnable']);
        settingDataKeys.keyAndValue.isProductCustomTabDescriptionEnable = !!settingDataKeys.keyAndValue.isProductCustomTabDescriptionEnable;
        if (settingDataKeys.keyAndValue.isProductCustomTabDescriptionEnable === true) {
            tblSettingSql = "customTabDescription1,customTabDescription2,customTabDescription3,";
            tblSettingSql_Inner = "p.customTabDescription1,p.customTabDescription2,sp.customTabDescription3,";
        }


        if (offer == 0) {




            var sql;
            if (parseInt(version) >= 1) {
                sql = "select  " + tblSettingSql + "categories_id,sub_category_id,IF((select count(*)  from questions  where questions.category_id=categories_id) > 0, 1, 0) as is_question,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=" + parseInt(productId) + " and pr.is_deleted=0      ) as adds_on,IF((select count(*) from product_favourite where product_favourite.product_id=" + parseInt(productId) + " and product_favourite.user_id=" + user_id + " and product_favourite.status=1 )>0,1,0) as is_favourite,IFNULL((select SUM(value) from product_rating where product_id=" + parseInt(productId) + "),0) as total_rating,IFNULL((select AVG(value) from product_rating where product_id=" + parseInt(productId) + " ),0) as avg_rating,(select COUNT(*) from product_rating where product_id=" + parseInt(productId) + " and reviews!='') as total_reviews,brand_id,brand_name,discount,brand_image,price_type,pricing_type,price,urgent_value,can_urgent,product_desc,name,measuring_unit,id,bar_code,sku,supplier_branch_id,rating as supplier_rating,supplier_address,delivery_max_time,delivery_min_time,supplier_image,supplier_id,supplier_name,Size_chart_url,country_of_origin,logo,is_package,commission,item_unavailable,commission_type,image_path,fixed_price,hourly_price, " +
                    "  parent_id,is_appointment,is_allergy_product,allergy_description, purchase_limit,is_subscription_required,category_flow,category_id,is_agent,is_product,duration,agent_list,is_quantity,display_price ,handling ,handling_supplier,delivery_charges,urgent_price,urgent_type,interval_flag,interval_value,quantity,purchased_quantity from (select if(pr.display_price=pr.price,0,1) AS discount,ct.category_flow as category_flow,ct.id as category_id,ct.is_quantity,ct.is_agent,ct.agent_list as agent_list,ct.type,br.id as brand_id,brm.name as brand_name,br.image as brand_image,sb.id as supplier_branch_id,pr.price_type,pr.pricing_type,pr.price,pr.urgent_value,pr.can_urgent,pml.product_desc,pml.name,pml.measuring_unit,p.id,p.interval_flag,p.interval_value,p.Size_chart_url,p.country_of_origin,p.is_product,p.duration,p.bar_code,p.sku,p.is_package,p.commission,p.item_unavailable,p.commission_type,p.quantity,p.purchased_quantity,pi.image_path,pr.price as fixed_price,pr.price as hourly_price," +
                    " p.is_appointment,p.is_allergy_product,p.parent_id,p.allergy_description, p.purchase_limit,p.is_subscription_required,pr.display_price ," + tblSettingSql_Inner + "p.category_id as categories_id,p.sub_category_id, pr.handling , pr.handling_supplier,pr.delivery_charges,pr.urgent_price,sp.logo,sp.rating,sp.delivery_max_time,sp.delivery_min_time,sp.logo as supplier_image,sp.id as supplier_id,sml.address as supplier_address,sml.name as supplier_name,pr.urgent_type from product p join product_image pi on ";
                sql += " p.id = pi.product_id left join brands br on br.id=p.brand_id and br.deleted_by=0 left join brands_ml brm on brm.brand_id = br.id join product_ml pml on p.id = pml.product_id join product_pricing pr on p.id = pr.product_id and pr.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=pr.product_id and pc.is_deleted=0 and " + user_type_condition_one + " having counter>1) , 1, 0)" +
                    " join supplier_branch_product sbapa on sbapa.product_id = p.id JOIN  supplier_branch sb ON sbapa.supplier_branch_id=sb.id join supplier sp ON sb.supplier_id=sp.id  join supplier_ml sml on" +
                    " sml.supplier_id = sp.id  join categories ct on ct.id=p.category_id" +
                    " where p.id = ? and pml.language_id = ? and p.is_live = 1 and pr.is_deleted = 0 " +
                    " and ((pr.price_type = '1' and sbapa.supplier_branch_id = ? and DATE(pr.start_date) <= " +
                    " '" + current_date + "' and DATE(pr.end_date) >= '" + current_date + "' " + user_type_condition_two + ") or (pr.price_type = 0 " + user_type_condition_two + ")) order by pr.price_type DESC) SELECTION group by id";

            }
            else {
                sql = "select  " + tblSettingSql + " categories_id,sub_category_id,IF((select count(*)  from questions  where questions.category_id=categories_id) > 0, 1, 0) as is_question, ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=" + parseInt(productId) + " and pr.is_deleted=0      ) as adds_on,IF((select count(*) from product_rating where user_id=" + user_id + " and product_id=" + parseInt(productId) + ")>0,1,0) as is_rated,IF((select count(*) from product_favourite where product_favourite.product_id=" + parseInt(productId) + " and product_favourite.user_id=" + user_id + " and product_favourite.status=1 )>0,1,0) as is_favourite,IFNULL((select SUM(value) from product_rating where product_id=" + parseInt(productId) + "),0) as total_rating,IFNULL((select AVG(value) from product_rating where product_id=" + parseInt(productId) + " ),0) as avg_rating,(select COUNT(*) from product_rating where product_id=" + parseInt(productId) + " and reviews!='') as total_reviews,brand_id,brand_name,discount,brand_image,price_type,pricing_type,price,urgent_value,can_urgent,Size_chart_url,country_of_origin,product_desc,name,measuring_unit,id,bar_code,sku,supplier_branch_id,rating as supplier_rating,supplier_address,delivery_max_time,delivery_min_time,supplier_image,supplier_id,supplier_name,logo,is_package,item_unavailable,commission,commission_type,image_path,fixed_price,hourly_price, " +
                    " parent_id,is_appointment,is_allergy_product,allergy_description, purchase_limit,is_subscription_required,category_flow,category_id,is_agent,is_product,duration,agent_list,is_quantity,display_price ,handling ,handling_supplier,delivery_charges,urgent_price,urgent_type,quantity,purchased_quantity from (select if(pr.display_price=pr.price,0,1) AS discount,ct.category_flow as category_flow,ct.id as category_id,ct.is_quantity,ct.is_agent,ct.agent_list as agent_list,ct.type,br.id as brand_id,brm.name as brand_name,br.image as brand_image,sb.id as supplier_branch_id,pr.price_type,pr.pricing_type,pr.price,pr.urgent_value,pr.can_urgent,p.Size_chart_url,p.country_of_origin,pml.product_desc,pml.name,pml.measuring_unit,p.id,p.is_product,p.duration,p.bar_code,p.sku,p.is_package,p.item_unavailable,p.commission,p.quantity,p.purchased_quantity,p.commission_type,pi.image_path,pr.price as fixed_price,pr.price as hourly_price," +
                    " p.is_appointment,p.is_allergy_product,p.parent_id,p.allergy_description,p.purchase_limit,p.is_subscription_required,pr.display_price ," + tblSettingSql_Inner + "p.category_id as categories_id,p.sub_category_id, pr.handling , pr.handling_supplier,pr.delivery_charges,pr.urgent_price,sp.logo,sp.rating,sp.delivery_max_time,sp.delivery_min_time,sp.logo as supplier_image,sp.id as supplier_id,sml.address as supplier_address,sml.name as supplier_name,pr.urgent_type from product p join product_image pi on ";
                sql += " p.id = pi.product_id left join brands br on br.id=p.brand_id and br.deleted_by=0 left join brands_ml brm on brm.brand_id = br.id join product_ml pml on p.id = pml.product_id join product_pricing pr on p.id = pr.product_id and pr.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=pr.product_id and pc.is_deleted=0 " + user_type_condition_one + " having counter>1) , 1, 0)" +
                    " join supplier_branch_product sbapa on sbapa.product_id = p.id JOIN  supplier_branch sb ON sbapa.supplier_branch_id=sb.id join supplier sp ON sb.supplier_id=sp.id  join supplier_ml sml on" +
                    " sml.supplier_id = sp.id  join categories ct on ct.id=p.category_id" +
                    " where p.id = ? and pml.language_id = ? and p.is_live = 1 and pr.is_deleted = 0 " +
                    " and ((pr.price_type = '1' and sbapa.supplier_branch_id = ? and DATE(pr.start_date) <= " +
                    " '" + current_date + "' and DATE(pr.end_date) >= '" + current_date + "' " + user_type_condition_two + ") or (pr.price_type = 0 " + user_type_condition_two + ")) order by pr.price_type DESC) SELECTION group by id";

            }
            let result = await ExecuteQ.Query(dbName, sql, [productId, languageId, supplierBranchId])
            // var statement=multiConnection[dbName].query(sql, [productId,languageId,languageId,supplierBranchId], function (err, result) {
            // console.log("........iii fff...............f.....................",err,statement.sql);
            // if (err) {
            //     var msg = "something went wrong";
            //     sendResponse.sendErrorMessage(msg,res,500);
            // }
            // else {
            callback(null, result);
            //     }
            // })
        }
        else if (offer == 1) {
            if (parseInt(version) >= 1) {
                var sql = "select  categories_id,sub_category_id,is_appointment,is_allergy_product,allergy_description,purchase_limit,is_subscription_required,IF((select count(*)  from questions  where questions.category_id=categories_id) > 0, 1, 0) as is_question, ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*) from product_rating where user_id=" + user_id + " and product_id=" + parseInt(productId) + ")>0,1,0) as is_rated,IF((select count(*) from product_favourite where product_favourite.product_id=" + parseInt(productId) + " and product_favourite.user_id=" + user_id + " and product_favourite.status=1 )>0,1,0) as is_favourite,IFNULL((select SUM(value) from product_rating where product_id=" + parseInt(productId) + "),0) as total_rating,IFNULL((select AVG(value) from product_rating where product_id=" + parseInt(productId) + " ),0) as avg_rating,(select COUNT(*) from product_rating where product_id=" + parseInt(productId) + " and reviews!='') as total_reviews,br.id as brand_id,brm.name as brand_name,br.image as brand_image,sml.address as supplier_address,sp.rating as supplier_rating,sp.logo as supplier_image,sp.name as supplier_name,sp.id as supplier_id,sb.id as supplier_branch_id,pr.display_price,pr.pricing_type,pr.price,pr.urgent_value,pr.can_urgent,pml.product_desc,pml.name,pml.measuring_unit,p.id,p.interval_flag,p.Size_chart_url,p.country_of_origin,p.interval_value,p.is_product,p.duration,p.quantity,p.purchased_quantity,p.item_unavailable,p.bar_code,p.sku,p.is_package,p.commission,p.commission_type,pi.image_path,pr.price as fixed_price,pr.price as hourly_price," +
                    " pr.handling," + tblSettingSql_Inner + "p.category_id as categories_id,p.is_appointment, p.is_allergy_product,p.allergy_description,p.purchase_limit,p.is_subscription_required,p.sub_category_id,if(pr.display_price=pr.price,0,1) AS discount,ct.category_flow,ct.id as category_id,ct.is_quantity,ct.is_agent,ct.agent_list as agent_list,ct.type, pr.handling_supplier,pr.delivery_charges,pr.can_urgent,pr.urgent_price,pr.urgent_type from product p join product_image pi on " +
                    " p.id = pi.product_id left join brands br on br.id=p.brand_id and br.deleted_by=0 left join brands_ml brm on brm.brand_id = br.id join product_ml pml on p.id = pml.product_id join product_pricing pr on p.id = pr.product_id " +
                    // " join supplier_branch_area_product sbapa on sbapa.product_id = p.id " +
                    " join supplier_branch_product sbapa on sbapa.original_product_id = p.id JOIN  supplier_branch sb ON sbapa.supplier_branch_id=sb.id join supplier sp ON sb.supplier_id=sp.id  join supplier_ml sml on" +
                    " sml.supplier_id = sp.id join categories ct on ct.id=p.category_id" +
                    " where p.id = ? and pml.language_id = ? and sml.language_id=? and p.is_live = 1 and pr.is_deleted = 0 " +
                    " and pr.price_type = '1' " + user_type_condition_two + " and sbapa.supplier_branch_id = ?  and DATE(pr.start_date) <= " +
                    " '" + current_date + "' and DATE(pr.end_date) >= '" + current_date + "' ";
            }
            else {
                var sql = "select  " + tblSettingSql + "categories_id,is_appointment, is_allergy_product,allergy_description,purchase_limit,is_subscription_required,sub_category_id,IF((select count(*)  from questions  where questions.category_id=categories_id) > 0, 1, 0) as is_question, ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,IF((select count(*) from product_rating where user_id=" + user_id + " and product_id=" + parseInt(productId) + ")>0,1,0) as is_rated,IF((select count(*) from product_favourite where product_favourite.product_id=" + parseInt(productId) + " and product_favourite.user_id=" + user_id + " and product_favourite.status=1 )>0,1,0) as is_favourite,IFNULL((select SUM(value) from product_rating where product_id=" + parseInt(productId) + "),0) as total_rating,IFNULL((select AVG(value) from product_rating where product_id=" + parseInt(productId) + " ),0) as avg_rating,(select COUNT(*) from product_rating where product_id=" + parseInt(productId) + " and reviews!='') as total_reviews,br.id as brand_id,brm.name as brand_name,br.image as brand_image,sml.address as supplier_address,sp.rating as supplier_rating,sp.logo as supplier_image,sp.name as supplier_name,sp.id as supplier_id,sb.id as supplier_branch_id,pr.display_price,pr.pricing_type,pr.price,pr.urgent_value,pr.can_urgent,pml.product_desc,pml.name,pml.measuring_unit,p.id,p.Size_chart_url,p.country_of_origin,p.is_product,p.duration,p.bar_code,p.sku,p.is_package,p.commission,p.quantity,p.purchased_quantity,p.item_unavailable,p.commission_type,pi.image_path,pr.price as fixed_price,pr.price as hourly_price," +
                    " pr.handling," + tblSettingSql_Inner + "p.category_id as categories_id,p.is_appointment,p.is_allergy_product,p.allergy_description,p.purchase_limit,p.is_subscription_required,p.sub_category_id,if(pr.display_price=pr.price,0,1) AS discount,ct.category_flow,ct.id as category_id,ct.is_quantity,ct.is_agent,ct.agent_list as agent_list,ct.type, pr.handling_supplier,pr.delivery_charges,pr.can_urgent,pr.urgent_price,pr.urgent_type from product p join product_image pi on " +
                    " p.id = pi.product_id left join brands br on br.id=p.brand_id and br.deleted_by=0 left join brands_ml brm on brm.brand_id = br.id join product_ml pml on p.id = pml.product_id join product_pricing pr on p.id = pr.product_id " +
                    // " join supplier_branch_area_product sbapa on sbapa.product_id = p.id " +
                    " join supplier_branch_product sbapa on sbapa.original_product_id = p.id JOIN  supplier_branch sb ON sbapa.supplier_branch_id=sb.id join supplier sp ON sb.supplier_id=sp.id  join supplier_ml sml on" +
                    " sml.supplier_id = sp.id join categories ct on ct.id=p.category_id" +
                    " where p.id = ? and pml.language_id = ? and sml.language_id=? and p.is_live = 1 and pr.is_deleted = 0 " +
                    " and pr.price_type = '1' " + user_type_condition_two + " and sbapa.supplier_branch_id = ?  and DATE(pr.start_date) <= " +
                    " '" + current_date + "' and DATE(pr.end_date) >= '" + current_date + "' ";
            }
            let result = await ExecuteQ.Query(dbName, sql, [productId, languageId, languageId, supplierBranchId])
            //    var statement=multiConnection[dbName].query(sql, [productId,languageId,languageId,supplierBranchId], function (err, result) {
            //         console.log("........eeeiii....................................",err,statement.sql);
            //         if (err) {
            //             var msg = "something went wrong";
            //             sendResponse.sendErrorMessage(msg,res,500);
            //         }
            //         else {
            callback(null, result);
            //     }
            // })
        }
        else if (offer == 2) {
            if (parseInt(version) >= 1) {
                var sql = "select  " + tblSettingSql + "categories_id,is_appointment,is_allergy_product,allergy_description,purchase_limit,is_subscription_required,sub_category_id,IF((select count(*)  from questions  where questions.category_id=categories_id) > 0, 1, 0) as is_question, IF((select count(*) from product_favourite where product_favourite.product_id=" + parseInt(productId) + " and product_favourite.user_id=" + user_id + " and product_favourite.status=1 )>0,1,0) as is_favourite,IFNULL((select SUM(value) from product_rating where product_id=" + parseInt(productId) + "),0) as total_rating,IFNULL((select AVG(value) from product_rating where product_id=" + parseInt(productId) + " ),0) as avg_rating,(select COUNT(*) from product_rating where product_id=" + parseInt(productId) + " and reviews!='') as total_reviews,br.id as brand_id,brm.name as brand_name,br.image as brand_image,sml.address as supplier_address,s.rating as supplier_rating,s.logo as supplier_image,s.name as supplier_name,s.id as supplier_id,sp.supplier_branch_id,sp.price,sp.display_price,pr.pricing_type,pml.product_desc,pml.name,p.bar_code,p.sku,p.is_package,p.Size_chart_url,p.country_of_origin," +
                    " p.interval_flag," + tblSettingSql_Inner + "p.category_id as categories_id,p.is_allergy_product,p.is_appointment,p.allergy_description,p.purchase_limit,p.is_subscription_required,p.sub_category_id,p.interval_value,p.quantity,p.purchased_quantity,p.id,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=" + parseInt(productId) + " and pr.is_deleted=0      ) as adds_on,p.is_product,p.item_unavailable,p.duration,ct.category_flow,ct.id as category_id,ct.is_quantity,ct.is_agent,ct.agent_list as agent_list,ct.type,pml.measuring_unit,pi.image_path from product p join product_ml pml on p.id= pml.product_id join product_image pi " +
                    " on pi.product_id = p.id left join brands br on br.id=p.brand_id and br.deleted_by=0 left join brands_ml brm on brm.brand_id = br.id join supplier_package sp on sp.package_id = p.id " +
                    " join supplier_branch sb on sb.id=sp.supplier_branch_id join supplier s on s.id=sb.supplier_id left join supplier_ml sml on sml.supplier_id = s.id join categories ct on ct.id=p.category_id where p.id =? and pml.language_id = ?" +
                    " and p.is_live = 1 and p.is_deleted =0 and sp.is_deleted=0 and sp.supplier_branch_id =? ";

            }
            else {
                var sql = "select " + tblSettingSql + "categories_id,is_appointment,is_allergy_product,allergy_description,purchase_limit,is_subscription_required,sub_category_id,IF((select count(*)  from questions  where questions.category_id=categories_id) > 0, 1, 0) as is_question,IF((select count(*) from product_rating where user_id=" + user_id + " and product_id=" + parseInt(productId) + ")>0,1,0) as is_rated,IF((select count(*) from product_favourite where product_favourite.product_id=" + parseInt(productId) + " and product_favourite.user_id=" + user_id + " and product_favourite.status=1 )>0,1,0) as is_favourite,IFNULL((select SUM(value) from product_rating where product_id=" + parseInt(productId) + "),0) as total_rating,IFNULL((select AVG(value) from product_rating where product_id=" + parseInt(productId) + " ),0) as avg_rating,(select COUNT(*) from product_rating where product_id=" + parseInt(productId) + " and reviews!='') as total_reviews,br.id as brand_id,brm.name as brand_name,br.image as brand_image,sml.address as supplier_address,s.rating as supplier_rating,s.logo as supplier_image,s.name as supplier_name,s.id as supplier_id,sp.supplier_branch_id,sp.price,sp.display_price,pr.pricing_type,pml.product_desc,pml.name,p.bar_code,p.sku,p.is_package,p.quantity,p.purchased_quantity,p.Size_chart_url,p.country_of_origin," +
                    "  p.id," + tblSettingSql_Inner + "p.category_id as categories_id,p.is_allergy_product,p.is_appointment,p.allergy_description,p.purchase_limit,p.is_subscription_required,p.sub_category_id,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=" + parseInt(productId) + " and pr.is_deleted=0      ) as adds_on,p.is_product,p.item_unavailable,p.duration,ct.category_flow,ct.id as category_id,ct.is_quantity,ct.is_agent,ct.agent_list as agent_list,ct.type,pml.measuring_unit,pi.image_path from product p join product_ml pml on p.id= pml.product_id join product_image pi " +
                    " on pi.product_id = p.id left join brands br on br.id=p.brand_id and br.deleted_by=0  left join brands_ml brm on brm.brand_id = br.id join supplier_package sp on sp.package_id = p.id " +
                    " join supplier_branch sb on sb.id=sp.supplier_branch_id join supplier s on s.id=sb.supplier_id left join supplier_ml sml on sml.supplier_id = s.id join categories ct on ct.id=p.category_id where p.id =? and pml.language_id = ?" +
                    " and p.is_live = 1 and p.is_deleted =0 and sp.is_deleted=0 and sp.supplier_branch_id =? ";
            }
            let result = await ExecuteQ.Query(dbName, sql, [productId, languageId, supplierBranchId])
            // var st=multiConnection[dbName].query(sql, [productId,languageId,supplierBranchId], function (err, result) {
            //         console.log("........iii....................................",st.sql);
            //         if (err) {
            //             var msg = "something went wrong";
            //             sendResponse.sendErrorMessage(msg,res,500);
            //         }
            //         else {
            callback(null, result);
            //     }
            // })
        }
        else {
            var sql = "select " + tblSettingSql + "category_id as categories_id,is_allergy_product,allergy_description,purchase_limit,is_subscription_required,sub_category_id,IF((select count(*)  from questions  where questions.category_id=categories_id) > 0, 1, 0) as is_question,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=pp.product_id and pr.is_deleted=0      ) as adds_on,IF((select count(*) from product_rating where user_id=" + user_id + " and product_id=" + parseInt(productId) + ")>0,1,0) as is_rated,IF((select count(*) from product_favourite where product_favourite.product_id=" + parseInt(productId) + " and product_favourite.user_id=" + user_id + " and product_favourite.status=1 )>0,1,0) as is_favourite,IFNULL((select SUM(value) from product_rating where product_id=" + parseInt(productId) + "),0) as total_rating,IFNULL((select AVG(value) from product_rating where product_id=" + parseInt(productId) + " ),0) as avg_rating,(select COUNT(*) from product_rating where product_id=" + parseInt(productId) + " and reviews!='') as total_reviews,pp.price_type,pp.price,p.Size_chart_url,p.country_of_origin,pp.display_price,pml.promotion_description as product_desc, " +
                " 1 is_product,pml.promotion_name as name," + tblSettingSql_Inner + "ct.id as category_id,p.is_allergy_product,p.allergy_description,p.purchase_limit,p.is_appointment,p.item_unavailable,p.is_subscription_required,ct.category_flow,ct.is_quantity,ct.is_agent,ct.agent_list,sbp.promotion_image as image_path,s.rating as supplier_rating,s.id as supplier_id,sml.address as supplier_address,s.logo as supplier_image,s.name as supplier_name,sbp.supplier_branch_id,s.logo as supplier_image,sbp.offer_product_value from supplier_branch_promotions sbp join supplier s on s.id=sbp.supplier_id left join supplier_ml sml on sml.supplier_id = s.id" +
                " join promotions_ml pml on pml.promotion_id=sbp.id join product_pricing pp on pp.product_id = sbp.offer_product_value  join product p on pp.product_id = p.id join categories ct on ct.id=sbp.category_id" +
                " where pp.is_deleted = 0 and sbp.is_deleted =0 and sbp.id=? and pp.price_type = 0 and pml.language_id= ? ";
            let result = await ExecuteQ.Query(dbName, sql, [productId, languageId])
            //    var statement=multiConnection[dbName].query(sql,[productId,languageId],function (err,result) {
            //    console.log("...e.....",err,result,statement.sql)
            //     if (err) {
            //         console.log("errrrrr",err);
            //         var msg = "something went wrong";
            //         sendResponse.sendErrorMessage(msg,res,500);
            //     }
            //     else {
            callback(null, result);
            //     }
            // })
        }
    } catch (Err) {
        logger.debug("===Err!==", Err)
        var msg = "something went wrong";
        sendResponse.sendErrorMessage(msg, res, 500);
    }
}

// var getProductDetailOrder  = function (dbName,res,cartId,productId,languageId,type,callback){
//             //    console.log(productId);
//             var sql = "select pml.product_desc,pml.name,pml.measuring_unit,p.id,p.bar_code,p.sku,p.is_package,p.commission,p.commission_type,pi.image_path,pr.price, " +
//                 " pr.display_price , pr.handling , pr.handling_supplier,pr.delivery_charges,pr.can_urgent,pr.urgent_price,pr.urgent_type ,cp.quantity,cp.supplier_branch_id ,cp.handling_admin as cart_product_handling_admin ,cp.handling_supplier as cart_product_handling_supplier from product p join product_image pi on ";
//             sql += " p.id = pi.product_id join product_ml pml on p.id = pml.product_id join product_pricing pr on p.id = pr.product_id  " +
//                 " join cart_products cp on cp.product_id = p.id  " +
//                 " where cp.cart_id = ? and  p.id = ? and pml.language_id = ? and p.is_live = 1 " +
//                   " and ((pr.price_type = '1' and DATE(pr.start_date) <= " +
//                   " CURDATE() and DATE(pr.end_date) >= CURDATE()) or (pr.price_type = 0)) ";
//             var st=multiConnection[dbName].query(sql, [cartId,productId,languageId], function (err, result) {
//                 console.log(st.sql)
//                 if (err) {
//                     var msg = "something went wrong";
//                     sendResponse.sendErrorMessage(msg,res,500);
//                 }
//                 else {
//                     console.log("===RESULT==",result);

//                     callback(null, result);
//                 }
//             })

// }
var getProductDetailOrder = function (dbName, res, cartId, productId, languageId, type, callback) {
    var package1 = parseInt(type);
    // console.log("pac.......",package1,typeof(package1));
    if (package1) {
        var sql = "select pml.product_desc,pml.name,pml.measuring_unit,p.id,p.bar_code,p.sku,p.is_package,p.commission,p.commission_type,pi.image_path,pr.price," +
            " pr.display_price,cp.quantity ,cp.handling_admin as cart_product_handling_admin ,cp.supplier_branch_id,cp.handling_supplier as cart_product_handling_supplier from product p join product_image pi on " +
            " p.id = pi.product_id join product_ml pml on p.id = pml.product_id join supplier_package pr on p.id = pr.package_id  " +
            " join cart_products cp on cp.product_id = p.id  " +
            " where cp.cart_id = ? and  p.id = ? and pml.language_id = ? and p.is_live = 1";
    }
    else {
        var sql = "select price_type,product_desc,name,measuring_unit,id,bar_code,sku,is_package,commission,commission_type,image_path,price, " +
            " display_price , handling" +
            ",delivery_charges,can_urgent,urgent_price,urgent_type ,quantity ,supplier_branch_id,cart_product_handling_admin ,cart_product_handling_supplier from (select pml.product_desc,pml.name,pml.measuring_unit,p.id,p.bar_code,p.sku,p.is_package,p.commission,p.commission_type,pi.image_path,pr.price,pr.price_type, " +
            " pr.display_price , pr.handling , pr.handling_supplier,pr.delivery_charges,pr.can_urgent,pr.urgent_price,pr.urgent_type ,cp.quantity ,cp.supplier_branch_id, cp.handling_admin as cart_product_handling_admin ,cp.handling_supplier as cart_product_handling_supplier from product p join product_image pi on ";
        sql += " p.id = pi.product_id join product_ml pml on p.id = pml.product_id join product_pricing pr on p.id = pr.product_id  " +
            " join cart_products cp on cp.product_id = p.id  " +
            " where cp.cart_id = ? and  p.id = ? and pml.language_id = ? and p.is_live = 1 and pr.is_deleted=0" +
            " and ((pr.price_type = '1' and DATE(pr.start_date) <= " +
            " CURDATE() and DATE(pr.end_date) >= CURDATE()) or (pr.price_type = 0)) order by pr.price_type DESC) SELECTION GROUP BY id";
    }
    var statement = multiConnection[dbName].query(sql, [cartId, productId, languageId], function (err, result) {
        logger.debug("===STATEMENT====>>=", statement.sql)
        if (err) {
            logger.debug("===========****===========err==========*****==========", err);
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            // console.log("result.....",result);
            if (package1) {
                result[0].price_type = 0;
                result[0].handling = 0;
                result[0].handling_supplier = 0;
                result[0].delivery_charges = 0;
                result[0].can_urgent = 0;
                result[0].urgent_price = 0;
                result[0].urgent_type = 0;
            }
            callback(null, result);
        }
    })
}

var checkUserAccessToken = async function (dbName, res, accessToken, callback) {
    try {
        var sql = " select id,is_active from user where access_token = ? ";
        let result = await ExecuteQ.Query(dbName, sql, [accessToken]);
        // multiConnection[dbName].query(sql, [accessToken], function (err, result) {
        //     if (err) {
        //         var msg = "db error :";
        //         sendResponse.sendErrorMessage(msg,res,500);
        //     }
        //     else {
        if (result.length) {
            if (result[0].is_active == 1) {
                callback(null, result[0]);
            }
            else {
                var msg = "User Not Active"
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
        } else {
            var msg = "invalid access token ";
            return sendResponse.sendErrorMessage(msg, res, 401);
        }
        //     }
        // })
    }
    catch (Err) {
        logger.debug("===Err!==", Err);
        var msg = "db error :";
        sendResponse.sendErrorMessage(msg, res, 500);
    }
}

var checkUserAccessActiveToken = function (dbName, res, accessToken, callback) {
    var sql = " select id,is_active from user where access_token = ? ";
    multiConnection[dbName].query(sql, [accessToken], function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            if (result.length) {
                callback(null, result[0]);
            } else {
                var msg = "invalid access token ";
                return sendResponse.sendErrorMessage(msg, res, 401);
            }
        }
    })
}


var genrateCart = function (dbName, res, id, branchId, remarks, promoationType, area_id,
    questionToBeSave, addOn, callback) {
    var date1 = moment().utcOffset(4);
    var date = date1._d
    var sql = "insert into cart (user_id,remarks,supplier_branch_id,created_on,is_deleted,promoationType,questions,addOn)values(?,?,?,?,?,?,?,?)";
    var stmt = multiConnection[dbName].query(sql, [id, remarks, branchId, date, 0, promoationType, JSON.stringify(questionToBeSave), addOn], function (err, result) {
        logger.debug("=========genrtate cart========", stmt.sql)
        if (err) {
            logger.debug("==============error in genrate cart function===================", stmt.sql, err)
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            return callback(null, result.insertId);
        }
    })
}


var addProductInCart = async function (dbName, res, productList, cartId, deviceId, callback) {
    var list = productList;
    var queryString = "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?),";
    var insertString = "";
    var values = [];
    var productId = [];
    //console.log("device id",deviceId);
    //console.log("data",productList,typeof(productList),productList.length);
    if (deviceId == 1) {
        var str = productList.toString();
        var finalData = productList.replace(/\\/g, '');
        var finalData1 = finalData.replace(/\s/g, '');
        finalData1 = finalData1.substring(1, finalData1.length - 1)
        productList = JSON.parse(finalData1);
        //productList =  JSON.parse(finalData1);
    }
    if (deviceId == 2) {
        productList = JSON.parse(productList);
        //  productList[0].price_type = 0;
    }
    /*   else {
           productList =  JSON.parse(productList);
       }*/

    //console.log("...................productList.......................",productList);
    var length = productList.length;
    // console.log(typeof  productList)
    // console.log("..........",length);
    //console.log("data1",productList,typeof(productList),productList.length);
    if (length) {
        for (var i = 0; i < length; i++) {
            (async function (i) {
                productId.push(productList[i].productId);
                values.push(
                    productList[i].productId,
                    productList[i].delivery_charge != undefined ? productList[i].delivery_charge : 0,
                    productList[i].quantity,
                    cartId,
                    productList[i].handling_admin != undefined ? productList[i].handling_admin : 0,
                    productList[i].handling_supplier,
                    productList[i].price_type,
                    productList[i].supplier_branch_id,
                    productList[i].supplier_id,
                    productList[i].category_id != undefined ? productList[i].category_id : 0,
                    productList[i].perProductLoyalityDiscount != undefined ? parseFloat(productList[i].perProductLoyalityDiscount) * parseInt(productList[i].quantity) : 0,
                    productList[i].duration != undefined ? productList[i].duration : 0,
                    productList[i].tax != undefined ? productList[i].tax : 0.0,
                    productList[i].product_reference_id !== undefined ? productList[i].product_reference_id : "",
                    productList[i].product_dimensions !== undefined ? productList[i].product_dimensions : "",
                    productList[i].product_upload_reciept !== undefined ? productList[i].product_upload_reciept : "",
                    productList[i].product_owner_name !== undefined ? productList[i].product_owner_name : "",
                    productList[i].agentBufferPrice !== undefined ? productList[i].agentBufferPrice : 0,
                    productList[i].special_instructions !== undefined ? productList[i].special_instructions : "",
                    productList[i].freeQuantity !== undefined ? productList[i].freeQuantity : 0,
                    productList[i].is_liquor !== undefined ? productList[i].is_liquor : 0,
                    //    productList[i].tax_exempt !==undefined?productList[i].tax_exempt:0

                );
                insertString = insertString + queryString;
            }(i));

            if (i == (length - 1)) {
                insertString = insertString.substring(0, insertString.length - 1);
                var sql = "insert into cart_products(product_id,delivery_charge,"
                sql += "quantity,cart_id,handling_admin,handling_supplier,price_type,"
                sql += "supplier_branch_id,supplier_id,category_id,loyality_discount,"
                sql += "duration,tax,product_reference_id,product_dimensions,product_upload_reciept,product_owner_name,agentBufferPrice,special_instructions,freeQuantity,is_liquor) values" + insertString;
                // try{
                //     let result=await ExecuteQ.Query(dbName,sql,values);
                //     console.log("pp",productId);
                //     callback(null,productId);
                // }
                // catch(Err){
                //         console.log("jvhbdasjvhsd",Err)
                //        var msg = "product array not in format";
                //        sendResponse.sendErrorMessage(msg,res,500);
                // }
                multiConnection[dbName].query(sql, values, function (err, result) {
                    console.log("...............eerrrr........................", err, result);
                    if (err) {
                        console.log("jvhbdasjvhsd", err)
                        var msg = "product array not in format";
                        sendResponse.sendErrorMessage(msg, res, 500);
                    }
                    else {
                        console.log("pp", productId);
                        callback(null, productId);
                    }
                })
            }
        }
    }
    else {
        var msg = "Product List is empty";
        sendResponse.sendErrorMessage(msg, res, 500);
    }

}


var setFavourite = function (dbName, reply, id, supplierId, callback) {
    var sql = "insert into user_favourite (user_id,	supplier_id)values(?,?)";
    multiConnection[dbName].query(sql, [id, supplierId], function (err, result) {
        if (err) {
            var msg = "db error"
            sendResponse.sendErrorMessage(msg, reply, 500);
        }
        else {
            callback(null, result);
        }
    })
}


var getCartProductList = async function (dbName, reply, id, cartId, callback) {
    try {


        var sql = " select c.promoationType,c.preparation_time,c.id,c.user_id,c.remarks,cp.supplier_id,cp.supplier_branch_id,c.created_on,c.delivery_type,c.delivery_date,c.delivery_time, c.urgent_price , c.remarks ,c.pickup_date,IFNULL(cp.tax,0) as tax,c.user_address_id, " +
            " pp.price,cp.supplier_id as supplierId,c.user_pickup_address,c.user_delivery_address,c.pickup_time,cp.delivery_charge ,c.handling_admin , c.handling_supplier , c.delivery_charges ,cp.delivery_charge, " +
            " cp.product_reference_id,cp.product_dimensions,cp.product_upload_reciept,cp.product_owner_name,cp.special_instructions, c.net_amount , c.min_order_delivery_crossed , c.currency_id ,cp.product_id,cp.quantity,cp.supplier_id,cp.category_id,cp.handling_admin as handlingAdmin ,IFNULL(cp.duration,0) as duration,IFNULL(cp.loyality_discount,0) as loyality_discount, cp.handling_supplier as handlingSupplier,cp.price_type,s.vat_value,s.preparation_time from cart c join cart_products cp " +
            " on c.id = cp.cart_id join supplier s on s.id=cp.supplier_id join product p on p.id = cp.product_id join product_pricing pp on pp.product_id = p.id join user u on u.id = c.user_id where c.id = ? and c.user_id = ?  and c.is_deleted = ?  and pp.is_deleted = 0 GROUP by cp.product_id order by cp.supplier_branch_id";
        // Execute.Query(request.dbName,updateAMountSql,[order_data]);
        let result = await ExecuteQ.Query(dbName, sql, [cartId, id, 0])
        //    var statement= multiConnection[dbName].query(sql,[cartId,id,0], function(err, result) {
        //        logger.debug("===SQL==STATEMENT==",statement.sql);
        //         if (err) {
        //             var msg = "db error";
        //             //console.log("get cart" ,err);
        //             sendResponse.sendErrorMessage(msg,reply,500);
        //         }
        //         else {
        //  console.log("result===",result);
        logger.debug("====result==>>", result)
        if (result && result.length > 0) {
            callback(null, result);
        } else {
            var msg = "invalid cart id"
            sendResponse.sendErrorMessage(msg, reply, 400);
        }
        //     }
        // })
    }
    catch (Err) {
        logger.debug("======+ERR!======", Err)
        var msg = "invalid cart id"
        sendResponse.sendErrorMessage(msg, reply, 400);
    }

}

var orderGengrate = async function (serviceType, deliveryChargeAlgo, dbName, reply, productList, user, paymentType, cartId, type, offset, isAgent, booking_date_time, buffer_time, duration,
    discounted_supplier_ids, discount_amount,
    promo_code,
    promo_id,
    self_pickup,
    booking_to_date,
    booking_from_date,
    from_address,
    to_address,

    api_version,
    from_latitude,
    to_latitude,
    from_longitude,
    to_longitude,
    card_payment_id,
    transaction_id,
    payment_source,
    preparation_time,
    questions,
    tip_agent,
    referralAmount,
    zelle_receipt_url,
    user_service_charge,
    pres_image1,
    pres_image2,
    pres_image3,
    pres_image4,
    pres_image5,
    pres_description,
    type_id,
    payment_after_confirmation,
    payment_status,
    have_pet,
    parking_instructions,
    cleaner_in,
    area_to_focus,
    giftAmount,
    donate_to_someone,
    user_subscription_delivery,
    user_subscription_id,
    wallet_discount_amount,
    schedule_date,
    schedule_end_date,
    is_schedule,
    slot_price,

    callback) {

    logger.debug("====schedule_end_date========schedule_end_date==3==", schedule_end_date, schedule_date)

    if (is_schedule == null) {
        is_schedule = 0
    }
    logger.debug("===============user_service_charge====22=========", user_service_charge)
    // let preparation_time = await getPreparationTime(dbName,)

    var data = {};
    var orderId = 0;
    var product_data = productList;
    productList = productList[0];
    // console.log(".....1....==============.",productList);
    data.remarks = productList.remarks;
    data.supplier_branch_id = productList.supplier_branch_id;


    let query = "select s.preparation_time as preparation_time from orders o " +
        "join supplier_branch sb on o.supplier_branch_id = sb.id " +
        "join supplier s on s.id = sb.supplier_id where sb.id=? group by sb.id limit 1"

    let supplierPreparationData = await ExecuteQ.Query(dbName, query, [data.supplier_branch_id])

    preparation_time = supplierPreparationData && supplierPreparationData.length > 0 ? supplierPreparationData[0].preparation_time : "00:00:00";








    data.delivery_type = productList.delivery_type;
    data.user_address_id = productList.user_address_id;
    data.user_delivery_address = productList.user_delivery_address;
    data.user_id = productList.user_id;
    data.status = 0;
    data.handling_admin = productList.handling_admin;
    data.handling_supplier = productList.handling_supplier;

    if (deliveryChargeAlgo == 0) {
        data.delivery_charges = productList.delivery_charges;
    }
    else {
        data.delivery_charges = _.max(productList, _.property('delivery_charge'));
    }
    if (user_subscription_delivery == "1") {
        data.delivery_charges = 0
    }
    logger.debug("==referralAmount=DL=CHarge======>>>", referralAmount, data.delivery_charges);

    data.net_amount = productList.net_amount;
    data.min_order_delivery_crossed = productList.min_order_delivery_crossed;
    data.schedule_date = moment(productList.delivery_date).format('YYYY-MM-DD');
    data.quantity = productList.quantity;
    data.pickup_date = moment(productList.pickup_date).format('YYYY-MM-DD');
    if (productList.delivery_type == 1 && productList.urgent_price >= 0) {
        data.urgent = 1
        data.urgent_price = productList.urgent_price;
    } else {
        data.urgent = 0;
        data.urgent_price = 0;
    }

    data.currency_id = productList.currency_id;

    if (productList.delivery_type == 1 && productList.delivery_type == 2) {
        data.delivery_date = moment(productList.delivery_date).format('YYYY-MM-DD');
    }

    if (productList.delivery_type == 2) {
        data.was_postponed = 1;
    } else {
        data.was_postponed = 0;
    }


    if (productList.user_pickup_address) {
        data.user_pickup_address = productList.user_pickup_address;
        data.pickup_time = productList.pickup_time;
    }

    var time1 = productList.delivery_time

    var date1 = moment(productList.delivery_date).format("YYYY-MM-DD");

    var date_new_d = moment(date1 + ' ' + time1).format("YYYY-MM-DD HH:mm:ss")
    var shipped_on = "0000-00-00 00:00:00"
    if (booking_from_date != "") {
        date_new = booking_from_date
    }
    if (booking_to_date != "") {
        shipped_on = booking_to_date
    }
    let created_on_date = "";
    let date_new;

    if (parseInt(type_id) == config.get("app_type.home") || parseInt(type_id) == config.get("app_type.home") || parseInt(serviceType) == config.get("app_type.home")) {
        date_new = booking_date_time
        let d = new Date();
        d = moment(d).utcOffset("+05:30");
        created_on_date = d._d;
    } else {
        date_new = date_new_d;
        created_on_date = booking_date_time;
    }

    // let date_new=parseInt(serviceType)==config.get("app_type.home")?booking_date_time && created_on_date=date_new_d:date_new_d && created_on_date=booking_date_time;
    logger.debug("==============date_new========>>>>>>>>>>", date1, date_new, productList.delivery_date + ' ' + time1)
    logger.debug("==========time1=========>>>", time1)
    var date2 = moment(date1 + ' ' + time1, "YYYY-MM-DD HH:mm:ss");
    logger.debug("==========date2=========>>>", date2)
    var date3 = moment(date2._i).format('YYYY-MM-DD HH:mm:ss');
    logger.debug("=================date3=======>>>>", date3)
    // if(booking_date_time!=""){
    //     date3=moment(booking_date_time).format('YYYY-MM-DD');
    // }

    console.log("==booking_date_time===schedule Date..offset..", booking_date_time, date3, offset)
    var check_date = moment().parseZone(date2).utcOffset(date2)
    console.log("------check_date-check_date-check_date------", check_date)
    // console.log("------check_date-check_date-check_date------",check_date)

    var date10 = moment().parseZone(date3).utcOffset(offset)
    var date11 = moment(date10._d).format('YYYY-MM-DD');
    var discount_flag = false;
    var uniq_supplier = _.uniq(discounted_supplier_ids);
    logger.debug("===uniq_supplier=booking_date_time===booking_date_time.==date3=.offset..",
        uniq_supplier,
        booking_date_time, date3, offset,
        date10, date11)
    logger.debug("===============date10 =========date11===========", date10, date11)
    logger.debug("===discount_amou==",
        discount_amount)
    var final_discount_amount = 0, f_promo_code = 0, apply_promo = 0, supplier_id = 0
    // .uniq([1, 2, 1, 4, 1, 3]);


    // let preparation_time = await getPreparationTime(dbName,data.supplier_branch_id)
    if (schedule_date !== "") {
        date_new = schedule_date
    }
    logger.debug("====schedule_end_date========schedule_end_date==4==", schedule_end_date, schedule_date)
    logger.debug("========date=new=-===1==", date_new)
    if (schedule_end_date === "") {
        schedule_end_date = date_new
    }

    logger.debug("====schedule_end_date========schedule_end_date=5===", schedule_end_date, schedule_date)
    logger.debug("========date=new=-===2==", date_new)


    async.auto({
        applyPromo: function (cb) {
            if (discount_amount != 0 && promo_code != 0 && promo_id != 0) {
                // logger.debug("==1=IF")
                if (uniq_supplier.length > 0) {
                    // logger.debug("2===IF")
                    // discount_flag = true
                    // supplier_id = 54
                    // cb(null)
                    for (var i = 0; i < uniq_supplier.length; i++)
                        (function (i) {
                            // logger.debug("3===IF",productList)
                            for (j = 0; j < product_data.length; j++)
                                (function (j) {
                                    // logger.debug("4===IF")
                                    if (parseInt(uniq_supplier[i]) == parseInt(product_data[j].supplier_id)) {
                                        // logger.debug("===MATCH")
                                        discount_flag = true
                                        supplier_id = product_data[j].supplier_id
                                    }

                                    // if(i == (uniq_supplier.length-1)){
                                    //     logger.debug("=======in the apply promo =========11111======",i)
                                    //     cb(null);
                                    // }  
                                }(j))


                            if (i == (uniq_supplier.length - 1)) {
                                logger.debug("=======in the apply promo ========22222222=======", i)
                                cb(null);
                            }
                        }(i))
                    logger.debug("=======in the apply promo ===========33333====", i)
                    cb(null)
                }
                else {
                    logger.debug("=======in the apply promo ==========44444=====")
                    cb(null)
                }
            }
            else {
                logger.debug("=======in the apply promo ============555===")
                cb(null)
            }
        },
        insertOrder: ['applyPromo', function (cb) {
            logger.debug("=======discount_flag==", discount_flag)
            console.log("...urgent...", data);
            if (promo_id != 0) {
                final_discount_amount = discount_amount
                f_promo_code = promo_code
                apply_promo = 1
            }

            var params = [
                wallet_discount_amount,
                donate_to_someone,
                giftAmount,
                JSON.stringify(questions),
                payment_status,
                type_id,
                payment_after_confirmation,
                pres_description,
                pres_image1,
                pres_image2,
                pres_image3,
                pres_image4,
                pres_image5,
                user_service_charge, zelle_receipt_url, referralAmount, card_payment_id, transaction_id,
                payment_source, data.user_id, data.supplier_branch_id, data.status, data.handling_admin,
                data.handling_supplier, data.delivery_charges, data.net_amount, data.currency_id,
                data.min_order_delivery_crossed, date_new, schedule_end_date, data.urgent,
                data.urgent_price, data.remarks, data.was_postponed, paymentType, data.user_address_id,
                data.user_delivery_address, data.pickup_time, data.pickup_date, data.user_pickup_address,
                cartId, booking_date_time, type, isAgent, buffer_time, duration,
                f_promo_code, final_discount_amount, apply_promo, self_pickup, shipped_on, have_pet,
                parking_instructions,
                cleaner_in,
                area_to_focus,
                is_schedule,
                slot_price
            ],


                sql = "insert into orders (wallet_discount_amount,donate_to_someone,gift_amount,questions,payment_status,type,payment_after_confirmation,pres_description,pres_image1,pres_image2,pres_image3,pres_image4,pres_image5,user_service_charge,zelle_receipt_url,referral_amount,card_payment_id,transaction_id,payment_source,user_id,supplier_branch_id,status,handling_admin,handling_supplier,delivery_charges,net_amount,currency_id,min_order_delivery_crossed , " +
                    " schedule_date,schedule_end_date,urgent,urgent_price,remarks,was_postponed,payment_type,user_address_id,user_delivery_address,pickup_time,pickup_date,user_pickup_address ,cart_id,created_on,is_package,is_agent,buffer_time,duration,promo_code,promo_discount,apply_promo,self_pickup,shipped_on,have_pet,parking_instructions,cleaner_in,area_to_focus,is_schedule,slot_price)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

            if (api_version >= 1) {
                params = [
                    wallet_discount_amount,
                    donate_to_someone,
                    giftAmount,
                    JSON.stringify(questions),
                    payment_status,
                    type_id,
                    payment_after_confirmation,
                    pres_description,
                    pres_image1,
                    pres_image2,
                    pres_image3,
                    pres_image4,
                    pres_image5,
                    user_service_charge,
                    zelle_receipt_url,
                    referralAmount,
                    card_payment_id,
                    transaction_id,
                    payment_source,
                    data.user_id, data.supplier_branch_id, data.status, data.handling_admin,
                    data.handling_supplier, data.delivery_charges, data.net_amount, data.currency_id,
                    data.min_order_delivery_crossed, date_new, schedule_end_date, data.urgent,
                    data.urgent_price, data.remarks, data.was_postponed, paymentType, data.user_address_id,
                    data.user_delivery_address, data.pickup_time, data.pickup_date, data.user_pickup_address,
                    cartId, created_on_date, type, isAgent, buffer_time, duration,
                    f_promo_code, final_discount_amount, apply_promo, self_pickup,
                    shipped_on,
                    from_address, to_address,
                    from_latitude,
                    to_longitude,
                    from_longitude,
                    to_latitude,
                    preparation_time,
                    tip_agent,
                    have_pet,
                    parking_instructions,
                    cleaner_in,
                    area_to_focus,
                    is_schedule,
                    slot_price
                ]
                sql = "insert into orders (wallet_discount_amount,donate_to_someone,gift_amount,questions,payment_status,type,payment_after_confirmation,pres_description,pres_image1,pres_image2,pres_image3,pres_image4,pres_image5,user_service_charge,zelle_receipt_url,referral_amount,card_payment_id,transaction_id,payment_source,user_id,supplier_branch_id,status,handling_admin,handling_supplier,delivery_charges,net_amount,currency_id,min_order_delivery_crossed , " +
                    " schedule_date,schedule_end_date,urgent,urgent_price,remarks,was_postponed,payment_type,user_address_id,user_delivery_address,pickup_time,pickup_date,user_pickup_address ,cart_id,created_on,is_package,is_agent,buffer_time,duration,promo_code,promo_discount,apply_promo,self_pickup,shipped_on,from_address,to_address,from_latitude,to_longitude,from_longitude,to_latitude,preparation_time,tip_agent,have_pet,parking_instructions,cleaner_in,area_to_focus,is_schedule,slot_price)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

            }
            let orderSql = multiConnection[dbName].query(sql, params, function (err, result) {
                logger.debug("====order statemtn====", orderSql.sql)
                if (err) {
                    cb(err)
                }
                else {
                    logger.debug("==============RESULT.INSERTID==========", result.insertId)
                    orderId = result.insertId
                    cb(null);
                };
            })
        }],
        orderPromo: ['insertOrder', function (cb) {
            if (promo_id != 0) {
                logger.debug("==============RESULT.INSERTID====2222222======", orderId)
                final_discount_amount = discount_amount
                f_promo_code = promo_code
                apply_promo = 1
                var sql = "insert into order_promo (userId,supplierId,orderId,promoId,promoCode,totalAmount,promoApply,redeemPromo,discountAmount)values(?,?,?,?,?,?,?,?,?)";
                multiConnection[dbName].query(sql, [data.user_id, supplier_id, orderId, promo_id, f_promo_code, data.net_amount, 1, 1, final_discount_amount], function (err, result) {
                    if (err) {
                        var msg = "db error";
                        console.log("promocode..", err);
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        logger.debug("==============RESULT.INSERTID====3333333======", orderId)
                        cb(null)
                    };
                })
            }
            else {
                logger.debug("==============RESULT.INSERTID====44444444444======", orderId)

                cb(null)
            }
        }],
        checkUserSubscriptionData: ['orderPromo', function (cb) {
            if (user_subscription_id != "") {
                var sql = "update orders_user_subscription set order_id = ? where id = ? ";
                multiConnection[dbName].query(sql, [orderId, user_subscription_id], function (err, result) {
                    if (err) {
                        var msg = "db error";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        cb(null)
                    };
                })
            }
            else {
                cb(null)
            }
        }]
    }, function (err, result) {
        logger.debug("====err,result===>>>=====", err, result)
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, orderId);
        }
    })
}

/**
 * @description used for saving an data in order,promo code table
 * @param {*} serviceType 
 * @param {*} deliveryChargeAlgo 
 * @param {*} dbName 
 * @param {*} reply 
 * @param {*} productList 
 * @param {*} user 
 * @param {*} paymentType 
 * @param {*} cartId 
 * @param {*} type 
 * @param {*} offset 
 * @param {*} isAgent 
 * @param {*} booking_date_time 
 * @param {*} buffer_time 
 * @param {*} duration 
 * @param {*} discounted_supplier_ids 
 * @param {*} discount_amount 
 * @param {*} promo_code 
 * @param {*} promo_id 
 * @param {*} self_pickup 
 * @param {*} booking_to_date 
 * @param {*} booking_from_date 
 * @param {*} from_address 
 * @param {*} to_address 
 * @param {*} api_version 
 * @param {*} from_latitude 
 * @param {*} to_latitude 
 * @param {*} from_longitude 
 * @param {*} to_longitude 
 * @param {*} card_payment_id 
 * @param {*} transaction_id 
 * @param {*} payment_source 
 * @param {*} preparation_time 
 * @param {*} questions 
 * @param {*} tip_agent 
 * @param {*} referralAmount 
 * @param {*} zelle_receipt_url 
 * @param {*} user_service_charge 
 * @param {*} pres_image1 
 * @param {*} pres_image2 
 * @param {*} pres_image3 
 * @param {*} pres_image4 
 * @param {*} pres_image5 
 * @param {*} pres_description 
 * @param {*} type_id 
 * @param {*} payment_after_confirmation 
 * @param {*} payment_status 
 * @param {*} have_pet 
 * @param {*} parking_instructions 
 * @param {*} cleaner_in 
 * @param {*} area_to_focus 
 * @param {*} giftAmount 
 * @param {*} donate_to_someone 
 * @param {*} user_subscription_delivery 
 * @param {*} user_subscription_id 
 * @param {*} wallet_discount_amount 
 * @param {*} schedule_date 
 * @param {*} schedule_end_date 
 * @param {*} is_schedule 
 * @param {*} slot_price 
 * @param {*} callback 
 */
var orderGengrateV2 = async function (serviceType, deliveryChargeAlgo, dbName, reply, productList, user, paymentType
    , cartId, type, offset, isAgent, booking_date_time, buffer_time, duration,
    discounted_supplier_ids, discount_amount,
    promo_code,
    promo_id,
    self_pickup,
    booking_to_date,
    booking_from_date,
    from_address,
    to_address,

    api_version,
    from_latitude,
    to_latitude,
    from_longitude,
    to_longitude,
    card_payment_id,
    transaction_id,
    payment_source,
    preparation_time,
    questions,
    tip_agent,
    referralAmount,
    zelle_receipt_url,
    user_service_charge,
    pres_image1,
    pres_image2,
    pres_image3,
    pres_image4,
    pres_image5,
    pres_description,
    type_id,
    payment_after_confirmation,
    payment_status,
    have_pet,
    parking_instructions,
    cleaner_in,
    area_to_focus,
    giftAmount,
    donate_to_someone,
    user_subscription_delivery,
    user_subscription_id,
    wallet_discount_amount,
    schedule_date,
    schedule_end_date,
    is_schedule,
    slot_price,
    supplierIds,
    table_id,
    totalLoyalityDiscountAmount,
    loyalityPointDiscountAmount,
    have_coin_change,
    order_source,
    is_dine_in,
    agent_verification_code,
    is_cutlery_required,
    drop_off_date,
    order_delivery_type,
    vehicle_number,
    tax,
    deliveryCharges,
    delivery_company_id, seating_capacity, no_touch_delivery,
    liquor_bottle_deposit_tax,
    liquor_plt_deposit_tax,
    grouping_id,
    callback) {


    let todayDateNew = new Date();
    let todayDateNewFormatted = moment(todayDateNew).format("YYYY-MM-DD");
    let currentDateTimeNew = todayDateNewFormatted + ' ' + booking_date_time

    logger.debug("====schedule_end_date========schedule_end_date==3==", schedule_end_date, schedule_date)
    logger.debug("====booking date time==", booking_date_time)

    let subTotal = 0;
    let supplierCommision = 0;

    if (is_schedule == null) {
        is_schedule = 0
    }
    logger.debug("===============user_service_charge====22=========", user_service_charge)
    // let preparation_time = await getPreparationTime(dbName,)

    var data = {};
    var orderId = 0;
    var product_data = productList;
    console.log(product_data, "----product_data---------")
    console.log("=====productList======subTotal=======productList======subTotal========")
    data.supplier_branch_id = product_data[0].supplier_branch_id;

    // let query = "select s.vat_value,s.preparation_time as preparation_time from orders o "+
    // "join supplier_branch sb on o.supplier_branch_id = sb.id "+
    // "join supplier s on s.id = sb.supplier_id where sb.id=? group by sb.id limit 1"
    preparation_time = product_data[0].preparation_time ? product_data[0].preparation_time : "00:00:00";
    let supplier_vat_value = product_data[0].vat_value ? product_data[0].vat_value : 0;
    //let supplierPreparationData = await ExecuteQ.Query(dbName,query,[data.supplier_branch_id])

    //preparation_time = supplierPreparationData && supplierPreparationData.length>0?supplierPreparationData[0].preparation_time:"00:00:00";

    //let supplier_vat_value = 0;

    // if(supplierPreparationData && supplierPreparationData.length>0){
    //     supplier_vat_value = parseFloat(supplierPreparationData[0].vat_value);
    // }


    productList = productList[0];
    // console.log(".....1....==============.",productList);
    data.remarks = productList.remarks;


    let handlingAdmin = productList.handling_admin;
    logger.debug("==handlingAdmin====>=", handlingAdmin)
    if (supplierIds.length > 1) {
        handlingAdmin = tax;

    }
    console.log("===handlingAdmin==user_service_charge==", handlingAdmin, user_service_charge)

    let queryForRandomOrderId = " select `key`, value from tbl_setting where `key`=? and value=1 "

    //randomOrderIdCheck = await ExecuteQ.Query(dbName,queryForRandomOrderId,["enable_order_random_id"])

    data.delivery_type = productList.delivery_type;
    data.user_address_id = productList.user_address_id;
    data.user_delivery_address = productList.user_delivery_address;
    data.user_id = productList.user_id;
    data.status = 0;
    data.handling_admin = handlingAdmin;
    data.handling_supplier = productList.handling_supplier;

    console.log("===handlingAdmin===deliveryCharges===========1=", handlingAdmin, deliveryCharges)

    if (deliveryChargeAlgo == 0) {
        console.log("===handlingAdmin===deliveryCharges===========2=", handlingAdmin, deliveryCharges)

        data.delivery_charges = productList.delivery_charges;
    }
    else {
        console.log("===handlingAdmin===deliveryCharges===========3=", handlingAdmin, deliveryCharges)

        data.delivery_charges = _.max(productList, _.property('delivery_charge'));
    }
    if (user_subscription_delivery == "1") {
        console.log("===handlingAdmin===deliveryCharges===========4=", handlingAdmin, deliveryCharges)

        data.delivery_charges = 0
    }
    if (supplierIds.length > 1) {
        console.log("===handlingAdmin===deliveryCharges===========5=", handlingAdmin, deliveryCharges)

        data.delivery_charges = deliveryCharges
        // user_service_charge=parseFloat(user_service_charge)/supplierIds.length
        // data.delivery_charges=parseFloat(data.delivery_charges)/supplierIds.length

    }
    console.log("===handlingAdmin===deliveryCharges=", handlingAdmin, deliveryCharges)

    logger.debug("==referralAmount=DL=CHarge======>>>", referralAmount, data.delivery_charges);

    // data.net_amount  = productList.net_amount;
    // if (liquor_plt_deposit_tax && liquor_bottle_deposit_tax) {
    data.net_amount = productList.net_amount + parseInt(liquor_plt_deposit_tax) + parseInt(liquor_bottle_deposit_tax);
    console.log("****************testamount***********", data.net_amount)
    // }

    data.min_order_delivery_crossed = productList.min_order_delivery_crossed;
    data.schedule_date = moment(productList.delivery_date).format('YYYY-MM-DD');
    data.quantity = productList.quantity;
    data.pickup_date = moment(productList.pickup_date).format('YYYY-MM-DD');
    if (productList.delivery_type == 1 && productList.urgent_price >= 0) {
        data.urgent = 1
        data.urgent_price = productList.urgent_price;
    } else {
        data.urgent = 0;
        data.urgent_price = 0;
    }

    data.currency_id = productList.currency_id;

    if (productList.delivery_type == 1 && productList.delivery_type == 2) {
        data.delivery_date = moment(productList.delivery_date).format('YYYY-MM-DD');
    }

    if (productList.delivery_type == 2) {
        data.was_postponed = 1;
    } else {
        data.was_postponed = 0;
    }


    if (productList.user_pickup_address) {
        data.user_pickup_address = productList.user_pickup_address;
        data.pickup_time = productList.pickup_time;
    }

    var time1 = productList.delivery_time

    var date1 = moment(productList.delivery_date).format("YYYY-MM-DD");

    var date_new_d = moment(date1 + ' ' + time1).format("YYYY-MM-DD HH:mm:ss")
    var shipped_on = "0000-00-00 00:00:00"
    if (booking_from_date != "") {
        date_new = booking_from_date
    }
    if (booking_to_date != "") {
        shipped_on = booking_to_date
    }
    let created_on_date = "";
    let date_new;

    if (parseInt(type_id) == config.get("app_type.home") || parseInt(type_id) == config.get("app_type.home") || parseInt(serviceType) == config.get("app_type.home")) {
        date_new = booking_date_time
        let d = new Date();
        d = moment(d).utcOffset(offset);
        created_on_date = d._d;
    } else {
        date_new = date_new_d;
        created_on_date = booking_date_time;
    }

    // let date_new=parseInt(serviceType)==config.get("app_type.home")?booking_date_time && created_on_date=date_new_d:date_new_d && created_on_date=booking_date_time;
    logger.debug("==============date_new========>>>>>>>>>>", date1, date_new, productList.delivery_date + ' ' + time1)
    logger.debug("==========time1=========>>>", time1)
    var date2 = moment(date1 + ' ' + time1, "YYYY-MM-DD HH:mm:ss");
    logger.debug("==========date2=========>>>", date2)
    var date3 = moment(date2._i).format('YYYY-MM-DD HH:mm:ss');
    logger.debug("=================date3=======>>>>", date3)
    // if(booking_date_time!=""){
    //     date3=moment(booking_date_time).format('YYYY-MM-DD');
    // }

    console.log("==booking_date_time===schedule Date..offset..", booking_date_time, date3, offset)
    var check_date = moment().parseZone(date2).utcOffset(date2)
    console.log("------check_date-check_date-check_date------", check_date)
    // console.log("------check_date-check_date-check_date------",check_date)

    var date10 = moment().parseZone(date3).utcOffset(offset)
    var date11 = moment(date10._d).format('YYYY-MM-DD');
    var discount_flag = false;
    var uniq_supplier = _.uniq(discounted_supplier_ids);
    logger.debug("===uniq_supplier=booking_date_time===booking_date_time.==date3=.offset..",
        uniq_supplier,
        booking_date_time, date3, offset,
        date10, date11)
    logger.debug("===============date10 =========date11===========", date10, date11)
    logger.debug("===discount_amou==",
        discount_amount)
    var final_discount_amount = 0, f_promo_code = 0, apply_promo = 0, supplier_id = 0
    // .uniq([1, 2, 1, 4, 1, 3]);


    // let preparation_time = await getPreparationTime(dbName,data.supplier_branch_id)
    if (schedule_date !== "") {
        date_new = schedule_date
    }
    logger.debug("====schedule_end_date========schedule_end_date==4==", schedule_end_date, schedule_date)
    logger.debug("========date=new=-===1==", date_new)
    if (schedule_end_date === "") {
        schedule_end_date = date_new
    }

    logger.debug("====schedule_end_date========schedule_end_date=5===", schedule_end_date, schedule_date)
    logger.debug("========date=new=-===2==", date_new)

    if (drop_off_date == "") {
        drop_off_date = date_new
    }

    let drop_off_date_utc = moment.parseZone(new Date(drop_off_date)).utc().format();

    async.auto({
        applyPromo: function (cb) {
            // if(discount_amount!=0 && promo_code!=0 && promo_id!=0){
            if (promo_code != 0 && promo_id != 0) {
                // logger.debug("==1=IF")
                if (uniq_supplier.length > 0) {
                    // logger.debug("2===IF")
                    // discount_flag = true
                    // supplier_id = 54
                    // cb(null)
                    for (var i = 0; i < uniq_supplier.length; i++)
                        (function (i) {
                            // logger.debug("3===IF",productList)
                            for (j = 0; j < product_data.length; j++)
                                (function (j) {
                                    // logger.debug("4===IF")
                                    if (parseInt(uniq_supplier[i]) == parseInt(product_data[j].supplier_id)) {
                                        // logger.debug("===MATCH")
                                        discount_flag = true
                                        supplier_id = product_data[j].supplier_id
                                    }

                                    // if(i == (uniq_supplier.length-1)){
                                    //     logger.debug("=======in the apply promo =========11111======",i)
                                    //     cb(null);
                                    // }  
                                }(j))


                            if (i == (uniq_supplier.length - 1)) {
                                logger.debug("=======in the apply promo ========22222222=======", i)
                                cb(null);
                            }
                        }(i))
                    logger.debug("=======in the apply promo ===========33333====", i)
                    cb(null)
                }
                else {
                    logger.debug("=======in the apply promo ==========44444=====")
                    cb(null)
                }
            }
            else {
                logger.debug("=======in the apply promo ============555===")
                cb(null)
            }
        },
        insertOrder: ['applyPromo', async function (cb) {
            logger.debug("====supplier_id==productList.supplier_id=discount_flag==", supplier_id, productList.supplier_id, discount_flag)
            console.log("...urgent...", data);
            if (promo_id != 0) {
                if (parseInt(supplier_id) == parseInt(productList.supplier_id)) {
                    final_discount_amount = discount_amount
                    f_promo_code = promo_code
                    apply_promo = 1
                }

            }

            var params = [

                wallet_discount_amount,
                donate_to_someone,
                giftAmount,
                JSON.stringify(questions),
                payment_status,
                type_id,
                payment_after_confirmation,
                pres_description,
                pres_image1,
                pres_image2,
                pres_image3,
                pres_image4,
                pres_image5,
                user_service_charge, zelle_receipt_url, referralAmount, card_payment_id, transaction_id,
                payment_source, data.user_id, data.supplier_branch_id, data.status, data.handling_admin,
                data.handling_supplier, data.delivery_charges, data.net_amount, data.currency_id,
                data.min_order_delivery_crossed, date_new, schedule_end_date, data.urgent,
                data.urgent_price, data.remarks, data.was_postponed, paymentType, data.user_address_id,
                data.user_delivery_address, data.pickup_time, data.pickup_date, data.user_pickup_address,
                cartId, type, isAgent, buffer_time, duration,
                f_promo_code, final_discount_amount, apply_promo, self_pickup, shipped_on, have_pet,
                parking_instructions,
                cleaner_in,
                area_to_focus,
                is_schedule,
                slot_price,
                table_id,
                totalLoyalityDiscountAmount,
                loyalityPointDiscountAmount,
                have_coin_change,
                order_source,
                offset,
                drop_off_date_utc,
                liquor_bottle_deposit_tax,
                liquor_plt_deposit_tax,
                moment(new Date()).utcOffset(offset).format('YYYY-MM-DD HH:mm:ss')
            ],



                sql = "insert into orders (wallet_discount_amount,donate_to_someone,gift_amount,questions,payment_status,type,payment_after_confirmation,pres_description,pres_image1,pres_image2,pres_image3,pres_image4,pres_image5,user_service_charge,zelle_receipt_url,referral_amount,card_payment_id,transaction_id,payment_source,user_id,supplier_branch_id,status,handling_admin,handling_supplier,delivery_charges,net_amount,currency_id,min_order_delivery_crossed , " +
                    " schedule_date,schedule_end_date,urgent,urgent_price,remarks,was_postponed,payment_type,user_address_id,user_delivery_address,pickup_time,pickup_date,user_pickup_address ,cart_id,is_package,is_agent,buffer_time,duration,promo_code,promo_discount,apply_promo,self_pickup,shipped_on,have_pet,parking_instructions,cleaner_in,area_to_focus,is_schedule,slot_price,table_id,loyality_point_discount,used_loyality_point_amount,have_coin_change,order_source,zone_offset,drop_off_date_utc,liquor_bottle_deposit_tax,liquor_plt_deposit_tax,created_on)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            console.log("=========currentDateTimeNew=====", currentDateTimeNew)
            if (api_version >= 1) {
                params = [
                    order_delivery_type,
                    agent_verification_code,
                    is_dine_in,
                    wallet_discount_amount,
                    donate_to_someone,
                    giftAmount,
                    JSON.stringify(questions),
                    payment_status,
                    type_id,
                    payment_after_confirmation,
                    pres_description,
                    pres_image1,
                    pres_image2,
                    pres_image3,
                    pres_image4,
                    pres_image5,
                    user_service_charge,
                    zelle_receipt_url,
                    referralAmount,
                    card_payment_id,
                    transaction_id,
                    payment_source,
                    data.user_id, data.supplier_branch_id, data.status, data.handling_admin,
                    data.handling_supplier, data.delivery_charges, data.net_amount, data.currency_id,
                    data.min_order_delivery_crossed, date_new, schedule_end_date, data.urgent,
                    data.urgent_price, data.remarks, data.was_postponed, paymentType, data.user_address_id,
                    data.user_delivery_address, data.pickup_time, data.pickup_date, data.user_pickup_address,
                    cartId, created_on_date, type, isAgent, buffer_time, duration,
                    f_promo_code, final_discount_amount, apply_promo, self_pickup,
                    shipped_on,
                    from_address, to_address,
                    from_latitude,
                    to_longitude,
                    from_longitude,
                    to_latitude,
                    preparation_time,
                    tip_agent,
                    have_pet,
                    parking_instructions,
                    cleaner_in,
                    area_to_focus,
                    is_schedule,
                    slot_price,
                    table_id,
                    totalLoyalityDiscountAmount,
                    loyalityPointDiscountAmount,
                    have_coin_change,
                    order_source,
                    offset,
                    is_cutlery_required,
                    drop_off_date,
                    drop_off_date_utc,
                    vehicle_number,
                    delivery_company_id,
                    seating_capacity,
                    no_touch_delivery,
                    supplier_vat_value,
                    supplierCommision,
                    liquor_bottle_deposit_tax,
                    liquor_plt_deposit_tax, grouping_id
                ]
                let idString = "";
                let randomId = "";
                // randomOrderIdCheck = await ExecuteQ.Query(dbName,queryForRandomOrderId,["enable_order_random_id"])
                // if(randomOrderIdCheck && randomOrderIdCheck.length>0){
                //     idString = " random_order_id, ";
                //     randomId = " FLOOR(rand()*(1000000-9999999)+9999999), ";
                // }

                sql = "insert into orders (random_order_id,order_delivery_type,agent_verification_code,is_dine_in,wallet_discount_amount,donate_to_someone,gift_amount,questions,payment_status,type,payment_after_confirmation,pres_description,pres_image1,pres_image2,pres_image3,pres_image4,pres_image5,user_service_charge,zelle_receipt_url,referral_amount,card_payment_id,transaction_id,payment_source,user_id,supplier_branch_id,status,handling_admin,handling_supplier,delivery_charges,net_amount,currency_id,min_order_delivery_crossed , " +
                    " schedule_date,schedule_end_date,urgent,urgent_price,remarks,was_postponed,payment_type,user_address_id,user_delivery_address,pickup_time,pickup_date,user_pickup_address ,cart_id,created_on,is_package,is_agent,buffer_time,duration,promo_code,promo_discount,apply_promo,self_pickup,shipped_on,from_address,to_address,from_latitude,to_longitude,from_longitude,to_latitude,preparation_time,tip_agent,have_pet,parking_instructions,cleaner_in,area_to_focus,is_schedule,slot_price,table_id,loyality_point_discount,used_loyality_point_amount,have_coin_change,order_source,zone_offset,is_cutlery_required,drop_off_date,drop_off_date_utc,vehicle_number,delivery_company_id,seating_capacity,no_touch_delivery,supplier_vat_value,supplier_commision,liquor_bottle_deposit_tax,liquor_plt_deposit_tax,grouping_id)values(FLOOR(rand()*(1000000-9999999)+9999999),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

            }
            try {
                let result = await ExecuteQ.Query(dbName, sql, params);
                orderId = result.insertId
                cb(null);
            }
            catch (Err) {
                cb(Err)
            }
        }],
        orderPromo: ['insertOrder', async function (cb) {
            if (promo_id != 0) {
                logger.debug("==============RESULT.INSERTID====2222222======", orderId, parseInt(supplier_id), parseInt(productList.supplier_id))

                try {
                    if (parseInt(supplier_id) == parseInt(productList.supplier_id)) {
                        final_discount_amount = discount_amount
                        f_promo_code = promo_code
                        apply_promo = 1
                        var sql = "insert into order_promo (userId,supplierId,orderId,promoId,promoCode,totalAmount,promoApply,redeemPromo,discountAmount)values(?,?,?,?,?,?,?,?,?)";
                        await ExecuteQ.Query(dbName, sql, [data.user_id, supplier_id, orderId, promo_id, f_promo_code, data.net_amount, 1, 1, final_discount_amount])
                    }

                    cb(null)
                }
                catch (err) {
                    logger.debug("promocode..", err);
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                // var sql = "insert into order_promo (userId,supplierId,orderId,promoId,promoCode,totalAmount,promoApply,redeemPromo,discountAmount)values(?,?,?,?,?,?,?,?,?)";
                // multiConnection[dbName].query(sql,[data.user_id,supplier_id,orderId,promo_id,f_promo_code,data.net_amount,1,1,final_discount_amount], function(err, result) {
                //     if (err) {
                //         var msg = "db error";
                //         console.log("promocode.." ,err);
                //         sendResponse.sendErrorMessage(msg,reply,500);
                //     } else {
                //         logger.debug("==============RESULT.INSERTID====3333333======",orderId)
                //       cb(null)
                //     };
                // })

            }
            else {
                logger.debug("==============RESULT.INSERTID====44444444444======", orderId)

                cb(null)
            }
        }],
        checkUserSubscriptionData: ['orderPromo', async function (cb) {
            if (user_subscription_id != "") {
                try {
                    var sql = "update orders_user_subscription set order_id = ? where id = ? ";
                    await ExecuteQ.Query(dbName, sql, []);
                    cb(null)
                }
                catch (Err) {
                    var msg = "db error";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                // var sql = "update orders_user_subscription set order_id = ? where id = ? ";
                // multiConnection[dbName].query(sql,[orderId,user_subscription_id], function(err, result) {
                //     if (err) {
                //         var msg = "db error";
                //         sendResponse.sendErrorMessage(msg,reply,500);
                //     } else {
                //         cb(null)
                //     };
                // })
            }
            else {
                cb(null)
            }
        }]
    }, function (err, result) {
        logger.debug("====err,result===>>>=====", err, result)
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, orderId);
        }
    })
}

function applyPromoFlag(uniq_supplier, product_data) {


}

var getSerachProduct = function (dbName, reply, branchId, categoryId, languageId, searchList, callback) {
    var length = searchList.length;
    var data = [];
    for (var i = 0; i < length; i++) {
        (function (i) {
            console.log("......search....", searchList[i])
            var sql = " select supplier_name,logo,can_urgent,urgent_value,supplier_branch_id,pricing_type,delivery_charges,delivery_charges,handling_supplier,id," +
                "bar_code,sku,image_path,name,price,product_desc,handling_admin,urgent_type,measuring_unit from(select s.name as supplier_name,s.logo,p.measuring_unit,pp.can_urgent,pp.urgent_value,pp.urgent_type,sb.supplier_branch_id,pp.pricing_type,sbap.delivery_charges,pp.handling as handling_admin,pp.handling_supplier,p.id,p.bar_code,p.sku,pi.image_path,pml.name,pp.price,pml.product_desc,pp.price_type from supplier_branch_product sb " +
                " join product p on sb.product_id = p.id join product_image pi on p.id = pi.product_id join product_ml pml on pml.product_id = " +
                " p.id  join product_pricing pp on pp.product_id = p.id join supplier_branch br on br.id=sb.supplier_branch_id  join supplier s on s.id=br.supplier_id join supplier_branch_area_product sbap on sbap.product_id  = " +
                " p.id " +
                " where sb.supplier_branch_id = ? and sb.category_id = ? and sb.is_deleted = ? and p.is_live=? and pp.is_deleted = 0" +
                " and pml.name LIKE '%" + searchList[i] + "%' and pml.language_id = ? and sbap.supplier_branch_id = ? and (pi.default_image = ? or pi.imageOrder =1) and ((pp.price_type = '1' and DATE(pp.start_date) <= " +
                " CURDATE() and DATE(pp.end_date) >= CURDATE()) or (pp.price_type = 0)) order by pp.price_type and ((pp.pricing_type=1) or(pp.pricing_type=0 and pp.price !=0))) SELECTION  group by id,sku";

            var st = multiConnection[dbName].query(sql, [branchId, categoryId, 0, 1, languageId, branchId, 0], function (err, result) {
                console.log(st.sql);
                if (err) {
                    console.log("err", err)
                    var msg = "db error";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if (result.length) {
                        var length1 = result.length;
                        for (var j = 0; j < length1; j++) {
                            (function (j) {
                                if (result[j].pricing_type == 1) {
                                    result[j].hourly_price = JSON.parse(result[j].price);
                                    result[j].fixed_price = 0;
                                    result[j].price_type = result[j].pricing_type;
                                    if (j == (length1 - 1)) {
                                        data.push({ name: searchList[i], result: result });
                                    }
                                    if (i == (length - 1)) {
                                        callback(null, data);
                                    }
                                }
                                else {
                                    result[j].price_type = result[j].pricing_type
                                    result[j].fixed_price = result[j].price;
                                    if (j == (length1 - 1)) {
                                        data.push({ name: searchList[i], result: result });
                                    }
                                    if (i == (length - 1)) {
                                        callback(null, data);
                                    }
                                }
                            }(j))
                        }

                    } else {
                        if (i == (length - 1)) {
                            callback(null, data);
                        }
                    }

                }
            })
        }(i));
    }
}

var dropCart = function (dbName, reply, cartId, callback) {
    var sql = "DELETE from cart_adds_on where cart_id=?;DELETE from cart where id = ?;";
    multiConnection[dbName].query(sql, [parseInt(cartId), parseInt(cartId)], function (err, result) {
        if (err) {
            var msg = "db error";
            console.log(err);
            sendResponse.sendErrorMessage(msg, reply, 500);
        }

        else {
            if (result) {
                callback(null);
            } else {
                var msg = "invalid cart id ";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }
    })
}

var getDeliveryData = async function (dbName, reply, supplierBranchId, languageId, area_id, latitude, longitude, callback) {
    try {
        var data = {};
        // console.log(".....................supplierBranchId.............",supplierBranchId);

        var sql = " select s.id as supplier_id,s.urgent_type,s.base_delivery_charges,s.preparation_time,s.user_service_charge,s.urgent_price,s.is_urgent,s.is_postpone,s.payment_method,s.delivery_prior_total_time," +
            " s.urgent_delivery_time,s.delivery_min_time,s.delivery_max_time,sb.min_order from supplier_branch sb join supplier s on sb.supplier_id = s.id" +
            " where sb.id = ? "
        let result = await ExecuteQ.Query(dbName, sql, [supplierBranchId])
        // multiConnection[dbName].query(sql,[supplierBranchId], function(err, result) {
        //     if (err) {
        //         var msg = "db error";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     } else {
        if (result && result.length > 0) {
            let is_enabled_multiple_base_delivery_charges = await Universal.isEnabledMultipleBaseDeliveryCharges(dbName)
            if (is_enabled_multiple_base_delivery_charges[0] && is_enabled_multiple_base_delivery_charges[0].value == "1") {
                let base_delivery_charges_data = await ExecuteQ.Query(dbName, "select base_delivery_charges,distance_value from supplier_delivery_charges where supplier_id = ? ", [result[0].supplier_id])
                result[0].base_delivery_charges_array = base_delivery_charges_data;
            }

            let area_wise_result = await Universal.checkLocationwiseTaxAndpaymentGateway(dbName, result[0].supplier_id, latitude, longitude)
            if (area_wise_result && area_wise_result.length > 0) {
                result[0].region_delivery_charge = area_wise_result[0].delivery_charges
            } else {
                result[0].region_delivery_charge = 0

            }
            var result1 = result[0];
            callback(null, result1);
        } else {
            var msg = "invalid cart id ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        }
        //     }
        // })
    }
    catch (Err) {
        logger.debug("=======>>Er", Err)
        var msg = "db error";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }
}
const getProductOrderDetail = (dbName, cartId, productId, languageId, type, user_type_check, user_type_id) => {

    var package1 = parseInt(type);
    // console.log("pac.......",package1,typeof(package1));
    let checkForUserTypeOne = ""
    let checkForUserTypeTwo = ""
    if (user_type_check && user_type_check.length > 0) {
        checkForUserTypeOne = "and pc.user_type_id = " + user_type_id + ""
        checkForUserTypeTwo = "and pr.user_type_id = " + user_type_id + ""
    }

    if (package1) {

        var sql = "select pml.product_desc,pml.name,pml.measuring_unit,p.id,p.bar_code,p.sku,p.is_package,p.commission,p.commission_type,pi.image_path,pr.price," +
            "cp.freeQuantity,cp.special_instructions,cp.agentBufferPrice,pr.display_price,IFNULL(cp.loyality_discount,0) as loyality_discount,IFNULL(cp.duration,0) as duration,cp.quantity ,cp.handling_admin as cart_product_handling_admin ,cp.is_liquor,cp.supplier_branch_id,cp.handling_supplier as cart_product_handling_supplier from product p join product_image pi on " +
            " p.id = pi.product_id join product_ml pml on p.id = pml.product_id join supplier_package pr on p.id = pr.package_id  " +
            " join cart_products cp on cp.product_id = p.id  " +
            " where cp.cart_id = ? and  p.id = ? and pml.language_id = ? and p.is_live = 1";
    }
    else {
        var sql = "select actual_price,duration,price_type,product_desc,name,measuring_unit,id,bar_code,sku,is_package,commission,commission_type,image_path,price, " +
            " display_price ,freeQuantity,agentBufferPrice, handling" +
            ",delivery_charges,can_urgent,urgent_price,urgent_type ,quantity ,supplier_branch_id,cart_product_handling_admin,is_liquor,cart_product_handling_supplier from (select pml.product_desc,pml.name,pml.measuring_unit,p.id,p.bar_code,p.sku,p.is_package,p.commission,p.commission_type,pi.image_path,pr.price,pr.price_type, pr.actual_price, " +
            " cp.freeQuantity,cp.is_liquor,cp.special_instructions, cp.agentBufferPrice, pr.display_price , pr.handling , pr.handling_supplier,pr.delivery_charges,pr.can_urgent,pr.urgent_price,pr.urgent_type ,cp.quantity ,IFNULL(cp.loyality_discount,0) as loyality_discount,IFNULL(cp.duration,0) as duration,cp.supplier_branch_id, cp.handling_admin as cart_product_handling_admin ,cp.handling_supplier as cart_product_handling_supplier from product p join product_image pi on ";
        sql += " p.id = pi.product_id join product_ml pml on p.id = pml.product_id join product_pricing pr on p.id = pr.product_id  and price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=p.id and pc.is_deleted=0 " + checkForUserTypeOne + " having counter>1) , 1, 0) " +
            " join cart_products cp on cp.product_id = p.id  " +
            " where cp.cart_id = ? and  p.id = ? and pml.language_id = ? and p.is_live = 1 and pr.is_deleted=0" +
            " and ((pr.price_type = '1' and DATE(pr.start_date) <= " +
            " CURDATE() and DATE(pr.end_date) >= CURDATE() " + checkForUserTypeTwo + ") or (pr.price_type = 0 " + checkForUserTypeTwo + ")) order by pr.price_type DESC) SELECTION GROUP BY id";
    }
     
    return new Promise(async (resolve, reject) => {
        try {
            let result = await ExecuteQ.Query(dbName, sql, [cartId, productId, languageId]);
            if (package1) {
                result[0].price_type = 0;
                result[0].handling = 0;
                result[0].handling_supplier = 0;
                result[0].delivery_charges = 0;
                result[0].can_urgent = 0;
                result[0].urgent_price = 0;
                result[0].urgent_type = 0;
            }
            resolve(result)
        }
        catch (Err) {
            logger.debug("===========****===========err==========*****==========", Err);
            var msg = "something went wrong";
            reject(msg)
        }
    })

}
var getProductOrderDetailHourly = function (dbName, res, cartId, productId, languageId, duration) {
    logger.debug(".........p...........", productId);
    var flag = 1;
    var sql = "select pml.product_desc,pml.name,pml.measuring_unit,p.id,p.bar_code,p.sku,p.is_package,p.commission,p.commission_type,pi.image_path,pr.price, " +
        " cp.agentBufferPrice,pr.display_price , pr.handling , pr.handling_supplier,pr.delivery_charges,pr.can_urgent,pr.urgent_price,pr.urgent_type ,cp.is_liquor,cp.quantity ,IFNULL(cp.duration,0) as duration,IFNULL(cp.loyality_discount,0) as loyality_discount,cp.supplier_branch_id, cp.handling_admin as cart_product_handling_admin ,cp.handling_supplier as cart_product_handling_supplier from product p join product_image pi on ";
    sql += " p.id = pi.product_id join product_ml pml on p.id = pml.product_id join product_pricing pr on p.id = pr.product_id  " +
        " join cart_products cp on cp.product_id = p.id  " +
        " where cp.cart_id = ? and  p.id = ? and pml.language_id = ? and p.is_live = 1 " +
        " and ((pr.price_type = '1' and DATE(pr.start_date) <= " +
        " CURDATE() and DATE(pr.end_date) >= CURDATE()) or (pr.price_type = 0)) and pr.is_deleted =0 ";
    return new Promise((resolve, reject) => {
        var statement = multiConnection[dbName].query(sql, [cartId, productId, languageId], function (err, result) {
            logger.debug("result---", err, result, statement.sql)
            if (err) {
                var msg = "something went wrong";
                console.log(err);
                sendResponse.sendErrorMessage(msg, res, 500);
            }
            else {
                if (!(result.length)) {
                    logger.debug("====NOT==EQUAL==")
                    var msg = "error while genrating order please genrate order again";
                    reject(msg)
                    // sendResponse.sendErrorMessage(msg,res,400);
                }
                else {
                    logger.debug("...result[0].price......**********************************", result);
                    var price;
                    if (result && result.length > 1) {
                        price = JSON.parse(result[1].price);
                    } else {
                        price = JSON.parse(result[0].price);
                    }
                    logger.debug("price", price);
                    if (price.length) {
                        var priceLength = price.length;
                        for (var i = 0; i < priceLength; i++) {
                            (function (i) {
                                logger.debug("jfsfs", i, flag);
                                if ((duration >= price[i].min_hour) && (duration <= price[i].max_hour)) {
                                    if (price[i].hasOwnProperty('discount_price')) {
                                        result[0].price = parseInt(price[i].discount_price * result[0].quantity);
                                        logger.debug("=========result[0].pricee=======", result[0].price)
                                    } else {
                                        result[0].price = parseInt(price[i].price_per_hour * result[0].quantity);
                                    }
                                    flag = 0;
                                }
                                if (i == (priceLength - 1)) {
                                    if (flag == 1) {
                                        logger.debug("...if...")
                                        if (price[i].hasOwnProperty('discount_price')) {
                                            result[0].price = parseInt(price[i].discount_price * result[0].quantity);
                                        }
                                        result[0].price = parseInt(price[i].price_per_hour * result[0].quantity);
                                    }
                                    logger.debug("=========lst result ========+", result);
                                    resolve(result)
                                    //    callback(null,result);

                                }
                            }(i))
                        }
                    }
                    else {
                        if (dbName == "vubzi_0618") {
                            console.log(dbName, "===>dbName")
                            result[0].price = 0;
                            resolve(result)
                        } else {
                            resolve([])
                        }

                        //    callback(null,[]);
                    }

                }

            }
        })
    })

}

const getProductList = (dbName, reply, cartId, productList, orderId, user, type, duration,
    user_type_check, user_type_id) => {

    var product = [], p_data;
    console.log("===productList==>", productList)
    return new Promise(async (resolve, reject) => {
        try {
            for (const [index, i] of productList.entries()) {
                if (i.price_type == 0) {
                    p_data = await getProductOrderDetail(dbName, cartId, i.product_id,
                        user.languageId, type, user_type_check, user_type_id);
                    //  product_reference_id,product_dimensions,product_upload_reciept,product_owner_name

                    p_data[0].product_reference_id = i.product_reference_id !== undefined ||
                        i.product_reference_id !== null ? i.product_reference_id !== undefined ? i.product_reference_id : "" : ""

                    p_data[0].product_dimensions = i.product_dimensions !== undefined ||
                        i.product_dimensions !== null ? i.product_dimensions !== undefined ? i.product_dimensions : "" : ""

                    p_data[0].product_upload_reciept = i.product_upload_reciept !== undefined ||
                        i.product_upload_reciept !== null ? i.product_upload_reciept !== undefined ? i.product_upload_reciept : "" : ""

                    p_data[0].product_owner_name = i.product_owner_name !== undefined ||
                        i.product_owner_name !== null ? i.product_owner_name !== undefined ? i.product_owner_name : "" : ""

                    p_data[0].special_instructions = i.special_instructions !== undefined ||
                        i.special_instructions !== null ? i.special_instructions !== undefined ? i.special_instructions : "" : ""



                    console.log("===========p-data============123======", p_data[0])


                    // logger.debug("===========p-data============123======",p_data[0])
                    product.push(p_data[0])
                }
                else {
                    p_data = await getProductOrderDetailHourly(dbName, reply, cartId, i.product_id, user.languageId, duration);
                    console.log("================p_data------------", p_data);
                    product.push(p_data[0])
                }
                if (index == productList.length - 1) {
                    resolve(product)
                }
            }
        }
        catch (Err) {
            logger.error("=======ERR!=", Err)
            reject(Err)
        }

    })

}
const insertOrderPrice = (dbName, product, orderId, isTaxInclusive) => {
    let isTaxInclusiveFlag = isTaxInclusive && isTaxInclusive.length > 0 ? 1 : 0
    return new Promise((resolve, reject) => {
        var queryString = "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?),";
        var insertString = "";
        var values = [];
        var len = product.length;
        console.log("======prod===>>", product, len)
        if (len != 0 || product) {
            for (var i = 0; i < len; i++) {
                (function (i) {
                    let price = isTaxInclusiveFlag != 0 ? (parseFloat(product[i].price) + parseFloat(product[i].agentBufferPrice) - product[i].cart_product_handling_admin) : parseFloat(product[i].price) + parseFloat(product[i].agentBufferPrice)
                    // console.log('product11111111111111111111111',product[i]);
                    if (product[i]) {
                        values.push(
                            orderId,
                            product[i].name,
                            price,
                            product[i].image_path,
                            product[i].product_desc,
                            product[i].id, product[i].quantity,
                            product[i].cart_product_handling_admin,
                            product[i].cart_product_handling_supplier,
                            product[i].supplier_branch_id,
                            product[i].loyality_discount,
                            product[i].duration != undefined ? product[i].duration : 0,
                            product[i].product_reference_id !== undefined ? product[i].product_reference_id : "",
                            product[i].product_dimensions !== undefined ? product[i].product_dimensions : "",
                            product[i].product_upload_reciept !== undefined ? product[i].product_upload_reciept : "",
                            product[i].product_owner_name !== undefined ? product[i].product_owner_name : "",
                            product[i].special_instructions !== undefined ? product[i].special_instructions : "",
                            product[i].freeQuantity !== undefined ? product[i].freeQuantity : 0,
                            product[i].is_liquor !== undefined ? product[i].is_liquor : 0,
                            product[i].actual_price !== undefined ? product[i].actual_price : 0
                        );
                        insertString = insertString + queryString;
                    }
                }(i));
                if (i == (len - 1)) {
                    insertString = insertString.substring(0, insertString.length - 1);

                    console.log(values)

                    var sql = "insert into order_prices(order_id,product_name,price,image_path,product_desc,product_id,quantity,handling_admin,handling_supplier,supplier_branch_id,loyality_discount,duration,product_reference_id,product_dimensions,product_upload_reciept,product_owner_name,special_instructions,freeQuantity,is_liquor,actual_price) values " + insertString;
                    var stmt = multiConnection[dbName].query(sql, values, function (err, result) {
                        if (err) {
                            console.log("==============error in insert order===========", stmt.sql, err)
                            var msg = "some thing went wrong ";
                            reject(msg)
                            // sendResponse.sendErrorMessage(msg,reply,500);
                        }
                        else {
                            resolve()
                            // callback(null);
                        }
                    })
                }
            }
        }
        else {
            resolve()
            // callback(null);
        }

    })
}


const insertOrderPriceNew = (dbName, product, orderId, isTaxInclusive) => {
     
    let isTaxInclusiveFlag = isTaxInclusive && isTaxInclusive.length > 0 ? 1 : 0
    return new Promise((resolve, reject) => {
        var queryString = "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?),";
        var insertString = "";
        var values = [];
        var len = product.length;
        console.log("======prod===>>", product, len)
        if (len != 0 || product) {
            for (var i = 0; i < len; i++) {
                (function (i) {
                    let price = isTaxInclusiveFlag != 0 ? (parseFloat(product[i].price) + parseFloat(product[i].agentBufferPrice) - product[i].cart_product_handling_admin) : parseFloat(product[i].price) + parseFloat(product[i].agentBufferPrice)
                    // console.log('product11111111111111111111111',product[i]);
                    if (product[i]) {
                        values.push(
                            orderId,
                            product[i].name,
                            price,
                            product[i].image_path,
                            product[i].product_desc,
                            product[i].id, product[i].quantity,
                            product[i].cart_product_handling_admin,
                            product[i].cart_product_handling_supplier,
                            product[i].supplier_branch_id,
                            product[i].loyality_discount,
                            product[i].duration != undefined ? product[i].duration : 0,
                            product[i].product_reference_id !== undefined ? product[i].product_reference_id : "",
                            product[i].product_dimensions !== undefined ? product[i].product_dimensions : "",
                            product[i].product_upload_reciept !== undefined ? product[i].product_upload_reciept : "",
                            product[i].product_owner_name !== undefined ? product[i].product_owner_name : "",
                            product[i].special_instructions !== undefined ? product[i].special_instructions : "",
                            product[i].freeQuantity !== undefined ? product[i].freeQuantity : 0,
                            product[i].is_liquor !== undefined ? product[i].is_liquor : 0,
                            product[i].actual_price !== undefined ? product[i].actual_price : 0,
                            product[i].display_price -  product[i].actual_price 
                        );
                        insertString = insertString + queryString;
                    }
                }(i));
                if (i == (len - 1)) {
                    insertString = insertString.substring(0, insertString.length - 1);

                    console.log(values)

                    var sql = "insert into order_prices(order_id,product_name,price,image_path,product_desc,product_id,quantity,handling_admin,handling_supplier,supplier_branch_id,loyality_discount,duration,product_reference_id,product_dimensions,product_upload_reciept,product_owner_name,special_instructions,freeQuantity,is_liquor,actual_price,admin_commissions) values " + insertString;
                    var stmt = multiConnection[dbName].query(sql, values, function (err, result) {
                        if (err) {
                            console.log("==============error in insert order===========", stmt.sql, err)
                            var msg = "some thing went wrong ";
                            reject(msg)
                            // sendResponse.sendErrorMessage(msg,reply,500);
                        }
                        else {
                            resolve()
                            // callback(null);
                        }
                    })
                }
            }
        }
        else {
            resolve()
            // callback(null);
        }

    })
}

var addOrderProduct = async function (dbName, reply, cartId,
    productList, orderId, user, type, duration, user_type_id, cb) {
    let user_type_check = await Universal.getUserPriceType(dbName);
    // productList = JSON.parse(productList);
    // console.log("pp.....",productList);
    // console.log("cart.....",cartId);    
    // console.log("...........productList..........",productList);
    try {

        let productData = await getProductList(dbName, reply, cartId, productList, orderId,
            user, type, duration, user_type_check, user_type_id);
        let isTaxInclusive = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["product_price_tax_inclusive", "1"]);
        
        if(dbName == "yunofood_0906" ){
            await insertOrderPriceNew(dbName, productData, orderId, isTaxInclusive);
        }else{
            await insertOrderPrice(dbName, productData, orderId, isTaxInclusive);
        }
 
        cb(null)
    }
    catch (Err) {
        console.log("=======ERR!==", Err);
        cb("some thing went wrongs ")
        // var msg = "some thing went wrong ";
        // sendResponse.sendErrorMessage(msg,reply,500); 
    }


    // var product = [];

    // async.auto({
    //     productList:function(callback){
    //         var len = productList.length;
    //         console.log("===PRODUCT==LIST==",productList)
    //         if(len!=0)
    //         {
    //             for(var i = 0;i< len;i++){

    //                 (function(i){

    //                     if(productList[i].price_type == 0){



    //                         getProductDetailOrder(dbName,reply,cartId,productList[i].product_id,user.languageId,type,function(err,result){
    //                             if(err){
    //                                 var msg = "db error";
    //                                 console.log("add order" ,err);
    //                                 sendResponse.sendErrorMessage(msg,reply,500);
    //                             }else{
    //                                 product.push(result[0]);
    //                                 logger.debug("====PRODUCT==>>",product);
    //                                 if(i == (len-1)){
    //                                     callback(null,productList);
    //                                 }
    //                             }
    //                         })

    //                     }

    //                     else{
    //                         logger.debug("===productList[i].product_id",productList[i])

    //                         getProductDetailHourly(dbName,reply,cartId,productList[i].product_id,user.languageId,duration,function(err,result){
    //                             if(err){
    //                                 var msg = "db error";
    //                                 console.log("add order" ,err);
    //                                 sendResponse.sendErrorMessage(msg,reply,500);
    //                             }else{
    //                                 logger.debug("...result....",result)
    //                                 product.push(result[0]);
    //                                 logger.debug("ppppppp...ppp..",product);
    //                                 if(i == (len-1)){
    //                                     callback(null,productList);
    //                                 }
    //                             }
    //                         })
    //                     }

    //                 }(i));
    //             }
    //         }
    //         else {
    //             console.log("===ELSE==<<>>==")
    //             callback(null);
    //         }
    //     },
    //     insertOrder:['productList',function(callback){

    //         var queryString = "(?,?,?,?,?,?,?,?,?,?),";
    //         var insertString = "";
    //         var values = [];
    //         var len = product.length;
    //         console.log("prod",product,len)
    //         if(len!=0 || product)
    //         {
    //             for(var i = 0 ;i < len;i++){
    //                 (function(i){
    //                     values.push(orderId,product[i].name,product[i].price,product[i].image_path,product[i].product_desc,product[i].id,product[i].quantity,product[i].cart_product_handling_admin,product[i].cart_product_handling_supplier,product[i].supplier_branch_id);
    //                     insertString = insertString + queryString;
    //                 }(i));
    //                 if(i == (len-1)){
    //                     insertString = insertString.substring(0, insertString.length - 1);

    //                     var sql = "insert into order_prices(order_id,product_name,price,image_path,product_desc,product_id,quantity,handling_admin,handling_supplier,supplier_branch_id) values " + insertString;
    //                     var stmt = multiConnection[dbName].query(sql, values, function (err, result) {
    //                         if (err) {
    //                             logger.debug("==============error in insert order===========",stmt.sql,err)
    //                             var msg = "some thing went wrong ";
    //                             sendResponse.sendErrorMessage(msg,reply,500);
    //                         }
    //                         else {
    //                             callback(null);
    //                         }})
    //                 }}
    //         }
    //         else {
    //             callback(null);
    //         }

    // }]
    // },function(err,result){
    //     if(err){
    //         var msg = "some thing went wrong ";
    //         sendResponse.sendErrorMessage(msg,reply,500); 
    //     }else{
    //         cb(null);
    //     }
    // })
}


var addPromotionProduct = function (dbName, reply, cartId, productList, orderId, user, languageId, cb) {
    var product;
    var quantity;
    var finalPromotion = [];
    async.auto({
        getCartPromotion: function (callback) {
            var sql = "select product_id,handling_admin,handling_supplier,quantity from cart_products where cart_id = ?";
            multiConnection[dbName].query(sql, [cartId], function (err, result) {
                if (err) {
                    var msg = "some thing went wrong ";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    product = result;

                    callback(null, result);
                }
            })
        },
        getPromotionProduct: ['getCartPromotion', function (callback) {
            var len = product.length;
            console.log('....length.....', len)
            console.log('....product.....', product)
            for (var key = 0; key < len; key++) {
                (function (key) {

                    quantity = product[key].quantity

                    var sql = "select pi2.product_id as pId2,pi.product_id as pId,pp.handling,pp.handling_supplier,pp.price,pml2.product_desc as product_desc2,pml2.measuring_unit as measuring_unit2,pml2.name as name2,pml.measuring_unit,pml.product_desc,pml.name,pi2.image_path as image_path_2,pi.image_path from supplier_branch_promotions sbp join product_image pi " +
                        " on pi.product_id = sbp.offer_product_value join product_image pi2 on pi2.product_id =  sbp.product_id_2 join product_ml " +
                        " pml on pml.product_id = sbp.offer_product_value join product_ml pml2 on pml2.product_id = sbp.product_id_2 join product_pricing pp on " +
                        " pp.product_id = sbp.offer_product_value where" +
                        " pi.default_image = ? and pi2.default_image = ? and sbp.id = ? and ((pp.price_type = '1' and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE()) or (pp.price_type = 0))" +
                        " and pml2.language_id = ? and pml.language_id = ?";
                    var st = multiConnection[dbName].query(sql, [1, 1, product[key].product_id, languageId, languageId], function (err, result) {

                        console.log(st.sql);

                        if (err) {
                            var msg = "some thing went wrong ";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            finalPromotion = result;
                            console.log("*********final*****", finalPromotion)
                            callback(null)
                        }
                    })
                }(key));
            }
        }],
        insertPorduct: ['getPromotionProduct', function (callback) {
            var len = finalPromotion.length;
            for (var i = 0; i < len; i++) {
                (function (i) {
                    insertProductData(request.dbName, reply, finalPromotion[i], orderId, quantity, function (err, result) {
                        if (err) {
                            var msg = "some thing went wrong ";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            if (i == (len - 1)) {
                                callback(null);
                            }
                        }
                    })
                }(i));
            }
        }]

    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            cb(null);
        }
    })
}



var insertProductData = function (dbName, reply, finalPromotion, orderId, quantity, callback) {
    async.auto({
        insertFirstProduct: function (cb) {
            var sql = "insert into order_prices (order_id,price,quantity,product_id,product_name,product_desc,image_path,handling_admin,handling_supplier)values(?,?,?,?,?,?,?,?,?)";
            multiConnection[dbName].query(sql, [orderId, finalPromotion.price, quantity, finalPromotion.pId, finalPromotion.name, finalPromotion.product_desc, finalPromotion.image_path, finalPromotion.handling, finalPromotion.handling_supplier], function (err, result) {
                if (err) {
                    var msg = "some thing went wrong ";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    cb(null);
                }
            })
        },
        secondProduct: function (cb) {
            var sql = "insert into order_prices (order_id,price,quantity,product_id,product_name,product_desc,image_path,handling_admin,handling_supplier)values(?,?,?,?,?,?,?,?,?)";
            multiConnection[dbName].query(sql, [orderId, 0, 1, finalPromotion.pId2, finalPromotion.name2, finalPromotion.product_desc2, finalPromotion.image_path_2, 0, 0], function (err, result) {
                if (err) {
                    var msg = "some thing went wrong ";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    cb(null);
                }
            })
        }
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null);
        }
    })
}

var insertReview = function (dbName, reply, data, callback) {
    var date1 = moment().utcOffset(4);
    var date = date1._d
    var sql = "insert into supplier_rating (supplier_id,user_id,rating,comment,is_deleted,rated_on,order_id)values(?,?,?,?,?,?,?)";
    multiConnection[dbName].query(sql, [data.supplierId, data.id, data.rating, data.comment, 0, date, data.order_id], function (err, result) {
        logger.debug("====Err!==", err)
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        }
        else {
            if (result.insertId) {
                callback(null, result.insertId);
            } else {
                var msg = "some thing went wrong ";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }
    })
}


var getReviewSupplier = function (dbName, reply, id, callback) {
    var sql = "select sp.comment,sp.rating,u.firstname,s.name from supplier_rating sp join supplier_ml s on s.supplier_id = sp.supplier_id " +
        " join user u on u.id = sp.user_id where sp.id = ?";
    multiConnection[dbName].query(sql, [id], function (err, result) {
        logger.debug("==Wee==rsrlt", err, result)
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        }
        else {
            if (result.length) {
                callback(null, result[0]);
            } else {
                var msg = "some thing went wrong ";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }
    })
}

var addsupplierRating = function (dbName, reply, rating, supplierId, callback) {
    var total_reviews = 0;
    var sprating = 0;
    var total_rating_by_user = 0;
    async.auto({
        getValue: function (callback) {
            var sql = "select total_rating_by_user,rating,total_reviews from supplier where id = ?";
            multiConnection[dbName].query(sql, [supplierId], function (err, result) {
                logger.debug("===Err!=Re=", err, result)
                if (err) {
                    var msg = "some thing went wrong ";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if (result.length) {
                        total_reviews = result[0].total_reviews;
                        sprating = result[0].rating;
                        total_rating_by_user = result[0].total_rating_by_user;
                        callback(null);

                    } else {
                        var msg = "some thing went wrong ";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                }
            })
        },
        setValues: ['getValue', function (callback) {
            var temp = sprating * total_reviews;
            rating = +temp + +rating;
            total_reviews = total_reviews + 1;
            var final = rating / total_reviews;


            // var sql = "update supplier set 	rating = ?, total_reviews = ? where id = ? ";
            var sql = "update supplier set 	rating = (select avg(rating) from supplier_rating where supplier_id=? and is_approved=?), total_reviews = ? where id = ? ";
            multiConnection[dbName].query(sql, [supplierId, 0, total_reviews, supplierId], function (err, result) {
                if (err) {
                    var msg = "some thing went wrong ";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    callback(null, result)
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null);
        }
    })
}

var checkFav = async function (dbName, reply, userId, supplierId, callback) {
    try {
        var sql = " select id from user_favourite where supplier_id = ? and user_id = ? and is_delete = 0";
        let result = await ExecuteQ.Query(dbName, sql, [supplierId, userId]);
        // multiConnection[dbName].query(sql,[supplierId,userId],function(err,result){
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        //console.log("eeee",result);
        if (result.length) {
            callback(null, 1);
        } else {
            callback(null, 0);
        }
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }
}

var getSupplierReview = async function (dbName, reply, supplierId, callback) {
    try {
        var sql = "select sr.id,sr.comment,sr.rating,u.firstname,u.user_image from supplier_rating sr join user u on sr.user_id = u.id " +
            " where sr.supplier_id = ? and sr.is_deleted = ? order by sr.id DESC ";
        let result = await ExecuteQ.Query(dbName, sql, [supplierId, 0])
        // multiConnection[dbName].query(sql,[supplierId,0],function(err,result){
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        callback(null, result);
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }
}

var getMyReview = async function (dbName, reply, userId, supplierId, callback) {
    try {
        var sql = " select sr.comment,sr.rating,u.firstname,u.user_image from supplier_rating sr join user u on sr.user_id = u.id " +
            " where sr.supplier_id = ? and sr.user_id = ? and sr.is_deleted = ? LIMIT 1";
        let result = await ExecuteQ.Query(dbName, sql, [supplierId, userId, 0])
        // multiConnection[dbName].query(sql,[supplierId,userId,0],function(err,result){ 
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        callback(null, result);
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }
}

var getSupplierBranchId = function (reply, supplierId, userId, languageId, callback) {
    var sql = "select s.id,sba.supplier_branch_id,sml.name,s.logo,s.status from supplier_branch sb join supplier_branch_delivery_areas sba on sb.id = sba.supplier_branch_id " +
        " join supplier_ml sml on sb.supplier_id = sml.supplier_id join supplier s on s.id =  sb.supplier_id" +
        " where sb.supplier_id = ? and sba.area_id =  ? GROUP BY sb.supplier_id";
    multiConnection[dbName].query(sql, [supplierId, userId, 0], function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            if (result.length) {
                callback(null, result);
            } else {
                var msg = "some thing went wrong ";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }
    })
}

var changeUserPassword = async function (req, dbName, reply, accesstoken, newPassword, oldPassword, languageId, callback) {
    try {
        oldPassword = md5(oldPassword);
        newPassword = md5(newPassword);
        var sql = "update user set password = ? where access_token = ? and password = ?";
        let result = await ExecuteQ.Query(dbName, sql, [newPassword, accesstoken, oldPassword]);
        // multiConnection[dbName].query(sql,[newPassword,accesstoken,oldPassword],function(err,result){
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        if (result.affectedRows) {
            callback(null, result);
        } else {
            // if(languageId == 14){
            var msg = "old password not match";
            sendResponse.sendErrorMessageWithTranslation(req, msg, reply, 500);
            // }else{
            //     var msg = "كلمة المرور القديمة لتتطابقا";
            //     sendResponse.sendErrorMessage(msg,reply,500);
            // }
        }
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }
}

var notificationInfo = function (dbName, reply, accesstoken, status, languageId, callback) {
    var sql = "update user set notification_status = ? where access_token = ? ";
    multiConnection[dbName].query(sql, [status, accesstoken], function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            if (result.affectedRows) {
                callback(null, result);
            } else {
                if (languageId == 14) {
                    var msg = "invalid user id";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    var msg = "هوية المستخدم غير صالح";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
            }
        }
    })
}

var notificationLang = function (dbName, reply, accessToken, languageId, callback) {
    var sql = "update user set notification_language = ? where access_token = ? ";
    multiConnection[dbName].query(sql, [languageId, accessToken], function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            if (result.affectedRows) {
                callback(null, result);
            } else {
                if (languageId == 14) {
                    var msg = "invalid user id";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    var msg = "هوية المستخدم غير صالح";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
            }
        }
    })
}

var getHistory = function (dbName, reply, userId, status, callback) {

    var sql = " select o.is_agent,cr.area_id,p.pricing_type,o.is_package,s.id,s.logo,o.supplier_branch_id,o.schedule_order,o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.service_date,o.remarks,o.delivered_on,o.created_on,o.delivery_charges,op.price " +
        " ,op.product_name,op.product_desc,op.image_path from orders o join order_prices op " +
        " on o.id = op.order_id join supplier_branch sb on sb.id = op.supplier_branch_id join supplier s on s.id = sb.supplier_id join cart cr on cr.id=o.cart_id join product p on p.id=op.product_id left join user_address ua on ua.id =o.user_delivery_address where o.user_id = ? GROUP BY o.id ORDER BY o.id DESC";
    // console.log(sql);
    multiConnection[dbName].query(sql, [userId], function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })
}
var getHistoryCount = function (reply, userId, status, params, callback) {
    // var pagination=params.limit!=undefined && params.offset!=undefined?" limit "+`${params.limit}`+" offset "+`${params.offset}`:" ";
    var sql = " select count(distinct o.id) as total_order from orders o join order_prices op " +
        " on o.id = op.order_id join supplier_branch sb on sb.id = op.supplier_branch_id join supplier s on s.id = sb.supplier_id join cart cr on cr.id=o.cart_id join product p on p.id=op.product_id left join user_address ua on ua.id =o.user_delivery_address where o.user_id = ?";
    // console.log(sql);
    multiConnection[dbName].query(sql, [userId], function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })
}

var laundarySupplier = function (dbName, reply, dayName, time, areaId, categoryId, languageId, callback) {
    var status = dayName;

    var sql = "select sbd.min_order,sc.onOffComm,s.total_reviews,s.rating,sb.id as supplier_branch_id ,sb.handling_fees,s.delivery_min_time," +
        "s.delivery_max_time,sb.delivery_start_time,sb.delivery_end_time,sb.working_start_time,sb.working_end_time," +
        "sml.name,s.logo,s.id,s.handling_admin,s.total_reviews,s.rating,s.payment_method," +
        "st.is_open as status from supplier_category sc join supplier s " +
        "on s.id =  sc.supplier_id join supplier_branch sb on s.id = sb.supplier_id join supplier_ml sml on " +
        "s.id = sml.supplier_id join supplier_timings st on st.supplier_id= s.id join supplier_delivery_areas sbd " +
        "on sbd.supplier_id = s.id join supplier_branch_delivery_areas sbda on sbda.supplier_branch_id = sb.id where sc.category_id = ? and s.is_live = ? and s.is_active = ? and sbd.area_id = ? " +
        "and sb.is_live = ? and sml.language_id = ? and sb.is_deleted = ? and st.week_id = ? and st.is_open IN(?,?) and st.start_time <= ? and st.end_time >= ? and sbd.is_deleted = 0 and sbda.area_id = ? GROUP BY s.id "

    multiConnection[dbName].query(sql, [categoryId, 1, 1, areaId, 1, languageId, 0, status, 1, 2, time, time, areaId], function (err, result) {
        console.log(".......err", err, result);
        if (err) {
            console.log("err", err);
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            console.log("...", result);
            callback(null, result);
        }
    })
}



var getTrackOrderList = function (dbName, reply, userId, callback) {
    var date1 = moment().utcOffset(4);
    var date = date1._d
    var sql = " select o.schedule_order ,o.near_on,o.shipped_on,o.net_amount,o.id,o.service_date,o.remarks,o.delivered_on,o.created_on,op.price " +
        " ,op.product_name,op.product_desc,op.image_path from orders o join order_prices op " +
        " on o.id = op.order_id where o.user_id = ? and (o.status = ? or o.status = ?) and o.schedule_date <= ?";
    multiConnection[dbName].query(sql, [userId, 0, 2, date], function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })
}

var checkLoginWithfb = async function (dbName, reply, fbToken, callback) {
    try {
        var sql = "select id,access_token from user where fb_access_token = ?";
        let result = await ExecuteQ.Query(dbName, sql, [fbToken])
        // multiConnection[dbName].query(sql,[fbToken],function(err,result){
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        callback(null, result);
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }

}

var checkLoginWithGoogle = async function (dbName, reply, googleToken, email, callback) {
    try {
        var sql = "select id,access_token,is_active from user where google_access_token = ? or email=?";
        let result = await ExecuteQ.Query(dbName, sql, [googleToken, email])
        // multiConnection[dbName].query(sql,[fbToken],function(err,result){
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        callback(null, result);
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }

}
var getUserData = async function (dbName, reply, userId, callback) {
    try {
        var sql = "select (SELECT message_id FROM `chats` WHERE (`send_to_type`='ADMIN' or `send_by_type`='ADMIN') and (send_by=user.user_created_id or send_to=user.user_created_id) and (`send_to_type`='USER' or `send_by_type`='USER') order by c_id desc limit 1) as message_id, user_created_id,referral_id,device_type,device_token,country_code,email,id,mobile_no,firstname,access_token,notification_status,user_image,otp_verified,fb_access_token,google_access_token from user where id = ?";
        let result = await ExecuteQ.Query(dbName, sql, [userId, 1])
        // multiConnection[dbName].query(sql,[userId,1],function(err,result){
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        callback(null, result);
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }
}



var registerUser = async function (dbName, reply, fbToken, name, email, image, phoneNo, area_id, callback) {

    try {
        var randomize = require('randomatic');
        let user_created_id = randomize('A0', 30);
        console.log("===11111111111=uuid=====", user_created_id);
        let referralCode = "REF-" + randomstring.generate({
            length: 5,
            charset: 'alphabetic'
        }).toUpperCase();
        var sql = "insert into user (referral_id,email,area_id,fb_access_token,firstname,user_image,mobile_no,is_active,user_created_id)values(?,?,?,?,?,?,?,?,?)";
        let result = await ExecuteQ.Query(dbName, sql, [referralCode, email, 0, fbToken, name, image, phoneNo, 1, user_created_id])
        // let stmt = multiConnection[dbName].query(sql,[email,0,facebookToken,name,image,phoneNo,1],function(err,result){
        //     logger.debug("================stmt.sql in register user by facebook=============",stmt.sql)
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        callback(null, result);
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }

}
var registerUserV1 = async function (dbName, reply, googleToken, name, email, image, phoneNo, area_id, callback) {

    try {
        let referralCode = "REF-" + randomstring.generate({
            length: 5,
            charset: 'alphabetic'
        }).toUpperCase();
        let user_created_id = randomize('A0', 30);
        var sql = "insert into user (user_created_id,referral_id,email,area_id,google_access_token,firstname,user_image,mobile_no,is_active)values(?,?,?,?,?,?,?,?,?)";
        let result = await ExecuteQ.Query(dbName, sql, [user_created_id, referralCode, email, 0, googleToken, name, image, phoneNo, 1])
        // let stmt = multiConnection[dbName].query(sql,[email,0,facebookToken,name,image,phoneNo,1],function(err,result){
        //     logger.debug("================stmt.sql in register user by facebook=============",stmt.sql)
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        callback(null, result);
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }

}
var getCategoryPackage = function (dbName, reply, areaId, languageId, callback) {
    var day = moment().isoWeekday();
    day = day - 1;
    var sql = "select st.is_open as status,st.start_time,st.end_time,sbd.charges_below_min_order,sbd.min_order,cc.id,cc.order,cc.category_flow,cc.order,sp.supplier_id ,cc.icon,sml.name as supplier_name,s.logo,s.payment_method,s.delivery_min_time,s.delivery_max_time,s.total_reviews,s.rating,c.name,c.category_id as category_id,sp.supplier_branch_id from supplier_branch_delivery_areas sbda join supplier_package sp on sbda.supplier_branch_id = sp.supplier_branch_id " +
        " join categories_ml c on c.category_id = sp.category_id join categories cc on cc.id = c.category_id join supplier s on s.id = sp.supplier_id " +
        " join supplier_ml sml on sml.supplier_id = sp.supplier_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on sb.id = sp.supplier_branch_id " +
        " join supplier_delivery_areas sbd on sbd.supplier_id = s.id join product p on p.id =sp.package_id where p.is_package =1 and p.is_live=1 and sbda.area_id = ? and sbd.area_id = ? and c.language_id = ? and sml.language_id = ? and s.is_live = 1 and s.is_active = 1 and s.is_deleted = 0 and sb.is_deleted = 0 and sp.is_deleted =0 and st.week_id =? group by sp.supplier_id,cc.id order by supplier_id";
    multiConnection[dbName].query(sql, [areaId, areaId, languageId, languageId, day], function (err, result) {
        console.log("....err........", err, result)
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })

}

var getPackageList = function (dbName, reply, supplierBranchId, categoryId, languageId, areaId, callback) {

    var sql = " SELECT sp.supplier_branch_id, pi.image_path, sp.price,sp.price as fixed_price, pml.name, pml.measuring_unit, pml.product_desc, p.bar_code, " +
        "sp.package_id AS id, sp.package_id,spp.product_id " +
        "FROM supplier_package sp JOIN product p ON p.id = sp.package_id " +
        "JOIN product_ml pml ON pml.product_id = p.id " +
        "JOIN product_image pi ON pi.product_id = p.id " +
        "JOIN supplier_package_product spp ON spp.package_id=sp.package_id " +
        "JOIN supplier_branch_delivery_areas sbda ON sbda.supplier_branch_id = sp.supplier_branch_id " +
        " WHERE p.is_package =? AND pml.language_id = ? AND sp.category_id = ? AND sp.supplier_branch_id = ? AND " +
        " sbda.area_id = ? AND sbda.supplier_branch_id = ? AND sp.is_deleted=0 and p.is_live =1 group by package_id "


    /*  var sql= "SELECT sp.supplier_branch_id, pi.image_path, sp.price, pml.name, pml.measuring_unit, pml.product_desc, p.bar_code, " +
          "sp.package_id AS id, sp.package_id,spp.product_id,pp.handling,pp.handling_supplier,pp.delivery_charges,pp.price_type " +
          "FROM supplier_package sp JOIN product p ON p.id = sp.package_id " +
          "JOIN product_ml pml ON pml.product_id = p.id " +
          "JOIN product_image pi ON pi.product_id = p.id " +
          "JOIN supplier_package_product spp ON spp.package_id=sp.package_id " +
         // "JOIN product_pricing pp ON pp.product_id= spp.product_id " +
          "JOIN supplier_branch_delivery_areas sbda ON sbda.supplier_branch_id = sp.supplier_branch_id" +
          " WHERE p.is_package =? AND pml.language_id = ? AND sp.category_id = ? AND sp.supplier_branch_id = ? AND " +
          " sbda.area_id = ? AND sbda.supplier_branch_id = ? AND sp.is_deleted=0 AND " +
          "  package_id"*/

    multiConnection[dbName].query(sql, [1, languageId, categoryId, supplierBranchId, areaId, supplierBranchId], function (err, result) {
        console.log("Err", err, result);
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            if (result.length) {
                for (var i = 0; i < result.length; i++) {
                    (function (i) {
                        result[i].handling = 0
                        result[i].handling_supplier = 0
                        result[i].delivery_charges = 0
                        result[i].price_type = 0

                        if (i == result.length - 1) {
                            callback(null, result);
                        }
                    }(i))
                }
            }
            else {
                callback(null)
            }

        }
    })
}


var getfavSupplier = async function (dbName, reply, id, languageId, latitude, longitude, callback) {
    var day = moment().isoWeekday();
    day = day - 1;
    var time = new Date()
    var time1 = new Date(time);
    time1.setMinutes(time.getMinutes() + 00);
    time1.setHours(time.getHours() + 4);
    var time2 = time1.toTimeString().split(" ")[0];
    let mUnit = await Universal.getMeausringUnit(dbName)
    var sql = "select s.delivery_radius, uf.user_Id, sb.id as supplier_branch_id, sml.name, sml.address, s.delivery_max_time, s.delivery_min_time, si.image_path as supplier_image, "
    sql += "s.logo, st.is_open as status, st.start_time, st.end_time, s.total_reviews, s.id as supplier_id, s.rating, s.payment_method, s.business_start_date, "
    sql += "(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + "))* sin(radians(s.latitude)))) AS distance "
    sql += "from user_favourite uf join supplier s on uf.supplier_id = s.id join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sb on sb.supplier_id = s.id "
    sql += "join supplier_timings st on st.supplier_id = s.id left join supplier_image si on si.supplier_id = s.id "
    sql += "where uf.user_id = ? and sml.language_id = ? and st.week_id = ? GROUP BY s.id having distance <= s.delivery_radius"

    var st = multiConnection[dbName].query(sql, [id, languageId, day], function (err, result) {
        console.log(st.sql)
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            console.log("result>>", result)
            if (result.length) {
                for (var i = 0; i < result.length; i++) {
                    (async function (i) {
                        result[i].Favourite = await SupplierFavourite(result[i].user_Id, result[i].supplier_id, dbName)
                        if (result[i].status == 1) {
                            if (result[i].start_time <= time2 && result[i].end_time >= time2) {
                                if (i == result.length - 1) {
                                    callback(null, result);
                                }
                            }
                            else {
                                result[i].status = 0;
                                if (i == result.length - 1) {
                                    callback(null, result);
                                }
                            }
                        }
                        else {
                            if (i == result.length - 1) {
                                callback(null, result);
                            }
                        }
                    }(i))
                }
            }
            else {
                callback(null, []);
            }
        }
    })
}

exports.scheduleOrder = function (request, reply) {

    console.log("*************************************************************************reqest...........", request.body);


    var orderId = 0;
    var accessToken = 0;
    var status = 0; //1:weekly,2:monthly
    var deliveryTime = 0;
    var weeklyArr = [];  // monday 1 , tuesday 2....
    var monthlyArr = [];  // 1 :1
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.orderId)) {
                var msg = "order id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.delivery_time)) {
                var msg = "delivery Time not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.weekly_arr || request.body.monthly_arr)) {
                var msg = "Please define scheduling day or date"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.weekly_arr) {
                weeklyArr = request.body.weekly_arr;
            }
            else {
                weeklyArr = 0;
            }
            if (request.body.monthly_arr) {
                monthlyArr = request.body.monthly_arr;
                //monthlyArr =JSON.parse(monthlyArr);
            }
            else {
                monthlyArr = 0;
            }
            if (!(request.body.status)) {
                var msg = "Please define weekly or monthly scheduling ";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            else {
                status = request.body.status;
            }




            accessToken = request.body.accessToken;
            orderId = request.body.orderId;
            deliveryTime = request.body.delivery_time;
            callback(null);

        },
        checkAccessToken: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        orderSchedule: ['getValue', 'checkAccessToken', function (callback) {

            scheduleOrder(request.dbName, reply, orderId, userId, deliveryTime, status, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    var scheduleId = result;
                    callback(null);
                }
            })

        }],
        assignSchedule: ['orderSchedule', function (callback) {
            var TABLE = '';
            var len = 0;
            var subSql = '';
            var monday = 0, tuesday = 0, wednesday = 0, thrusday = 0, friday = 0, saturday = 0, sunday = 0;
            if (status == 1) {
                for (var i = 0; i < weeklyArr.length; i++) {
                    (function (i) {
                        if (weeklyArr[i] == 0)
                            monday = 1;
                        else if (weeklyArr[i] == 1)
                            tuesday = 1;
                        else if (weeklyArr[i] == 2)
                            wednesday = 1;
                        else if (weeklyArr[i] == 3)
                            thrusday = 1;
                        else if (weeklyArr[i] == 4)
                            friday = 1;
                        else if (weeklyArr[i] == 5)
                            saturday = 1;
                        else if (weeklyArr[i] == 6)
                            sunday = 1;

                    })(i);
                }
                var sql = " insert into schedule_weekly(schedule_id ,monday,tuesday,wednesday,thrusday,friday,saturday,sunday) values(?,?,?,?,?,?,?,?) "
                multiConnection[dbName].query(sql, [scheduleId, monday, tuesday, wednesday, thrusday, friday, saturday, sunday], function (err, result) {
                    if (err) {
                        var msg = "some thing went wrong ";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        callback(null);
                    }
                })
            }
            else {
                TABLE = 'schedule_monthly';
                len = monthlyArr.length;
                subSql = "insert into " + TABLE + "(schedule_id , date) values "
                var queryString = "(?,?),";
                var insertString = "";
                var values = [];
                var len = monthlyArr.length;
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        values.push(scheduleId, monthlyArr[i]);
                        insertString = insertString + queryString;
                    }(i));
                    if (i == (len - 1)) {
                        insertString = insertString.substring(0, insertString.length - 1);
                        var sql = subSql + insertString;
                        multiConnection[dbName].query(sql, values, function (err, result) {
                            if (err) {
                                var msg = "some thing went wrong ";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            }
                            else {
                                callback(null);
                            }
                        })
                    }
                }
            }
        }]

    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


function scheduleOrder(dbName, reply, orderId, userId, deliveryTime, status, callback) {
    var sql = " insert into schedule_order (order_id ,user_id  ,delivery_time ,status)values(?,?,?,?) ";
    multiConnection[dbName].query(sql, [orderId, userId, deliveryTime, status], function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        }
        else {
            scheduleId = result.insertId;
            callback(null, scheduleId);
        }
    });
}


/*exports.loayltyOrderListing = function(request,reply){
    var accessToken;
    var userId;
    var upcoming = {};
    var statusArr =[];
    var orderIdData={};
    var languageId ;
    var orderHistory ;
    var final = [];
    var temp = {};
    console.log("access",request.body);
    async.auto({
        getValues:function(callback){
            if(!(request.body.accessToken)){
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg,reply,400);
            }
            if(!(request.body.languageId))
            {
                var msg = "please enter languageId";
                return sendResponse.sendErrorMessage(msg,reply,400);
            }
            accessToken = request.body.accessToken;
            languageId = request.body.languageId;
            callback(null);
        },
        getCustomerId:['getValues',function(callback){
            checkUserAccessToken(reply,accessToken,function(err,result){
                if(err){

                    callback(err);
                }else{
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        getLoyaltyOrder:['getCustomerId',function(callback){
            getloyaltyOrders(reply,accessToken,function(err,result){
                if(err){
                    callback(err);
                }else{
                    orderHistory = result;
                    callback(null);
                }
            })
        }] ,
        getProductDetails:['getScheduleOrder',function(callback){
            var leng = orderHistory.length;
            var details = {};
            if(leng != 0){
                for(var i = 0;i<leng;i++){
                    (function(i){
                        getProdcutDetails(reply,orderHistory[i].order_id,orderHistory[i].is_package,orderHistory[i].pricing_type,languageId,function(err,result){
                            if(err){
                                callback(err);
                            }else{
                                if(result.length){
                                    details.net_amount = parseInt(orderHistory[i].net_amount)+parseInt(orderHistory[i].delivery_charges)
                                    details.order_id = orderHistory[i].order_id;
                                    details.supplier_branch_id = orderHistory[i].supplier_branch_id;
                                    details.supplier_id = orderHistory[i].id;
                                    details.logo =orderHistory[i].logo;
                                    details.service_date =moment( orderHistory[i].schedule_date).format();
                                    details.status = orderHistory[i].status;
                                    details.near_on = moment(orderHistory[i].near_on).format();
                                    details.shipped_on =  moment(orderHistory[i].shipped_on).format();
                                    details.schedule_order=orderHistory[i].schedule_order;
                                    details.shipped_on = moment(orderHistory[i].shipped_on).format();
                                    details.payment_type = orderHistory[i].payment_type;
                                    details.created_on = moment(orderHistory[i].created_on).format();
                                    details.product = result;
                                    details.product_count = result.length;
                                    details.measuring_unit = result.measuring_unit;
                                    details.user_delivery_address =  orderHistory[i].user_delivery_address;
                                    details.schedule_order = orderHistory[i].schedule_order;
                                    final.push(details);
                                    details = {};
                                    if(i == (leng-1)){
                                        callback(null);
                                    }
                                }
                                else{
                                    if(i == (leng-1)){
                                        callback(null);
                                    }
                                }
                            }
                        })
                    }(i));
                }
            }
            else{
                callback(null);
            }
        }],
        getAddress:['getProductDetails',function(callback){
            var len = final.length;
            var temp = {};
            if(len != 0){
                for(var i = 0;i <len;i++){
                    (function(i){
                        getAddressAccordingId(reply,final[i].user_delivery_address,function(err,result){
                            if(err){
                                callback(err);
                            }else{
                                if(result.length){
                                    result = result[0];
                                    temp.address_line_1 = result.address_line_1;
                                    temp.address_line_2 = result.address_line_2;
                                    temp.pincode = result.pincode;
                                    temp.city = result.city;
                                    temp.landmark = result.landmark;
                                    final[i].delivery_address = temp;
                                    temp = {};
                                    if(i == (len-1)){
                                        callback(null);
                                    }
                                }else{
                                    final[i].delivery_address = {};
                                    if(i == (len-1)){
                                        callback(null);
                                    }
                                }
                            }
                        })
                    }(i));
                }
            }else{
                callback(null);
            }
        }],
        final:['getAddress',function(callback){
            var result = [];
            if(final.length){
                result=final.sort(func.sort_by('order_id', true, parseInt));
            }
            temp.orderHistory = result;

            callback(null);
        }]

    },function(err,result){
        if(err){
            var msg = err;
            return sendResponse.sendErrorMessage(msg,reply,500);
        }else{
            console.log(".............temp...............................",temp);
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}*/

exports.getloyalityProduct = function (request, reply) {
    var accessToken;
    var areaId;
    var languageId;
    var details = {};
    var product = [];
    var orderHistory;
    var deviceType = 0
    console.log("*********************request.body**************************", request.body);
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.areaId)) {
                var msg = "area Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "area Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.deviceType) {
                deviceType = parseInt(request.body.deviceType);
            }
            accessToken = request.body.accessToken;
            areaId = request.body.areaId;
            languageId = request.body.languageId;
            callback(null);
        },
        myPoints: ['getValue', function (callback) {
            getMyPoints(request.dbName, reply, accessToken, function (err, result) {
                // logger.debug("============result from getMyPoints========",result);
                if (err) {
                    callback(err);
                } else {
                    if (result) {
                        // logger.debug("===============else if of getMyPoints",result)
                        details.loyalty_points = result;
                        callback(null);
                    } else {
                        // logger.debug("=========*******======else if of getMyPoints",result)

                        details.loyalty_points = 0;
                        callback(null);
                    }

                }
            })
        }],
        supplierProduct: ['getValue', function (callback) {
            loyaltyPointsProducts(request.dbName, reply, areaId, languageId, function (err, result) {
                // logger.debug("============result from loyaltyPointsProducts========",result);

                if (err) {
                    callback(err);
                } else {
                    details.product = result;
                    callback(null);
                }
            })
        }],
        loyaltyOrder: ['getValue', function (callback) {
            getloyaltyOrders(request.dbName, reply, accessToken, deviceType, function (err, result) {
                // logger.debug("============result from getloyaltyOrders========",result);
                if (err) {
                    callback(err);
                } else {
                    orderHistory = result;
                    callback(null);
                }
            })
        }],
        getProductDetails: ['loyaltyOrder', function (callback) {
            // logger.debug("===========entered in getProductDetails================",orderHistory.length)
            var leng = orderHistory.length;
            if (leng != 0) {
                for (var i = 0; i < leng; i++) {
                    (function (i) {
                        // logger.debug("=============before getLoyaltyOrderDetails function calling===============")
                        getLoyaltyOrderDetails(request.dbName, reply, orderHistory[i].order_id, languageId, function (err, result) {
                            // logger.debug("===================result from getLoyaltyOrderDetails=========",result);
                            if (err) {
                                callback(err);
                            } else {

                                if (result.length) {
                                    orderHistory[i].product = result;
                                    if (i == (leng - 1)) {
                                        details.orders = orderHistory;
                                        callback(null);
                                    }
                                }
                                else {
                                    if (i == (leng - 1)) {
                                        details.orders = orderHistory;
                                        callback(null);
                                    }
                                }
                            }
                        })
                    }(i));
                }
            }
            else {
                logger.debug("=================else of getproductdetails===============")
                callback(null);
            }
        }],

    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(details, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


function getLoyaltyOrderDetails(dbName, res, orderId, languageId, callback) {
    // logger.debug("=================in the getLoyaltyOrderDetails==enter==============")
    var sql = "select pml.name,op.product_id,op.image_path,op.product_desc from loyalty_order_product op join " +
        " product_ml pml on op.product_id = pml.product_id join loyalty_order os on os.id = op.loyalty_order_id  where op.loyalty_order_id = ? and pml.language_id = ?";
    var stmt = multiConnection[dbName].query(sql, [orderId, languageId], function (err, result) {
        //console.log("err......",err,result);
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            // logger.debug("===========in the getLoyaltyOrderDetails==================",result)
            callback(null, result);
        }
    })
}

exports.getPromoationProduct = function (request, reply) {
    logger.debug("===============body of getPromotionProduct===================", request.body)
    var areaId;
    var languageId;
    var details = {};
    async.auto({
        getValue: function (callback) {
            if (!(request.body.areaId)) {
                var msg = "area Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "area Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            languageId = request.body.languageId;
            areaId = request.body.areaId;
            callback(null);

        },
        getPromotionProducts: ['getValue', function (callback) {
            promotionProducts(request.dbName, reply, areaId, languageId, function (err, result) {
                logger.debug("================result of promotion Products================", result);
                if (err) {
                    callback(err);
                } else {
                    details.list = result;
                    callback(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(details, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}
function GetAgentDbInformation(dbName) {
    logger.debug("===dbName============2", dbName);
    return new Promise((resolve, reject) => {
        var sql = "select name,user,password,host from agent_db"
        multiConnection[dbName].query(sql, [], function (err, data) {
            if (err) {
                reject(err)
            }
            else {
                logger.debug("====DATA===", data);
                if (data && data.length > 0) {
                    resolve(data[0])
                }
                else {
                    reject()
                }
            }
        })
    })
}
/**
 * @description used for cancel order from uses in web/app
 */
exports.cancelOrder = function (request, reply) {

    var accessToken;
    var orderId;
    var languageId;
    var id;
    var deviceToken, deviceType, userName, deliveryDate, suplieremail, supplierId, userId;
    var supplierEmail, deliveryCharges, handling, urgent_price, quantity;
    var building, houseNumber, payment_type, schedule_date, supplierPhone, branchToken, branchDeviceType, net_amount, supplierName, created_on, mobileNumber, area, landmark, address_link;
    var isScheduled = 0;
    let cancel_to_wallet = request.body.cancel_to_wallet != undefined ? request.body.cancel_to_wallet : 0;
    let offset = request.body.offset || "+05:30";
    let self_pickup;

    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.orderId)) {
                var msg = "order Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.languageId)) {
                var msg = "area Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            orderId = request.body.orderId;
            languageId = request.body.languageId;
            isScheduled = parseInt(request.body.isScheduled);
            callback(null);
        },
        getUserId: ['getValues', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    id = result.id;
                    callback(null);
                }
            })
        }],
        CheckForOrderStatus: ['getUserId', async function (callback) {
            checkStatus(request.dbName, reply, orderId, function (err, result) {
                if (err) {
                    callback(err)
                } else {
                    callback(null);
                }
            })
            //    await checkStatus(request.dbName,reply,orderId);
            //    callback(null)
        }],
        cancelOrder: ['CheckForOrderStatus', function (callback) {
            cancelOrders(request.dbName, reply, id, orderId, languageId, cancel_to_wallet, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }],
        cancelOrderAgent: ['cancelOrder', async function (callback) {
            var oSql = `select ors.*,o.user_delivery_address,s.address as supplier_address,sbp.category_id,o.self_pickup,o.payment_type,o.schedule_date,o.created_on,o.net_amount,
            s.supplier_id as supplier_id,s.name as supplier_name,u.email,u.id as user_id,u.device_token,u.device_type,u.notification_status,u.notification_language,
            CONCAT(u.firstname,' ',u.lastname) as userName from orders o join user u on o.user_id = u.id 
            join order_prices ors on ors.order_id=o.id join product pr on pr.id=ors.product_id join
            supplier_branch sb on sb.id=o.supplier_branch_id join supplier_ml s on s.supplier_id = sb.supplier_id left join supplier_branch_product sbp on sbp.product_id=ors.product_id
            and s.language_id=u.notification_language where o.id = ?`
            let result = await ExecuteQ.Query(request.dbName, oSql, [orderId]);
            request.category_id = result && result.length > 0 ? result[0].category_id : 0;

            var GetAgentDbData = await GetAgentDbInformation(request.dbName);
            var AgentConnection = await RunTimeAgentConnection(GetAgentDbData);
            var a_sql = `select cuo.*,cu.device_token from cbl_user_orders cuo
                left join cbl_user cu on cuo.user_id=cu.id
            where cuo.order_id=${orderId}`;
            let data = await ExecuteQ.QueryAgent(AgentConnection, a_sql, []);
            console.log('data', data);
            if (data.length) {
                a_sql = `update cbl_user_orders set status=8 where order_id=${orderId}`;
                await ExecuteQ.QueryAgent(AgentConnection, a_sql, []);
                data[0].current_date_time = moment().utcOffset(offset).format("YYYY-MM-DD HH:mm:ss");
                if (data[0].device_token != "") {
                    var pData = {
                        type: "OrderCancelled",
                        message: await Universal.getMsgText(languageId, request, 8),
                        data: data && data.length > 0 ? data[0] : {},
                        items: []
                    };
                    logger.debug("====sData===", pData)
                    await pushNotifications.sendFcmPushNotificationToAgent(request.dbName, data[0].device_token, pData);
                    callback(null);
                }
                else {
                    callback(null);
                }
            } else {
                callback(null);
            }
        }],
        refundAmount: ['cancelOrder', async function (callback) {
            // await orderFunction.refund_stripe_payments(request.dbName,reply,request,orderId);
            callback(null);
        }],
        notificationData: ['cancelOrderAgent', function (callback) {
            //notificationData:['refundAmount',function (callback) {
            if (isScheduled) {
                callback(null)
            }
            else {

                getvalues(request.dbName, reply, orderId, async function (err, values) {
                    console.log(".....val.....", values);
                    if (err) {
                        sendResponse.somethingWentWrongError(reply);
                    }
                    else {
                        // let new_email_template_v12=await Execute.Query(request.dbName,"select `key`,`value` from tbl_setting where `key`=? and value=1 ",["new_email_template_v12"]);

                        deviceToken = values.device_token;
                        deviceType = values.device_type;
                        userName = values.user_name;
                        deliveryDate = values.delivery_date;
                        self_pickup = values.self_pickup
                        supplierEmail = values.email;
                        supplierPhone = values.phone;
                        branchToken = values.branch_token;
                        branchDeviceType = values.branch_device_type;
                        supplierId = values.supplier_id;


                        net_amount = values.net_amount;
                        net_amount = request.dbName == "4n1deliverylive_0755" ? (values.net_amount - values.user_service_charge) : values.net_amount;

                        supplierName = values.supplierName;
                        userId = values.user_id;
                        mobileNumber = values.mobileNumber;
                        area = values.area;
                        landmark = values.landmark;
                        address_link = values.address_link;
                        created_on = moment(values.created_on).format('YYYY-MM-DD hh:mm a');
                        schedule_date = moment(values.schedule_date).format('YYYY-MM-DD hh:mm a');
                        console.log("=values.pincode=++++++++++++++", values.pincode, created_on);
                        houseNumber = values.pincode != undefined && values.pincode != "" ? (values.pincode).split(',') : "0,1";
                        if (houseNumber[1]) {
                            building = houseNumber[1];
                            building = building.substring(2);
                        }
                        else {
                            building = '';
                        }
                        deliveryCharges = values.delivery_charges;
                        handling = parseInt(values.handling_admin) + parseInt(values.handling_supplier);
                        urgent_price = values.urgent_price;
                        quantity = values.quantity;
                        if (values.payment_type == 0) {
                            payment_type = 'CASH'
                        } else {
                            payment_type = 'CARD'
                        }
                        callback(null);
                    }
                });
            }

        }],

        sendPushNotification: ['notificationData', function (cb) {
            console.log("device..", deviceType, deviceToken);
            if (isScheduled) {
                cb(null)
            }
            else {
                if (deviceToken.length > 15) {
                    if (deviceType == 0) {
                        var data = {
                            "status": 3,
                            "message": "You Have Received An Order Cancelltion ",
                            "sound": "nokia_tone0",
                            "title": "Order Canceled",
                            "data": orderId

                        }
                        //data.message= userName + data.message;
                        pushNotifications.sendAndroidPushNotificationToSupplierV1(request.dbName, deviceToken, data, 0, function (err, result) {
                            console.log(".........errrrrrr.......", err, result);
                            if (err) {
                                console.log("err2", err)
                                cb(null)
                            }
                            else {
                                //console.log("push sent");
                                cb(null);
                            }
                        });
                    }
                    else {
                        var data = {
                            "status": 3,
                            "message": "You Have Received An Order Cancelltion ",
                            "sound": "nokia_tone0",
                            "title": "Order Canceled",
                            "data": orderId

                        }
                        var path = "supplier";
                        var sound = "newOrder.mp3";
                        pushNotifications.sendAndroidPushNotificationToSupplierV1(request.dbName, deviceToken, data, path, sound, function (err, result) {
                            console.log(".........errrrrrr.......", err, result);
                            if (err) {
                                console.log("err2", err);
                                cb(null)
                            }
                            else {
                                //console.log("push sent");
                                cb(null);
                            }
                        });
                    }
                }
                else {
                    cb(null)
                }
            }

        }],
        sendBranchPushNotification: ['sendPushNotification', function (cb) {
            console.log("device..", branchToken, branchDeviceType);
            if (isScheduled) {
                cb(null)
            }
            else {
                if (branchToken.length) {
                    if (branchDeviceType == 0) {
                        var data = {
                            "status": 3,
                            "message": "You Have Received An Order Cancelltion ",
                            "sound": "nokia_tone0",
                            "title": "Order Canceled",
                            "data": orderId
                            //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                        }
                        //data.message= userName + data.message;
                        pushNotifications.sendAndroidPushNotificationToSupplierV1(request.dbName, branchToken, data, 1, function (err, result) {
                            console.log(".........errrrrrr11.......", err, result);
                            if (err) {
                                console.log("err2", err)
                                cb(null)
                            }
                            else {
                                //console.log("push sent");
                                cb(null);
                            }
                        });
                    }
                    else {
                        var data = {
                            "status": 3,
                            "message": "You Have Received An Order Cancelltion ",
                            "sound": "nokia_tone0",
                            "title": "Order Canceled",
                            "data": orderId
                            //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                        }
                        var path = "supplier";
                        var sound = "newOrder.mp3";

                        console.log("********************ios branch push******");
                        pushNotifications.sendIosPushNotification(branchToken, data, path, sound, function (err, result) {
                            console.log(".........errrrrrr.......", err, result);
                            if (err) {
                                console.log("err2", err);
                                cb(null)
                            }
                            else {
                                //console.log("push sent");
                                cb(null);
                            }
                        });
                    }
                }
                else {
                    cb(null);
                }
            }

        }],
        sendAdminMail: ['notificationData', async function (cb) {
            if (isScheduled) {
                cb(null)
            }
            else {

                emailTemp.cancelOrderByUser(request, self_pickup, reply, AdminMail, supplierEmail, orderId, supplierName, userName, mobileNumber, area, landmark, houseNumber[0], address_link, building, net_amount, created_on, schedule_date, payment_type, deliveryCharges, handling, function (err, result) {
                    if (err) {
                        console.log("..****fb register email*****....", err);
                    }
                })

                if (request.dbName == "rushdelivery_0598") {
                    var data = {
                        "status": 3,
                        "message": "You Have Received An Order Cancelltion ",
                        "sound": "nokia_tone0",
                        "title": "Order Canceled",
                        "data": orderId

                    }
                    var fcmToken = [];
                    let adminData = await ExecuteQ.Query(request.dbName,
                        "select `fcm_token`,`email`,`id` from admin where is_active=1 and fcm_token!=? ", ["0"]);

                    adminData.forEach(element => {
                        fcmToken.push(element.fcm_token)
                    });

                    console.log("********************adminpush******");
                    pushNotifications.sendFcmPushNotificationAdmin(fcmToken, data, request.dbName, function (err, result) {
                        console.log(".........errrrrrr.......", err, result);
                        if (err) {
                            console.log("err2", err);
                            cb(null)
                        }
                        else {
                            console.log("push sent");
                            cb(null);
                        }
                    });
                }
                cb(null)
            }

        }],
        changeAgentOrderStatus: ['notificationData', async function (cb) {
            logger.debug("====Agent updation==>>")
            var getAgentDbData = await common.GetAgentDbInformation(request.dbName);
            var agentConnection = await common.RunTimeAgentConnection(getAgentDbData);
            var sqlQuery = "update cbl_user_orders set status=? where order_id=?";
            await ExecuteQ.QueryAgent(agentConnection, sqlQuery, [8, orderId]);
            cb(null)
        }],
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


function checkStatus(dbName, res, orderId, cb) {
    return new Promise(async (resolve, reject) => {
        try {
            let sql = "select status from orders where id = ?"
            let params = [orderId]
            let data = await ExecuteQ.Query(dbName, sql, params)
            logger.debug(data)
            if (data && data.length > 0) {
                if (data[0].status == 1) {
                    // let msg = "Order already confirmed"
                    // sendResponse.sendErrorMessage(msg,res,400)
                    cb(null);
                } else if (data[0].status == 2) {
                    let msg = "Order already rejected"
                    sendResponse.sendErrorMessage(msg, res, 400)
                } else {
                    cb(null);
                }
            } else {
                let msg = "Order not exist with this order id"
                sendResponse.sendErrorMessage(msg, res, 400)
            }

        } catch (err) {
            logger.debug("===========check status err==========", err)
            sendResponse.somethingWentWrongError(res)
        }
    })
}

exports.rateMyOrder = function (request, reply) {
    var rating = 0;
    var comment = null;
    var orderId;
    var id;
    var accesstoken;
    var languageId;
    async.auto({
        getValue: function (callback) {
            if (request.body.rating) {
                rating = request.body.rating;
            }
            if (request.body.comment) {
                comment = request.body.comment;
            }
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.orderId)) {
                var msg = "order Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.languageId)) {
                var msg = "area Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accesstoken = request.body.accessToken;
            orderId = request.body.orderId;
            languageId = request.body.languageId;
            callback(null);
        },
        accessId: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accesstoken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    id = result.id;
                    callback(null);
                }
            })
        }],
        rateMyOrder: ['accessId', function (callback) {
            orderRate(request.dbName, reply, orderId, languageId, id, rating, comment, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);

        }
    })
}
var getMyPoints = function (dbName, reply, accessToken, callback) {
    var loyalty_points = 0;
    var sql = "select loyalty_points from user where access_token = ? ";
    var stmt = multiConnection[dbName].query(sql, [accessToken], function (err, result) {
        logger.debug("===================in the getMyPoint function============", err, stmt.sql, result)
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        }
        else {
            // logger.debug("=================in the getMyPoints============",result.length)
            if (result.length) {
                // logger.debug("===============result.length======if=========",result[0].loyalty_points)
                loyalty_points = result[0].loyalty_points;
                callback(null, loyalty_points);
            } else {
                // logger.debug("===============result.length=====else========")
                loyalty_points = 0;
                callback(null, loyalty_points);
            }

        }
    });
}

var loyaltyPointsProducts = function (dbName, reply, areaId, languageId, callback) {

    var sql = " select sml.name as supplier_name, pi.image_path,p.id as product_id,pml.product_desc,pml.measuring_unit,pml.name,sl.supplier_id,sl.loyalty_points,sl.supplier_branch_id " +
        " from supplier_product_loyalty_points sl join product p on sl.product_id = p.id " +
        " join product_ml pml on pml.product_id = p.id join product_image pi on pi.product_id = p.id " +
        " join supplier_branch_delivery_areas sbda on " +
        " sbda.supplier_branch_id = sl.supplier_branch_id left join supplier_ml sml on sml.supplier_id  = sl.supplier_id " +
        " join supplier s on s.id = sl.supplier_id join supplier_branch sb on sb.id = sl.supplier_branch_id " +
        "where pml.language_id = ? and s.is_deleted = 0 and sb.is_deleted = 0 and " +
        " (pi.default_image = ? or pi.imageOrder =1) and sbda.area_id = ? and sml.language_id = ? and sbda.is_deleted = ? and sl.is_deleted = ?  group by p.id ORDER BY sbda.supplier_branch_id ";
    var stmt = multiConnection[dbName].query(sql, [languageId, 1, areaId, languageId, 0, 0], function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            // logger.debug("==========in the loyaltyPointsProduct=============",result,stmt.sql)
            callback(null, result);
        }
    })
}

function getScheduleOrder(reply, userId, statusArr, callback) {
    var sql = '';
    var finalData = [];
    for (var i = 0; i < statusArr.length; i++) {
        (function (i) {
            if (statusArr[i].status == 1) {
                sql = " select o.schedule_order, o.cart_id,o.id as order_id , o.near_on,o.shipped_on,o.net_amount,o.id ,o.remarks , " +
                    " o.user_delivery_address , o.order_source , o.delivered_by , o.comment , o.rating , o.approve_rejection_reason , " +
                    " o.was_postponed , o.urgent_price , o.urgent , o.is_recurring , o.pickup_time , o.pickup_date , o.service_date " +


                    " ,o.supplier_branch_id,o.handling_admin,o.handling_supplier ,o.delivery_charges ,o.loyalty_points ,o.currency_id ,o.min_order_delivery_crossed , " +
                    "   o.remarks_images_array , o.payment_source  , o.card_payment_id , o.pickup_address_id " +
                    " ,so.status as WeekMonth ,so.delivery_date ,so.delivery_time , sw.monday , sw.tuesday ,sw.wednesday , " +
                    "  sw.thrusday , sw.friday , sw.saturday , sw.sunday , so.status , op.quantity from orders o " +
                    " join order_prices op on op.order_id = o.id  " +
                    " join schedule_order so on so.order_id = o.id " +
                    " join schedule_weekly sw on sw.schedule_id = so.id " +

                    " where o.user_id = ? and so.id = ? and so.user_id= ? and so.status=1 and o.id = ?  " +
                    "group by sw.id "

            }
            else {
                sql = " select o.schedule_order, o.cart_id,o.id as order_id , o.near_on,o.shipped_on,o.net_amount,o.id,o.remarks,o.delivered_on  ," +

                    " o.user_delivery_address , o.order_source , o.delivered_by , o.comment , o.rating , o.approve_rejection_reason , " +
                    " o.was_postponed , o.urgent_price , o.urgent , o.is_recurring , o.pickup_time , o.pickup_date , o.service_date " +

                    "  ,o.supplier_branch_id,o.handling_admin,o.handling_supplier ,o.delivery_charges ,o.loyalty_points ,o.currency_id ,o.min_order_delivery_crossed , " +
                    "   o.remarks_images_array , o.payment_source  , o.card_payment_id , o.pickup_address_id " +
                    " ,so.status as WeekMonth ,so.delivery_date ,so.delivery_time , so.status , " +
                    "   sm.date as monthly , op.quantity from orders o " +
                    " join order_prices op on op.order_id = o.id  " +
                    " join schedule_order so on so.order_id = o.id " +
                    " join schedule_monthly sm on sm.schedule_id = so.id " +
                    " where o.user_id = ? and so.id = ?  and so.user_id= ?  and so.status=2 and o.id= ? " +
                    " group by sm.id "

            }
            multiConnection[dbName].query(sql, [userId, statusArr[i].id, userId, statusArr[i].order_id], function (err, result) {
                if (err) {
                    var msg = "some thing went wrong ";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    //console.log("in if",result.length);
                    if (result.length > 0) {
                        //console.log("in if",result.length,statusArr[i].order_id);
                        for (var j = 0; j < result.length; j++) {
                            (function (j) {
                                finalData.push(result[j]);
                            })(j);
                        }
                        if (i == statusArr.length - 1)
                            callback(null, finalData);

                    }
                    else {
                        callback(null, finalData);
                    }

                }
            });
        })(i);
    }




}

function genrateScheduleOrder(reply, accessToken, upcoming, userId, callback) {
    var orderIds = [];
    var orderIds1 = [];
    var delivery_date = 0;
    var finalData = {};
    var len = upcoming.length;
    if (len != 0) {
        for (var i = 0; i < upcoming.length; i++) {
            (function (i) {
                var data = {};
                var productList = upcoming[i];
                var end;
                data.near_on = productList.near_on;
                data.remarks = productList.remarks;
                data.supplier_branch_id = productList.supplier_branch_id;
                data.user_address_id = productList.user_address_id;

                data.user_id = userId;
                data.status = 9;
                data.handling_admin = productList.handling_admin;
                data.handling_supplier = productList.handling_supplier;
                data.delivery_charges = productList.delivery_charges;
                data.net_amount = productList.net_amount;
                data.min_order_delivery_crossed = productList.min_order_delivery_crossed;
                data.schedule_date = productList.delivery_date;
                data.currency_id = productList.currency_id;
                data.productId = productList.product_id;
                data.user_delivery_address = productList.user_delivery_address;
                data.order_source = productList.order_source;
                data.delivered_by = productList.delivered_by;
                data.comment = productList.comment;
                data.rating = productList.rating;
                data.approve_rejection_reason = productList.approve_rejection_reason;
                data.was_postponed = productList.was_postponed;
                data.urgent_price = productList.urgent_price;
                data.urgent = productList.urgent;
                data.is_recurring = productList.is_recurring;
                data.pickup_time = productList.pickup_time;
                data.pickup_date = productList.pickup_date;
                data.service_date = productList.service_date;
                data.delivery_time = productList.delivery_time;
                data.cartId = productList.cart_id;
                if (productList.status == 1) {
                    weekArr = [productList.monday, productList.tuesday, productList.wednesday, productList.thrusday, productList.friday, productList.saturday, productList.sunday];
                    //console.log(weekArr);
                    monthArr = productList.monthly;
                    var len1 = weekArr.length;
                    if (len1 != 0) {
                        for (var j = 0; j < weekArr.length; j++) {
                            var delivery_date1 = 0;
                            (function (j) {
                                var now = moment(new Date()); //todays date
                                var day = now.day();
                                // console.log(day+"............")
                                if (weekArr[j] == 1) {
                                    if ((j + 1) - day >= 0) {
                                        // console.log("..........Hello")
                                        var diff = (j + 1) - day; // difference added
                                        //console.log("diff.....",diff);
                                        delivery_date1 = now.add(diff * 24, 'hours');

                                        //console.log("date----------",delivery_date1.format('YYYY-MM-DD'))
                                        var sql = "insert into orders (user_id,supplier_branch_id,status,handling_admin,handling_supplier,delivery_charges,net_amount,currency_id,min_order_delivery_crossed , " +
                                            " schedule_date ,delivery_time,user_delivery_address,order_source ,delivered_by ,comment,rating ,approve_rejection_reason,was_postponed,urgent,urgent_price,is_recurring,pickup_time,pickup_date,service_date,cart_id,schedule_order)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                        var val = [data.user_id, data.supplier_branch_id, data.status, data.handling_admin, data.handling_supplier, data.delivery_charges, data.net_amount, data.currency_id, data.min_order_delivery_crossed, delivery_date1.format('YYYY-MM-DD'), data.delivery_time, data.user_delivery_address, data.order_source, data.delivered_by, data.comment, data.rating, data.approve_rejection_reason, data.was_postponed, data.urgent, data.urgent_price, data.is_recurring, data.pickup_time, data.pickup_date, data.service_date, data.cartId, 1];
                                        multiConnection[dbName].query(sql, val, function (err, result) {
                                            if (err) {
                                                var msg = "db error";
                                                sendResponse.sendErrorMessage(msg, reply, 500);
                                            }
                                            else {
                                                var temp = {};
                                                temp.orderId = result.insertId;
                                                orderIds1.push(temp);
                                                if (i == upcoming.length - 1) {

                                                    finalData.orderIds1 = orderIds1;
                                                    finalData.orderIds = orderIds;
                                                    callback(null, finalData);
                                                }
                                            }
                                        })
                                    }
                                    else {
                                        if (i == upcoming.length - 1) {
                                            finalData.orderIds1 = orderIds1;
                                            finalData.orderIds = orderIds;
                                            callback(null, finalData);
                                        }
                                    }
                                }
                                else {
                                    if (i == upcoming.length - 1) {
                                        finalData.orderIds1 = orderIds1;
                                        finalData.orderIds = orderIds;
                                        callback(null, finalData);
                                    }
                                }
                            })(j);
                        }
                    }
                    else {
                        callback(null);
                    }
                }
                else {
                    monthArr = productList.monthly;
                    data.currency_id = productList.currency_id;
                    var currentDate = new moment().format("DD");
                    if (monthArr - currentDate >= 0) {
                        var diff = (currentDate - monthArr) * 24;
                        var now = moment(new Date()); //todays date
                        end = now.add(diff, 'hours');
                        delivery_date = end.format('YYYY-MM-DD');
                        var sql = "insert into orders (user_id,supplier_branch_id,status,handling_admin,handling_supplier,delivery_charges,net_amount,currency_id,min_order_delivery_crossed , " +
                            " schedule_date,delivery_time,user_delivery_address,order_source ,delivered_by ,comment,rating ,approve_rejection_reason,was_postponed,urgent,urgent_price,is_recurring,pickup_time,pickup_date,service_date,cart_id,schedule_order)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                        var val = [data.user_id, data.supplier_branch_id, data.status, data.handling_admin, data.handling_supplier, data.delivery_charges, data.net_amount, data.currency_id, data.min_order_delivery_crossed, delivery_date, data.delivery_time, data.user_delivery_address, data.order_source, data.delivered_by, data.comment, data.rating, data.approve_rejection_reason, data.was_postponed, data.urgent, data.urgent_price, data.is_recurring, data.pickup_time, data.pickup_date, data.service_date, data.cartId, 1];
                        multiConnection[dbName].query(sql, val, function (err, result) {
                            if (err) {
                                var msg = "db error";
                                sendResponse.sendErrorMessage(msg, reply, 500);
                            }
                            else {
                                var temp = {};
                                temp.orderId = result.insertId;
                                orderIds.push(temp);
                                if (i == upcoming.length - 1) {
                                    finalData.orderIds = orderIds;
                                    finalData.orderIds1 = orderIds1;
                                    callback(null, finalData);
                                }
                            }
                        })
                    }
                    else {
                        if (i == upcoming.length - 1) {
                            finalData.orderIds = orderIds;
                            finalData.orderIds1 = orderIds1;
                            callback(null, finalData);
                        }
                    }
                }
            })(i)
        }
    }
    else {
        callback(null);
    }

}



function getProductDetailWithProductId(res, productId, callback) {
    var sql = " select product.product_desc , product.name , product_image.image_path ,product_pricing.price  " +
        " from product " +
        " join product_image on product_image.product_id = product.id " +
        " join product_pricing on product_pricing.product_id = product.id " +
        " where product.id = ? " +
        " group by product.id ";

    multiConnection[dbName].query(sql, [productId], function (err, result) {
        if (err) {
            var msg = "something went wrong";

            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            callback(null, result);
        }
    })
}


var promotionProducts = function (dbName, reply, areaId, languageId, callback) {
    /*
        var sql = " select sbp.offer_product_value,pp.price as promotion_price,cml.name as category_name,sml.name as supplier_name,sbp.supplier_id,sbp.category_id," +
            " sbp.supplier_branch_id,ppml.promotion_description,ppml.promotion_name,sbp.id,sbp.promotion_image,sbp.promotion_type,sbapa.min_order,sbapa.delivery_charges, " +
            "pp.handling as handling_admin,pp.handling_supplier" +
                   " from supplier_branch_promotions sbp " +
                    " join supplier_branch_delivery_areas sbda on sbda.supplier_branch_id = sbp.supplier_branch_id " +
                    " join promotions_ml ppml on ppml.promotion_id = sbp.id " +
                    "join supplier_ml sml on sml.supplier_id = sbp.supplier_id " +
                    " join categories_ml cml on cml.category_id = sbp.category_id " +
                    "join product_pricing pp on pp.product_id = sbp.offer_product_value " +
                    "join supplier s on s.id = sml.supplier_id" +
                    " join supplier_branch_area_product sbapa on (sbapa.supplier_branch_id = sbp.supplier_branch_id) and  (sbapa.product_id = sbp.offer_product_value) " +
                    " where sbda.area_id = ?  and ppml.language_id = ? and sbp.is_deleted = ? and sml.language_id = ? and cml.language_id = ? " +
            " and ((pp.price_type = '1' and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE()) or (pp.price_type = 0)) and sbda.is_deleted = 0 and pp.is_deleted = 0 and s.is_active = ?"
    */


    var sql = "select logo,offer_product_value,promotion_price,category_name,supplier_name,supplier_id,category_id,supplier_branch_id,promotion_description,promotion_name,id,promotion_image,promotion_type,min_order,delivery_charges,handling_admin,handling_supplier from (select sbp.offer_product_value,pp.price as promotion_price,cml.name as category_name,sml.name as supplier_name,sbp.supplier_id,sbp.category_id," +
        "  sbp.supplier_branch_id,ppml.promotion_description,ppml.promotion_name,sbp.id,sbp.promotion_image,sbp.promotion_type,sbapa.min_order,sbapa.delivery_charges," +
        "pp.handling as handling_admin,pp.handling_supplier,s.logo,pp.pricing_type" +
        " from supplier_branch_promotions sbp" +
        " join supplier_branch_delivery_areas sbda on sbda.supplier_branch_id = sbp.supplier_branch_id" +
        " join promotions_ml ppml  on ppml.promotion_id = sbp.id" +
        " join supplier_ml sml on sml.supplier_id = sbp.supplier_id" +
        " join categories_ml cml on cml.category_id = sbp.category_id" +
        " join product_pricing pp on  pp.product_id = sbp.offer_product_value" +
        " join supplier s on s.id = sml.supplier_id" +
        "  join supplier_branch_area_product sbapa on ((sbapa.supplier_branch_id = sbp.supplier_branch_id) and  (sbapa.product_id = sbp.offer_product_value) )" +
        //" where sbda.area_id = ? and ppml.language_id = ? and sbp.is_deleted = ? and sml.language_id = ? and cml.language_id = ? and sbda.is_deleted = ? and pp.is_deleted = ? and s.is_active = ? and sbapa.area_id = ? and sbapa.is_deleted = ? and ((pp.price_type = '1' and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE()) or (pp.price_type = 0)) ORDER BY pp.price_type DESC) selection GROUP BY id";
        " and ((pp.pricing_type=1) or(pp.pricing_type=0 and pp.price !=0)) where sbda.area_id = ? and ppml.language_id = ? and sbp.is_deleted = ? and sml.language_id = ? and cml.language_id = ? and sbda.is_deleted = ? and pp.is_deleted = ? and s.is_active = ? and sbapa.area_id = ? and sbapa.is_deleted = ? and pp.price_type = 0 ORDER BY pp.price_type DESC) selection GROUP BY id";

    var stmt = multiConnection[dbName].query(sql, [areaId, languageId, 0, languageId, languageId, 0, 0, 1, areaId, 0], function (err, result) {
        logger.debug(".....e........e........", err, result, stmt.sql);
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, reply, 500);
        }
        else {
            callback(null, result);
        }
    })
}


var cancelOrders = async function (dbName, reply, id, orderId, languageId, cancelToWallet, callback) {
    try {
        let is_flat;
        let value;
        let status = 8
        let cancel_to_wallet = cancelToWallet;
        //cancel_refund_to_wallet
        // let cancel_refund_to_wallet = await ExecuteQ.Query(dbName,"select key,value from tbl_setting where key=?",["cancel_refund_to_wallet"]);
        // if(cancel_refund_to_wallet && cancel_refund_to_wallet.length>0){
        //     if(cancel_refund_to_wallet[0].value===1){
        //         cancel_to_wallet = 1;
        //     }
        // }
        await updatePurchaseQuantity(dbName, orderId);
        await orderLimitCheckAndUpdate(dbName, id)
        // await setOrderStatusToCancel(dbName, orderId);
        let orderStatus = await getOrderStatus(dbName, orderId);
        // let createdDateTime=moment(orderStatus[0].created_on).format("YYYY-MM-DD HH:mm:ss");
        var currentDateTime = moment().utcOffset(orderStatus[0].zone_offset)
        currentDateTime = moment(currentDateTime).format("YYYY-MM-DD HH:mm:ss");
        logger.debug("=createdDateTime==>>", currentDateTime, orderStatus[0].created_on);
        if (orderStatus[0].payment_type == 1 || orderStatus[0].payment_type == 4) {
            let getMinTimeToRefund = await getMinTimeForRefund(dbName);

            let orderTimeDiff = await getOrderTimeDiff(dbName, orderId, currentDateTime);
            let getCancelPolicy = await cancellationPolicyStatusCheck(dbName, orderStatus[0].status);

            let refundType = await refundTypeCheck(dbName, getCancelPolicy[0].refund_type);

            let detailsOfOrder = await getOrderDetails(dbName, orderId);
            logger.debug("================detailsoforder=-=======", detailsOfOrder)
            let net_amount = parseFloat(detailsOfOrder[0].net_amount) - parseFloat(detailsOfOrder[0].refund_amount) - parseFloat(detailsOfOrder[0].wallet_discount_amount) - (parseFloat(detailsOfOrder[0].discountAmount))
            let payment_source = detailsOfOrder[0].payment_source
            let card_payment_id = detailsOfOrder[0].card_payment_id
            let transaction_id = detailsOfOrder[0].transaction_id
            let supplier_stripe_transfer_id = detailsOfOrder[0].supplier_stripe_transfer_id
            logger.debug("========order details=======", detailsOfOrder);
            logger.debug("=======================")
            logger.debug("=========getmintimetorefund======", getMinTimeToRefund[0].min_time, orderTimeDiff[0].totalTime)



            if (getMinTimeToRefund[0].min_time >= orderTimeDiff[0].totalTime) {
                logger.debug("==================under time=============")
                if (getCancelPolicy[0].refund_type == 0) {
                    //full refund
                    logger.debug("=============full refund========+", payment_source, net_amount)
                    // let strip_secret_key_data = await Universal.getStripSecretKey(dbName);
                    // logger.debug("====STRIP=DATA==>>", Math.round(parseFloat(net_amount * 100)))
                    // const stripe = require('stripe')(strip_secret_key_data[0].value);
                    if (cancel_to_wallet == 1 || detailsOfOrder[0].payment_type == 4) {
                        await addWalletTransactionRecordDuringCancel(dbName, id, net_amount, "", 0, 2, 1, 0);
                    } else {

                        //await makeStripePayment(card_payment_id, net_amount,dbName);
                        await makeCancellationRefund(orderId, card_payment_id, net_amount, payment_source, transaction_id, supplier_stripe_transfer_id, dbName);

                    }
                    await setOrderStatusToCancel(dbName, orderId);
                    callback(null)
                    //}

                }
                else if (getCancelPolicy[0].refund_type == 1) {
                    //partial refund

                    orderFunction.deliveredOrder(dbName, reply, orderId, status, 4, 0, async function (err, result) {
                        console.log("..........err........deliver....result.........", err, result);
                        if (err) {
                            sendResponse.somethingWentWrongError(reply);
                        }
                        else {
                            is_flat = refundType[0].is_flat;
                            value = refundType[0].value;
                            let refund_amount = 0;
                            let admin_deduction_charge = 0


                            if (parseInt(is_flat) == 0) {
                                //for percentage 
                                admin_deduction_charge = (net_amount / 100) * value
                                refund_amount = parseFloat(net_amount) - parseFloat(admin_deduction_charge)

                            } else {
                                //for flat
                                admin_deduction_charge = value
                                refund_amount = net_amount - admin_deduction_charge

                            }

                            await updateRefundAmount(dbName, orderId, refund_amount);

                            //if (payment_source == 'strip') {
                            // let strip_secret_key_data = await Universal.getStripSecretKey(dbName);
                            console.log("=admin_deduction_charge=is_flat==refund_amount==STRIP=DATA==>>", admin_deduction_charge, is_flat, refund_amount, Math.round(parseFloat(net_amount * 100)))
                            if (cancel_to_wallet === 1 || detailsOfOrder[0].payment_type == 4) {
                                await addWalletTransactionRecordDuringCancel(dbName, id, refund_amount, "", 0, 2, 1, 0);
                            } else {
                                //await makeStripePayment(card_payment_id, refund_amount,dbName);
                                await makeCancellationRefund(orderId, card_payment_id, refund_amount, payment_source, transaction_id, supplier_stripe_transfer_id, dbName);
                            }
                            await setOrderStatusToCancel(dbName, orderId);
                            console.log("===admin_deduction_charge====>>", admin_deduction_charge)
                            if (admin_deduction_charge > 0) {
                                await ExecuteQ.Query(dbName, 'insert into additional_admin_revenue_amount(promo_bear_amount,delivery_amount,order_cancel_amount,supplier_id,order_id) values(?,?,?,?,?)', [0, 0, admin_deduction_charge, 0, orderId])
                            }
                            callback(null)
                            //}
                        }
                    })

                } else {
                    //no refund
                    orderFunction.deliveredOrder(dbName, reply, orderId, status, 4, 0, function (err, result) {
                        console.log("..........err........deliver....result.........", err, result);
                        if (err) {
                            sendResponse.somethingWentWrongError(reply);
                        }
                        else {
                            callback(null);
                        }
                    })
                }
            } else {
                logger.debug("=======outside time========")
                if (orderStatus[0].status == 0) {
                    // full refund
                    //if (payment_source == 'strip') {
                    // let strip_secret_key_data = await Universal.getStripSecretKey(dbName);

                    logger.debug("====STRIP=DATA==>>", Math.round(parseFloat(net_amount * 100)))
                    if (cancel_to_wallet == 1 || detailsOfOrder[0].payment_type == 4) {
                        await addWalletTransactionRecordDuringCancel(dbName, id, net_amount, "", 0, 2, 1, 0);
                    } else {
                        //await makeStripePayment(card_payment_id, net_amount,dbName);
                        await makeCancellationRefund(orderId, card_payment_id, net_amount, payment_source, transaction_id, supplier_stripe_transfer_id, dbName);
                    }
                    await setOrderStatusToCancel(dbName, orderId);
                    callback(null);

                    //}
                } else {
                    // no refund
                    orderFunction.deliveredOrder(dbName, reply, orderId, status, 4, 0, function (err, result) {
                        console.log("..........err........deliver....result.........", err, result);
                        if (err) {
                            sendResponse.somethingWentWrongError(reply);
                        }
                        else {
                            callback(null);
                        }
                    })
                }
            }
        } else {
            await setOrderStatusToCancel(dbName, orderId);
            callback(null);
        }
    } catch (err) {
        logger.debug("===================err in cancel orders========", err)
        var msg = "some db error"
        sendResponse.sendErrorMessage(msg, reply, 59)
    }

}

exports.cancelOrdersNewWithPromises = async function (dbName, reply,
    id, orderId, cancelToWallet) {
    try {
        return new Promise(async (resolve, reject) => {
            let is_flat;

            let value;
            let status = 8
            let cancel_to_wallet = cancelToWallet;
            //cancel_refund_to_wallet
            // let cancel_refund_to_wallet = await ExecuteQ.Query(dbName,"select key,value from tbl_setting where key=?",["cancel_refund_to_wallet"]);
            // if(cancel_refund_to_wallet && cancel_refund_to_wallet.length>0){
            //     if(cancel_refund_to_wallet[0].value===1){
            //         cancel_to_wallet = 1;
            //     }
            // }
            await updatePurchaseQuantity(dbName, orderId);
            await orderLimitCheckAndUpdate(dbName, id)
            // await setOrderStatusToCancel(dbName, orderId);
            let orderStatus = await getOrderStatus(dbName, orderId);
            // let createdDateTime=moment(orderStatus[0].created_on).format("YYYY-MM-DD HH:mm:ss");
            var currentDateTime = moment().utcOffset(orderStatus[0].zone_offset)
            currentDateTime = moment(currentDateTime).format("YYYY-MM-DD HH:mm:ss");
            logger.debug("=createdDateTime==>>", currentDateTime, orderStatus[0].created_on);
            if (orderStatus[0].payment_type == 1 || orderStatus[0].payment_type == 4) {
                let getMinTimeToRefund = await getMinTimeForRefund(dbName);

                let orderTimeDiff = await getOrderTimeDiff(dbName, orderId, currentDateTime);
                let getCancelPolicy = await cancellationPolicyStatusCheck(dbName, orderStatus[0].status);
                let refundType = await refundTypeCheck(dbName, getCancelPolicy[0].refund_type);

                let detailsOfOrder = await getOrderDetails(dbName, orderId);
                logger.debug("================detailsoforder=-=======", detailsOfOrder)
                let net_amount = parseFloat(detailsOfOrder[0].net_amount) - parseFloat(detailsOfOrder[0].refund_amount) - parseFloat(detailsOfOrder[0].wallet_discount_amount) - (parseFloat(detailsOfOrder[0].discountAmount))
                let payment_source = detailsOfOrder[0].payment_source
                let card_payment_id = detailsOfOrder[0].card_payment_id
                let transaction_id = detailsOfOrder[0].transaction_id
                let supplier_stripe_transfer_id = detailsOfOrder[0].supplier_stripe_transfer_id
                logger.debug("========order details=======", detailsOfOrder);
                logger.debug("=======================")
                logger.debug("=========getmintimetorefund======", getMinTimeToRefund[0].min_time, orderTimeDiff[0].totalTime)



                if (getMinTimeToRefund[0].min_time >= orderTimeDiff[0].totalTime) {
                    logger.debug("==================under time=============")
                    if (getCancelPolicy[0].refund_type == 0) {
                        //full refund
                        logger.debug("=============full refund========+", payment_source, net_amount)
                        // let strip_secret_key_data = await Universal.getStripSecretKey(dbName);
                        // logger.debug("====STRIP=DATA==>>", Math.round(parseFloat(net_amount * 100)))
                        // const stripe = require('stripe')(strip_secret_key_data[0].value);
                        if (cancel_to_wallet == 1 || detailsOfOrder[0].payment_type == 4) {
                            await addWalletTransactionRecordDuringCancel(dbName, id, net_amount, "", 0, 2, 1, 0);
                        } else {
                            //await makeStripePayment(card_payment_id, net_amount,dbName);
                            await makeCancellationRefund(orderId, card_payment_id, net_amount, payment_source, transaction_id, supplier_stripe_transfer_id, dbName);

                        }
                        await setOrderStatusToCancel(dbName, orderId);
                        resolve();
                        //}

                    }
                    else if (getCancelPolicy[0].refund_type == 1) {
                        //partial refund

                        orderFunction.deliveredOrder(dbName, reply, orderId, status, 4, 0, async function (err, result) {
                            console.log("..........err........deliver....result.........", err, result);
                            if (err) {
                                sendResponse.somethingWentWrongError(reply);
                            }
                            else {
                                is_flat = refundType[0].is_flat;
                                value = refundType[0].value;

                                let refund_amount = 0;

                                if (parseInt(is_flat) == 0) {
                                    //for percentage 
                                    refund_amount = (net_amount / 100) * value
                                } else {
                                    //for flat
                                    refund_amount = net_amount - value
                                }

                                await updateRefundAmount(dbName, orderId, refund_amount);

                                //if (payment_source == 'strip') {
                                // let strip_secret_key_data = await Universal.getStripSecretKey(dbName);
                                logger.debug("==is_flat==refund_amount==STRIP=DATA==>>", is_flat, refund_amount, Math.round(parseFloat(net_amount * 100)))
                                if (cancel_to_wallet === 1 || detailsOfOrder[0].payment_type == 4) {
                                    await addWalletTransactionRecordDuringCancel(dbName, id, refund_amount, "", 0, 2, 1, 0);
                                } else {
                                    //await makeStripePayment(card_payment_id, refund_amount,dbName);
                                    await makeCancellationRefund(orderId, card_payment_id, refund_amount, payment_source, transaction_id, supplier_stripe_transfer_id, dbName);
                                }
                                await setOrderStatusToCancel(dbName, orderId);
                                resolve();                                //}
                            }
                        })

                    } else {
                        //no refund
                        orderFunction.deliveredOrder(dbName, reply, orderId, status, 4, 0, function (err, result) {
                            console.log("..........err........deliver....result.........", err, result);
                            if (err) {
                                sendResponse.somethingWentWrongError(reply);
                            }
                            else {
                                resolve();
                            }
                        })
                    }
                } else {
                    logger.debug("=======outside time========")
                    if (orderStatus[0].status == 0) {
                        // full refund
                        //if (payment_source == 'strip') {
                        // let strip_secret_key_data = await Universal.getStripSecretKey(dbName);

                        logger.debug("====STRIP=DATA==>>", Math.round(parseFloat(net_amount * 100)))
                        // if (cancel_to_wallet == 1 || detailsOfOrder[0].payment_type==4) {
                        //     await addWalletTransactionRecordDuringCancel(dbName, id, net_amount, "", 0, 2, 1, 0);
                        // } else {
                        //     //await makeStripePayment(card_payment_id, net_amount,dbName);
                        //     await makeCancellationRefund(orderId,card_payment_id, net_amount, payment_source, transaction_id, supplier_stripe_transfer_id, dbName);
                        // }
                        await setOrderStatusToCancel(dbName, orderId);
                        resolve();
                        //}
                    } else {
                        // no refund
                        orderFunction.deliveredOrder(dbName, reply, orderId, status, 4, 0, function (err, result) {
                            console.log("..........err........deliver....result.........", err, result);
                            if (err) {
                                sendResponse.somethingWentWrongError(reply);
                            }
                            else {
                                resolve();
                            }
                        })
                    }
                }
            } else {
                await setOrderStatusToCancel(dbName, orderId);
                resolve();
            }
        })
    } catch (err) {
        console.log("===================err in cancel orders========", err)
        var msg = "some db error"
        resolve();
    }

}





//function makeStripePayment(card_payment_id,amount,dbName){
function makeCancellationRefund(orderId, card_payment_id, amount, payment_source, transaction_id, supplier_stripe_transfer_id, dbName) {
    return new Promise(async (resolve, reject) => {
        try {
            var refundableAmount = amount
            var charge_id = card_payment_id
            // let strip_secret_key_data = await Universal.getStripSecretKey(dbName);
            // logger.debug("====STRIP=DATA==>>", Math.round(parseFloat(amount * 100)))
            // const stripe = require('stripe')(strip_secret_key_data[0].value);            

            // stripe.refunds.create(
            //     {
            //          charge: card_payment_id,
            //          amount : Math.round(parseFloat(amount*100))
            //  },
            //     function (err, refund) {
            //         if (err) {
            //             logger.debug("=============err===========1==",err)
            //            reject(err);
            //         }else{
            //             logger.debug("===========refund ===========",refund)
            //             resolve();
            //         }
            //     }
            // );


            if (payment_source == 'stripe') {

                try {

                    let strip_secret_key_data = await Universal.getStripSecretKey(dbName);
                    const stripe = require('stripe')(strip_secret_key_data[0].value);

                    var sql = "select transaction_id, card_payment_id as charge_id, supplier_stripe_transfer_id as transfer_id, payment_source, delivery_charges,supplier_commision,handling_admin,net_amount from orders where id=?";
                    // var transfer_id = supplier_stripe_transfer_id;

                    let result = await ExecuteQ.Query(dbName, sql, [orderId]);
                    var transfer_id = (result[0] && result[0].transfer_id) ? result[0].transfer_id : '0';

                    var supplier_refundable_amount, admin_refundable_amount

                    let getAgentDbData = await common.GetAgentDbInformation(dbName);
                    let agentConnection = await common.RunTimeAgentConnection(getAgentDbData);
                    let agent_account_data = await ExecuteQ.QueryAgent(agentConnection, "select cu.stripe_account, cuo.supplier_id, cu.id as agent_id, (cuo.`commission_ammount` + cuo.`tip_agent` + cuo.agent_base_price + cuo.agent_delivery_charge_share) as agent_payable_amount from cbl_user_orders cuo join cbl_user cu on cuo.user_id=cu.id where cuo.order_id=? and cuo.user_id!='0' limit 1", [orderId]);

                    var transaction_id = (result[0] && result[0].transaction_id) ? result[0].transaction_id : '';
                    var charge_id = (result[0] && result[0].charge_id) ? result[0].charge_id : 0;
                    var delivery_charges = (result[0] && result[0].delivery_charges) ? result[0].delivery_charges : 0;
                    var handling_admin = (result[0] && result[0].handling_admin) ? result[0].handling_admin : 0;
                    var supplier_commission = (result[0] && result[0].supplier_commision) ? result[0].supplier_commision : 0;
                    var net_amount = (result[0] && result[0].net_amount) ? result[0].net_amount : 0;

                    var is_admin_driver = (agent_account_data != null && agent_account_data[0] != undefined && agent_account_data[0].supplier_id != undefined && agent_account_data[0].supplier_id != '0') ? '1' : '0';
                    var agent_payable_amount = (agent_account_data != null && agent_account_data[0] != undefined && agent_account_data[0].agent_payable_amount != undefined) ? agent_account_data[0].agent_payable_amount : 0

                    if (is_admin_driver == '0') { //if driver is of admin
                        admin_refundable_amount = handling_admin + supplier_commission + delivery_charges
                        supplier_refundable_amount = net_amount - (admin_refundable_amount + agent_payable_amount)
                    } else { //if driver is of supplier
                        admin_refundable_amount = handling_admin + supplier_commission
                        supplier_refundable_amount = net_amount - (admin_refundable_amount + agent_payable_amount + delivery_charges)
                    }


                    var supTransfer, adminRefund;
                    if (transfer_id != '0') {
                        supTransfer = await stripe.transfers.createReversal(
                            transfer_id,//'tr_1GqNaBLyOfejzWzovFTSk1M7',
                            { amount: Math.round(parseFloat(supplier_refundable_amount * 100)) }
                        );
                    } else {
                        admin_refundable_amount = refundableAmount
                    }

                    adminRefund = await stripe.refunds.create({
                        charge: charge_id,//'ch_1GqWEELyOfejzWzoz4uOgoXv',
                        amount: Math.round(parseFloat(admin_refundable_amount * 100))
                    });
                    if ((transfer_id != '0' && supTransfer.id && adminRefund.id) || (transfer_id == '0' && adminRefund.id)) {
                        resolve();
                    } else {
                        var msg = "something went wrong";
                        sendResponse.sendErrorMessage(msg, res, 500);
                    }
                }
                catch (Err) {
                    console.log("===========Err!=======>>", Err)
                    var msg = "something went wrong";
                    reject(msg)
                }

            } else if (payment_source == '543') {//mumybene
                let mumybene_key_data = await Universal.getMumybeneKeyData(dbName);
                if (mumybene_key_data && transaction_id != '') {
                    var mumybene_username = mumybene_key_data[config.get("payment.mumybene.mumybene_username")]
                    var mumybene_password = mumybene_key_data[config.get("payment.mumybene.mumybene_password")]
                    var baseUrl = "http://test.543.cgrate.co.zm:55555/Konik/KonikWs"

                    let xml = `<soapenv:Envelope
                        xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                        xmlns:kon="http://konik.cgrate.com">
                        <soapenv:Header xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                            <wsse:Security xmlns:mustUnderstand="1">
                                <wsse:UsernameToken xmlns:Id="UsernameToken-1" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
                                    <wsse:Username xmlns="http://konik.cgrate.com">`+ mumybene_username + `</wsse:Username>
                                    <wsse:Password xmlns:Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">`+ mumybene_password + `</wsse:Password>
                                </wsse:UsernameToken>
                            </wsse:Security>
                        </soapenv:Header>
                        <soapenv:Body>
                        <kon:reverseCustomerPayment>
                        <paymentReference>`+ transaction_id + `</paymentReference>
                        </kon:reverseCustomerPayment>
                        </soapenv:Body>
                        </soapenv:Envelope>`;
                    var options = {
                        method: 'POST',
                        url: baseUrl,
                        headers: {
                            'Content-Type': 'text/xml;charset=utf-8',
                            'Accept-Encoding': 'gzip,deflate',
                            'Content-Length': xml.length
                        },
                        body: xml
                    };

                    web_request(options, async function (error, response, body) { //0,1,6,7,48,62,63,75,565
                        if (error) {
                            var msg = "something went wrong";
                            sendResponse.sendErrorMessage(msg, res, 500);
                        } else if (!error && response.statusCode == 200) {
                            var xml2js = require('xml2js');
                            var parser = new xml2js.Parser({ explicitArray: false, trim: true });
                            parser.parseString(body, (err, result) => {
                                var responseCode = result['env:Envelope']['env:Body']['ns2:reverseCustomerPaymentResponse']['return']['responseCode']
                                var responseMessage = result['env:Envelope']['env:Body']['ns2:reverseCustomerPaymentResponse']['return']['responseMessage']
                                data = {
                                    responseCode: responseCode,
                                    responseMessage: responseMessage
                                };
                                resolve();
                            });
                        } else {
                            var msg = "something went wrong";
                            sendResponse.sendErrorMessage(msg, res, 500);
                        }
                    });
                }
            } else if (payment_source == 'myfatoorah') {//myfatoorah
                let myfatoorah_token = await Universal.getMyFatoorahToken(dbName); //myfatoorah_secret_key
                //var token = myfatoorah_token;
                myfatoorah_token = myfatoorah_token[0].value //token value to be placed here;

                let baseURL = (process.env.NODE_ENV == 'prod') ? 'https://api.myfatoorah.com' : 'https://apitest.myfatoorah.com';

                //var baseURL = 'https://apitest.myfatoorah.com';
                var dataToSend = {
                    "KeyType": " invoiceid ",
                    "Key": transaction_id,
                    "RefundChargeOnCustomer": false,
                    "ServiceChargeOnCustomer": false,
                    "Amount": refundableAmount,
                    "Comment": "Order return"
                }
                var options = {
                    method: 'POST',
                    url: baseURL + '/v2/MakeRefund',
                    headers: {
                        Accept: 'application/json',
                        Authorization: 'bearer ' + myfatoorah_token,
                        'Content-Type': 'application/json'
                    },
                    body: dataToSend,
                    json: true
                };
                console.log("options ----------- ", JSON.stringify(options))

                web_request(options, function (error, response, body) {
                    if (error) {
                        var msg = "something went wrong";
                        sendResponse.sendErrorMessage(msg, res, 500);
                    }
                    else {
                        resolve();
                    }
                });
            } else if (payment_source == 'razorpay') {//myfatoorah
                let razor_pay_data = await Universal.getRazorPayData(dbName);
                if (Object.keys(razor_pay_data).length > 0) {

                    web_request({
                        method: 'POST',
                        url: "https://" + razor_pay_data[config.get("payment.razorpay.publish_key")] + ":" + razor_pay_data[config.get("payment.razorpay.secret_key")] + "@api.razorpay.com/v1/payments/" + charge_id + "/refund",
                        form: {
                            "amount": (refundableAmount) * 100
                        }
                    }, function (error, response, body) {
                        if (error) {
                            var msg = "something went wrong";
                            sendResponse.sendErrorMessage(msg, res, 500);
                        }
                        else {
                            resolve();
                        }
                    });
                }
                else {
                    return sendResponse.sendErrorMessage(
                        await Universal.getMsgText(
                            languageId, { dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                        reply, 400);
                }
            } else if (payment_source == 'conekta') {//myfatoorah
                let conekta_data = await Universal.getConektaSecretKey(dbName);
                let userData = await Universal.getUserData(dbName, request.headers.authorization);
                if (conekta_data && conekta_data.length > 0) {
                    let conekta = require('conekta');
                    conekta.api_key = conekta_data[0].value;
                    conekta.locale = 'es';


                    conekta.Order.find(charge_id, function (err, order) {
                        order.createRefund({
                            "reason": "Order return",
                            "amount": refundableAmount
                        }, function (err, result) {
                            if (err) {
                                var msg = "something went wrong";
                                sendResponse.sendErrorMessage(msg, res, 500);
                            }
                            else {
                                resolve();
                            }
                        });
                    });
                }
                else {
                    return sendResponse.sendErrorMessage(
                        await Universal.getMsgText(
                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                        reply, 400);
                }
            }
            else if (payment_source == 'checkout') {//checkout    
                let checkout_data = await Universal.getCheckoutSecretKey(dbName);
                logger.debug("======razor_pay_data=net_amount====>>", checkout_data)
                if (Object.keys(checkout_data).length > 0) {
                    var headers = {
                        'Accept': 'application/json',
                        'Authorization': checkout_data[config.get("payment.checkout.secret_key")]//'sk_test_a7d262c3-15fd-4564-8aca-9e45ed879f57'
                    };

                    var dataString = {
                        "amount": refundableAmount
                    };
                    let checkout_api_url = (process.env.NODE_ENV == 'prod') ? 'https://api.checkout.com/payments/' + charge_id + '/refunds' : 'https://api.sandbox.checkout.com/payments/' + charge_id + '/refunds';
                    web_request({
                        method: 'POST',
                        url: checkout_api_url,
                        headers: headers,
                        form: dataString
                    }, async function (error, response, body) {
                        if (error) {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { dbName: dbName }, config.get("error_msg.payment.error")),
                                reply, 400);
                        }
                        else {
                            resolve();
                        }
                    });
                }
                else {
                    return sendResponse.sendErrorMessage(
                        await Universal.getMsgText(
                            languageId, { dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                        reply, 400);
                }
            }
            else if (payment_source == 'squareup') {//squareup


                let squareData = await Universal.getSquareupSecretKey(dbName)
                if (Object.keys(squareData).length > 0) {


                    let baseURL = (process.env.NODE_ENV == 'prod') ? 'https://connect.squareup.com/v2/refunds' : 'https://connect.squareupsandbox.com/v2/refunds';

                    var dataToSend = {
                        "idempotency_key": transaction_id,
                        "payment_id": charge_id,
                        "amount_money": {
                            "amount": refundableAmount,
                            "currency": "USD"
                        }
                    };
                    var options = {
                        method: 'POST',
                        url: baseURL,
                        headers: {
                            'Accept': 'application/json',
                            'Authorization': 'Bearer ' + squareData.square_token,
                            'Cache-Control': 'no-cache',
                            'Content-Type': 'application/json'
                        },
                        body: dataToSend,
                        json: true
                    };

                    web_request(options, function (error, response, body) {
                        if (error) {
                            var msg = "something went wrong";
                            sendResponse.sendErrorMessage(msg, res, 500);
                        }
                        else {
                            resolve();
                        }
                    });
                } else {
                    return sendResponse.sendErrorMessage(
                        await Universal.getMsgText(
                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                        reply, 400);
                }


            }
            else if (payment_source == 'paytab') {//paytab                

                let payTabData = await Universal.getPayTabData(dbName);
                if (Object.keys(payTabData).length > 0) {


                    var dataToSend = {
                        "merchant_email": payTabData.paytab_secret_key,
                        "secret_key": payTabData.paytab_merchant_email,
                        "refund_amount": refundableAmount,
                        "refund_reason": "Order return",
                        "transaction_id": charge_id
                    };
                    var options = {
                        method: 'POST',
                        url: "https://www.paytabs.com/apiv2/refund_process",
                        form: dataToSend
                    };

                    web_request(options, function (error, response, body) {
                        if (error) {
                            var msg = "something went wrong";
                            sendResponse.sendErrorMessage(msg, res, 500);
                        }
                        else {
                            resolve();
                        }
                    });
                } else {
                    return sendResponse.sendErrorMessage(
                        await Universal.getMsgText(
                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                        reply, 400);
                }


            }
            else if (payment_source == 'converge') {//converge                

                let converge_key_data = await Universal.getConvergeData(dbName);

                var merchantID = converge_key_data[config.get("payment.converge.merchantID")]
                var merchantUserID = converge_key_data[config.get("payment.converge.merchantUserID")]
                var merchantPIN = converge_key_data[config.get("payment.converge.merchantPIN")]
                var transaction_type = "ccreturn";
                var transactionAmount = refundableAmount//"100";

                data = {
                    ssl_merchant_id: merchantID,
                    ssl_user_id: merchantUserID,
                    ssl_pin: merchantPIN,
                    ssl_transaction_type: transaction_type,
                    ssl_txn_id: charge_id,
                    ssl_amount: transactionAmount
                }
                //let baseURL = (process.env.NODE_ENV == 'prod') ? 'https://api.convergepay.com/hosted-payments/transaction_token' : 'https://api.demo.convergepay.com/hosted-payments/transaction_token';
                let baseURL = (process.env.NODE_ENV == 'prod') ? 'https://api.covergepay.com/VirtualMerchant/process.do' : 'https://api.demo.convergepay.com/hosted-payments/transaction_token';
                var options = {
                    method: 'POST',
                    url: baseURL,
                    form: data
                };


                web_request(options, function (error, response, body) {
                    if (error) {
                        var msg = "something went wrong";
                        sendResponse.sendErrorMessage(msg, res, 500);
                    }
                    else {
                        resolve();
                    }
                });


            }

            else if (payment_source == 'paypal') {//paypal                

                let paypal_api = process.env.NODE_ENV == 'prod' ? 'https://api.paypal.com' : 'https://api.sandbox.paypal.com'
                let paypal_data = await Universal.getPaypalData(dbName);
                if (Object.keys(paypal_data).length > 0) {
                    let tokenData = await Universal.getAuthTokeOfPayPal(paypal_data[config.get("payment.paypal.client_key")], paypal_data[config.get("payment.paypal.secret_key")]);
                    var headers = {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + tokenData.access_token,
                    };

                    var dataString = {
                        "amount": {
                            "total": refundableAmount,
                            "currency": "USD"
                        },
                        //"invoice_number": "INVOICE-123",
                        "description": "Order return"
                    };
                    var options = {
                        'url': paypal_api + 'v1/payments/sale/' + charge_id + '/refund',
                        method: 'POST',
                        headers: headers,
                        body: dataString
                    };

                    web_request(options, function (error, response, body) {
                        if (error) {
                            var msg = "something went wrong";
                            sendResponse.sendErrorMessage(msg, res, 500);
                        }
                        else {
                            resolve();
                        }
                    });
                }
                else {
                    return sendResponse.sendErrorMessage(
                        await Universal.getMsgText(
                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                        reply, 400);
                }

            }
            else if (payment_source == 'zelle') {
                resolve();
            } else if (payment_source == 'cashapp') {
                resolve();
            } else if (payment_source == 'tap') {
                // call refund api here 
                let keyData = await ExecuteQ.Query(req.dbName, "select `key`,`value` from tbl_setting where `key`=?", [config.get("payment.tap.secret_key")])
                if (keyData && keyData.length > 0) {
                    let ammount = refundableAmount;
                    let chargeId = charge_id;
                    let tapBaseUrl = process.env.NODE_ENV == 'prod' ? 'https://api.tap.company' : 'https://api.tap.company';
                    let tapSecretkey = keyData[0].value;
                    let orderNumber = orderId;
                    await Universal.makeTapRefund(ammount, chargeId, tapSecretkey, tapBaseUrl, orderNumber);
                    resolve();
                } else {
                    console.log("=========tap keys not found=========", keyData);
                    resolve();
                }
            }
            else {
                resolve();
            }

        } catch (err) {
            console.log("==========err===", err);
            reject(err)
        }
    })
}

const addWalletTransactionRecordDuringCancel = async (dbName, user_id, amount, card_payment_id,
    by_admin, added_deduct_through, is_add, user_wallet_share_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            let query = "insert into user_wallet_transactions(user_id,amount,card_payment_id,by_admin,added_deduct_through,is_add,user_wallet_share_id) values(?,?,?,?,?,?,?)"
            let params = [user_id, amount, card_payment_id, by_admin, added_deduct_through, is_add, user_wallet_share_id]
            await ExecuteQ.Query(dbName, query, params);
            let query1 = "update user set wallet_amount=wallet_amount+? where id=?";
            let params1 = [amount, user_id];
            await ExecuteQ.Query(dbName, query1, params1);
            resolve();
        } catch (err) {
            logger.debug("========err======", err);
            reject(err);
        }
    })
}

function setOrderStatusToCancel(dbName, orderId) {
    return new Promise(async (resolve, reject) => {
        try {
            let query = "update orders set status=8 where id=?"
            let params = [orderId]
            let result = await ExecuteQ.Query(dbName, query, params)
            resolve()
        } catch (err) {
            logger.debug("===========er=============", err)
            reject(err);
        }
    })
}

function getOrderTimeDiff(dbName, orderId, createdDateTime) {
    return new Promise(async (resolve, reject) => {
        try {
            let query = "select TIMEDIFF('" + createdDateTime + "',created_on) as totalTime from orders where id=?"
            let params = [orderId]
            let result = await ExecuteQ.Query(dbName, query, params);
            resolve(result);
        } catch (err) {
            logger.debug("=========err===========", err)
        }

    })
}


function getMinTimeForRefund(dbName) {
    return new Promise(async (resolve, reject) => {
        try {
            let query = "select min_time from refund_timings limit 1"
            let params = []
            let result = await ExecuteQ.Query(dbName, query, params);
            resolve(result);
        } catch (err) {
            logger.debug("=========err===========", err)
        }

    })
}


function getOrderStatus(dbName, orderId) {
    return new Promise(async (resolve, reject) => {
        try {
            let query = "select zone_offset,created_on,status,payment_type,payment_source from orders where id = ?"
            let params = [orderId]
            let result = await ExecuteQ.Query(dbName, query, params);
            resolve(result);
        } catch (err) {
            logger.debug("=========err===========", err)
        }

    })
}


function cancellationPolicyStatusCheck(dbName, status) {
    return new Promise(async (resolve, reject) => {
        try {
            let query = "select id,status,refund_type from cancellation_policy where status=?"
            let params = [status]
            let result = ExecuteQ.Query(dbName, query, params);
            resolve(result);
        } catch (err) {
            logger.debug("=================errr==========", err);
            reject(err);
        }
    })
}


function refundTypeCheck(dbName, refund_type) {
    return new Promise(async (resolve, reject) => {
        try {
            let query = "select refund_type, refund_type_name, value, is_flat from refund_types where refund_type=?"
            let params = [refund_type]
            let result = ExecuteQ.Query(dbName, query, params);
            resolve(result);

        } catch (err) {
            logger.debug("=================errr==========", err);
            reject(err);
        }
    })
}


function getOrderDetails(dbName, orderId,) {
    return new Promise(async (resolve, reject) => {
        try {
            let query = " select o.wallet_discount_amount,o.refund_amount,sb.latitude,sb.longitude,IFNULL(odp.discountAmount,0) as discountAmount,odp.promoCode,o.confirmed_on,o.preparation_time,o.from_address,o.supplier_stripe_transfer_id,o.transaction_id,o.to_address,o.from_latitude,o.to_latitude,o.to_longitude,from_longitude,o.cart_id,o.progress_on,o.self_pickup,o.duration,o.is_agent,op.price,s.name as supplier_name,s.address,s.logo,cr.area_id,p.pricing_type,o.net_amount,o.is_package,o.schedule_date,s.id,s.logo,o.supplier_branch_id,o.schedule_order ,o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.service_date,o.remarks,o.delivered_on,o.created_on,o.handling_admin,o.handling_supplier,o.delivery_charges,op.price,o.card_payment_id,o.payment_source " +
                " ,op.product_name,op.product_desc,op.image_path from orders o join order_prices op " +
                " on o.id = op.order_id join supplier_branch sb on sb.id = o.supplier_branch_id join supplier s on s.id = sb.supplier_id join user u on u.id=o.user_id left join user_address ua on ua.id=o.user_delivery_address join cart cr on cr.id=o.cart_id join product p on p.id = op.product_id left join order_promo odp on odp.orderId = o.id  where o.id IN (?) GROUP BY o.id";

            let params = [orderId]
            let result = ExecuteQ.Query(dbName, query, params);
            resolve(result);

        } catch (err) {
            logger.debug("=================errr==========", err);
            reject(err);
        }
    })
}

function updateRefundAmount(dbName, orderId, refundAmount) {
    return new Promise(async (resolve, reject) => {
        try {
            let query = "update orders set refund_amount = ? where id=?";
            await ExecuteQ.Query(dbName, query, [refundAmount, orderId]);
            resolve();
        } catch (err) {
            logger.debug("==========err========", err);
            reject(err);
        }
    })
}

function orderLimitCheckAndUpdate(dbName, userId) {
    return new Promise(async (resolve, reject) => {
        try {
            let query1 = "select count(*) as total_cancel_orders from orders where user_id=?";
            let result = await ExecuteQ.Query(dbName, query1, [userId]);

            if (result[0].total_cancel_orders > 2) {

                let query2 = "update user set limit_cancel_orders = 1 where id=?";
                await ExecuteQ.Query(dbName, query2, [userId]);

            }
            resolve();

        } catch (err) {
            logger.debug("==============errr======", err)
            reject();
        }
    })
}

function updatePurchaseQuantity(dbName, orderId) {

    let query = "update product p inner join order_prices orp on orp.product_id=p.id " +
        " inner join cart_products crp on crp.product_id=orp.product_id set p.purchased_quantity= p.purchased_quantity" +
        " - orp.quantity where orp.order_id IN (?)";

    let params = [orderId]
    return new Promise(async (resolve, reject) => {
        try {
            await ExecuteQ.Query(dbName, query, params)
            resolve();
        } catch (err) {
            logger.debug("==================erer=========");
            reject();
        }
    })

}



var orderRate = function (dbName, reply, orderId, languageId, id, rating, comment, callback) {
    //console.log("values",rating,comment,orderId,id);
    var date1 = moment().utcOffset(4);
    var date = date1._d
    var sql = "update orders set rating = ? and comment = ? where id = ? and user_id = ? and rated_on =? status = 6 ";
    multiConnection[dbName].query(sql, [rating, comment, orderId, id, date], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, reply, 500);
        }
        else {
            if (result.affectedRows) {
                callback(null, result);
            } else {
                if (languageId == 14) {
                    var msg = "invalid order id";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    var msg = "هوية المستخدم غير صالح";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
            }
        }
    })
}

exports.updateScheduleOrderStatus = function (request, reply) {
    var accessToken = 0;
    var orderId = 0;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.orderId)) {
                var msg = "order id not found"
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            accessToken = request.body.accessToken;
            orderId = request.body.orderId;
            callback(null);

        },
        checkAccessToken: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    id = result.id;
                    callback(null);
                }
            })
        }],
        orderScheduleStatus: ['checkAccessToken', function (callback) {
            scheduleOrderStatus(request.dbName, reply, orderId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(result, constant.responseMessage.SUCCESS, reply, 200);
        }
    })

}

function scheduleOrderStatus(dbName, reply, orderId, callback) {
    var sql = ' update orders set status = ? where id = ? ';
    multiConnection[dbName].query(sql, [0, orderId], function (err, result) {
        if (err) {
            var msg = "something went wrong in schedule order status";
            sendResponse.sendErrorMessage(msg, reply, 500);
        }
        else {
            callback(null);
        }
    })
}

/*
* ================
* laundry
* ==========
*
*/

exports.getLaundryData = function (request, reply) {
    var categoryId = 0;
    var languageId = 0;
    var supplierBranchId = 0;
    var subCategory = {};
    var finalData = {};
    var areaId = 0;
    var data;
    var temp = [];
    var product = [];
    var supplier_name;
    var supplier_address;
    console.log("kbds", request.body);
    async.auto({
        getValue: function (callback) {
            if (!request.body.languageId) {
                var msg = " enter languageId";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!request.body.categoryId) {
                var msg = " enter categoryId";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!request.body.supplierBranchId) {
                var msg = " supplier branch id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!request.body.areaId) {
                var msg = "area id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            categoryId = request.body.categoryId;
            languageId = request.body.languageId;
            supplierBranchId = request.body.supplierBranchId;
            areaId = request.body.areaId;
            callback(null);
        },
        getProductLaundry: ['getValue', function (callback) {
            var sql = "select sku,urgent_type,id,supplier_address,supplier_name,urgent_value,category_name,can_urgent,price,handling_admin,handling_supplier,fixed_price,image_path,product_desc,name,sub_category_id,category_id,bar_code,delivery_charges,min_order,charges_below_min_order,product_id,supplier_branch_id,price1 as price_type FROM" +
                " (select p.id,p.sku,sml.address as supplier_address,sml.name as supplier_name,pp.urgent_value,cml.name as category_name ,pp.can_urgent,pp.price,pp.price as fixed_price,pp.handling as handling_admin,pp.handling_supplier,pi.image_path,pml.measuring_unit,pml.product_desc,pml.name,p.sub_category_id,p.category_id,p.bar_code,sbap.delivery_charges,sbap.min_order, " +
                " sbap.charges_below_min_order,sbap.product_id,sbap.supplier_branch_id,pp.pricing_type as price1,pp.urgent_type " +
                " from supplier_branch_area_product sbap join product p on p.id = sbap.product_id join product_ml pml on pml.product_id =  " +
                " sbap.product_id join product_image pi on pi.product_id = sbap.product_id join product_pricing pp on pp.product_id = p.id " +
                "  join categories_ml cml on cml.category_id = p.sub_category_id join supplier_branch sb on sb.id = sbap.supplier_branch_id join supplier_ml sml " +
                " on sml.supplier_id = sb.supplier_id join supplier_branch_product sbp on sbp.product_id = p.id " +
                " where sbap.is_deleted = ? and sbap.area_id = ? and sbap.supplier_branch_id = ? and pml.language_id = ? " +
                " and (pi.default_image = ? or pi.imageOrder =1) and p.is_live = ? and p.is_deleted = ? and ((pp.price_type = '1' and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE()) or (pp.price_type = 0)) and  " +
                " cml.language_id = ? and p.category_id = ? and sml.language_id = ? and sbp.is_deleted = '0' and ((pp.pricing_type=1) or(pp.pricing_type=0 and pp.price !=0)) and pp.is_deleted = 0 ORDER BY pp.price_type DESC) SELECTION GROUP BY id order by sub_category_id";

            multiConnection[dbName].query(sql, [0, areaId, supplierBranchId, languageId, 1, 1, 0, languageId, categoryId, languageId], function (err, result) {
                //console.log("kbgsfd-----------------------",result);
                if (err) {
                    callback(err);
                } else {
                    if (result.length) {

                        supplier_name = result[0].supplier_name;
                        supplier_address = result[0].supplier_address;
                        data = result;
                        callback(null);
                    }
                    else {
                        data = [];
                        callback(null);
                    }
                }
            })
        }],
        mangeJson: ['getProductLaundry', function (callback) {
            var len = data.length;
            var len1 = data.length;
            if (len == 0) {
                temp = {};
                callback(null)
            }
            for (var i = 0; i < len; i++) {
                for (var j = i; j < len1; j++) {
                    (function (j) {
                        //   console.log("ljdv",i,data[i].sub_category_id,j,data[j].sub_category_id)
                        if (data[i].sub_category_id == data[j].sub_category_id) {
                            product.push(data[j]);
                            i = j;
                            if (j == len1 - 1) {
                                //  console.log("gfgf",data[i].sub_category_id,data[i].category_name);
                                temp.push({ sub_category_id: data[i].sub_category_id, name: data[i].category_name, product: product });
                                product = [];
                                if (i == (len - 1)) {
                                    callback(null);
                                }
                            }
                        } else {
                            if (j == len1 - 1) {
                                temp.push({ sub_category_id: data[i].sub_category_id, name: data[i].category_name, product: product });
                                product = [];
                                if (i == (len - 1)) {
                                    callback(null);
                                }
                            }
                        }
                    }(j))
                }
            }
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            var data = {};
            if (temp.length) {
                data.list = temp;
                data.supplier_name = supplier_name;
                data.supplier_address = supplier_address;
            }
            return sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.rateMyOrderList = function (request, reply) {
    var accessToken;
    var userId;
    var historyData = {};
    var orderHistory;
    var final = [];
    var temp = {}, orderCount = 0;
    var languageId;
    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            languageId = request.body.languageId;
            callback(null);
        },
        getCustomerId: ['getValues', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        getHistoryOrder: ['getCustomerId', function (callback) {

            getHistory(request.dbName, reply, userId, 5, request.body, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    orderHistory = result;
                    callback(null);
                }
            })
        }],
        getHistoryOrderCount: ['getHistoryOrder', function (callback) {

            getHistoryCount(request.dbName, reply, userId, 5, request.body, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    if (result && result.length > 0) {
                        orderCount = result[0].total_order
                    }
                    callback(null);
                }
            })
        }],
        agentStatus: ['getHistoryOrder', function (callback) {
            var final_data = [];
            // var orderHistory= data.orders   
            var leng = orderHistory.length, agentConnection = {}
            if (leng > 0) {
                async.each(orderHistory, async function (i, callback2) {
                    console.log("===", i.id, i.status, i.is_agent)
                    if (i.is_agent == 1) {
                        var getAgentDbData = await common.GetAgentDbInformation(req.dbName);
                        logger.debug("===AGENT==CONNECTION==>>==2=", Object.entries(agentConnection).length)
                        if (Object.entries(agentConnection).length === 0) {
                            agentConnection = await common.RunTimeAgentConnection(getAgentDbData);
                        }
                        var sqlQuery = "select `status` from cbl_user_orders  where order_id=?";
                        agentConnection.query(sqlQuery, [i.order_id], function (err, statusData) {
                            if (err) {
                                sendResponse.somethingWentWrongError(res);
                            }
                            else {
                                console.log("====statusData====", statusData)
                                if (statusData && statusData.length > 0) {
                                    i.status = i.status > 5 ? i.status : statusData[0].status
                                    final_data.push(i)
                                    callback2(null)
                                }
                                else {
                                    final_data.push(i)
                                    callback2(null)
                                }
                            }
                        });
                    }
                    else {
                        final_data.push(i)
                        callback2(null)
                    }

                }, function (err) {
                    if (err) {
                        callback(err);
                    }
                    else {
                        // console.log("====final_data=++ENR",final_data)
                        var order_data = _.sortBy(final_data, 'id').reverse();
                        orderHistory = order_data
                        callback(null)
                    }
                });
            }
            else {
                callback(null)
            }
        }],
        getProductDetails: ['agentStatus', function (callback) {
            var leng = orderHistory.length;
            if (leng != 0) {
                var details = {};
                for (var i = 0; i < leng; i++) {
                    (function (i) {
                        getProdcutDetails(request.dbName, reply, orderHistory[i].order_id, orderHistory[i].is_package, orderHistory[i].pricing_type, languageId, function (err, result) {
                            if (err) {
                                callback(err);
                            } else {
                                if (result.length) {
                                    if (orderHistory[i].status == 5) {
                                        details.net_amount = orderHistory[i].net_amount;
                                        details.order_id = orderHistory[i].order_id;
                                        details.supplier_branch_id = orderHistory[i].supplier_branch_id;
                                        details.supplier_id = orderHistory[i].id;
                                        details.logo = orderHistory[i].logo
                                        details.service_date = moment(orderHistory[i].schedule_date).format();
                                        details.delivered_on = moment(orderHistory[i].delivered_on).format();
                                        details.status = orderHistory[i].status;
                                        details.near_on = moment(orderHistory[i].near_on).format();
                                        details.shipped_on = moment(orderHistory[i].shipped_on).format();
                                        details.payment_type = orderHistory[i].payment_type;
                                        details.created_on = moment(orderHistory[i].created_on).format();
                                        details.product = result;
                                        details.product_count = result.length;
                                        details.measuring_unit = result.measuring_unit;
                                        details.user_delivery_address = orderHistory[i].user_delivery_address;
                                        details.schedule_order = orderHistory[i].schedule_order;
                                        final.push(details);
                                        details = {};
                                        if (i == (leng - 1)) {
                                            callback(null);
                                        }
                                    }
                                    else {
                                        if (i == (leng - 1)) {
                                            callback(null);
                                        }
                                    }
                                } else {
                                    if (i == (leng - 1)) {
                                        callback(null);
                                    }
                                }
                            }
                        })
                    }(i));
                }
            } else {
                callback(null);
            }

        }],
        getAddress: ['getProductDetails', function (callback) {
            var len = final.length;
            if (len != 0) {
                var temp = {};
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        getAddressAccordingId(request.dbName, reply, final[i].user_delivery_address, function (err, result) {
                            if (err) {
                                callback(err);
                            } else {
                                if (result.length) {
                                    result = result[0];
                                    temp.address_line_1 = result.address_line_1;
                                    temp.address_line_2 = result.address_line_2;
                                    temp.pincode = result.pincode;
                                    temp.city = result.city;
                                    temp.landmark = result.landmark;
                                    final[i].delivery_address = temp;
                                    temp = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                } else {
                                    final[i].delivery_address = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                }
                            }
                        })

                    }(i));
                }
            } else {
                callback(null);
            }



        }],
        final: ['getProductDetails', function (callback) {
            var result = final.sort(func.sort_by('order_id', true, parseInt));
            temp.orderList = result;
            temp.count = orderCount
            callback(null);
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.trackOderList = function (request, reply) {
    var accessToken;
    var userId;
    var historyData = {};
    var orderHistory;
    var final = [];
    var temp = {};
    var languageId;
    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            languageId = request.body.languageId;
            callback(null);
        },
        getCustomerId: ['getValues', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        getHistoryOrder: ['getCustomerId', function (callback) {
            trackOrderList(request.dbName, reply, userId, 1, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    orderHistory = result;
                    callback(null);
                }
            })
        }],
        agentStatus: ['getHistoryOrder', function (callback) {
            var final_data = [];
            // var orderHistory= data.orders   
            var leng = orderHistory.length, agentConnection = {}
            if (leng > 0) {
                async.each(orderHistory, async function (i, callback2) {
                    console.log("===", i.id, i.status, i.is_agent)
                    if (i.is_agent == 1) {
                        var getAgentDbData = await common.GetAgentDbInformation(req.dbName);
                        logger.debug("===AGENT==CONNECTION==>>==2=", Object.entries(agentConnection).length)
                        if (Object.entries(agentConnection).length === 0) {
                            agentConnection = await common.RunTimeAgentConnection(getAgentDbData);
                        }
                        var sqlQuery = "select `status` from cbl_user_orders  where order_id=?";
                        agentConnection.query(sqlQuery, [i.order_id], function (err, statusData) {
                            if (err) {
                                sendResponse.somethingWentWrongError(res);
                            }
                            else {
                                console.log("====statusData====", statusData)
                                if (statusData && statusData.length > 0) {
                                    i.status = statusData[0].status
                                    final_data.push(i)
                                    callback2(null)
                                }
                                else {
                                    final_data.push(i)
                                    callback2(null)
                                }
                            }
                        });
                    }
                    else {
                        final_data.push(i)
                        callback2(null)
                    }

                }, function (err) {
                    if (err) {
                        callback(err);
                    }
                    else {
                        // console.log("====final_data=++ENR",final_data)
                        var order_data = _.sortBy(final_data, 'id').reverse();
                        orderHistory = order_data
                        callback(null)
                    }
                });
            }
            else {
                callback(null)
            }
        }],
        getProductDetails: ['agentStatus', function (callback) {

            var leng = orderHistory.length;
            if (leng != 0) {
                var details = {};
                for (var i = 0; i < leng; i++) {
                    (function (i) {
                        getProdcutDetails(request.dbName, reply, orderHistory[i].order_id, orderHistory[i].is_package, orderHistory[i].pricing_type, languageId, function (err, result) {
                            if (err) {
                                callback(err);
                            } else {
                                if (result.length) {
                                    // 0,1,3,4,7
                                    if (
                                        // orderHistory[i].status==1
                                        // || orderHistory[i].status==0
                                        // || orderHistory[i].status==3
                                        // || orderHistory[i].status==4
                                        // || 
                                        orderHistory[i].status == 7
                                    ) {
                                        details.delivery_charges = orderHistory[i].delivery_charges;
                                        details.handling_admin = orderHistory[i].handling_admin
                                        details.handling_supplier = orderHistory[i].handling_supplier

                                        details.net_amount = orderHistory[i].net_amount;
                                        details.order_id = orderHistory[i].order_id;
                                        details.supplier_id = orderHistory[i].id;
                                        details.logo = orderHistory[i].logo
                                        details.service_date = moment(orderHistory[i].schedule_date).format();
                                        details.delivered_on = moment(orderHistory[i].delivered_on).format();
                                        details.status = orderHistory[i].status;
                                        details.near_on = moment(orderHistory[i].near_on);
                                        details.shipped_on = moment(orderHistory[i].shipped_on).format();
                                        details.payment_type = orderHistory[i].payment_type;
                                        details.created_on = moment(orderHistory[i].created_on).format();
                                        details.product = result;
                                        details.product_count = result.length;
                                        details.measuring_unit = result.measuring_unit;
                                        details.user_delivery_address = orderHistory[i].user_delivery_address;
                                        details.schedule_order = orderHistory[i].schedule_order;
                                        details.supplier_branch_id = orderHistory[i].supplier_branch_id;
                                        final.push(details);
                                        details = {};
                                        if (i == (leng - 1)) {
                                            callback(null);
                                        }
                                    }
                                    else {
                                        if (i == (leng - 1)) {
                                            callback(null);
                                        }
                                    }
                                } else {
                                    if (i == (leng - 1)) {
                                        callback(null);
                                    }
                                }
                            }
                        })
                    }(i));
                }
            } else {
                callback(null);
            }
        }],
        getAddress: ['getProductDetails', function (callback) {
            var len = final.length;
            var temp = {};
            if (len != 0) {
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        getAddressAccordingId(request.dbName, reply, final[i].user_delivery_address, function (err, result) {
                            if (err) {
                                callback(err);
                            } else {
                                if (result.length) {
                                    result = result[0];
                                    temp.address_line_1 = result.address_line_1;
                                    temp.address_line_2 = result.address_line_2;
                                    temp.pincode = result.pincode;
                                    temp.city = result.city;
                                    temp.landmark = result.landmark;
                                    final[i].delivery_address = temp;
                                    temp = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                } else {
                                    final[i].delivery_address = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                }
                            }
                        })

                    }(i));
                }
            } else {
                callback(null);
            }

        }],
        final: ['getProductDetails', function (callback) {
            var result = final.sort(func.sort_by('order_id', true, parseInt));
            temp.orderList = result;
            callback(null);
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

function getSubProductDetails(reply, languageId, sub, callback) {
    var data = []
    var finalData = []
    var tempSub = sub;
    for (var i = 0; i < sub.length; i++) {
        (function (i) {
            var sql = " select product_ml.product_id id , product_ml.name , product_image.image_path , product_pricing.price , " +
                " product_ml.product_desc from product " +
                " join product_ml on product_ml.product_id = product.id " +
                " join product_image on product_image.product_id = product_ml.product_id " +
                " join  product_pricing on product_pricing.product_id = product_ml.product_id " +
                " where product_image.default_image =1 and product_ml.language_id = ? and product.sub_category_id =? "
            multiConnection[dbName].query(sql, [languageId, sub[i].sub_category_id], function (err, result) {
                if (err) {
                    console.log(err);
                }
                else {
                    // console.log(result);
                    for (var j = 0; j < result.length; j++) {
                        (function (j) {
                            data.push(result[j]);

                        })(j);
                    }
                    if (data.length) {
                        tempSub[i].product = data;
                    } else {
                        tempSub[i].product = [];
                    }
                    data = []
                    // console.log(tempSub[i]);
                    // console.log(tempSub[i]);

                    if (i == sub.length - 1) {
                        callback(null, tempSub);
                    }
                }
            })

        })(i);
    }

}


async function getSubCategoryData(dbName, res, languageId, categoryId, callback) {
    var sql = "select c.id sub_category_id,c.image sub_category_image ,c.icon sub_category_icon ,ml.name sub_category_name ,ml.description sub_category_description from categories c join categories_ml ml ";
    sql += " on c.id = ml.category_id ";
    sql += " where c.parent_id = ? and ml.language_id = ? and c.is_live = ?";
    multiConnection[dbName].query(sql, [categoryId, languageId, 1], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }

    })
}

async function getProdcutDetails(dbName, reply, orderId, isPackage, pricing_type, languageId, callback) {
    //     if(isPackage){
    //       var sql = "select p.is_product,os.cart_id,s.id as supplier_id,s.latitude,s.longitude,s.name as supplier_name,s.address,c.category_flow,c.id as category_id,c.order,c.category_flow,os.is_agent,os.supplier_branch_id,op.handling_admin,op.handling_supplier,op.quantity,pml.name,pml.measuring_unit,op.product_id,op.price,op.price as fixed_price,op.product_name,op.image_path,op.product_desc from order_prices op join " +
    //           " product_ml pml on op.product_id = pml.product_id join orders os on os.id = op.order_id join supplier_package spp on op.product_id=spp.package_id join supplier s on s.id=spp.supplier_id  join categories c where op.order_id = ? and pml.language_id = ? group by op.product_id ";
    //      var statement= multiConnection[dbName].query(sql,[orderId,languageId],async function(err,result)    
    //       {
    //           logger.debug("=====================in getProductDetails=========1==>>>>>",statement.sql)

    //           if(err) {
    //               console.log("err",err);
    //               var msg = "something went wrong";
    //               sendResponse.sendErrorMessage(msg,reply,500);
    //           }
    //           else {
    //               var final_data=[];

    //               if(result && result.length>0){
    //                   for(const i of result){

    //                     i.adds_on=await getOrderAddsOn(dbName,i.cart_id,i.product_id);
    //                     i.prod_variants=await getCartVariant(dbName,i.cart_id,i.product_id);
    //                     final_data.push(i)
    //                   }
    //                 callback(null,final_data)
    //               }
    //               else{
    //                 callback(null,result);
    //               }

    //           }
    //       })
    //   }
    //     else {
    try {
        if (pricing_type) {
            var sql = "select c.type,c.menu_type,c.terminology,sp.recipe_pdf,p.is_product,os.cart_id,os.is_agent,c.id as category_id,s.name as supplier_name,spb.name as branch_name,spb.latitude,spb.longitude,s.address,s.id as supplier_id,s.phone,s.supplier_image,s.email, pp.can_urgent,pp.urgent_type,pp.urgent_value ,c.order,c.category_flow,os.supplier_branch_id,op.handling_admin,op.handling_supplier,op.id as order_price_id,op.quantity,pml.name,pml.measuring_unit,op.product_id,op.price,op.price as fixed_price,op.product_name,op.image_path,op.product_desc,IF((select count(*) from product_rating pr where pr.product_id=p.id and pr.user_id=os.user_id and pr.order_id=" + orderId + " )>0,1,0) as is_rated from order_prices op join " +
                " product_ml pml on op.product_id = pml.product_id join orders os on os.id = op.order_id join product_pricing pp on op.product_id=pp.product_id join product p on p.id = op.product_id join supplier_branch spb on spb.id=op.supplier_branch_id join supplier s on s.id=spb.supplier_id join supplier_branch_product sp on sp.product_id =op.product_id join categories c on c.id =sp.category_id  where op.order_id = ? and pml.language_id = ? group by product_id";
            let result = await ExecuteQ.Query(dbName, sql, [orderId, languageId]);
            //   var statememt=multiConnection[dbName].query(sql,[orderId,languageId],async function(err,result)

            //   {
            //     // console.log("=priceType=",statement.sql);
            //     logger.debug("=====================in getProductDetails=========2==>>>>>",statememt.sql)
            //       if(err) {
            //           console.log("--------------err-------------",err,statememt.sql)
            //           var msg = "something went wrong";
            //           sendResponse.sendErrorMessage(msg,reply,500);
            //       }
            //       else {
            var final_data = []
            let totalAddOnPrice = 0;
            if (result && result.length > 0) {

                for (const i of result) {
                    i.adds_on = await getOrderAddsOn(dbName, i.cart_id, i.product_id);
                    i.prod_variants = await getCartVariant(dbName, i.cart_id, i.product_id);
                    i.return_data = await ExecuteQ.Query(dbName, "select status,reasons,product_id from order_return_request where order_price_id=?", [i.order_price_id]);
                    final_data.push(i)
                }
                callback(null, final_data)
            }
            else {
                callback(null, result);
            }
            //       }
            //   })
        }

        else {
            var sql = "select c.type, c.menu_type,c.terminology,sp.recipe_pdf,p.is_product,os.cart_id,os.is_agent,c.id as category_id,s.name as supplier_name,spb.name as branch_name,spb.latitude,spb.longitude,s.address,s.id as supplier_id,s.phone,s.supplier_image,s.email,pp.can_urgent,pp.urgent_type,pp.urgent_value ,c.order,c.category_flow,op.supplier_branch_id,op.handling_admin,op.handling_supplier,op.id as order_price_id,op.quantity,pml.name,pml.measuring_unit,op.product_id,op.price,op.price as fixed_price,op.product_name,op.image_path,op.product_desc,IF((select count(*) from product_rating pr where pr.product_id=p.id and pr.user_id=os.user_id and pr.order_id=" + orderId + ")>0,1,0) as is_rated from order_prices op join " +
                " product_ml pml on op.product_id = pml.product_id join orders os on os.id = op.order_id join product_pricing pp on op.product_id=pp.product_id and op.product_id=pp.product_id join product p on p.id = op.product_id join supplier_branch spb on spb.id=op.supplier_branch_id join supplier s on s.id=spb.supplier_id join supplier_branch_product sp on sp.product_id =op.product_id join categories c on c.id =sp.category_id  where op.order_id = ? and pml.language_id = ?  group by product_id";
            logger.debug("+===========order id in final==========", orderId);
            let result = await ExecuteQ.Query(dbName, sql, [orderId, languageId]);
            //   var statement=multiConnection[dbName].query(sql,[orderId,languageId],async function(err,result)

            //   {
            //     logger.debug("=====================in getProductDetails=========3==>>>>>",statement.sql)
            //       if(err) {
            //           var msg = "something went wrong";
            //           sendResponse.sendErrorMessage(msg,reply,500);
            //       }
            //       else {
            var final_data = []
            if (result && result.length > 0) {
                for (const i of result) {
                    i.adds_on = await getOrderAddsOn(dbName, i.cart_id, i.product_id);
                    i.prod_variants = await getCartVariant(dbName, i.cart_id, i.product_id);
                    i.return_data = await ExecuteQ.Query(dbName, "select status,reasons,product_id from order_return_request where order_price_id=?", [i.order_price_id])
                    logger.debug("========final data push==========", i.adds_on, i)
                    final_data.push(i)

                }
                callback(null, final_data)
            }
            else {
                callback(null, result);
            }
            //       }
            //   })
        }
    }
    catch (Err) {
        var msg = "something went wrong";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }

    //   }


}



const getCartVariant = (dbName, cartId, productId) => {
    return new Promise(async (resolve, reject) => {
        try {
            var data = await ExecuteQ.Query(dbName, "select " +
                "cart_variant.*" +
                " from cart_variant where cart_id=? and product_id=?", [parseInt(cartId), parseInt(productId)])
            resolve(data)
        }
        catch (Err) {
            reject(Err)
        }
    })
}

function getProdcutDetailsV1(dbName, reply, orderId, isPackage, pricing_type, languageId) {

    return new Promise(async (resolve, reject) => {
        try {
            let isTaxInclusive = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["product_price_tax_inclusive", "1"]);
            let priceSql = isTaxInclusive && isTaxInclusive.length > 0 ? "ROUND((op.price+op.handling_admin),2) as price" : "op.price"
            let fixedPriceSql = isTaxInclusive && isTaxInclusive.length > 0 ? "ROUND((op.price+op.handling_admin),2) as fixed_price" : "op.price as fixed_price"
            if (isPackage) {

                var sql = "select IFNULL(op.duration,0) as duration,p.is_appointment,p.purchase_limit,op.freeQuantity,op.product_reference_id,op.product_dimensions,op.product_upload_reciept,op.product_owner_name,IFNULL(op.loyality_discount,0) as loyality_discount,op.id as order_price_id, c.type, c.menu_type,c.terminology,os.cart_id,os.liquor_bottle_deposit_tax,os.liquor_plt_deposit_tax,s.id as supplier_id,s.name as supplier_name,s.latitude,s.longitude,s.address,c.category_flow,c.id as category_id,c.order,c.category_flow,os.is_agent,os.supplier_branch_id,op.handling_admin,op.handling_supplier,op.quantity,pml.name,pml.measuring_unit,op.product_id," + priceSql + "," + fixedPriceSql + ",op.product_name,op.image_path,op.product_desc,op.special_instructions from order_prices op join " +
                    " product_ml pml on op.product_id = pml.product_id join product p on p.id = op.product_id join orders os on os.id = op.order_id join supplier_package spp on op.product_id=spp.package_id join supplier s on s.id=spp.supplier_id  join categories c where op.order_id = ? and pml.language_id = ? group by op.product_id ";

                let result = await ExecuteQ.Query(dbName, sql, [orderId, languageId])
                // var statement= multiConnection[dbName].query(sql,[orderId,languageId],async function(err,result)    
                // {
                logger.debug("=====================in getProductDetails=========1==>>>>>", statement.sql)

                // if(err) {
                //     console.log("err",err);
                //     var msg = "something went wrong";
                //     sendResponse.sendErrorMessage(msg,reply,500);
                // }
                // else {
                var final_data = []
                if (result && result.length > 0) {
                    for (const i of result) {
                        i.adds_on = await getOrderAddsOn(dbName, i.cart_id, i.product_id);
                        i.prod_variants = await getCartVariant(dbName, i.cart_id, i.product_id);
                        i.return_data = await ExecuteQ.Query(dbName, "select status,reasons,product_id from order_return_request where order_price_id=?", [i.order_price_id])
                        final_data.push(i)
                    }
                    resolve(final_data)
                }
                else {
                    resolve(result);
                }

                // }
                // })
            }
            else {

                if (pricing_type) {
                    var sql = "select IFNULL(op.duration,0) as duration,op.freeQuantity,p.is_appointment,s.table_booking_price,s.table_booking_discount, p.purchase_limit, op.product_reference_id,op.product_dimensions,op.product_upload_reciept,op.product_owner_name, IFNULL(op.loyality_discount,0) as loyality_discount,op.id as order_price_id,sp.recipe_pdf,c.type,c.menu_type,c.terminology,os.cart_id,os.is_agent,c.id as category_id,s.address,s.id as supplier_id,s.name as supplier_name,s.latitude,s.longitude,s.phone,s.supplier_image,s.email, pp.can_urgent,pp.urgent_type,pp.urgent_value ,c.order,c.category_flow,os.supplier_branch_id,op.handling_admin,op.handling_supplier,op.quantity,pml.name,pml.measuring_unit,op.product_id," + priceSql + "," + fixedPriceSql + ",op.product_name,op.image_path,op.product_desc,op.special_instructions from order_prices op join " +
                        " product_ml pml on op.product_id = pml.product_id join product p on p.id = op.product_id    join orders os on os.id = op.order_id join product_pricing pp on op.product_id=pp.product_id join supplier_branch spb on spb.id=op.supplier_branch_id join supplier s on s.id=spb.supplier_id join supplier_branch_product sp on sp.product_id =op.product_id join categories c on c.id =sp.category_id  where op.order_id = ? and pml.language_id = ? group by product_id";
                    let result = await ExecuteQ.Query(dbName, sql, [orderId, languageId])
                    // var statememt=multiConnection[dbName].query(sql,[orderId,languageId],async function(err,result)

                    // {
                    //   // console.log("=priceType=",statement.sql);
                    //   logger.debug("=====================in getProductDetails=========2==>>>>>",statememt.sql)
                    //     if(err) {
                    //         console.log("--------------err-------------",err,statememt.sql)
                    //         var msg = "something went wrong";
                    //         sendResponse.sendErrorMessage(msg,reply,500);
                    //     }
                    //     else {
                    var final_data = []
                    if (result && result.length > 0) {
                        for (const i of result) {
                            i.adds_on = await getOrderAddsOn(dbName, i.cart_id, i.product_id);
                            i.prod_variants = await getCartVariant(dbName, i.cart_id, i.product_id);
                            i.return_data = await ExecuteQ.Query(dbName, "select status,reasons,product_id from order_return_request where order_price_id=?", [i.order_price_id])
                            final_data.push(i)
                        }
                        resolve(final_data)
                    }
                    else {
                        resolve(result);
                    }
                    //     }
                    // })
                }

                else {
                    var sql = "select IFNULL(op.duration,0) as duration,p.is_appointment,op.freeQuantity, p.purchase_limit, op.product_reference_id,op.product_dimensions,op.product_upload_reciept,op.product_owner_name,  IFNULL(op.loyality_discount,0) as loyality_discount,sp.recipe_pdf,op.id as order_price_id,c.type,c.menu_type,c.terminology,os.cart_id,s.name as supplier_name,s.latitude,s.longitude,os.is_agent,os.liquor_bottle_deposit_tax,os.liquor_plt_deposit_tax,c.id as category_id,s.address,s.id as supplier_id,s.phone,s.supplier_image,s.email,pp.can_urgent,pp.urgent_type,pp.urgent_value ,c.order,c.category_flow,op.supplier_branch_id,op.handling_admin,op.handling_supplier,op.quantity,pml.name,pml.measuring_unit,op.product_id," + priceSql + "," + fixedPriceSql + ",op.product_name,op.image_path,op.product_desc,op.special_instructions from order_prices op join " +
                        " product_ml pml on op.product_id = pml.product_id join product p on p.id = op.product_id  join orders os on os.id = op.order_id join product_pricing pp on op.product_id=pp.product_id and op.product_id=pp.product_id join supplier_branch spb on spb.id=op.supplier_branch_id join supplier s on s.id=spb.supplier_id join supplier_branch_product sp on sp.product_id =op.product_id join categories c on c.id =sp.category_id  where op.order_id = ? and pml.language_id = ?  group by product_id";
                    logger.debug("+===========order id in final==========", orderId);
                    let result = await ExecuteQ.Query(dbName, sql, [orderId, languageId]);
                    // var statement=multiConnection[dbName].query(sql,[orderId,languageId],async function(err,result)

                    // {
                    //   logger.debug("=====================in getProductDetails=========3==>>>>>",statement.sql)
                    //     if(err) {
                    //         var msg = "something went wroFng";
                    //         sendResponse.sendErrorMessage(msg,reply,500);
                    //     }
                    //     else {
                    var final_data = []
                    if (result && result.length > 0) {
                        for (const i of result) {
                            i.adds_on = await getOrderAddsOn(dbName, i.cart_id, i.product_id);
                            i.prod_variants = await getCartVariant(dbName, i.cart_id, i.product_id);
                            i.return_data = await ExecuteQ.Query(dbName, "select status,reasons,product_id from order_return_request where order_price_id=?", [i.order_price_id])
                            // logger.debug("========final data push==========",i.adds_on,i)
                            final_data.push(i)

                        }
                        resolve(final_data)
                    }
                    else {
                        resolve(result);
                    }
                    //     }
                    // })
                }


            }
        }
        catch (Err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, reply, 500);
        }
    })

}

function insertOrderPrice1(reply, order, statusArr, callback) {

    var oId1 = order.orderIds1;
    var oId2 = order.orderIds;
    var finalData = []
    async.waterfall([

        function (callback) {
            for (var i = 0; i < statusArr.length; i++) {
                (function (i) {
                    var sql = " select * from order_prices where order_id = ? ";
                    multiConnection[dbName].query(sql, [statusArr[i].order_id], function (err, result) {
                        if (err) {
                            callback(err);
                        }
                        else {
                            for (var j = 0; j < result.length; j++) {
                                (function (j) {
                                    finalData.push(result[j])

                                })(j);

                            }

                            if (i == statusArr.length - 1) {
                                callback(null, finalData);
                            }

                        }


                    })

                })(i);
            }

        },
        function (data, callback) {
            async.auto({
                oId1: function (callback) {
                    if (oId1.length > 0) {
                        for (var l = 0; l < oId1.length; l++) {
                            (function (l) {

                                var queryString = "(?,?,?,?,?,?,?,?,?),";
                                var insertString = "";
                                var values = [];
                                var len = data.length;
                                for (var i = 0; i < len; i++) {
                                    (function (i) {
                                        values.push(oId1[l].orderId, data[i].product_name, data[i].price, data[i].image_path, data[i].product_desc, data[i].product_id, data[i].quantity, data[i].handling_admin, data[i].handling_supplier);
                                        // console.log("val===",values);
                                        insertString = insertString + queryString;
                                    }(i));

                                    if (i == (len - 1)) {
                                        insertString = insertString.substring(0, insertString.length - 1);
                                        var sql = "insert into order_prices(order_id,product_name,price,image_path,product_desc,product_id,quantity,handling_admin,handling_supplier) values " + insertString;
                                        multiConnection[dbName].query(sql, values, function (err, result) {
                                            if (err) {
                                                var msg = "some thing went wrong ";
                                                sendResponse.sendErrorMessage(msg, reply, 500);
                                            }
                                            else {
                                                callback(null);
                                            }
                                        })
                                    }
                                }






                            })(l);
                        }
                    }
                    else {
                        callback(null);
                    }

                },
                oId2: function (callback) {
                    // console.log("..............",data)
                    if (oId2.length > 0) {
                        for (var l = 0; l < oId2.length; l++) {
                            (function (l) {

                                var queryString = "(?,?,?,?,?,?,?,?,?),";
                                var insertString = "";
                                var values = [];
                                var len = data.length;
                                for (var i = 0; i < len; i++) {
                                    (function (i) {
                                        values.push(oId2[l].orderId, data[i].product_name, data[i].price, data[i].image_path, data[i].product_desc, data[i].product_id, data[i].quantity, data[i].handling_admin, data[i].handling_supplier);

                                        insertString = insertString + queryString;
                                    }(i));

                                    if (i == (len - 1)) {
                                        insertString = insertString.substring(0, insertString.length - 1);
                                        var sql = "insert into order_prices(order_id,product_name,price,image_path,product_desc,product_id,quantity,handling_admin,handling_supplier) values " + insertString;
                                        multiConnection[dbName].query(sql, values, function (err, result) {
                                            if (err) {
                                                var msg = "some thing went wrong ";
                                                sendResponse.sendErrorMessage(msg, reply, 500);
                                            }
                                            else {
                                                callback(null);
                                            }
                                        })
                                    }
                                }

                            })(l);
                        }
                    }
                    else {
                        callback(null);
                    }
                }

            }, function (err, result) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null);
                }
            })
        }
    ], function (err, result) {
        if (err)
            callback(err);
        else
            callback(null);

    });



}

var getUpcomingHistory = async function (dbName, reply, userId, params, orderGrouping, callback) {
    try {
        var pagination = params.limit != undefined && params.offset != undefined ? " limit " + `${params.limit}` + " offset " + `${params.offset}` : " ";
        let groupBySql = orderGrouping && orderGrouping.length > 0 ? "GROUP BY o.grouping_id ORDER by o.created_on" : "GROUP BY o.id"
        let concatSql = orderGrouping && orderGrouping.length > 0 ? "GROUP_CONCAT(o.id) as order_ids," : "o.id as order_ids,"
        var sql = " select o.gift_amount,o.progress_on," + concatSql + " o.from_latitude,o.from_longitude,ua.latitude as to_latitude,ua.longitude as to_longitude,o.grouping_id,o.wallet_discount_amount,o.is_schedule,o.schedule_end_date,s.delivery_min_time,s.delivery_max_time,IFNULL(odp.discountAmount,0) as discountAmount,ua.latitude,ua.longitude,o.approve_rejection_reason,o.payment_status,o.type,o.payment_after_confirmation,o.user_service_charge,o.created_by,o.referral_amount,cr.area_id,o.preparation_time,o.self_pickup,o.is_agent,o.duration,p.pricing_type,o.schedule_date,o.delivered_on,s.id,o.tip_agent,s.logo,o.supplier_branch_id,o.schedule_order ,o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.service_date,o.remarks,o.delivered_on,o.created_on,o.handling_admin,o.handling_supplier,o.delivery_charges,op.price " +
            "  ,o.random_order_id,s.name as supplier_name,s.logo as supplier_logo,op.product_name,op.product_desc,op.image_path,cr.addOn,o.is_package from orders o join order_prices op " +
            " on o.id = op.order_id join supplier_branch sb on sb.id = op.supplier_branch_id join supplier s on s.id = sb.supplier_id left join cart cr on cr.id=o.cart_id join product p on op.product_id=p.id left join user_address ua on ua.id =o.user_delivery_address left join order_promo odp on odp.orderId = o.id where o.user_id = ? and o.status IN (0,1,3,4,11,10) " + groupBySql + " desc " + pagination + "";
        // console.log(sql);
        // console.log(userId)
        let result = await ExecuteQ.Query(dbName, sql, [userId])
        //    var statememt= multiConnection[dbName].query(sql,[userId],function(err,result){
        //         console.log("...........vsdfjjdsfnhkfd..............",err,statememt.sql);
        //         if(err){
        //             var msg = "some thing went wrong ";
        //             sendResponse.sendErrorMessage(msg,reply,500);
        //         }else{
        callback(null, result);
        //     }
        // })
    }
    catch (err) {
        logger.debug("===Err!==", err)
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }


}

var getUpcomingHistoryCount = async function (dbName, reply, userId, params, orderGrouping, callback) {
    try {
        let groupBySql = orderGrouping && orderGrouping.length > 0 ? "GROUP BY o.grouping_id ORDER by o.created_on" : "GROUP BY o.id"
        var len = 0;
        var sql = " select cr.area_id,o.is_agent,o.duration,p.pricing_type,o.schedule_date,s.id,s.logo,o.supplier_branch_id,o.schedule_order ,o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.service_date,o.remarks,o.delivered_on,o.created_on,o.handling_admin,o.handling_supplier,o.delivery_charges,op.price " +
            " ,op.product_name,op.product_desc,op.image_path,o.is_package from orders o join order_prices op " +
            " on o.id = op.order_id join supplier_branch sb on sb.id = op.supplier_branch_id join supplier s on s.id = sb.supplier_id join cart cr on cr.id=o.cart_id join product p on op.product_id=p.id left join user_address ua on ua.id =o.user_delivery_address where o.user_id = ? and o.status IN (0,1,3,4,11,10) " + groupBySql + " ";
        let result = await ExecuteQ.Query(dbName, sql, [userId])
        // var statememt= multiConnection[dbName].query(sql,[userId],function(err,result){
        //     console.log("...........vsdfjjdsfnhkfd..............",err,statememt.sql);
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        if (result && result.length > 0) {
            logger.debug("=============get upcoming histrory count=======1==", result.length)
            len = result.length
            callback(null, len)
        } else {
            logger.debug("=============get upcoming histrory count======2===", result.length)
            callback(null, len);
        }
        //     }
        // })
    }
    catch (Err) {
        logger.debug("==Err!==", Err)
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }
}

var getAddressAccordingId = async function (dbName, reply, addressId, callback) {

    try {
        var sql = " select country_code,name,phone_number,address_link,address_line_1,address_line_2,pincode,city,landmark,customer_address,reference_address from user_address where id = ?"
        let result = await ExecuteQ.Query(dbName, sql, [addressId])
        // var st=multiConnection[dbName].query(sql,[addressId],function(err,result){
        //     console.log(st.sql,err)
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        callback(null, result);
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }
}



var getHistoryOrder = async function (dbName, reply, userId, status, params, orderGrouping, callback) {
    try {
        let groupBySql = orderGrouping && orderGrouping.length > 0 ? "GROUP BY o.grouping_id ORDER by o.created_on" : "GROUP BY o.id";
        let concatSql = orderGrouping && orderGrouping.length > 0 ? "GROUP_CONCAT(o.id) as order_ids," : "o.id as order_ids,";
        var pagination = params.limit != undefined && params.offset != undefined ? " limit " + `${params.limit}` + " offset " + `${params.offset}` : " ";

        var sql = " select o.self_pickup," + concatSql + "o.slot_price,o.gift_amount,o.wallet_discount_amount,o.is_schedule,o.schedule_end_date,IFNULL(odp.discountAmount,0) as discountAmount,o.approve_rejection_reason,o.payment_status,o.grouping_id,o.type,o.payment_after_confirmation,o.created_by,o.referral_amount,o.user_service_charge,o.is_agent,o.tip_agent,cr.area_id,p.pricing_type,o.is_package,s.id,s.logo,s.latitude,s.longitude,s.name,o.supplier_branch_id,o.schedule_order,o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.schedule_date,o.remarks,o.delivered_on,o.created_on,o.handling_admin,o.handling_supplier,o.delivery_charges,op.price " +
            "  ,o.random_order_id,s.name as supplier_name,s.logo as supplier_logo ,cr.addOn,op.product_name,op.product_desc,op.image_path from orders o join order_prices op " +
            " on o.id = op.order_id join supplier_branch sb on sb.id = op.supplier_branch_id join supplier s on s.id = sb.supplier_id join product p on op.product_id=p.id join cart cr on cr.id=o.cart_id left join user_address ua on ua.id =o.user_delivery_address left join order_promo odp on odp.orderId = o.id where o.user_id = ?  and o.status NOT IN (0,1,3,4,11,10)  " + groupBySql + " desc " + pagination + ""
        // console.log(sql);
        let result = await ExecuteQ.Query(dbName, sql, [userId]);
        // multiConnection[dbName].query(sql,[userId],function(err,result){
        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        console.log("result...", result)
        callback(null, result);
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }
}

var getHistoryOrderCount = async function (dbName, reply, userId, status, params, orderGrouping, callback) {
    try {
        let groupBySql = orderGrouping && orderGrouping.length > 0 ? "GROUP BY o.grouping_id ORDER by o.created_on" : "GROUP BY o.id"
        var len = 0;
        var sql = " select IFNULL(odp.discountAmount,0) as discountAmount,o.is_agent,cr.area_id,p.pricing_type,o.is_package,s.id,s.logo,s.latitude,s.longitude,s.name,o.supplier_branch_id,o.schedule_order,o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.schedule_date,o.remarks,o.delivered_on,o.created_on,o.handling_admin,o.handling_supplier,o.delivery_charges,op.price " +
            " ,op.product_name,op.product_desc,op.image_path from orders o join order_prices op " +
            " on o.id = op.order_id join supplier_branch sb on sb.id = op.supplier_branch_id join supplier s on s.id = sb.supplier_id join product p on op.product_id=p.id join cart cr on cr.id=o.cart_id left join user_address ua on ua.id =o.user_delivery_address left join order_promo odp on odp.orderId = o.id where o.user_id = ?  and o.status NOT IN (0,1,3,4,11,10)  " + groupBySql + " desc "
        let result = await ExecuteQ.Query(dbName, sql, [userId])
        // multiConnection[dbName].query(sql,[userId],function(err,result){
        //         if(err){
        //             var msg = "some thing went wrong ";
        //             sendResponse.sendErrorMessage(msg,reply,500);
        //         }else{
        if (result && result.length > 0) {
            logger.debug("=============get upcoming histrory count=======1==", result.length)
            len = result.length
            callback(null, len)
        } else {
            logger.debug("=============get upcoming histrory count======2===", result.length)
            callback(null, len);
        }
        //     }
        // })
    }
    catch (Err) {
        var msg = "some thing went wrong ";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }
}



var trackOrderList = function (dbName, reply, userId, status, callback) {
    var date1 = moment().utcOffset(4);
    //var date = moment().format();
    var date = date1._d
    //console.log("date...",date)

    var sql = " select ua.area_id,p.pricing_type,o.is_package,o.schedule_date,s.id,s.logo,o.supplier_branch_id, o.schedule_order, o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.service_date,o.remarks,o.delivered_on,o.created_on,o.delivery_charges,op.price " +
        " ,op.product_name,op.handling_admin,op.handling_supplier,op.product_desc,op.image_path from orders o join order_prices op " +
        " on o.id = op.order_id join supplier_branch sb on sb.id = op.supplier_branch_id join supplier s on s.id = sb.supplier_id " +
        " join product p on p.id=op.product_id join user_address ua on ua.id =o.user_delivery_address where o.user_id = ? and (o.status = ? or o.status = ? or o.status = ?" +
        " or o.status = ? or o.status = ?) and o.schedule_date < ? GROUP BY o.id ORDER BY o.id DESC";
    multiConnection[dbName].query(sql, [userId, 0, 1, 3, 4, 7, date], function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })
}

var getFreeProducts = function (dbName, reply, netAmount, supplierBranchId, callback) {
    logger.debug("================in getFreeProducts================")
    var sql = "select pml.name,pml.measuring_unit,pml.product_desc,pi.image_path,sbp.product_id_2 as id ,sbp.id as promotion_id " +
        " from supplier_branch_promotions sbp join product p on p.id =  sbp.product_id_2 " +
        " join product_image pi on pi.product_id = sbp.product_id_2 join product_ml pml on pml.product_id = sbp.product_id_2 " +
        "where sbp.promotion_type = ?" +
        " and sbp.supplier_branch_id = ? and sbp.is_deleted = ? and sbp.offer_product_value < ? ORDER BY sbp.offer_product_value DESC LIMIT 1";
    multiConnection[dbName].query(sql, [2, supplierBranchId, 0, netAmount], function (err, result) {

        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })
}

//
// function regenrateScheduleOrder()
// {
//     var sql = " update schedule_order set active = 0 where is_deleted = 0 " ;
//     multiConnection[dbName].query(sql,function(err,result)
//     {
//         if(err)
//         {
//            console.log("....",err);
//         }
//         else
//         {
//             console.log("......successful...");
//         }
//
//     });
//
// }
//
// module.exports =
// {
//     regenrateScheduleOrder:regenrateScheduleOrder
// }

var getSuppllier = function (reply, languageId, areaId, status, callback) {
    var supplier_status = status;
    var deleted = 0;
    var day = moment().isoWeekday();
    day = day - 1;
    var sql = " select s.id,sbap.supplier_branch_id,s.supplier_image,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
        "sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address from supplier_category sc join supplier s " +
        " on sc.supplier_id = s.id join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
        " s.id join supplier_branch_area_product sbap on sbap.supplier_branch_id = sbb.id join supplier_timings st " +
        " on st.supplier_id = s.id join supplier_branch_delivery_areas sbd on sbd.supplier_branch_id = sbb.id where sc.commission_package = ? " +
        " and sml.language_id = ? and sbap.area_id = ? and sbd.area_id = ? and s.is_deleted = ? and s.is_live = ? and s.is_active = ? and " +
        " sbb.is_live = 1 and sbb.is_deleted = 0 and sbap.is_deleted=0 and st.week_id =? GROUP BY s.id LIMIT 5";
    multiConnection[dbName].query(sql, [supplier_status, languageId, areaId, areaId, 0, 1, 1, day], function (err, result) {
        if (err) {
            console.log("eeeee", err);
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })
}


exports.supplierCategoryList = function (request, reply) {
    var languageId;
    var areaId;
    var supplierId;
    var data = {};
    async.auto({
        getValue: function (callback) {
            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.supplierId)) {
                var msg = "supplier Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            languageId = request.body.languageId;
            supplierId = request.body.supplierId
            callback(null);
        },
        supplierCategoryList: ['getValue', function (callback) {
            var sql = "Select c.payment_after_confirmation,c.icon,c.image,cml.name,cml.description,c.id from supplier_category sc join categories c on c.id  = " +
                " sc.category_id join categories_ml cml on cml.category_id = c.id where sc.supplier_id = ? and cml.language_id = ? GROUP BY sc.category_id";
            multiConnection[dbName].query(sql, [supplierId, languageId], function (err, result) {
                if (err) {
                    var msg = "some thing went wrong ";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    data.list = result;
                    callback(null, result);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}



exports.barCode = function (request, reply) {
    var barCode;
    var languageId;
    var product_id;
    var supplierBranchId;
    var areaId;
    var temp = {};
    console.log("req.body.....", request.body);
    async.auto({
        getValue: function (callback) {
            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.barCode)) {
                var msg = "bar Code  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            /*if(!(request.body.supplierBranchId)){
                var msg = "supplier branch id  not found";
                return sendResponse.sendErrorMessage(msg,reply,400);
            }*/
            languageId = request.body.languageId;
            barCode = request.body.barCode;
            supplierBranchId = request.body.supplierBranchId
            areaId = request.body.areaId;
            callback(null);
        },
        /* serachProduct:['getValue',function(callback){
             var sql = "select id from product where bar_code = ?";
             multiConnection[dbName].query(sql, [barCode], function (err, result) {
                 if (err) {
                     var msg = "some thing went wrong ";
                     sendResponse.sendErrorMessage(msg, reply, 500);
                 } else {
                     console.log("err11111",err,result)
                     if(result.length){
                         product_id = result[0].id;
                         callback(null);
                     }else{
                         var msg = "No product found";
                         return sendResponse.sendErrorMessage(msg,reply,400);
                     }
                 }
             })
         }],*/
        getproductDetails: ['getValue', function (callback) {
            if (parseInt(supplierBranchId)) {
                var sql = "select pml.name,pml.measuring_unit,pml.product_desc,pi.image_path,sb.supplier_branch_id,sb.product_id,sb.delivery_charges,sb.min_order,sb.charges_below_min_order,p.sku " +
                    " from supplier_branch_area_product sb join product_image pi on pi.product_id = sb.product_id join product_ml" +
                    " pml on pml.product_id = pi.product_id join product_pricing pp on pp.product_id = pi.product_id join product p on p.id=pml.product_id  where pml.language_id = ? and " +
                    " sb.supplier_branch_id = ? and p.bar_code =? and " +
                    " ((pp.price_type = '1' and DATE(pp.start_date) <= " +
                    " CURDATE() and DATE(pp.end_date) >= CURDATE()) or (pp.price_type = 0)) GROUP BY pi.product_id";
                multiConnection[dbName].query(sql, [languageId, supplierBranchId, barCode], function (err, result) {
                    console.log("err1", err, result)
                    if (err) {
                        var msg = "some thing went wrong ";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        temp.list = result;
                        callback(null);
                    }
                })
            }
            else {
                var sql = "select pml.name,pml.measuring_unit,pml.product_desc,pi.image_path,sb.supplier_branch_id,sb.product_id,sb.delivery_charges,sb.min_order,sb.charges_below_min_order,p.sku " +
                    " from supplier_branch_area_product sb join product_image pi on pi.product_id = sb.product_id join product_ml" +
                    " pml on pml.product_id = pi.product_id join product_pricing pp on pp.product_id = pi.product_id join product p on p.id=pml.product_id  where pml.language_id = ? and " +
                    " sb.area_id = ? and p.bar_code =? and " +
                    " ((pp.price_type = '1' and DATE(pp.start_date) <= " +
                    " CURDATE() and DATE(pp.end_date) >= CURDATE()) or (pp.price_type = 0)) and p.is_deleted=0 and pp.is_deleted=0 GROUP BY pi.product_id";
                multiConnection[dbName].query(sql, [languageId, areaId, barCode], function (err, result) {
                    console.log("err2", err, result)

                    if (err) {
                        var msg = "some thing went wrong ";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        temp.list = result;
                        callback(null);
                    }
                })
            }

        }],
    }, function (err, result) {
        if (err) {

            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.ratingOrder = function (request, reply) {
    var languageId;
    var orderId;
    var rating = 0;
    var comment = "";
    var accessToken;
    var userId = 0;
    var date1 = moment().utcOffset(4);
    var date = date1._d;
    var deviceToken, deviceType, userName, deliveryDate, supplierId, supplierEmail;
    var building, houseNumber, payment_type, schedule_date, supplierPhone, branchToken, branchDeviceType, net_amount, supplierName, created_on, mobileNumber, area, landmark, address_link;

    async.auto({
        getValue: function (callback) {
            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.orderId)) {
                var msg = "order Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.rating) {
                rating = request.body.rating;
            }
            if (request.body.comment) {
                comment = request.body.comment
            }

            languageId = request.body.languageId;
            orderId = request.body.orderId;
            accessToken = request.body.accessToken;
            callback(null);
        },
        getId: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        rateOrder: ['getId', function (callback) {
            var sql = "update orders set rating = ?, comment = ?, status = 6,rated_on =? where id = ? and user_id = ? ";
            multiConnection[request.dbName].query(sql, [rating, comment, date, orderId, userId], function (err, result) {
                if (err) {
                    var msg = "some thing went wrong ";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    if (result.affectedRows) {
                        callback(null, result);
                    } else {
                        if (languageId == 14) {
                            var msg = "invalid order id";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            var msg = "هوية المستخدم غير صالح";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        }
                    }
                }
            })
        }],
        notificationData: ['rateOrder', function (callback) {
            getvalues(request.dbName, reply, orderId, function (err, values) {
                //   console.log(".....val.....",values);
                if (err) {
                    sendResponse.somethingWentWrongError(res);
                }
                else {

                    userId = values.user_id;
                    userName = values.user_name;
                    deliveryDate = values.delivery_date;
                    supplierEmail = values.email;
                    supplierPhone = values.phone;
                    branchToken = values.branch_token;
                    branchDeviceType = values.branch_device_type;
                    supplierId = values.supplier_id;
                    net_amount = values.net_amount;
                    supplierName = values.supplierName;
                    mobileNumber = values.mobileNumber;
                    area = values.area;
                    landmark = values.landmark;
                    address_link = values.address_link;
                    created_on = moment(values.created_on).format('YYYY-MM-DD HH:mm');
                    schedule_date = moment(values.schedule_date).format('YYYY-MM-DD HH:mm');
                    building = ''
                    // houseNumber = (values.pincode).split(',');
                    // if(houseNumber[1]){
                    //     building = houseNumber[1];
                    //     building = building.substring(2);
                    // }
                    // else {
                    //     building='';
                    // }
                    if (values.payment_type == 0) {
                        payment_type = 'CASH'
                    }
                    else {
                        payment_type = 'CARD'
                    }
                    callback(null);
                }
            });
        }],
        sendAdminMail: ['notificationData', async function (cb) {
            try {
                logger.debug("===Ent>>>")
                let getAgentDbData = await common.GetAgentDbInformation(request.dbName);
                let agentConnection = await common.RunTimeAgentConnection(getAgentDbData);
                let agentOrderData = await getAgentData(agentConnection, orderId);
                logger.debug("=====agentOrderData=", agentOrderData)
                if (agentOrderData && agentOrderData.length > 0) {
                    await ExecuteQ.QueryAgent(agentConnection, `insert into cbl_user_rating(order_id,user_id,rating,reveiw) 
                values(?,?,?,?)`, [orderId, agentOrderData[0].id, rating, comment])
                    let agentSql = `update cbl_user set avg_rating=IFNULL((select avg(rating) from cbl_user_rating where user_id=?),0) where id = ?`
                    if (comment != "") {
                        agentSql = `update cbl_user set total_review=total_review+1,avg_rating=IFNULL((select avg(rating) from cbl_user_rating where user_id=?),0) where id = ?`
                    }
                    await ExecuteQ.QueryAgent(agentConnection, agentSql, [agentOrderData[0].id, agentOrderData[0].id]);
                    var rateSql = "update cbl_user_orders set rating = ?, comment = ? where order_id=? ";
                    await ExecuteQ.QueryAgent(agentConnection, rateSql, [rating, comment, orderId]);
                    cb(null)
                }
                else {
                    cb(null)
                }
            }
            catch (Err) {
                logger.debug("======Err!===", Err)
                cb(null)
            }

            //     emailTemp.userRateOrder(reply,AdminMail,orderId,supplierName,userName,mobileNumber,area,landmark,building,houseNumber[0],function(err,result){
            //     if(err){
            //         console.log("..****user rate email*****....",err);
            //     }
            // })

        }],
        sendAdminMails: ['sendAdminMail', function (cb) {
            //     emailTemp.userRateOrder(reply,AdminMail,orderId,supplierName,userName,mobileNumber,area,landmark,building,houseNumber[0],function(err,result){
            //     if(err){
            //         console.log("..****user rate email*****....",err);
            //     }
            // })
            cb(null)
        }],
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.trackOrderupdate = function (request, reply) {



    var languageId;
    var orderId;
    var accessToken;
    var notificationDetails;
    var userId;
    var deviceToken, deviceType, userName, deliveryDate, supplierId, supplierEmail;
    var building, houseNumber, payment_type, schedule_date, supplierPhone, branchToken, branchDeviceType, net_amount, supplierName, created_on, mobileNumber, area, landmark, address_link;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.orderId)) {
                var msg = "order Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            languageId = request.body.languageId;
            orderId = request.body.orderId;
            accessToken = request.body.accessToken;
            callback(null);
        },
        getId: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        /*checkOrderId:['getId',function(callback){
            checkTrackingOrder(reply,userId,orderId,function(err,result){
                if(err){
                    callback(err);
                }else{
                    callback(null);
                }
            })
        }],*/
        updateOrderStatus: ['getId', function (callback) {
            var status = 7;
            updateOrderStatus(request.dbName, reply, status, orderId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    //console.log("res...",result)
                    callback(null);
                }
            })
        }],
        notificationData: ['updateOrderStatus', function (callback) {
            getvalues(request.dbName, reply, orderId, function (err, values) {
                console.log(".....val.....", values);
                if (err) {
                    sendResponse.somethingWentWrongError(res);
                }
                else {
                    deviceToken = values.device_token;
                    deviceType = values.device_type;
                    userName = values.user_name;
                    deliveryDate = values.delivery_date;
                    supplierEmail = values.email;
                    supplierPhone = values.phone;
                    branchToken = values.branch_token;
                    branchDeviceType = values.branch_device_type;
                    supplierId = values.supplier_id;
                    net_amount = values.net_amount;
                    supplierName = values.supplierName;
                    mobileNumber = values.mobileNumber;
                    area = values.area;
                    landmark = values.landmark;
                    address_link = values.address_link;
                    created_on = moment(values.created_on).format('YYYY-MM-DD HH:mm');
                    schedule_date = moment(values.schedule_date).format('YYYY-MM-DD HH:mm');
                    houseNumber = (values.pincode).split(',');
                    if (houseNumber[1]) {
                        building = houseNumber[1];
                        building = building.substring(2);
                    }
                    else {
                        building = '';
                    }
                    if (values.payment_type == 0) {
                        payment_type = 'CASH'
                    }
                    else {
                        payment_type = 'CARD'
                    }
                    callback(null);
                }
            });
        }],
        sendPushNotification: ['notificationData', function (cb) {
            console.log("device..", deviceType, deviceToken);
            if (deviceToken.length > 15) {
                if (deviceType == 0) {
                    var data = {
                        "status": 2,
                        "message": "You Have Received New Tracking Request ",
                        "sound": "silver_message_sound0",
                        "title": "Order Tracked",
                        "data": orderId

                        //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                    }
                    //data.message= userName + data.message;
                    pushNotifications.sendAndroidPushNotificationToSupplier(deviceToken, data, 0, function (err, result) {
                        console.log(".........errrrrrr.......", err, result);
                        if (err) {
                            console.log("err2", err)
                            cb(null)
                        }
                        else {
                            //console.log("push sent");
                            cb(null);
                        }
                    });
                }
                else {
                    var data = {
                        "status": 2,
                        "message": "You Have Received New Tracking Request ",
                        "sound": "silver_message_sound0",
                        "title": "Order Tracked",
                        "data": orderId

                        //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                    }
                    var path = "supplier";
                    var sound = "track.mp3";
                    pushNotifications.sendIosPushNotification(deviceToken, data, path, sound, function (err, result) {
                        console.log(".........errrrrrr.......", err, result);
                        if (err) {
                            console.log("err2", err);
                            cb(null)
                        }
                        else {
                            //console.log("push sent");
                            cb(null);
                        }
                    })
                }
            }
            else {
                cb(null);
            }

        }],
        sendAdminMail: ['sendPushNotification', function (cb) {
            emailTemp.trackOrderUpdate(reply, AdminMail, supplierEmail, orderId, supplierName, userName, mobileNumber, area, landmark, houseNumber[0], address_link, building, net_amount, created_on, schedule_date, payment_type, function (err, result) {
                if (err) {
                    console.log("..****fb register email*****....", err);
                }
            })
            cb(null)
        }],
        sendBranchPushNotification: ['sendPushNotification', function (cb) {
            console.log("device..", branchDeviceType, branchToken);

            if (branchToken.length > 15) {
                if (branchDeviceType == 0) {
                    var data = {
                        "status": 2,
                        "message": "You Have Received New Tracking Request ",
                        "sound": "silver_message_sound0",
                        "title": "Order Tracked",
                        "data": orderId

                        //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                    }
                    //data.message= userName + data.message;
                    pushNotifications.sendAndroidPushNotificationToSupplier(branchToken, data, 1, function (err, result) {
                        console.log(".........errrrrrr.......", err, result);
                        if (err) {
                            console.log("err2", err)
                            cb(null)
                        }
                        else {
                            //console.log("push sent");
                            cb(null);
                        }
                    });
                }
                else {
                    var data = {
                        "status": 2,
                        "message": "You Have Received New Tracking Request ",
                        "sound": "silver_message_sound0",
                        "title": "Order Tracked",
                        "data": orderId

                        //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                    }
                    var path = "branch";
                    var sound = "track.mp3";
                    pushNotifications.sendIosPushNotification(branchToken, data, path, sound, function (err, result) {
                        console.log(".........errrrrrr.......", err, result);
                        if (err) {
                            console.log("err2", err);
                            cb(null)
                        }
                        else {
                            //console.log("push sent");
                            cb(null);
                        }
                    })
                }
            }
            else {
                cb(null)
            }

        }],
        /*  getSupplierDetails:['updateOrderStatus',function(callback){
              var sql = "select sb.device_token as branch_token,sb.device_type as branch_type,sb.email as branch_email " +
                  " ,s.device_token as supplier_token,s.device_type as supplier_type,s.email as supplier_email from orders o join supplier_branch sb on o.supplier_branch_id = sb.id " +
                  " join supplier s on s.id = sb.supplier_id where o.id = ? ";
              multiConnection[dbName].query(sql, [orderId], function (err,result){
                  if (err) {
                      callback(err);
                  } else {
                      notificationDetails = result[0];
                      callback(null,result);
                  }
              })
          }],
          branchPush:['getSupplierDetails',function(callback){
             if(notificationDetails.branch_type == 0){
                 var data = {
                     "status": "TRACK ORDER",
                     "message": "TRACK ORDER",
                     //"data": {"supplier_name": supplierName}
                 }
                 pushNotifications.sendAndroidPushNotification(notificationDetails.branch_token, data, function (err, result) {
                     if (err) {
                         callback(err);
                     }
                     else {
                         callback(null);
                     }
                 });
             }else{
                 // IOs PUSH
                 callback(null);
             }
  
          }],
          suplplierPush:['getSupplierDetails',function(callback){
              if(notificationDetails.branch_type == 0){
                  var data = {
                      "status": "TRACK ORDER",
                      "message": "TRACK ORDER",
                      //"data": {"supplier_name": supplierName}
                  }
                  pushNotifications.sendAndroidPushNotification(notificationDetails.branch_token, data, function (err, result) {
                      if (err) {
                          callback(err);
                      }
                      else {
                          callback(null);
                      }
                  });
              }else{
                  // IOS PUSH 
                  callback(null);
              }
          }],
          supplierMail:['getSupplierDetails',function(callback){
              var subject = "Track Order";
              var  content ="Thank You \n";
              content+="\n\n"
              content+="Team royo \n";
              func.sendMailthroughSMTP(reply,subject,notificationDetails.supplier_email,content,1,function(err,result){
                  if(err){
                      callback(err);
                  }else{
                      callback(null)
                  }
              });
          }],
          branchMail:['getSupplierDetails',function(callback){
                  var subject = "Track Order";
                  var  content ="Thank You \n";
                  content+="\n\n"
                  content+="Team royo \n";
              func.sendMailthroughSMTP(reply,subject,notificationDetails.branch_email,content,1,function(err,result){
                  if(err){
                      callback(err);
                  }else{
                      callback(null)
                  }
              });
          }]*/
        /*  sendBranchPushNotification: ['sendPushNotification', function (cb) {
              console.log("device..",branchToken,branchDeviceType);
              if (branchDeviceType == 0) {
                  var data = {
                      "status": 2,
                      "message": "You Have Received New Tracking Request  "
                      //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                  }
                  //data.message= userName + data.message;
                  pushNotifications.sendAndroidPushNotification(branchToken,data,function (err, result) {
                      console.log(".........errrrrrr.......",err,result);
                      if (err) {
                          console.log("err2",err)
                          cb(null)
                      }
                      else {
                          //console.log("push sent");
                          cb(null);
                      }
                  });
              }
              else {
                  cb(null);
              }
              /!*
               else {
               var data = {
               "status": constant.pushNotificationStatus.ORDER_GENARTED,
               "message": constant.pushNotificationMessage.ORDER_GENARTED_ENGLISH,
               "data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate}
               }
  
               message = data.message;
  
               pushNotifications.sendIosPushNotification(deviceToken, data, message, function (err, result) {
               if (err) {
               console.log("err3",err)
               cb(null)
               }
               else {
               cb(null);
               }
               });
               }
               *!/
  
          }],*/
        /* savePushNotification: ['sendPushNotification', function (cb){
             adminOrders.saveNoticationData(reply, userId, supplierId, orderId, constant.pushNotificationStatus.ORDER_TRACKED_BY_USER, constant.pushNotificationMessage.ORDER_TRACKED_BY_USER, cb)
         }]*/



    }, function (err, result) {
        if (err) {
            console.log("....errr...", err)
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            var msg = {};
            msg.msg = "Tracking of your order is initiated. ,we will notify you shortly. ";
            return sendResponse.sendSuccessData(msg, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}





exports.getNotification = function (request, reply) {

    var accessToken;
    var userId;
    var notification = {}
    let limit = request.query.limit == undefined ? 1000 : request.query.limit
    let skip = request.query.skip == undefined ? 0 : request.query.skip
    console.log("req.body.....", request.body)
    async.auto({
        getValue: function (callback) {
            if (!(request.query.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.query.accessToken;
            callback(null);
        },
        getId: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        getNotification: ['getId', function (callback) {

            getNotification(request.dbName, reply, userId, limit, skip, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    notification.notification = result.list;
                    notification.count = result.count
                    callback(null);
                }
            })

        }]
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(notification, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.getNotificationAdmin = function (request, reply) {
    var accessToken;
    var userId;
    var notification = {}
    console.log("req.body.....", request.query)
    let limit = request.query.limit == undefined ? 1000 : request.query.limit
    let skip = request.query.skip == undefined ? 0 : request.query.skip
    limit = parseInt(limit);
    skip = parseInt(skip)
    async.auto({
        getValue: function (callback) {
            if (!(request.query.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.query.accessToken;
            callback(null);
        },
        getNotification: ['getValue', function (callback) {
            getAdminNotification(request.dbName, reply, request.user.id,
                limit, skip,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        notification.notification = result.list;
                        notification.count = result.count
                        callback(null);
                    }
                })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(notification, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.getNotificationSupplier = function (request, reply) {
    var accessToken;
    var userId;
    var notification = {}
    console.log("req.body.....", request.query)
    let limit = request.query.limit == undefined ? 1000 : request.query.limit
    let skip = request.query.skip == undefined ? 0 : request.query.skip
    let supplier_id;
    limit = parseInt(limit);
    skip = parseInt(skip)
    async.auto({
        getValue: function (callback) {
            if (!(request.query.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.query.supplier_id)) {
                var msg = "supplier_id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.query.accessToken;
            supplier_id = request.query.supplier_id;
            callback(null);
        },
        getNotification: ['getValue', function (callback) {
            getSupplierNotification(request.dbName, reply, supplier_id,
                limit, skip,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        notification.notification = result.list;
                        notification.count = result.count
                        callback(null);
                    }
                })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(notification, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}
exports.AllclearNotification = function (request, reply) {
    var accessToken;
    var userId;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            callback(null);
        },
        getId: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        clearNotification: ['getId', function (callback) {
            clearNotification(request.dbName, reply, userId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.clearNotification = function (request, reply) {
    var notificationId;
    var accessToken;
    var userId;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.notificationId)) {
                var msg = "notification Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            notificationId = request.body.notificationId;
            callback(null);
        },
        getId: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        clearOneNotification: ['getId', function (callback) {
            clearOneNotification(request.dbName, reply, notificationId, userId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.unFavourite = function (request, reply) {
    var accessToken;
    var supplierId;
    var userId;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.supplierId)) {
                var msg = "supplier Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            supplierId = request.body.supplierId;
            callback(null);
        },
        getId: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        markUnfav: ['getId', function (callback) {
            markUnFav(request.dbName, reply, userId, supplierId, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.loyalityOrder = function (request, reply) {
    logger.debug("=================request.body.productList===========", request.body.productList);


    var accessToken;
    var urgent_price = 0;
    var urgent = 0;
    var is_postponed = 0;
    var supplierBranchId;
    var productList;
    var deviceId;
    var deliveryType;
    var totalPoints;
    var deliveryAddressId;
    var deliveryDate;
    var userId;
    var remarks = "";
    var orderId = [];
    var languageId;
    var product_data;
    var flag = 1;
    var deviceType = 0;
    var loyalityDetails;
    var supplierDeviceType, supplierDeviceToken, supplierBranchDeviceType, supplierBranchDeviceToken
    console.log("********************", request.body)
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.supplierBranchId)) {
                var msg = "supplier branch Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.productList)) {
                var msg = "product List Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            /* if(!(request.body.deliveryType)){
                 console.log(".sdfgvdfbgfnbfg............in rhis function");
                 var msg = " delivery type not found";
                 return sendResponse.sendErrorMessage(msg,reply,400);
             }*/


            if (!(request.body.deliveryAddressId)) {
                var msg = " delivery address id	 not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.totalPoints)) {
                var msg = "total points id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.deliveryDate)) {
                var msg = "delivery Date id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }


            if (request.body.urgent && request.body.urgentPrice) {
                urgent = request.body.urgent;
                urgent_price = request.body.urgentPrice;
            }

            if (request.body.isPostponed) {
                is_postponed = request.body.isPostponed;
            }

            if (request.body.remarks) {
                remarks = request.body.remarks;
            }

            if (!(request.body.languageId)) {
                var msg = "language Id  not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.body.deviceType) {
                deviceType = request.body.deviceType
            }

            accessToken = request.body.accessToken;
            supplierBranchId = request.body.supplierBranchId;
            productList = request.body.productList;

            deliveryType = request.body.deliveryType;
            deliveryAddressId = request.body.deliveryAddressId;
            totalPoints = request.body.totalPoints;
            deliveryDate = request.body.deliveryDate;
            languageId = request.body.languageId;
            callback(null);
        },
        getId: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        getLoyaltyPoints: ['getId', function (callback) {
            var sql = 'select loyalty_points from user where id= ?';
            var stmt = multiConnection[request.dbName].query(sql, [userId], function (err, result) {
                logger.debug("=================in the getLoyaltyPoints===============", stmt.sql, result)
                if (err) {
                    callback(err);
                }
                else {
                    if (result[0].loyalty_points < totalPoints) {
                        logger.debug("=============not enough points error ===================")
                        var msg = "You don't have enough points";
                        return sendResponse.sendErrorMessage(msg, reply, 400);
                    }
                    else {
                        logger.debug("=================have some points===================")
                        flag = 1;
                        callback(null);
                    }
                }
            })
        }],
        orderGenrate: ['getLoyaltyPoints', function (callback) {
            logger.debug("=========entered in the orderGenrate=================")
            if (flag) {
                var sql = "insert into loyalty_order(user_id,delivery_type,delivery_address_id,supplier_branch_id,total_points,service_date,urgent,urgent_price,remarks,was_postponed,status) values(?,?,?,?,?,?,?,?,?,?,?)";
                var stmt = multiConnection[request.dbName].query(sql, [userId, deliveryType, deliveryAddressId, supplierBranchId, totalPoints, deliveryDate, urgent, urgent_price, remarks, is_postponed, 0], function (err, result) {
                    logger.debug("===============query in the orderGenrate=======", stmt.sql, err, result)
                    if (err) {
                        logger.debug("===============error in orderGenrate=============", stmt.sql, err)
                        var msg = "db errmnnor";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        logger.debug("========********==========**************----------")
                        orderId[0] = result.insertId;
                        callback(null, result);
                    }
                })
            }
            else {
                callback(null);
            }
        }],
        getProductDetails: ['orderGenrate', function (callback) {
            logger.debug("================entered in get product details===================")
            if (flag) {
                getProudct(request.dbName, reply, productList, languageId, deviceType, function (err, result) {
                    logger.debug("==============result of getProduct ========**********===", result, err)
                    if (err) {
                        var msg = "db";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {

                        if (result.length) {
                            product_data = result;
                            callback(null);
                        } else {
                            product_data = [];
                            callback(null);
                        }
                    }
                })
            }
            else {
                callback(null)
            }
        }],
        insertProduct: ['getProductDetails', function (callback) {

            logger.debug("==================entered in the insertProduct======!!!!!=======")
            insertLoyaltyProduct(request.dbName, reply, product_data, orderId, function (err, result) {
                logger.debug("=================query and result of insertLoyaltyProduct========", err, result)
                if (err) {
                    var msg = "db error insert product";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {

                    callback(null);
                }
            })

        }],
        updatePoints: ['insertProduct', function (callback) {
            if (flag) {
                var sql = 'update user set loyalty_points = loyalty_points - ?  where id =?'
                multiConnection[request.dbName].query(sql, [totalPoints, userId], function (err, result) {
                    if (err) {
                        console.log("err", err);
                        var msg = "db error points";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        callback(null);
                    }
                })
            }
            else {
                callback(null);
            }

        }],
        getUserDetails: ['updatePoints', function (cb) {
            var sql = "select u.mobile_no,u.firstname,ua.address_line_1,ua.address_line_2,ua.pincode, ua.address_link,ua.landmark," +
                " ua.city from user u join user_address ua on ua.user_id = u.id where u.id = ? and ua.id = ? ";
            multiConnection[request.dbName].query(sql, [userId, deliveryAddressId], function (err, result) {

                // console.log(".............loyalityDetails.........",err,result);

                if (err) {
                    cb(err);
                } else {
                    loyalityDetails = result[0];
                    cb(null)
                }
            })

        }],
        sendEmail: ['getUserDetails', function (cb) {
            console.log("...............send mal..............");
            //   var email = "prince@code-brew.com";
            emailTemp.loyalityOrder(reply, product_data, userId, deliveryType, deliveryAddressId, supplierBranchId, totalPoints, deliveryDate, remarks, loyalityDetails, orderId, AdminMail, function (err, result) {
                if (err) {
                    console.log("..****fb register email*****....", err);
                }
            })
            cb(null);
        }],
        /* getSupplierDetails:['updatePoints',function (cb) {
             var sql='select s.device_type as supplierDeviceType,s.device_token as supplierDeviceToken,sb.device_type as supplierBranchDeviceType,' +
                 'sb.device_token as supplierBranchDeviceToken from supplier s join supplier_branch sb on s.id= sb.supplier_id join loyalty_order lo on ' +
                 'lo.supplier_branch_id = sb.id where lo.id = ?'
 
             multiConnection[dbName].query(sql, [orderId], function (err, result) {
             console.log(".....................1...........",err,result)
                 if (err) {
                     cb(err);
                 } else {
                     supplierDeviceType = result[0].supplierDeviceType;
                     supplierDeviceToken = result[0].supplierDeviceToken;
                     supplierBranchDeviceType = result[0].supplierBranchDeviceType;
                     supplierBranchDeviceToken = result[0].supplierBranchDeviceToken;
 
 
                     cb(null)
                 }
             })
 
 
         }],
         sendPushNotification: ['getSupplierDetails', function (cb) {
             console.log("device..",supplierDeviceType,supplierDeviceToken);
             if(supplierDeviceToken.length >15) {
                 if (supplierDeviceType == 0) {
                     var data = {
                         "status": 1,
                         "message": "you have a new loyalty order",
                         "sound": "vip_tone0",
                         "title": "New loyalty order",
                         "data": orderId
                         //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                     };
                     //data.message= userName + data.message;
                     pushNotifications.sendAndroidPushNotificationToSupplier(supplierDeviceToken, data, 0, function (err, result) {
                         console.log(".........errrrrrr.......", err, result);
                         if (err) {
                             console.log("err2", err);
                             cb(null)
                         }
                         else {
                             //console.log("push sent");
                             cb(null);
                         }
                     });
                 }
                 else {
                     var data = {
                         "status": 1,
                         "message": "you have a new loyalty order",
                         "sound": "vip_tone0",
                         "title": "New loyalty order",
                         "data": orderId
                         //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                     };
                     var path = "supplier";
                     var sound = "newOrder.mp3";
                     pushNotifications.sendIosPushNotification(supplierDeviceToken, data, path, sound, function (err, result) {
                         console.log(".........errrrrrr.......", err, result);
                         if (err) {
                             console.log("err2", err);
                             cb(null)
                         }
                         else {
                             //console.log("push sent");
                             cb(null);
                         }
                     })
                 }
             }
             else {
                 cb(null);
             }
 
 
             /!*
              else {
              var data = {
              "status": constant.pushNotificationStatus.ORDER_GENARTED,
              "message": constant.pushNotificationMessage.ORDER_GENARTED_ENGLISH,
              "data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate}
              }
 
              message = data.message;
 
              pushNotifications.sendIosPushNotification(deviceToken, data, message, function (err, result) {
              if (err) {
              console.log("err3",err)
              cb(null)
              }
              else {
              cb(null);
              }
              });
              }
              *!/
 
         }],
         sendBranchPushNotification: ['getSupplierDetails', function (cb) {
             console.log("device11..",supplierBranchDeviceType,supplierBranchDeviceToken);
             if(supplierBranchDeviceToken.length){
                 if (supplierBranchDeviceType == 0) {
                     var data = {
                         "status": 1,
                         "message":"you have a new order",
                         "sound":"vip_tone0",
                         "title":"New loyalty order",
                         "data":orderId
                         //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                     };
                     //data.message= userName + data.message;
                     pushNotifications.sendAndroidPushNotificationToSupplier(supplierBranchDeviceToken,data,1,function (err, result) {
                         console.log(".........errrrrrr.......",err,result);
                         if (err) {
                             console.log("err2",err);
                             cb(null)
                         }
                         else {
                             //console.log("push sent");
                             cb(null);
                         }
                     });
                 }
                 else {
                     var data = {
                         "status": 1,
                         "message":"you have a new order",
                         "sound":"vip_tone0",
                         "title":"New loyalty order",
                         "data":orderId
                         //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                     };
                     var path ="branch";
                     var sound = "ping.aiff";
                     pushNotifications.sendIosPushNotification(supplierBranchDeviceToken,data,path,sound,function (err, result) {
                         console.log(".........errrrrrr.......",err,result);
                         if (err) {
                             console.log("err2",err);
                             cb(null)
                         }
                         else {
                             //console.log("push sent");
                             cb(null);
                         }
                     })
                 }
             }
             else {
                 cb(null)
             }
 
 
             /!*
              else {
              var data = {
              "status": constant.pushNotificationStatus.ORDER_GENARTED,
              "message": constant.pushNotificationMessage.ORDER_GENARTED_ENGLISH,
              "data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate}
              }
 
              message = data.message;
 
              pushNotifications.sendIosPushNotification(deviceToken, data, message, function (err, result) {
              if (err) {
              console.log("err3",err)
              cb(null)
              }
              else {
              cb(null);
              }
              });
              }
              *!/
 
         }],*/
    }, function (err, result) {
        // console.log(".....................getProduct......................",err,result);

        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(orderId, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

var getProudct = function (dbName, reply, productList, languageId, deviceType, callback) {
    var data = [];
    logger.debug("=================product list=============", typeof productList)
    if (deviceType == 1) {
        productList = JSON.parse(productList);
    }
    var array = JSON.parse("[" + productList + "]");
    logger.debug("=================product list=============", typeof array)
    var len = productList.length;
    //console.log("productList.......................................",productList);
    //console.log("len......................................................",len);
    for (var i = 0; i < len; i++) {
        (function (i) {
            var sql = " select pi.image_path,pml.name,pml.product_desc from product_ml pml join product_image pi on pml.product_id = " +
                "pi.product_id where pml.product_id = ? and (pi.default_image = ? or pi.imageOrder =1) and pml.language_id = ? ";
            var stmt = multiConnection[dbName].query(sql, [productList[i], 1, languageId], function (err, result) {
                logger.debug("=========get product function==================", stmt.sql, err, result);
                //   console.log("..............................products..........details.....................",err,result);
                if (err) {
                    var msg = "db error";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    if (result.length) {
                        data.push({ product_id: productList[i], name: result[0].name, product_desc: result[0].product_desc, image: result[0].image_path });
                        if (i == (len - 1)) {
                            callback(null, data);
                        }
                    } else {
                        callback(null, data);
                    }
                }
            })
        }(i));
    }
}

var insertLoyaltyProduct = function (dbName, reply, product_data, orderId, callback) {

    var list = product_data;
    var queryString = "(?,?,?,?,?),";
    var insertString = " ";
    var values = [];
    var lengthData = product_data.length;
    for (var i = 0; i < lengthData; i++) {
        (function (i) {
            values.push(product_data[i].product_id, product_data[i].product_desc, orderId, product_data[i].image, product_data[i].name);
            insertString = insertString + queryString;
        }(i));
        if (i == (lengthData - 1)) {
            console.log(".......product_data *****************************...........", insertString);

            insertString = insertString.substring(0, insertString.length - 1);
            console.log(".......product_data *****************************...........", insertString);
            console.log(".......product_data ***************values**************...........", values);

            var sql = "insert into loyalty_order_product(product_id,product_desc,loyalty_order_id,image_path,product_name) values " + insertString;
            multiConnection[dbName].query(sql, values, function (err, result) {
                // console.log("......................insert loyalotuy points ..........................",err,result);
                if (err) {
                    var msg = "db error";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    callback(null);
                }
            })
        }
    }
}


exports.changeLocation = function (request, reply) {
    var languageId;
    var areaId;
    var zoneId;
    var countryId;
    var cityId;
    var locations = {};
    async.auto({
        getValue: function (callback) {
            if (!(request.body.cityId)) {
                var msg = "city Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.countryId)) {
                var msg = "country  Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.zoneId)) {
                var msg = "zone Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.areaId)) {
                var msg = "area Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            languageId = request.body.languageId;
            areaId = request.body.areaId;
            zoneId = request.body.zoneId;
            countryId = request.body.countryId;
            cityId = request.body.cityId;
            callback(null);
        },
        getCountry: ['getValue', function (callback) {
            var sql = "select name,country_id from country_ml where language_id = ? and country_id = ?";
            multiConnection[dbName].query(sql, [languageId, countryId], function (err, result) {
                if (err) {
                    var msg = "db error";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    locations.country_name = result[0].name;
                    locations.country_id = result[0].country_id;
                    callback(null, result);
                }
            })
        }],
        getCity: ['getValue', function (callback) {
            var sql = "select name,city_id from city_ml where language_id = ? and city_id = ?";
            multiConnection[dbName].query(sql, [languageId, cityId], function (err, result) {
                if (err) {
                    var msg = "db error";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    locations.city_name = result[0].name;
                    locations.city_id = result[0].city_id;
                    callback(null, result);
                }
            })
        }],
        getZone: ['getValue', function (callback) {
            var sql = "select name,zone_id from zone_ml where language_id = ? and zone_id = ?";
            multiConnection[dbName].query(sql, [languageId, zoneId], function (err, result) {
                if (err) {
                    var msg = "db error";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    locations.zone_name = result[0].name;
                    locations.zone_id = result[0].zone_id;
                    callback(null, result);
                }
            })
        }],
        getArea: ['getValue', function (callback) {
            var sql = "select name,area_id from area_ml where language_id = ? and area_id = ?";
            multiConnection[dbName].query(sql, [languageId, areaId], function (err, result) {
                if (err) {
                    var msg = "db error";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    locations.area_name = result[0].name;
                    locations.area_id = result[0].area_id;
                    callback(null, result);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(locations, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.conformOrder = function (request, reply) {
    var languageId;
    var accessToken;
    var userId;
    var orderId;
    var msg = {};
    var deviceToken, deviceType, userName, deliveryDate, supplierId, supplierEmail;
    var building, houseNumber, payment_type, schedule_date, supplierPhone, branchToken, branchDeviceType, net_amount, supplierName, created_on, mobileNumber, area, landmark, address_link;

    async.auto({
        getValue: function (callback) {
            if (!(request.body.languageId)) {
                var msg = "language Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.accessToken)) {
                var msg = "accessToken not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.orderId)) {
                var msg = "order Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            languageId = request.body.languageId;
            accessToken = request.body.accessToken;
            orderId = request.body.orderId;
            callback(null);
        },
        getId: ['getValue', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        orderConform: ['getId', function (callback) {
            var sql = "update orders set status = ? where id = ? ";
            multiConnection[dbName].query(sql, [0, orderId], function (err, result) {
                if (err) {
                    msg = "some thing went wrong ";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    if (languageId == 14) {
                        msg.msg = "Your order has been sucessfully created";
                        callback(null);
                    } else {
                        msg.msg = "Your order has been sucessfully created";
                        callback(null);
                    }
                }
            })
        }],
        notificationData: ['orderConform', function (callback) {
            getvalues(request.dbName, reply, orderId, function (err, values) {
                //   console.log(".....val.....",values);
                if (err) {
                    sendResponse.somethingWentWrongError(res);
                }
                else {
                    deviceToken = values.device_token;
                    deviceType = values.device_type;
                    userName = values.user_name;
                    deliveryDate = values.delivery_date;
                    supplierEmail = values.email;
                    supplierPhone = values.phone;
                    branchToken = values.branch_token;
                    branchDeviceType = values.branch_device_type;
                    supplierId = values.supplier_id;
                    net_amount = values.net_amount;
                    supplierName = values.supplierName;
                    mobileNumber = values.mobileNumber;
                    area = values.area;
                    landmark = values.landmark;
                    address_link = values.address_link;
                    created_on = moment(values.created_on).format('YYYY-MM-DD HH:mm');
                    schedule_date = moment(values.schedule_date).format('YYYY-MM-DD HH:mm');

                    callback(null);
                }
            });
        }],
        sendPushNotification: ['notificationData', function (cb) {
            console.log("device..", deviceType, deviceToken);
            if (deviceToken.length) {
                if (deviceType == 0) {
                    var data = {
                        "status": 1,
                        "message": "you have received a new order",
                        "sound": "vip_tone0",
                        "title": "New order",
                        "data": orderId
                        //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                    };
                    //data.message= userName + data.message;
                    pushNotifications.sendAndroidPushNotificationToSupplier(deviceToken, data, 0, function (err, result) {
                        console.log(".........errrrrrr.......", err, result);
                        if (err) {
                            console.log("err2", err);
                            cb(null)
                        }
                        else {
                            //console.log("push sent");
                            cb(null);
                        }
                    });
                }
                else {
                    var data = {
                        "status": 1,
                        "message": "you have received a new order",
                        "sound": "newOrder.mp3",
                        "title": "New Order",
                        "data": orderId
                        //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                    };
                    var path = "supplier";
                    var sound = "newOrder.mp3";
                    pushNotifications.sendIosPushNotification(deviceToken, data, path, sound, function (err, result) {
                        console.log(".........errrrrrr.......", err, result);
                        if (err) {
                            console.log("err2", err);
                            cb(null)
                        }
                        else {
                            //console.log("push sent");
                            cb(null);
                        }
                    })
                }
            }
            else {
                cb(null);
            }


            /*
             else {
             var data = {
             "status": constant.pushNotificationStatus.ORDER_GENARTED,
             "message": constant.pushNotificationMessage.ORDER_GENARTED_ENGLISH,
             "data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate}
             }

             message = data.message;

             pushNotifications.sendIosPushNotification(deviceToken, data, message, function (err, result) {
             if (err) {
             console.log("err3",err)
             cb(null)
             }
             else {
             cb(null);
             }
             });
             }
             */

        }],
        sendBranchPushNotification: ['notificationData', function (cb) {
            console.log("device11..", branchDeviceType, branchToken);
            if (branchToken.length) {
                if (branchDeviceType == 0) {
                    var data = {
                        "status": 1,
                        "message": "you have received a new order",
                        "sound": "vip_tone0",
                        "title": "New Order",
                        "data": orderId
                        //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                    };
                    //data.message= userName + data.message;
                    pushNotifications.sendAndroidPushNotificationToSupplier(branchToken, data, 1, function (err, result) {
                        console.log(".........errrrrrr.......", err, result);
                        if (err) {
                            console.log("err2", err);
                            cb(null)
                        }
                        else {
                            //console.log("push sent");
                            cb(null);
                        }
                    });
                }
                else {
                    var data = {
                        "status": 1,
                        "message": "you have received a new order",
                        "sound": "newOrder.mp3",
                        "title": "Confirm Order",
                        "data": orderId
                        //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
                    };
                    var path = "supplier";
                    var sound = "newOrder.mp3";
                    pushNotifications.sendIosPushNotification(branchToken, data, path, sound, function (err, result) {
                        console.log(".........errrrrrr.......", err, result);
                        if (err) {
                            console.log("err2", err);
                            cb(null)
                        }
                        else {
                            //console.log("push sent");
                            cb(null);
                        }
                    })
                }
            }
            else {
                cb(null)
            }


            /*
             else {
             var data = {
             "status": constant.pushNotificationStatus.ORDER_GENARTED,
             "message": constant.pushNotificationMessage.ORDER_GENARTED_ENGLISH,
             "data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate}
             }

             message = data.message;

             pushNotifications.sendIosPushNotification(deviceToken, data, message, function (err, result) {
             if (err) {
             console.log("err3",err)
             cb(null)
             }
             else {
             cb(null);
             }
             });
             }
             */

        }],
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(msg, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.test = function (request, reply) {
    /* sms.send('text message', '+919780088660');*/
}


const checkUserCards = (dbName, user_id, card_source) => {
    return new Promise(async (resolve, reject) => {
        let query = "select * from user_cards where user_id=? and card_source=? and is_deleted=0";
        let params = [user_id, card_source]
        let result = await ExecuteQ.Query(dbName, query, params);
        if (result && result.length > 0) {
            resolve(result)
        } else {
            resolve([])
        }
    })
}


var checkTrackingOrder = function (reply, userId, orderId, callback) {
    var date1 = moment().utcOffset(4);
    var date = date1._d
    var date = moment(date).format('YYYY-MM-DD HH:mm');
    console.log("..........", date);
    var sql = "select o.schedule_order, o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.service_date,o.remarks,o.delivered_on,o.created_on,op.price " +
        " ,op.product_name,op.product_desc,op.image_path from orders o join order_prices op " +
        " on o.id = op.order_id where o.user_id = ? and (o.status = ? or o.status = ? or o.status = ? " +
        " or o.status = ?) and o.schedule_date < ? and o.id = ?";
    multiConnection[dbName].query(sql, [userId, 0, 1, 3, 4, date, orderId], function (err, result) {
        if (err) {
            console.log("...err..", err);
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            if (result.length) {
                // console.log("res....",result);
                callback(null, result);
            } else {
                var msg = "Current time not cross delivery time";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }
    })
}

var updateOrderStatus = function (dbName, reply, status, orderId, callback) {
    var sql = "update orders set status = ? where id = ? ";
    multiConnection[dbName].query(sql, [status, orderId], function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            if (result.affectedRows) {
                callback(null, result);
            } else {
                var msg = "Some thing went wrong";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }
        }
    })

}

var supplierCategory = async function (dbName, reply, supplierId, languageId, callback) {
    try {
        var sql = "select sc.supplier_id as id,c.image,c.supplier_placement_level,sc.category_id,IF(EXISTS(select categories.id from categories where parent_id=sc.category_id limit 1),1,0) as is_subcategory,cml.name as category_name,cml.description,c.order,c.category_flow from supplier_category sc join categories_ml cml on sc.category_id = cml.category_id " +
            " join categories c on c.id = sc.category_id " +
            " where sc.supplier_id = " + supplierId + " and cml.language_id = " + languageId + " GROUP BY c.id";
        let result = await ExecuteQ.Query(dbName, sql, []);
        callback(null, result);
    }
    catch (Err) {
        var msg = "db error";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }

    //   let stmt=multiConnection[dbName].query(sql, [supplierId,languageId], function (err, result) {
    //     // logger.debug("=========>",stmt.sql)
    //     if (err) {
    //         var msg = "db error";
    //         sendResponse.sendErrorMessage(msg, reply, 500);
    //     } else {

    //     }
    // })
}

var supplierAreaCategory = function (dbName, reply, supplierId, languageId, area, callback) {
    var sql = "select c.supplier_placement_level,sc.category_id,cml.name as category_name,cml.description,c.order,c.category_flow " +
        " from supplier_category sc join categories_ml cml on sc.category_id = cml.category_id " +
        " join categories c on c.id = sc.category_id join supplier s on sc.supplier_id = s.id join supplier_branch sb " +
        " on sb.supplier_id = s.id join supplier_branch_delivery_areas sbda on sbda.supplier_branch_id = sb.id" +
        " where sc.supplier_id = ? and cml.language_id = ? and sbda.area_id  = ? GROUP BY c.id";
    multiConnection[dbName].query(sql, [supplierId, languageId, area], function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })
}



var getNotification = async function (dbName, reply, userId, limit, skip, callback) {

    try {
        limit = parseInt(limit)
        skip = parseInt(skip)
        let sql = "SELECT temp.*,s.user_created_id as supplier_user_created_id,s.name as supplier_name,s.logo as supplier_logo,s.id as supplier_id FROM ( select pn.supplier_id,pn.notification_type,pn.created_on,pn.notification_status,pn.is_read,pn.order_id,pn.notification_message " +
            " ,pn.id from push_notifications pn where pn.user_id = ? and pn.is_deleted = ? and pn.is_admin=0 and pn.is_supplier=0 order by pn.created_on desc limit ? offset ? ) as temp left join supplier s on s.id = temp.supplier_id";
        let sql2 = " select COUNT(*) as totalNotificattion from push_notifications pn left join supplier s on s.id = pn.supplier_id where pn.user_id = ? and pn.is_deleted = ? and pn.is_admin=0 and pn.is_supplier=0 order by pn.created_on desc ";
        let result = await ExecuteQ.Query(dbName, sql, [userId, 0, limit, skip])
        let count = 0;
        let total = await ExecuteQ.Query(dbName, sql2, [userId, 0])
        if (total && total.length > 0) {
            count = total[0].totalNotificattion
        }
        let final = {
            list: result,
            count: count
        }
        callback(null, final);
    }
    catch (Err) {
        logger.debug("====getNotification==>>", Err)
        var msg = "db error";
        sendResponse.sendErrorMessage(msg, reply, 500);

    }


}

var getAdminNotification = function (dbName, reply, userId, limit, skip, callback) {
    var sql = "select temp.*,s.name as supplier_name,s.logo,s.longitude,IFNULL(ors.status,-1) as status from ( select pn.supplier_id,pn.created_on,pn.notification_status,pn.is_read,pn.order_id,pn.notification_message " +
        " ,pn.id from push_notifications pn where   pn.is_deleted = ? and pn.is_admin=?   order by pn.id DESC limit ? offset ?) as temp join supplier s on s.id = temp.supplier_id left join orders ors on ors.id=temp.order_id ";

    var sql2 = " select * from ( select COUNT(*) as totalNotificaiont,pn.* from push_notifications pn where   pn.is_deleted = ? and pn.is_admin=?  order by pn.id DESC ) as temp join supplier s on s.id = temp.supplier_id left join orders ors on ors.id=temp.order_id";

    let stmt = multiConnection[dbName].query(sql, [0, 1, limit, skip], async function (err, result) {
        logger.debug("==========stmt=========", stmt.sql)
        if (err) {
            logger.debug("============err======", err)
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            let count = 0;
            let total = await ExecuteQ.Query(dbName, sql2, [0, 1])
            if (total && total.length > 0) {
                count = total[0].totalNotificaiont
            }
            let final = {
                list: result,
                count: count
            }
            callback(null, final);
        }
    })
}

var getSupplierNotification = function (dbName, reply, userId, limit, skip, callback) {
    var sql = " select pn.created_on,s.logo,pn.notification_status,pn.is_read,pn.order_id,pn.notification_message " +
        " ,pn.id from push_notifications pn join supplier s on s.id = pn.supplier_id where pn.user_id = ? and pn.is_deleted = ? and pn.is_supplier=?  order by pn.created_on desc limit ? offset ?";

    var sql2 = " select pn.created_on,s.logo,pn.notification_status,pn.is_read,pn.order_id,pn.notification_message " +
        " ,pn.id from push_notifications pn join supplier s on s.id = pn.supplier_id where pn.user_id = ? and pn.is_deleted = ? and pn.is_supplier=? ";

    multiConnection[dbName].query(sql, [userId, 0, 1, limit, skip], async function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            console.log(".......result..........", result);
            let count = 0;
            let total = await ExecuteQ.Query(dbName, sql2, [userId, 0, 1])
            if (total && total.length > 0) {
                count = total.length
            }
            let final = {
                list: result,
                count: count
            }
            callback(null, final);
        }
    })
}

var clearNotification = function (dbName, reply, userId, callback) {
    var sql = "update push_notifications set is_deleted = ?  where user_id = ? ";
    multiConnection[dbName].query(sql, [1, userId], function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })
}

var clearOneNotification = function (dbName, reply, notificationId, userId, callback) {
    var sql = "update push_notifications set is_deleted = ? where user_id = ? and id = ? ";
    multiConnection[dbName].query(sql, [1, userId, notificationId], function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })
}

var markUnFav = function (dbName, reply, userId, supplierId, callback) {
    var sql = " DELETE from user_favourite where supplier_id = ? and user_id = ? ";
    multiConnection[dbName].query(sql, [supplierId, userId], function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })
}


var promotionAddProductInCart = function (reply, productList, cartId, callback) {
    var len = productList.length;
    for (var i = 0; i < len; i++) {
        (function (i) {
            getPromotionProduct(request.dbName, reply, productList[i], function (err, result) {
                if (err) {
                    var msg = "db error";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {

                }
            })
        }(i))
    }
}



exports.testing = function (request, reply) {
    //console.log("request.file",request.files.remarksImage);
}


exports.forgetPassword = function (request, reply) {


    console.log("..........................request............forget..", request.body);
    var emailId;
    var mobileNo;
    var countryCode;
    var password;

    let lang = request.headers["accept-language"] != undefined ? request.headers["accept-language"] : "en";

    async.auto({
        getValue: function (callback) {
            if (!(request.body.emailId)) {
                var msg = "emailId not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            emailId = request.body.emailId;



            callback(null);
        },
        checkEmail: ['getValue', async function (callback) {
            try {
                var sql = "select id,firstname,fb_access_token,apple_id,google_access_token from user where email = ?";
                let result = await ExecuteQ.Query(request.dbName, sql, [emailId])
                // multiConnection[request.dbName].query(sql, [emailId], function (err, result) {
                //     if (err) {
                //         var msg = "db error";
                //         sendResponse.sendErrorMessage(msg, reply, 500);
                //     } else {
                if (result.length) {
                    let fbToken = result[0].fb_access_token || ""
                    let appleId = result[0].apple_id || ""
                    let googleToken = result[0].google_access_token || ""

                    if (fbToken !== "") {
                        var msg =
                            " You must login through social login ";
                        sendResponse.sendErrorMessage(msg, reply, 400);
                    } else if (appleId !== "") {
                        var msg =
                            " You must login through social login ";
                        sendResponse.sendErrorMessage(msg, reply, 400);
                    } else if (googleToken !== "") {
                        var msg =
                            " You must login through social login ";
                        sendResponse.sendErrorMessage(msg, reply, 400);
                    } else {
                        callback(null, result);
                    }

                    //apple_id
                    //fb_access_token
                    //google_access_token
                    //mobileNo = result[0].mobile_no;
                    //countryCode =result[0].country_code;

                    // callback(null, result);
                } else {
                    var msg = "The email you have entered is not registered with us";
                    sendResponse.sendErrorMessage(msg, reply, 400);
                }
                //     }
                // });
            }
            catch (Err) {
                var msg = "db error";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }

        }],
        generatePassword: ['checkEmail', function (callback) {
            func.generateRandomString(function (err, result) {
                if (err) {
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    password = result;
                    callback(null);
                }
            })
        }],
        sendPassword: ['generatePassword', async function (callback) {
            let smtpSqlSata = await Universal.smtpData(request.dbName);
            var subject = request.business_name != undefined && request.business_name != "" ? request.business_name : "royo";
            // var content = "You seem to have forgotten your password. New Details are : \n\n";
            // content+="Email : "+emailId +" \n";
            // content+="Password : "+password +" \n";
            // content+="Thank You \n";
            // content+="\n\n"

            // content+="Team "+subject+" \n";
            emailTemp.userResetpassword(request, reply, emailId, password, lang,
                function (err, result) {
                    console.log(result, "email___________result")
                    if (err) {
                        console.log("..****register email*****....", err);
                    }
                });
            callback(null)
        }],
        updateDb: ['sendPassword', async function (callback) {
            try {
                var sql = "update user set password = ? where email = ?";
                let result = await ExecuteQ.Query(request.dbName, sql, [md5(password), emailId])
                // multiConnection[request.dbName].query(sql, [md5(password),emailId], function (err, result) {
                //     if (err) {
                //         var msg = "db error";
                //         sendResponse.sendErrorMessage(msg, reply, 500);
                //     } else {
                callback(null, result);
                //     }
                // })
            }
            catch (Err) {
                var msg = "db error";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }

        }]
    }, function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            sendResponse.sendSuccessData({ message: "" }, constant.responseMessage.SUCCESS_FORGOT, reply, 200);
        }
    })
}

exports.forgetPasswordByPhone = function (request, reply) {


    console.log("..........................request............forget..", request.body);
    var emailId;
    var mobileNo;
    var countryCode;
    var password;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.mobileNo)) {
                var msg = "Mobile Number not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.countryCode)) {
                var msg = "Country Code not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            mobileNo = request.body.mobileNo;
            countryCode = request.body.countryCode;

            callback(null);
        },
        checkEmail: ['getValue', async function (callback) {
            try {
                var sql = "select id,firstname from user where mobile_no = ? and country_code=?";
                let result = await ExecuteQ.Query(request.dbName, sql, [mobileNo, countryCode])
                // multiConnection[request.dbName].query(sql, [emailId], function (err, result) {
                //     if (err) {
                //         var msg = "db error";
                //         sendResponse.sendErrorMessage(msg, reply, 500);
                //     } else {
                if (result.length) {
                    //mobileNo = result[0].mobile_no;
                    //countryCode =result[0].country_code;
                    callback(null, result);
                } else {
                    var msg = "The Mobile Number you have entered is not registered with us";
                    sendResponse.sendErrorMessage(msg, reply, 400);
                }
                //     }
                // });
            }
            catch (Err) {
                var msg = "db error";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }

        }],
        generatePassword: ['checkEmail', function (callback) {
            func.generateRandomString(function (err, result) {
                if (err) {
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    password = result;
                    callback(null);
                }
            })
        }],
        sendPassword: ['generatePassword', async function (callback) {

            let twilioata = await Universal.getTwilioData(request.dbName);
            let twilioAuthyData = await Universal.getTwilioAuthyData(request.dbName);
            let OtpVerification = await Universal.disableOtpVerification(request.dbName);
            let muthofunData = await Universal.getMuthoFunData(request.dbName);
            let bandWidthData = await Universal.getBandwidthData(request.dbName);
            let semaphoreData = await Universal.getSemaPhoreData(request.dbName);
            let safapaydata = await Universal.getSafaSmsPayKey(request.dbName);

            let message = ` You are forgot your password, your new password is : ${password} `

            console.log("=========TWilio==DATA!=========>>", twilioata, Object.keys(twilioata).length);

            if (Object.keys(muthofunData).length > 0) {
                var options = {
                    method: 'GET',
                    url: "http://clients.muthofun.com:8901/esmsgw/sendsms.jsp?user=" + muthofunData["muthofun_username"] + "&password=" + muthofunData["muthofun_password"] + "&mobiles=" + countryCode + mobileNumber.toString() + "&sms=" + message + "&unicode=1"
                };
                web_request(options, function (err, body) {
                    logger.debug("==muthofun===Err===", err)
                    callback(null);
                })

            }
            else if (Object.keys(twilioAuthyData).length > 0 &&
                parseInt(twilioAuthyData.is_twilio_authy_enable) === 1) {

                let authyData = {
                    email: userDetail.email,
                    phone: mobileNumber,
                    country_code: countryCode,
                };
                console.log("$$$$$$$$$$", authyData);
                let userAuthy = await smsManager.createAuthyUser(
                    twilioAuthyData.authy_production_key,
                    authyData
                );
                console.log("Authy wala user", userAuthy);

                if (userAuthy) {
                    twilio_authy_id = userAuthy.user.id;
                }

                let sendOtp = await smsManager.sendToken(
                    twilioAuthyData.authy_production_key,
                    userAuthy.user.id
                );
                console.log("&&&&&&&&&&", sendOtp);
                callback(null);

            } else if (Object.keys(bandWidthData).length > 0) {
                await smsManager.bandwidth(
                    "Hi there, Your One Time Password for " + request.business_name + " is : " + otp,
                    countryCode + mobileNumber.toString().replace(/\s/g, ''),
                    bandWidthData.bandwidth_basic_auth_user_name,
                    bandWidthData.bandwidth_basic_auth_password,
                    bandWidthData.bandwidth_application_id,
                    bandWidthData.bandwidth_user_id,
                    bandWidthData.bandwidth_from_number
                )
                callback(null);

            }
            else if (Object.keys(semaphoreData).length > 0) {
                await Universal.sendSemaphoreMessage(
                    semaphoreData.semaphore_apikey,
                    semaphoreData.semaphore_sendername,
                    message,
                    mobileNumber.toString().replace(/\s/g, '')
                )
                callback(null);
            } else if (Object.keys(safapaydata).length > 0) {
                await smsManager.sendSafaPaySms(message);
                callback(null);
            }
            else {
                if (Object.keys(twilioata).length > 0) {
                    var client = require('twilio')(twilioata[config.get("twilio.s_id")], twilioata[config.get("twilio.auth_key")]);
                    var smsOptions = {
                        from: twilioata[config.get("twilio.number_key")],
                        to: countryCode + mobileNumber.toString().replace(/\s/g, ''),
                        body: "Hi there, Your One Time Password for " + request.business_name + " is : " + otp
                    };
                    logger.debug("=====smsOptions=>>==", smsOptions)
                    client.messages.create(smsOptions, function (err, message) {
                        console.log("=========Twilio==ER!==", err, message)

                    });
                    callback(null);
                }
                else {
                    otp = 12345;
                    callback(null);
                }
            }
        }],
        updateDb: ['sendPassword', async function (callback) {
            try {
                var sql = "update user set password = ? where email = ?";
                let result = await ExecuteQ.Query(request.dbName, sql, [md5(password), emailId])
                // multiConnection[request.dbName].query(sql, [md5(password),emailId], function (err, result) {
                //     if (err) {
                //         var msg = "db error";
                //         sendResponse.sendErrorMessage(msg, reply, 500);
                //     } else {
                callback(null, result);
                //     }
                // })
            }
            catch (Err) {
                var msg = "db error";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }

        }]
    }, function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            sendResponse.sendSuccessData({ message: "" }, constant.responseMessage.SUCCESS_FORGOT, reply, 200);
        }
    })
}

exports.forgetPasswordByPhone = function (request, reply) {


    console.log("..........................request............forget..", request.body);
    var emailId;
    var mobileNumber;
    var countryCode;
    var password;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.mobileNo)) {
                var msg = "Mobile Number not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            if (!(request.body.countryCode)) {
                var msg = "Country Code not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            mobileNumber = request.body.mobileNo;
            countryCode = request.body.countryCode;

            callback(null);
        },
        checkEmail: ['getValue', async function (callback) {
            try {
                var sql = "select id,firstname from user where mobile_no = ? and country_code=?";
                let result = await ExecuteQ.Query(request.dbName, sql, [mobileNumber, countryCode])
                // multiConnection[request.dbName].query(sql, [emailId], function (err, result) {
                //     if (err) {
                //         var msg = "db error";
                //         sendResponse.sendErrorMessage(msg, reply, 500);
                //     } else {
                if (result && result.length > 0) {
                    //mobileNo = result[0].mobile_no;
                    //countryCode =result[0].country_code;
                    callback(null, result);
                } else {
                    var msg = "The Mobile Number you have entered is not registered with us";
                    sendResponse.sendErrorMessage(msg, reply, 400);
                }
                //     }
                // });
            }
            catch (Err) {
                var msg = "db error";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }

        }],
        generatePassword: ['checkEmail', function (callback) {
            func.generateRandomString(function (err, result) {
                if (err) {
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    password = result;
                    callback(null);
                }
            })
        }],
        sendPassword: ['generatePassword', async function (callback) {

            let twilioata = await Universal.getTwilioData(request.dbName);
            let twilioAuthyData = await Universal.getTwilioAuthyData(request.dbName);
            let OtpVerification = await Universal.disableOtpVerification(request.dbName);
            let muthofunData = await Universal.getMuthoFunData(request.dbName);
            let bandWidthData = await Universal.getBandwidthData(request.dbName);
            let semaphoreData = await Universal.getSemaPhoreData(request.dbName);
            let safapaydata = await Universal.getSafaSmsPayKey(request.dbName);

            let message = ` You are forgot your password, your new password is : ${password} `

            console.log("=========TWilio==DATA!=========>>", twilioata, Object.keys(twilioata).length);

            if (Object.keys(muthofunData).length > 0) {

                var options = {
                    method: 'GET',
                    url: "http://clients.muthofun.com:8901/esmsgw/sendsms.jsp?user=" + muthofunData["muthofun_username"] + "&password=" + muthofunData["muthofun_password"] + "&mobiles=" + countryCode + mobileNumber.toString() + "&sms=" + message + "&unicode=1"
                };
                web_request(options, function (err, body) {
                    logger.debug("==muthofun===Err===", err)
                    callback(null);
                })

            }

            else if (Object.keys(twilioAuthyData).length > 0 &&
                parseInt(twilioAuthyData.is_twilio_authy_enable) === 1) {

                let authyData = {
                    email: "dummy@yopmail.com",
                    phone: mobileNumber,
                    country_code: countryCode,
                };
                console.log("$$$$$$$$$$", authyData);
                let userAuthy = await smsManager.createAuthyUser(
                    twilioAuthyData.authy_production_key,
                    authyData
                );
                console.log("Authy wala user", userAuthy);

                if (userAuthy) {
                    twilio_authy_id = userAuthy.user.id;
                }

                let sendOtp = await smsManager.sendToken(
                    twilioAuthyData.authy_production_key,
                    userAuthy.user.id
                );
                console.log("&&&&&&&&&&", sendOtp);
                callback(null);

            }

            else if (Object.keys(bandWidthData).length > 0) {
                await smsManager.bandwidth(
                    "Hi there, Your One Time Password for " + request.business_name + " is : " + password,
                    countryCode + mobileNumber.toString().replace(/\s/g, ''),
                    bandWidthData.bandwidth_basic_auth_user_name,
                    bandWidthData.bandwidth_basic_auth_password,
                    bandWidthData.bandwidth_application_id,
                    bandWidthData.bandwidth_user_id,
                    bandWidthData.bandwidth_from_number
                )
                callback(null);

            }

            else if (Object.keys(semaphoreData).length > 0) {
                await Universal.sendSemaphoreMessage(
                    semaphoreData.semaphore_apikey,
                    semaphoreData.semaphore_sendername,
                    message,
                    mobileNumber.toString().replace(/\s/g, '')
                )
                callback(null);
            } else if (Object.keys(safapaydata).length > 0) {
                await smsManager.sendSafaPaySms(message);
                callback(null);
            }
            else {
                if (Object.keys(twilioata).length > 0) {
                    var client = require('twilio')(twilioata[config.get("twilio.s_id")], twilioata[config.get("twilio.auth_key")]);
                    var smsOptions = {
                        from: twilioata[config.get("twilio.number_key")],
                        to: countryCode + mobileNumber.toString().replace(/\s/g, ''),
                        body: "Hi there, Your One Time Password for " + request.business_name + " is : " + password
                    };
                    logger.debug("=====smsOptions=>>==", smsOptions)
                    client.messages.create(smsOptions, function (err, message) {
                        console.log("=========Twilio==ER!==", err, message)

                    });
                    callback(null);
                }
                else {
                    otp = 12345;
                    callback(null);
                }
            }
        }],
        updateDb: ['sendPassword', async function (callback) {
            try {
                console.log("=========pwd======", password);
                var sql = "update user set password = ? where mobile_no = ? and country_code=?";
                let result = await ExecuteQ.Query(request.dbName, sql, [md5(password), mobileNumber, countryCode])
                // multiConnection[request.dbName].query(sql, [md5(password),emailId], function (err, result) {
                //     if (err) {
                //         var msg = "db error";
                //         sendResponse.sendErrorMessage(msg, reply, 500);
                //     } else {
                callback(null, result);
                //     }
                // })
            }
            catch (Err) {
                var msg = "db error";
                sendResponse.sendErrorMessage(msg, reply, 500);
            }

        }]
    }, function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.viewAllOffer = async function (request, reply) {
    var languageId, categoryId;
    var data;
    var latitude = request.body.latitude || 0.0;
    var longitude = request.body.longitude || 0.0;
    if (request.body.languageId) {
        languageId = request.body.languageId;
    } else {
        languageId = 0;
    }
    if (request.body.categoryId) {
        categoryId = request.body.categoryId;
    } else {
        categoryId = 0;
    }
    var user_id = 0;
    var service_type = await ExecuteQ.Query(request.dbName, "select app_type from screen_flow", []);

    let user_type_check = await Universal.getUserPriceType(request.dbName);
    logger.debug("=======user_type_check=========", user_type_check, user_type_check.length)
    var user_id = await GetUserId(request.headers.authorization, request.dbName)
    logger.debug("=======userrrrrrrr iddddddd=========", user_id)
    let user_details = await ExecuteQ.Query(request.dbName, "select * from user where id= ?", [user_id])
    let user_type_id = user_details && user_details.length > 0 ? user_details[0].user_type_id : 0
    if (user_type_id == undefined || user_type_id == "" || user_type_id == null || user_type_id == 0) {
        let user_type_details = await ExecuteQ.Query(request.dbName, "select * from user_types limit 1", []);
        logger.debug("============user_type_details------", user_type_details)
        if (user_type_details && user_type_details.length > 0) {
            user_type_id = user_type_details[0].id
        } else {
            user_type_id = 0
        }
    }

    let mUnit = await Universal.getMeausringUnit(request.dbName)
    let planQuery = "";
    let subScriptionData = await ExecuteQ.Query(request.dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])
    planQuery = subScriptionData && subScriptionData.length > 0 ? "and ss.status='active'" : ""
    let filter_by = request.query.filter_by !== undefined ? request.query.filter_by : 0

    async.auto({
        getValue: function (callback) {
            if (!(request.body.languageId)) {
                var msg = "languageId not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.latitude)) {
                var msg = "latitude not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.longitude)) {
                var msg = "longitude not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (request.headers.authorization != undefined && request.headers.authorization != "") {
                checkUserAccessToken(request.dbName, reply, request.headers.authorization, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        user_id = result.id;
                        callback(null);
                    }
                })
            }
            else {
                callback(null);
            }
        },
        getOfer: ['getValue', function (callback) {
            // getOffer(req.dbName,service_type[0].app_type,res,languageId,
            //     user_id,latitude,longitude,
            //     categoryId,service_type[0].app_type,user_type_check,
            //     user_type_id,
            //     function(err,result){
            //     if(err) {
            //         callback(err);
            //     }else{
            //         categoryArray.offerEnglish = result;
            //         // console.log("666=================",categoryArray.offerEnglish);
            //         callback(null);
            //     }
            // })



            getOffer(request, planQuery, mUnit, request.dbName, service_type[0].app_type, reply, languageId,
                user_id, latitude, longitude,
                categoryId, service_type[0].app_type, user_type_check,
                user_type_id, filter_by,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        data = result;
                        callback(null);
                    }
                })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            sendResponse.sendSuccessData({ list: data }, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

async function getOfer(dbName, res, lanuageId, latitude, longitude, callback) {
    let mUnit = await Universal.getMeausringUnit(dbName)
    var todayDate = new Date();
    /*
        var sql = "select fixed_price,handling_supplier,handling_admin,can_urgent,urgent_type,category_id,sub_category_id,supplier_id,price,offer_name,display_price,measuring_unit,product_desc,name,image_path,product_id,supplier_branch_id,delivery_charges,min_order,charges_below_min_order,supplier_name,supplier_image from ";
        sql += "( select pp.handling as handling_admin,pp.handling_supplier,pp.can_urgent,s.urgent_type,p.category_id,p.sub_category_id,sb.supplier_id,pp.price as fixed_price,pp.price,pp.offer_name,pp.display_price,pml.measuring_unit,pml.product_desc,pml.name,pi.image_path,p.id as product_id ,sbap.supplier_branch_id,sbap.delivery_charges,sbap.min_order,sbap.charges_below_min_order,s.name as supplier_name,s.logo as supplier_image" ;
        sql += " from supplier_branch_area_product sbap join product p on p.id = sbap.product_id join product_image pi on pi.product_id = p.id " ;
        sql +=  "join product_ml pml on pml.product_id = p.id join product_pricing pp on pp.product_id = p.id join supplier_branch sb  on sb.id = sbap.supplier_branch_id " +
            "join supplier s on s.id = sb.supplier_id join supplier_image si on si.supplier_id= sb.supplier_id where " ;
        sql +=  " pp.is_deleted = ? and sbap.is_deleted = 0 and p.is_live =1 and sb.is_live =1 and sb.is_deleted = 0 and " +
            " p.is_deleted=0 and pml.language_id = ? and s.is_live=1 and s.is_deleted =0 and si.is_deleted = 0 " +
            " and sbap.area_id = ? and pp.price_type = ? and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY pp.price_type DESC ) selection GROUP BY product_id LIMIT 5";
    */

    // var sql = "select fixed_price,handling_supplier,handling_admin,can_urgent,urgent_value,category_id,sub_category_id,supplier_id,price,offer_name,display_price,measuring_unit,product_desc,name,product_image,supplier_image,product_id,supplier_branch_id,delivery_charges,min_order,charges_below_min_order,supplier_name from " +
    //     "( select pp.handling as handling_admin,pp.handling_supplier,pp.can_urgent,pp.urgent_value,p.category_id,p.sub_category_id,sb.supplier_id,pp.price as fixed_price,pp.price,pp.offer_name,pp.display_price,pml.measuring_unit,pml.product_desc,pml.name,pi.image_path as product_image,p.id as product_id ,sbap.supplier_branch_id,sbap.delivery_charges,sbap.min_order,sbap.charges_below_min_order,s.name as supplier_name,s.logo as supplier_image" +
    //     " from supplier_branch_area_product sbap join product p on p.id = sbap.product_id join product_image pi on pi.product_id = p.id " +
    //     "join product_ml pml on pml.product_id = p.id join product_pricing pp on pp.product_id = p.id join supplier_branch sb  on sb.id = sbap.supplier_branch_id join supplier s on s.id= sb.supplier_id join supplier_image si on si.supplier_id=sb.supplier_id where " +
    //     " pp.is_deleted = ? and sbap.is_deleted = 0 and p.is_live =1 and sb.is_live =1 and sb.is_deleted = 0 and " +
    //     " p.is_deleted=0 and pml.language_id = ? and s.is_live=1 and s.is_deleted =0 and si.is_deleted = 0  " +
    //     " and sbap.area_id = ? and pp.price_type = ? and DATE(pp.start_date) <= CURDATE() and DATE(pp.end_date) >= CURDATE() ORDER BY pp.price_type DESC ) selection GROUP BY product_id";


    var sql = "select delivery_radius,fixed_price, handling_supplier, handling_admin, can_urgent, urgent_value, category_id, sub_category_id, supplier_id, price, offer_name, "
    sql += "display_price, measuring_unit, product_desc, name, product_image, supplier_image, product_id, supplier_branch_id, delivery_charges, min_order, "
    sql += "supplier_name,(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(latitude))* cos(radians(longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ") "
    sql += ")* sin(radians(latitude)))) AS distance from (select pp.handling as handling_admin, pp.handling_supplier, pp.can_urgent, pp.urgent_value, p.category_id, "
    sql += "p.sub_category_id, sb.supplier_id, pp.price as fixed_price, pp.price, pp.offer_name, pp.display_price, pml.measuring_unit, pml.product_desc, pml.name, "
    sql += "pi.image_path as product_image, p.id as product_id, sbp.supplier_branch_id, sb.delivery_charges, sb.min_order, s.name as supplier_name,s.delivery_radius, s.logo as supplier_image, "
    sql += "s.latitude, s.longitude from supplier_branch sb join supplier_branch_product sbp on sb.id = sbp.supplier_branch_id join supplier s on s.id = sb.supplier_id "
    sql += "join product p on p.id = sbp.product_id join product_image pi on pi.product_id = p.id join product_ml pml on pml.product_id = p.id join product_pricing pp on pp.product_id = p.id "
    sql += "join supplier_image si on si.supplier_id = sb.supplier_id where pp.is_deleted = 0 and sbp.is_deleted = 0 and p.is_live = 1 and sb.is_live = 1 and sb.is_deleted = 0 "
    sql += "and p.is_deleted = ? and pml.language_id = ? and s.is_live = 1 and s.is_deleted = 0 and si.is_deleted = 0 and pp.price_type = ? and DATE(pp.start_date) <= CURDATE() "
    sql += "and DATE(pp.end_date) >= CURDATE() ORDER BY pp.price_type DESC) selection GROUP BY product_id having distance<delivery_radius"




    multiConnection[dbName].query(sql, [0, lanuageId, 1], function (err, result) {
        if (err) {
            console.log("eeee", err);
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, result);
        }
    })
}

exports.changeProfile = function (request, reply) {
    var image;
    var accessToken;
    var profilePic;
    console.log("...req.body....", request.body)
    async.auto({
        getValue: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "accessToken not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            callback(null);
        },
        uploadImage: async function (callback) {
            if (request.files.profilePic) {
                var folder = "abc";
                profilePic = request.files.profilePic;
                let result = await uploadMgr.uploadImageFileToS3BucketNew(profilePic);
                image = result;
                callback(null)
                // func.uploadImageFileToS3BucketSupplier(reply,profilePic, folder, function(err,result){
                //     if(err){
                //         var msg = "db error :";
                //         return  sendResponse.sendErrorMessage(msg,reply,500);
                //     }else{
                //         image = result;
                //         callback(null)
                //     }
                // });
            } else {
                image = null;
                callback(null)
            }
        },
        uploadInDb: ['uploadImage', 'getValue', function (callback) {

            if (request.files.profilePic) {
                var sql = "update user set 	user_image = ? where access_token = ? ";
                multiConnection[request.dbName].query(sql, [image, accessToken], function (err, result) {
                    if (err) {
                        var msg = "something went wrong";
                        sendResponse.sendErrorMessage(msg, res, 500);
                    }
                    else {
                        callback(null, result);
                    }
                })
            } else {
                callback(null);
            }
        }]
    }, function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            sendResponse.sendSuccessData({ image: image }, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

async function getvalues(dbName, reply, order_id, callback) {
    try {
        console.log(order_id, "order iddddddd")
        var sql = "select u.email as user_email,sum(op.quantity) as quantity,o.user_service_charge, o.self_pickup,o.handling_admin,sbp.category_id,o.handling_supplier,o.urgent_price,o.delivery_charges,ua.pincode,ua.customer_address,IFNULL(CONCAT(ua.address_line_1,' ',ua.customer_address),'') AS customer_full_address,o.payment_type,o.schedule_date,ua.address_link,ua.landmark,ua.address_line_1,u.mobile_no,s.name as supplierName,o.created_on,o.net_amount,u.country_code,u.id as user_id,CONCAT(u.firstname,u.lastname) As user_name," +
            "s.phone,s.id,s.email,s.device_token,s.device_type,c.delivery_date,sb.device_token as branch_token,sb.device_type as branch_device_type,u.device_type as user_device_type from cart c join user u on u.id=c.user_id join " +
            "supplier_branch sb on sb.id=c.supplier_branch_id join supplier s on s.id = sb.supplier_id join orders o on o.cart_id = c.id left join user_address ua on ua.id =o.user_delivery_address join order_prices op on op.order_id = o.id  left join supplier_branch_product sbp on sbp.product_id=op.product_id where o.id = ?";
        let result = await ExecuteQ.Query(dbName, sql, [order_id]);
        // var satement=multiConnection[dbName].query(sql, [order_id], function (err, result){
        // //    console.log("===STATEMENT==",satement.sql)
        //     if (err) {
        //         console.log("err",err);
        //         var msg = "db error :";
        //         sendResponse.sendErrorMessage(msg, reply, 500);
        //     }
        //     else {
        logger.debug("res...", result);
        console.log(result, "result order date")
        var data = {
            "user_email": result[0].user_email,
            "supplier_id": result[0].id,
            "customer_full_address": result[0].customer_full_address,
            "device_token": result[0].device_token,
            "device_type": result[0].device_type,
            "user_id": result[0].user_id,
            "user_name": result[0].user_name,
            "delivery_date": result[0].delivery_date,
            "email": result[0].email,
            "phone": result[0].phone,
            "branch_token": result[0].branch_token,
            "branch_device_type": result[0].branch_device_type,
            "net_amount": result[0].net_amount,
            "created_on": result[0].created_on,
            "supplierName": result[0].supplierName,
            "user_service_charge": result[0].user_service_charge,
            "mobileNumber": result[0].mobile_no,
            "country_code": result[0].country_code,
            "area": result[0].address_line_1,
            "landmark": result[0].landmark,
            "address_link": result[0].address_link,
            "schedule_date": result[0].schedule_date,
            "payment_type": result[0].payment_type,
            "pincode": result[0].pincode,
            "customer_address": result[0].customer_address,
            "delivery_charges": result[0].delivery_charges,
            "handling_admin": result[0].handling_admin,
            "handling_supplier": result[0].handling_supplier,
            "urgent_price": result[0].urgent_price,
            "quantity": result[0].quantity,
            "userDeviceType": result[0].user_device_type,
            "user_email": result[0].user_email,
            "category_id": result[0].category_id,
            "self_pickup": result[0].self_pickup
        }
        callback(null, data);
        //     }
        // })
    }
    catch (Err) {
        logger.debug("==Err======>>", Err)
        var msg = "db error :";
        sendResponse.sendErrorMessage(msg, reply, 500);
    }

}

var getProductDetailHourly = function (dbName, res, cartId, productId, languageId, duration, callback) {
    console.log(".........p...........", productId);
    var flag = 1;
    var sql = "select pml.product_desc,pml.name,pml.measuring_unit,p.id,p.bar_code,p.sku,p.is_package,p.commission,p.commission_type,pi.image_path,pr.price, " +
        " pr.display_price , pr.handling , pr.handling_supplier,pr.delivery_charges,pr.can_urgent,pr.urgent_price,pr.urgent_type ,cp.quantity ,cp.supplier_branch_id, cp.handling_admin as cart_product_handling_admin ,cp.handling_supplier as cart_product_handling_supplier from product p join product_image pi on ";
    sql += " p.id = pi.product_id join product_ml pml on p.id = pml.product_id join product_pricing pr on p.id = pr.product_id  " +
        " join cart_products cp on cp.product_id = p.id  " +
        " where cp.cart_id = ? and  p.id = ? and pml.language_id = ? and p.is_live = 1 " +
        " and ((pr.price_type = '1' and DATE(pr.start_date) <= " +
        " CURDATE() and DATE(pr.end_date) >= CURDATE()) or (pr.price_type = 0)) and pr.is_deleted =0 ";
    var statement = multiConnection[dbName].query(sql, [cartId, productId, languageId], function (err, result) {
        console.log("result---", err, result, statement.sql)
        if (err) {
            var msg = "something went wrong";
            console.log(err);
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            if (!(result.length)) {
                console.log("====NOT==EQUAL==")
                var msg = "error while genrating order please genrate order again";
                sendResponse.sendErrorMessage(msg, res, 400);
            }
            else {
                console.log("...result[0].price......**********************************", result);
                var price = JSON.parse(result[0].price);
                console.log("price", price);
                if (price.length) {
                    var priceLength = price.length;
                    for (var i = 0; i < priceLength; i++) {
                        (function (i) {
                            console.log("jfsfs", i, flag);
                            if ((duration >= price[i].min_hour) && (duration <= price[i].max_hour)) {
                                result[0].price = parseInt(price[i].price_per_hour * result[0].quantity);
                                flag = 0;
                            }
                            if (i == (priceLength - 1)) {
                                if (flag == 1) {
                                    console.log("...if...")
                                    result[0].price = parseInt(price[i].price_per_hour * result[0].quantity);
                                }
                                callback(null, result);

                            }
                        }(i))
                    }
                }
                else {
                    callback(null, []);
                }

            }

        }
    })

}





exports.compareProduct = function (request, reply) {
    var skuCode;
    var languageId;
    var areaId;
    var data = [];
    var time = new Date()
    var time1 = new Date(time);
    time1.setMinutes(time.getMinutes() + 00);
    time1.setHours(time.getHours() + 4);
    var time2 = time1.toTimeString().split(" ")[0];
    var day = moment().isoWeekday();
    day = day - 1;
    var category = 0;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.skuCode)) {
                var msg = "sku not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.areaId)) {
                var msg = "areaId not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            skuCode = request.body.skuCode;
            languageId = request.body.languageId;
            areaId = request.body.areaId;
            callback(null);
        },
        SeachProduct: ['getValue', function (callback) {
            var sql = "select onOffComm,start_time,end_time,total_reviews,delivery_min_time,delivery_max_time,rating,status,payment_method,logo,pricing_type,hourly_price,fixed_price,handling_supplier,handling_admin,can_urgent,category_id,sub_category_id,supplier_id,price,offer_name,display_price,measuring_unit,product_desc,name,product_image,supplier_image,product_id,supplier_branch_id,delivery_charges,min_order,charges_below_min_order,supplier_name,price_type from " +
                "( select sc.onOffComm,s.total_reviews,s.delivery_min_time,s.delivery_max_time,s.rating,s.logo,st.is_open as status,st.start_time,st.end_time,s.payment_method,pp.pricing_type,pp.handling as handling_admin,pp.handling_supplier,pp.can_urgent,p.category_id,p.sub_category_id,sb.supplier_id,pp.price as fixed_price,pp.price as hourly_price,pp.price,pp.offer_name,pp.display_price,pml.measuring_unit,pml.product_desc,pml.name,pi.image_path as product_image,p.id as product_id ,sbap.supplier_branch_id,sbap.delivery_charges,sbap.min_order,sbap.charges_below_min_order,sml.name as supplier_name,s.logo as supplier_image,pp.price_type " +
                " from supplier_branch_area_product sbap join product p on p.id = sbap.product_id join product_image pi on pi.product_id = p.id " +
                " join product_ml pml on pml.product_id = p.id join product_pricing pp on pp.product_id = p.id join supplier_branch sb  on sb.id = sbap.supplier_branch_id join supplier s on s.id= sb.supplier_id " +
                "join supplier_timings st on st.supplier_id = s.id join supplier_ml sml on sml.supplier_id = s.id join supplier_category sc on sc.supplier_id = s.id join supplier_branch_delivery_areas sbda on sb.id = sbda.supplier_branch_id where " +
                " p.sku = ? and st.week_id = ? and p.is_live =1 and p.is_deleted = 0 and s.is_deleted = 0 and pp.is_deleted = ? and sb.is_deleted =0 and s.is_deleted = 0 and s.is_active =1 and s.is_live=1 and pml.language_id = ? and sml.language_id = ? and sbap.area_id = ?  and sbap.is_deleted = ? and ((pp.price_type = 1 and DATE(pp.start_date) <= CURDATE() and " +
                " DATE(pp.end_date) >= CURDATE()) or (pp.price_type = 0)) and sbda.area_id = ? order by pp.price_type DESC) selection GROUP BY price_type,supplier_name order by supplier_name ASC ";
            multiConnection[dbName].query(sql, [skuCode, day, 0, languageId, languageId, areaId, 0, areaId], function (err, result) {
                if (err) {
                    console.log("eeee", err);
                    var msg = "something went wrong";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if (result.length) {
                        for (var i = 0; i < result.length; i++) {
                            (function (i) {
                                if (result[i].pricing_type == 0) {
                                    delete result[i].pricing_type;
                                    delete result[i].hourly_price
                                    result[i].price_type = 0;
                                } else {
                                    delete result[i].pricing_type;
                                    result[i].hourly_price = JSON.parse(result[i].hourly_price);
                                    result[i].price_type = 1;
                                    delete result[i].fixed_price
                                    result[i].display_price = 0;

                                }
                                if (result[i].status == 1) {
                                    if (result[i].start_time <= time2 && result[i].end_time >= time2) {
                                        result[i].status = 1;
                                    }
                                    else {
                                        result[i].status = 0;
                                    }
                                }
                                if (i == result.length - 1) {
                                    data = result;
                                    callback(null, result);
                                }
                            }(i))
                        }

                    }
                    else {
                        callback(null, [])
                    }
                }
            })
        }],
        resetPackage: ['SeachProduct', function (callback) {
            if (data.length) {
                category = data[0].category_id;
                for (var i = 0; i < data.length; i++) {
                    (function (i) {
                        if (data[i].onOffComm == 1) {
                            data[i].commission_package = 3;
                        }
                        else {
                            data[i].commission_package = 4;
                        }
                        if (i == (data.length - 1)) {
                            //   console.log(".......sup",supplier)
                            callback(null);
                        }
                    }(i))
                }
            }
            else {
                callback(null)
            }

        }],
        getPlatinumPackage: ['resetPackage', function (callback) {
            if (data.length) {
                getPackage(request.dbName, reply, 2, category, function (err, platinum) {
                    if (err) {
                        console.log("err", err);
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    } else {
                        var len = platinum.length;
                        if (len) {
                            var dataLength = data.length;
                            for (var i = 0; i < dataLength; i++) {
                                (function (i) {
                                    for (var j = 0; j < len; j++) {
                                        (function (j) {
                                            if (platinum[j].supplier_id == data[i].supplier_id) {
                                                data[i].commission_package = 2;
                                                if (j == (len - 1) && i == (dataLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                            else {
                                                if (j == (len - 1) && i == (dataLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                        }(j))
                                    }
                                }(i))
                            }
                        }
                        else {
                            callback(null)
                        }
                    }
                });
            }
            else {
                callback(null)
            }


        }],
        getGoldPackage: ['resetPackage', function (callback) {
            if (data.length) {
                getPackage(request.dbName, reply, 0, category, function (err, gold) {
                    if (err) {
                        console.log("err", err);
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        console.log("..gold...", gold, gold.length);
                        var len = gold.length;
                        if (len) {
                            var dataLength = data.length;
                            for (var i = 0; i < dataLength; i++) {
                                (function (i) {
                                    for (var j = 0; j < len; j++) {
                                        (function (j) {
                                            if (gold[j].supplier_id == data[i].supplier_id) {
                                                data[i].commission_package = 0;
                                                if (j == (len - 1) && i == (dataLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                            else {
                                                if (j == (len - 1) && i == (dataLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                        }(j))
                                    }
                                }(i))
                            }
                        }
                        else {
                            callback(null)
                        }

                    }
                });
            }
            else {
                callback(null)
            }
        }],
        getSilverPackage: ['resetPackage', function (callback) {
            if (data.length) {
                getPackage(request.dbName, reply, 1, category, function (err, silver) {
                    if (err) {
                        console.log("err", err);
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, reply, 500);
                    }
                    else {
                        var len = silver.length;
                        console.log("..silver...", silver, silver.length);
                        if (len) {
                            var dataLength = data.length;
                            for (var i = 0; i < dataLength; i++) {
                                (function (i) {
                                    for (var j = 0; j < len; j++) {
                                        (function (j) {
                                            if (silver[j].supplier_id == data[i].supplier_id) {
                                                data[i].commission_package = 1;
                                                if (j == (len - 1) && i == (dataLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                            else {
                                                if (j == (len - 1) && i == (dataLength - 1)) {
                                                    callback(null);
                                                }
                                            }
                                        }(j))
                                    }
                                }(i))
                            }
                        }
                        else {
                            callback(null);
                        }
                    }
                });
            }
            else {
                callback(null)
            }

        }],
    }, function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            var result = data.sort(func.sort_by('price', false, parseInt));
            sendResponse.sendSuccessData({ details: result }, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.getproductAccoToArea = function (request, reply) {
    var productName;
    var languageId;
    var areaId;
    var details = {};
    var startValue = 0;
    async.auto({
        getValue: function (callback) {
            if (!(request.body.productName)) {
                var msg = "productName not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.areaId)) {
                var msg = "areaId not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "language not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.startValue)) {
                var msg = "startValue not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }

            productName = request.body.productName;
            languageId = request.body.languageId;
            areaId = request.body.areaId;
            startValue = parseInt(request.body.startValue);
            callback(null);
        },
        serarchProduct: ['getValue', function (callback) {
            var sql = "SELECT id as product_id,category_id,supplier_branch_id,quantity,purchased_quantity,supplier_id,supplier_name,supplier_logo, branchId,id, display_price,name, sku, product_desc, measuring_unit, image_path, price, price_type FROM (select p.category_id,p.quantity,p.purchased_quantity,s.id as supplier_id,s.name as supplier_name,s.logo as supplier_logo,sb.id as branchId,sb.id as supplier_branch_id,p.id, pml.name, p.sku, pml.product_desc, pml.measuring_unit, pi.image_path, pp.price,pp.display_price, pp.price_type from supplier_branch_area_product sbap" +
                " join product p on p.id = sbap.product_id join product_ml pml on pml.product_id = p.id join product_image pi on pi.product_id = " +
                " p.id JOIN product_pricing pp ON pp.product_id = p.id join supplier_branch sb  on sb.id = sbap.supplier_branch_id join supplier s on s.id= sb.supplier_id" +
                " join supplier_branch_delivery_areas sbda on sb.id = sbda.supplier_branch_id where (pi.default_image = ? or pi.imageOrder =1) and p.is_live =1 and p.parent_id=0 and sbda.area_id =? and p.is_deleted = 0 and sbap.area_id = ? and pml.language_id = ?  and sbap.is_deleted=0 and sb.is_deleted = 0 and pp.is_deleted = 0 and s.is_deleted = 0  and pml.name LIKE '%" + productName + "%'AND DATE( pp.start_date ) <= CURDATE( ) " +
                "AND DATE( pp.end_date ) >= CURDATE( ) ORDER BY pp.price_type DESC )SELECTION GROUP BY product_id LIMIT ?, 20"

            multiConnection[dbName].query(sql, [1, areaId, areaId, languageId, startValue], function (err, result) {
                if (err) {
                    console.log("qqqqeeee", err);
                    var msg = "something went wrong";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    details.products = result;
                    callback(null);
                }
            })
        }],
        countProduct: ['getValue', function (callback) {
            var sql = "SELECT id,id as product_id, quantity,purchased_quantity,name, sku, product_desc, measuring_unit, image_path, price,display_price,supplier_name,supplier_logo, price_type FROM (select p.quantity,p.purchased_quantity,p.id,s.name as supplier_name,s.logo as supplier_logo, pml.name, p.sku, pml.product_desc, pml.measuring_unit, pi.image_path, pp.display_price, pp.price, pp.price_type from supplier_branch_area_product sbap" +
                " join product p on p.id = sbap.product_id join product_ml pml on pml.product_id = p.id join product_image pi on pi.product_id = " +
                " p.id JOIN product_pricing pp ON pp.product_id = p.id join supplier_branch sb  on sb.id = sbap.supplier_branch_id join supplier s on s.id= sb.supplier_id" +
                " join supplier_branch_delivery_areas sbda on sb.id = sbda.supplier_branch_id where (pi.default_image = ? or pi.imageOrder =1) and p.parent_id=0 and p.is_live =1 and sbda.area_id =? and p.is_deleted = 0 and sbap.area_id = ? and pml.language_id = ?  and sbap.is_deleted=0 and sb.is_deleted = 0 and pp.is_deleted = 0 and s.is_deleted = 0  and pml.name LIKE '%" + productName + "%'AND DATE( pp.start_date ) <= CURDATE( ) " +
                "AND DATE( pp.end_date ) >= CURDATE( ) ORDER BY pp.price_type DESC ) SELECTION GROUP BY product_id "

            multiConnection[dbName].query(sql, [1, areaId, areaId, languageId, startValue], function (err, result) {
                if (err) {
                    console.log("eeee", err);
                    var msg = "something went wrong";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    details.count = result.length;
                    callback(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            sendResponse.sendSuccessData({ details: details }, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}


exports.getsupplierImage = function (req, res) {
    var branchId;
    var token;
    var id = 0;
    var supplierDetails = {};
    //console.log("vud",req.body);
    async.auto({
        getValues: function (callback) {
            if (!(req.body.branchId)) {
                var msg = "branch id not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            /*  if(req.body.accessToken){
                  token = req.body.accessToken
              }*/
            if (req.body && req.body.branchId) {
                branchId = req.body.branchId;
                callback(null);
            } else {
                var msg = "something went wrong ";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        },
        supplierDetails: ['getValues', function (cb) {
            var sql = 'select sb.supplier_id,s.logo from supplier_branch sb join supplier s on sb.supplier_id=s.id where sb.id=?';
            multiConnection[req.dbName].query(sql, [branchId], function (err, result) {
                //console.log("eeeeee-----------",err,result)
                if (err) {
                    var msg = "something went wrong";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if (result.length) {
                        supplierDetails.supplier_id = result[0].supplier_id;
                        supplierDetails.image = result[0].logo;
                    }
                    cb(null);
                }
            })
        }],
    }, function (err, result) {
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(supplierDetails, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}


exports.orderDescription = function (req, res) {
    var accessToken = 0;
    var orderId = 0;
    var userId;
    var data;
    async.auto({
        blankField: function (cb) {
            if (req.body && req.body.accessToken && req.body.orderId) {
                accessToken = req.body.accessToken;
                orderId = req.body.orderId;
                cb(null);
            }
            else {
                sendResponse.parameterMissingError(res);
            }
        },
        authenticate: ['blankField', function (cb) {
            checkUserAccessToken(req.dbName, res, accessToken, function (err, result) {
                if (err) {
                    cb(err);
                } else {
                    userId = result.id;
                    cb(null);
                }
            })
        }],
        orderdescription: ['authenticate', function (cb) {
            orderFunction.orderDescription(res, orderId, function (err, result) {
                if (err) {
                    sendResponse.somethingWentWrongError(res);
                }
                else {
                    data = result;
                    // console.log('data----', result);
                    cb(null);
                }
            })

        }]
    }, function (err, result) {
        if (err) {
            sendResponse.somethingWentWrongError(res);
        } else {
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, constant.responseStatus.SUCCESS);
        }
    })

}

function addressList(dbName, res, accessToken, zoneId, callback) {
    var userId = 0;
    var areaId = [];
    var address;
    async.auto({
        getUser: function (cb) {
            var sql = 'select id from user where access_token = ?'
            multiConnection[dbName].query(sql, [accessToken], function (err, result) {
                if (err) {
                    console.log("err", err);
                    cb(err);
                }
                else {

                    if (result.length) {
                        userId = result[0].id;
                        cb(null)

                    } else {
                        userId = 0;
                        cb(null)

                    }
                }
            })
        },
        getAreaId: function (cb) {
            zoneId = zoneId.toString();
            //  console.log("zoneId",zoneId);
            var sql1 = 'select id from area where zone_id IN(' + zoneId + ')';
            multiConnection[dbName].query(sql1, function (err, response) {
                if (err) {
                    console.log("err", err);
                    cb(err);
                }
                else {
                    // console.log("ss",response);
                    if (response.length) {
                        for (var i = 0; i < response.length; i++) {
                            (function (i) {
                                areaId.push(response[i].id);
                                if (i == (response.length - 1)) {
                                    cb(null);
                                }
                            }(i))
                        }
                    }
                    else {
                        cb(null)
                    }

                }
            })
        },
        getAddress: ['getAreaId', 'getUser', function (cb) {

            if (userId != 0) {
                areaId = areaId.toString();
                var sql2 = 'select * from user_address where user_id = ? and area_id IN(' + areaId + ') and is_deleted =0';
                multiConnection[dbName].query(sql2, [userId], function (err, result) {
                    if (err) {
                        cb(err);
                    }
                    else {
                        address = result
                        cb(null)
                    }
                })
            } else {
                address = null;
                cb(null)
            }


        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            callback(null, address)
        }
    })
}

exports.scheduleNewOrder1 = function (req, res) {
    var orderDates = req.body.orderDates, accessToken;
    var orderId = req.body.orderId;
    var orderDetails = orderDates && orderDates.length > 0 ? orderDates[0] : orderDates;
    console.log("===orderDetails===", orderDetails, Array.isArray(req.body.orderId), req.body);
    async.auto({
        blankField: function (cb) {
            if (req.body && req.body.accessToken && req.body.orderDates && req.body.orderId && req.body.orderId.length > 0) {
                accessToken = req.body.accessToken;
                cb(null);
            }
            else {
                console.log("===ELSE===");
                sendResponse.parameterMissingError(res);
            }
        },
        authenticate: ['blankField', function (cb) {
            checkUserAccessToken(req.dbName, res, accessToken, function (err, result) {
                if (err) {
                    cb(err);
                } else {
                    userId = result.id;
                    cb(null);
                }
            })
        }],
        updateOrderDates: ['authenticate', function (cb) {
            if (orderDetails.deliveryDate) {
                var date123 = moment(orderDetails.deliveryDate).utcOffset(6);
                // console.log("...3..",date123);
                var date1234 = date123._d
                // console.log("...4..",date1234);

                date1234 = moment(date1234).format("YYYY-MM-DD");

                // console.log("...5..",date1234);

                deliveryDate = new Date(date1234 + ' ' + orderDetails.delivery_time);

                // console.log("...1..",deliveryDate);

                deliveryDate = moment(deliveryDate).format('YYYY-MM-DD HH:mm');

                // console.log("...2..",deliveryDate);
            }
            var orderIds = Array.isArray(orderId) == true ? orderId : [orderId];
            var update_booking_query = "update orders set schedule_date=?,pickup_date=?,status=? where id IN (?)";
            var st = multiConnection[dbName].query(update_booking_query, [deliveryDate, orderDetails.pickupDate, 9, orderIds], function (err, data) {
                // console.log(st.sql);
                if (err) {
                    cb(err)
                    // var msg = err;
                    // sendResponse.sendErrorMessage(msg,res,500);
                } else {

                    cb(null)
                }
            })
        }]

    }, function (err, result) {
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            var data = {};
            sendResponse.sendSuccessData(orderId, constant.responseMessage.SUCCESS, res, 200);
        }
    })


    // insertOrder: function(callback) {
    // var sql = "insert into orders (user_id,supplier_branch_id,status,cart_id,created_on," +
    //     "user_address_id,user_delivery_address,user_pickup_address,pickup_address_id," +
    //     " remarks,schedule_date,pickup_date,pickup_time," +
    //     "min_order_delivery_crossed,currency_id,loyalty_points,net_amount,delivery_charges,handling_supplier" +
    //     ", handling_admin,order_source)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

    // console.log(".....",orderDates.deliveryDate,orderDates.delivery_time);

    //  console.log("...4..",date1234);

    //         if(orderDates.deliveryDate){

    //             var date123=moment(orderDates.deliveryDate).utcOffset(6);
    //             console.log("...3..",date123);
    //             var date1234=date123._d
    //              console.log("...4..",date1234);
    //             date1234=moment(date1234).format("YYYY-MM-DD");
    //             console.log("...5..",date1234);
    //             deliveryDate = new Date(date1234+' '+orderDates.delivery_time);
    //             console.log("...1..",deliveryDate);
    //             deliveryDate = moment(deliveryDate).format('YYYY-MM-DD HH:mm');
    //             console.log("...2..",deliveryDate);

    //           }

    //         var arr = [
    //             orderDetails.user_id, orderDetails.supplier_branch_id,9]

    //             ;
    //         arr.push(orderDetails.cart_id,orderDetails.created_on, orderDetails.user_address_id);
    //         arr.push(orderDetails.user_delivery_address, orderDetails.user_pickup_address, orderDetails.pickup_address_id);
    //         arr.push( orderDetails.remarks,deliveryDate,orderDates.pickupDate, orderDates.pickupTime);
    //         arr.push(orderDetails.min_order_delivery_crossed, orderDetails.currency_id, orderDetails.loyalty_points, orderDetails.net_amount);
    //         arr.push(orderDetails.delivery_charges, orderDetails.handling_supplier, orderDetails.handling_admin, orderDetails.order_source);

    //    //     console.log("..................arr.....",arr);
    //         multiConnection[dbName].query(sql, arr, function (err, result) {
    //             if (err) {
    //                 callback(err);
    //             } else {
    //                 orderId = result.insertId;
    //                 callback(null);
    //             }
    //         })
    // },


}
exports.scheduleNewOrder = function (req, res) {

    var type = 0;
    if (req.body.type) {
        type = 1;
        var temp = JSON.parse(req.body.orderDates);
        orderDates = temp;
    } else {
        orderDates = req.body.orderDates
    }
    console.log("....req.body", req.body);
    var orderId;
    var status;
    var orderDates;
    var orderDetails;
    async.auto({
        checkValue: function (cb) {

            if (!(req.body.orderId)) {
                var msg = "send Order Id";
                return sendResponse.sendErrorMessage(msg, res, 400);
            } else {
                orderId = req.body.orderId;
            }
            cb(null);

        },
        getOrderInfo: ['checkValue', function (cb) {
            getOrderProduct(request.dbName, orderId, function (err, result) {
                if (err) {
                    cb(null)
                } else {
                    orderDetails = result;
                    cb(null);
                }
            })
        }],
        genrate: ['getOrderInfo', function (cb) {



            genrateOrderses(request.dbName, orderDetails, orderDates, function (err, result) {
                if (err) {
                    cb(err);
                } else {
                    cb(null, []);
                }
            })


        }]
    }, function (err, result) {
        console.log("...............err.....................................", err, result);
        if (err) {
            var msg = err;
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {

            console.log("...............final response..................................");

            var data = {};
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);

        }
    })
}

var getOrderProduct = function (dbName, orderId, callback) {
    var details;
    var orderPrice;
    async.auto({
        getProductDetails: function (cb) {
            var sql = "select * from orders where id = ?";
            multiConnection[dbName].query(sql, [orderId], function (err, result) {
                if (err) {
                    cb(err);
                } else {
                    details = result;
                    cb(null);
                }
            })
        },
        getOrderPrice: ['getProductDetails', function (cb) {
            var sql = "select * from order_prices where order_id = ?";
            multiConnection[dbName].query(sql, [orderId], function (err, result) {
                if (err) {
                    cb(err);
                } else {
                    orderPrice = result;
                    cb(null);
                }
            })
        }]
    }, function (err, result) {
        if (err) {
            callback(err);
        } else {
            callback(null, { details: details, orderPrice: orderPrice })
        }
    })
}


var genrateOrderses = function (dbName, orderDetails, orderDates, cb) {

    var dateLength = orderDates.length;
    if (dateLength == 0) {
        cb(null);
    }
    for (var i = 0; i < dateLength; i++) {
        (function (i) {


            genrate(request.dbName, orderDates[i], orderDetails, function (err, result) {
                if (err) {
                    cb(err);
                } else {
                    if (i == (dateLength - 1)) {
                        cb(null);
                    }
                }
            })
        }(i));
    }
}


var genrate = function (dbName, orderDates, orderDetails, cb) {
    var temp = orderDetails;
    var details_temp = temp.orderPrice;
    var orderId;
    var deliveryDate;
    async.auto({
        insertOrder: function (callback) {
            orderDetails = temp.details[0];
            var sql = "insert into orders (user_id,supplier_branch_id,status,cart_id,created_on," +
                "user_address_id,user_delivery_address,user_pickup_address,pickup_address_id," +
                " remarks,schedule_date,pickup_date,pickup_time," +
                "min_order_delivery_crossed,currency_id,loyalty_points,net_amount,delivery_charges,handling_supplier" +
                ", handling_admin,order_source)values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            console.log(".....", orderDates.deliveryDate, orderDates.delivery_time);
            //  console.log("...4..",date1234);
            if (orderDates.deliveryDate) {
                var date123 = moment(orderDates.deliveryDate).utcOffset(6)
                console.log("...3..", date123);
                var date1234 = date123._d
                console.log("...4..", date1234);
                date1234 = moment(date1234).format("YYYY-MM-DD");
                console.log("...5..", date1234);
                deliveryDate = new Date(date1234 + ' ' + orderDates.delivery_time);
                console.log("...1..", deliveryDate);
                deliveryDate = moment(deliveryDate).format('YYYY-MM-DD HH:mm');
                console.log("...2..", deliveryDate);
            }

            var arr = [orderDetails.user_id, orderDetails.supplier_branch_id, 9];
            arr.push(orderDetails.cart_id, orderDetails.created_on, orderDetails.user_address_id);
            arr.push(orderDetails.user_delivery_address, orderDetails.user_pickup_address, orderDetails.pickup_address_id);
            arr.push(orderDetails.remarks, deliveryDate, orderDates.pickupDate, orderDates.pickupTime);
            arr.push(orderDetails.min_order_delivery_crossed, orderDetails.currency_id, orderDetails.loyalty_points, orderDetails.net_amount);
            arr.push(orderDetails.delivery_charges, orderDetails.handling_supplier, orderDetails.handling_admin, orderDetails.order_source);

            //     console.log("..................arr.....",arr);
            multiConnection[dbName].query(sql, arr, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    orderId = result.insertId;
                    callback(null);
                }
            })
        },
        insertProductOrder: ['insertOrder', function (callback) {
            var productLength = details_temp.length;
            if (productLength == 0) {
                callback(null);
            }
            for (var j = 0; j < productLength; j++) {
                (function (j) {

                    productOrder(request.dbName, details_temp[j], orderDates, orderId, function (err, result) {
                        if (err) {
                            callback(err);
                        } else {
                            if (j == (productLength - 1)) {
                                callback(null)
                            }
                        }
                    })
                }(j));
            }
        }]
    }, function (err, result) {
        if (err) {
            cb(err);
        } else {
            cb(null);
        }
    })
};


var productOrder = function (dbName, details_temp, dates, orderId, callback) {
   /* console.log(".............multiConnection[dbName]................................",details_temp);
  */  var sql = "insert into order_prices (order_id,price,quantity,product_id,product_name,product_desc,image_path,handling_admin,handling_supplier)values(?,?,?,?,?,?,?,?,?)";
    multiConnection[dbName].query(sql, [orderId, details_temp.price, details_temp.quantity, details_temp.product_id, details_temp.product_name, details_temp.product_desc, details_temp.image_path, details_temp.handling_admin, details_temp.handling_supplier], function (err, result) {
        if (err) {
            callback(err);
        } else {
            callback(null);
        }
    })

}




var productOrder = function (dbName, details, date, orderId, cb) {
    var sql = "insert into order_prices (order_id,price,quantity,product_id,product_name,product_desc,image_path,handling_admin,handling_supplier)values" +
        "(?,?,?,?,?,?,?,?,?)";
    multiConnection[dbName].query(sql, [orderId, details.price, details.quantity, details.product_id, details.product_name, details.product_desc, details.image_path, details.handling_admin, details.handling_supplier], function (err, result) {
        if (err) {
            cb(err);
        } else {
            cb(null);
        }
    })

}

function getPackage(dbName, res, commpackage, categoryId, callback) {
    //console.log("hbksdvjsdkv",commpackage);
    var commission = 0;
    var flag = 0;
    var data = [];
    async.auto({
        getCommission: async function (cb) {
            if (commpackage == 2) {
                var sql = 'select max(sc.commission) as commission from supplier_category sc join supplier s on sc.supplier_id = s.id where sc.onOffComm = 1 and sc.category_id = ? and sc.commission_type=1 and s.commisionButton = 1'
            }
            if (commpackage == 0) {
                var sql = 'select distinct(sc.commission) from supplier_category sc join supplier s on sc.supplier_id = s.id where sc.onOffComm = 1 and sc.category_id = ? and sc.commission_type= 1  and s.commisionButton = 1 order by sc.commission DESC LIMIT 1,1'
            }
            if (commpackage == 1) {
                var sql = 'select distinct(sc.commission)  from supplier_category sc join supplier s on sc.supplier_id = s.id where sc.onOffComm = 1 and sc.category_id = ? and sc.commission_type = 1  and s.commisionButton = 1 order by sc.commission DESC LIMIT 2,1'
            }
            try {
                let result = await ExecuteQ.Query(dbName, sql, [categoryId]);
                // multiConnection[dbName].query(sql,[categoryId],function (err,result) {
                //     if(err){
                //         console.log("err",err);
                //         cb(err);
                //     }
                //     else{
                console.log("...r.es...", result)
                if (result.length && result[0].commission > 0) {
                    console.log("...if....")
                    commission = result[0].commission;
                    cb(null)
                }
                else {
                    flag = 1;
                    console.log("...else....")
                    cb(null)
                }
            }
            catch (Err) {
                cb(Err)
            }
            //     }
            // })
        },
        getSupplier: ['getCommission', async function (cb) {
            //console.log("here");
            if (flag) {
                cb(null);
            }
            else {
                try {
                    var sql1 = 'select distinct(sc.supplier_id) from supplier_category sc join supplier s where sc.commission = ? and sc.commission_type= 1 and sc.onOffComm = 1 and sc.category_id = ? and s.commisionButton = 1 ';
                    let result = await ExecuteQ.Query(dbName, sql1, [commission, categoryId])
                    // var sql1='select distinct(sc.supplier_id) from supplier_category sc join supplier s where sc.commission = ? and sc.commission_type= 1 and sc.onOffComm = 1 and sc.category_id = ? and s.commisionButton = 1 ';
                    // multiConnection[dbName].query(sql1,[commission,categoryId],function (err,result) {
                    //     if(err){
                    //         console.log("....err1...",err);
                    //         cb(err);
                    //     }
                    //     else {
                    if (result.length) {
                        data = result;
                        //console.log("ress",result);
                        //console.log("data",data);
                        cb(null)
                    }
                    else {
                        cb(null);
                    }
                    //     }
                    // })
                }
                catch (Err) {
                    cb(Err)
                }
            }

        }]
    }, function (err, result) {
        if (err) {
            callback(err);
        } else {
            callback(null, data);
        }
    })
}



exports.scheduleOrders = function (request, reply) {
    var accessToken;
    var userId;
    var upcoming = {};
    var statusArr = [];
    var orderIdData = {};
    var languageId;
    var orderHistory;
    var final = [];
    var temp = {};
    var dbConnection;
    if (request.headers.secretdbkey != undefined && request.headers.secretdbkey != "") {
        var decipher = crypto.createDecipher(algorithm, crypto_password)
        var decDbName = decipher.update(request.headers.secretdbkey, 'hex', 'utf8')
        decDbName += decipher.final('utf8');
        console.log("==DB_NAME==", decDbName);
        dbConnection = multiConnection[decDbName]
    }
    else {
        dbConnection = connection
    }
    console.log("access", request.body);
    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "please enter languageId";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            languageId = request.body.languageId;
            callback(null);
        },
        getCustomerId: ['getValues', function (callback) {
            checkUserAccessToken(request.dbName, reply, accessToken, function (err, result) {
                if (err) {

                    callback(err);
                } else {
                    userId = result.id;
                    callback(null);
                }
            })
        }],
        getScheduleOrder: ['getCustomerId', function (callback) {
            logger.debug("==============in 4==========", request.dbName)


            getScheduleOrders(request.dbName, reply, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    orderHistory = result;
                    callback(null);
                }
            })

        }],
        agentStatus: ['getScheduleOrder', async function (callback) {
            var final_data = [], agentConnection = {};
            if (orderHistory && orderHistory.length > 0) {
                for (const [index, i] of orderHistory.entries()) {
                    if (i.is_agent == 1) {
                        var getAgentDbData = await common.GetAgentDbInformation(req.dbName);
                        logger.debug("===AGENT==CONNECTION==>>==2=", Object.entries(agentConnection).length)
                        if (Object.entries(agentConnection).length === 0) {
                            agentConnection = await common.RunTimeAgentConnection(getAgentDbData);
                        }
                        var sqlQuery = "select `status` from cbl_user_orders  where order_id=?";
                        agentConnection.query(sqlQuery, [i.order_id], async function (err, statusData) {
                            if (err) {
                                sendResponse.somethingWentWrongError(res);
                            }
                            else {
                                if (statusData && statusData.length > 0) {
                                    i.status = statusData[0].status
                                }
                            }
                        });
                    }
                    final_data.push(i);
                    if (index == orderHistory.length - 1) {
                        orderHistory = final_data;
                        callback(null);
                    }
                }
            }
            else {
                callback(null);
            }
        }],
        getProductDetails: ['agentStatus', function (callback) {
            var leng = orderHistory.length;
            var details = {}, totalProductPrice = 0;
            if (leng != 0) {
                for (var i = 0; i < leng; i++) {
                    (function (i) {


                        getProdcutDetails(request.dbName, reply, orderHistory[i].order_id, orderHistory[i].is_package, orderHistory[i].pricing_type, languageId, function (err, result) {

                            if (err) {
                                callback(err);
                            }
                            else {


                                if (result.length) {

                                    // details.net_amount = parseFloat(orderHistory[i].net_amount);
                                    // if(orderHistory[i].order_id==445 || orderHistory[i].order_id==446){

                                    //     console.log("========ORDERID==",orderHistory[i].order_id)
                                    //     console.log("",

                                    //     orderHistory[i].price,
                                    //     orderHistory[i].delivery_charges,
                                    //     orderHistory[i].handling_admin,
                                    //      orderHistory[i].handling_supplier)

                                    // }

                                    // details.net_amount=parseFloat(orderHistory[i].price)+parseFloat(orderHistory[i].delivery_charges)+parseFloat(orderHistory[i].handling_admin)+parseFloat(orderHistory[i].handling_supplier)
                                    details.delivery_charges = orderHistory[i].delivery_charges;
                                    details.handling_admin = orderHistory[i].handling_admin
                                    details.handling_supplier = orderHistory[i].handling_supplier
                                    // details.delivery_charges=orderHistory[i].delivery_charges
                                    if (result && result.length > 0) {
                                        _.each(result, function (i) {
                                            totalProductPrice = totalProductPrice + parseFloat(i.fixed_price)
                                        })
                                    }
                                    details.order_price = parseFloat(totalProductPrice);
                                    details.net_amount = parseFloat(totalProductPrice);
                                    // delivery_charges
                                    // handling_admin	handling_supplier	delivery_charges	

                                    details.order_id = orderHistory[i].order_id;
                                    details.supplier_branch_id = orderHistory[i].supplier_branch_id;
                                    details.supplier_id = orderHistory[i].id;
                                    details.logo = orderHistory[i].logo;
                                    details.service_date = moment(orderHistory[i].schedule_date).format();
                                    details.status = orderHistory[i].status;
                                    details.near_on = moment(orderHistory[i].near_on).format();
                                    details.shipped_on = moment(orderHistory[i].shipped_on).format();
                                    details.schedule_order = orderHistory[i].schedule_order;
                                    details.shipped_on = moment(orderHistory[i].shipped_on).format();
                                    details.payment_type = orderHistory[i].payment_type;
                                    details.created_on = moment(orderHistory[i].created_on).format();


                                    details.product = result;
                                    details.product_count = result.length;
                                    details.measuring_unit = result.measuring_unit;
                                    details.user_delivery_address = orderHistory[i].user_delivery_address;
                                    details.schedule_order = orderHistory[i].schedule_order;
                                    final.push(details);
                                    details = {};
                                    totalProductPrice = 0
                                    if (i == (leng - 1)) {
                                        callback(null);
                                    }
                                }
                                else {
                                    if (i == (leng - 1)) {
                                        callback(null);
                                    }
                                }
                            }
                        })
                    }(i));
                }
            }
            else {
                callback(null);
            }
        }],
        getAddress: ['getProductDetails', function (callback) {
            var len = final.length;
            var temp = {};
            if (len != 0) {
                for (var i = 0; i < len; i++) {
                    (function (i) {
                        getAddressAccordingId(request.dbName, reply, final[i].user_delivery_address, function (err, result) {
                            if (err) {
                                callback(err);
                            } else {
                                if (result.length) {
                                    result = result[0];
                                    temp.address_line_1 = result.address_line_1;
                                    temp.address_line_2 = result.address_line_2;
                                    temp.pincode = result.pincode;
                                    temp.city = result.city;
                                    temp.landmark = result.landmark;
                                    final[i].delivery_address = temp;
                                    temp = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                } else {
                                    final[i].delivery_address = {};
                                    if (i == (len - 1)) {
                                        callback(null);
                                    }
                                }
                            }
                        })
                    }(i));
                }
            } else {
                callback(null);
            }
        }],
        final: ['getAddress', function (callback) {
            var result = [];
            if (final.length) {
                result = final.sort(func.sort_by('order_id', true, parseInt));
            }

            temp.orderHistory = result;
            callback(null);

        }]

    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            console.log(".............temp...............................", temp);
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

function getScheduleOrders(dbName, reply, accessToken, callback) {
    var sql = " select op.price,cr.delivery_charges,ua.area_id,p.pricing_type,o.is_package,o.schedule_date,s.id,s.logo,o.supplier_branch_id,o.schedule_order ,o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.service_date,o.remarks,o.delivered_on,o.created_on,o.handling_admin,o.handling_supplier,o.delivery_charges,o.delivery_charges,op.price " +
        " ,op.product_name,op.product_desc,op.image_path from orders o join order_prices op " +
        " on o.id = op.order_id join supplier_branch sb on sb.id = op.supplier_branch_id join supplier s on s.id = sb.supplier_id join cart cr on cr.id=o.cart_id  join user u on u.id=o.user_id join product p on p.id = op.product_id join user_address ua on ua.id =o.user_delivery_address where u.access_token = ? and o.status = 9 GROUP BY o.id";
    var st = multiConnection[dbName].query(sql, [accessToken], function (err, result) {
        console.log("...........vsdfjjdsfnhkfd..............", st.sql);
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            callback(null, result);
        }
    })
}

function getPendingorder(dbName, reply, accessToken, callback) {
    var sql = " select * from orders o join user u ON u.id = o.user_id where u.access_token = ? and o.status = 5";
    var data = multiConnection[dbName].query(sql, [accessToken], function (err, result) {
        //console.log("...........vsdfjjdsfnhkfd..............");
        logger.debug("=============query in getPendingorder================", data.sql, err)
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            if (result.length) {
                logger.debug("=========result has length=============");
                callback(null, 1);
            }
            else {
                logger.debug("===============result has not length==============")
                callback(null, 0)
            }
        }
    })
}
var getRecommended = async function (req, user_id, dbName,
    service_type, reply, languageId, latitude, longitude,
    categoryId, filter_by, planQueryExist, callback) {
    let deleted = 0;
    let day = moment().isoWeekday();
    day = day - 1;
    let radius_check_query = "";
    radius_check_query = "having distance<=delivery_radius order by s.id desc";
    let mUnit = await Universal.getMeausringUnit(dbName)
    let planQuery = "";
    if (planQueryExist) {
        planQuery = planQueryExist
    } else {
        let subScriptionData = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])
        planQuery = subScriptionData && subScriptionData.length > 0 ? "and ss.status='active'" : ""
    }
    let orderTypeCondition = "";
    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }
    if (parseInt(categoryId) > 0) {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"category_name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at,  '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from(select s.is_sponser as is_multibranch,s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.is_dine_in,s.country_code as supplier_country_code,ct.type,ct.id as category_id,ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
            " sbb.min_order, s.preparation_time,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
            "IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = " + languageId + " and sc.category_id=" + categoryId + "  " + orderTypeCondition + " and s.is_deleted = 0 and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =" + day + " and s.is_recommended = 1 " + planQuery + " GROUP BY s.id " + radius_check_query + ") as temp";

    }
    else {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"category_name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at,  '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from(select s.is_sponser as is_multibranch,s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.is_dine_in,s.country_code as supplier_country_code,ct.type,ct.id as category_id, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
            " sbb.min_order, s.preparation_time,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
            "IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = " + languageId + " and s.is_deleted = 0 " + orderTypeCondition + " and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =" + day + " and s.is_recommended = 1 " + planQuery + " GROUP BY s.id " + radius_check_query + ") as temp";

    }
    let result = await ExecuteQ.QueryV1(req, dbName, sql, [])
    let data_length = result.length
    if (data_length > 0) {
        for (var i = 0; i < data_length; i++) {
            (async function (i) {
                logger.debug("=====result[i].categories==", result[i].categories)
                result[i].supplier_tags = result[i] && result[i].supplier_tags ? JSON.parse(result[i].supplier_tags) : []
                result[i].category = result[i] && result[i].categories ? JSON.parse(result[i].categories) : [];
                result[i].timing = result[i] && result[i].timings ? JSON.parse(result[i].timings) : [];
                if (i == result.length - 1) {
                    callback(null, result);
                }
            }(i));
        }

    }
    else {
        callback(null, result);
    }
}




var getRecommendedV2 = async function (req, user_id, dbName,
    service_type, reply, languageId, latitude, longitude,
    categoryId, filter_by, planQueryExist, callback) {
    var deleted = 0;
    var day = moment().isoWeekday();
    day = day - 1;
    let radius_check_query = "";
    // having distance<=s.delivery_radius
    // if(service_type==1 || service_type==8){

    radius_check_query = "having distance<=delivery_radius order by s.id desc"
    // }
    // else{
    //     radius_check_query="order by s.id desc"
    // }
    let mUnit = await Universal.getMeausringUnit(dbName)
    let planQuery = "";
    if (planQueryExist) {
        planQuery = planQueryExist
    } else {
        let subScriptionData = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])
        planQuery = subScriptionData && subScriptionData.length > 0 ? "and ss.status='active'" : ""
    }

    let orderTypeCondition = ""

    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }




    if (parseInt(categoryId) > 0) {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"category_name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at,  '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from(select s.is_sponser as is_multibranch,s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.is_dine_in,s.country_code as supplier_country_code,ct.type,ct.id as category_id,ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
            " s.preparation_time,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
            " IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone, " +
            " IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = " + languageId + " and sc.category_id=" + categoryId + " and " + orderTypeCondition + " s.is_deleted = 0 and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =" + day + " and s.is_recommended = 1 " + planQuery + " GROUP BY s.id having is_under_zone>0 ) as temp";

    }
    else {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"category_name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at,  '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from(select s.is_sponser as is_multibranch,s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.is_dine_in,s.country_code as supplier_country_code,ct.type,ct.id as category_id, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
            " s.preparation_time,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
            " IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone, " +
            "IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = " + languageId + " and s.is_deleted = 0 " + orderTypeCondition + " and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =" + day + " and s.is_recommended = 1 " + planQuery + " GROUP BY s.id having is_under_zone>0 ) as temp";

    }


    let result = await ExecuteQ.QueryV1(req, dbName, sql, [])

    // var st= multiConnection[dbName].query(sql, [languageId,0,1,1,day,1], function (err, result) {
    // console.log(st.sql)
    // if (err) {
    //     console.log("eeeee",err);
    //     var msg = "some thing went wrong ";
    //     sendResponse.sendErrorMessage(msg, reply, 500);
    // } else {
    // logger.debug("18888888s",result);
    var data_length = result.length
    if (data_length > 0) {

        for (var i = 0; i < data_length; i++) {
            (async function (i) {
                logger.debug("=====result[i].categories==", result[i].categories)
                // result[i].timing = []
                // // result[i].Favourite = await SupplierFavourite(user_id,result[i].id,dbName);
                // result[i].category=[]
                result[i].supplier_tags = result[i] && result[i].supplier_tags ? JSON.parse(result[i].supplier_tags) : []
                result[i].category = result[i] && result[i].categories ? JSON.parse(result[i].categories) : [];
                result[i].timing = result[i] && result[i].timings ? JSON.parse(result[i].timings) : [];
                if (i == result.length - 1) {
                    callback(null, result);
                }
            }(i));
        }


    }
    else {
        callback(null, result);
    }
    //     }
    // })
}


var getOfferSuppliers = async function (req, user_id, dbName,
    service_type, reply, languageId, latitude, longitude,
    categoryId, filter_by, callback) {
    var deleted = 0;
    var day = moment().isoWeekday();
    day = day - 1;
    let radius_check_query = "";
    // having distance<=s.delivery_radius
    // if(service_type==1 || service_type==8){

    radius_check_query = "having distance<=delivery_radius and have_supplier_offer>0  order by s.id desc"
    // }
    // else{
    //     radius_check_query="order by s.id desc"
    // }
    let mUnit = await Universal.getMeausringUnit(dbName)
    let planQuery = "";
    let offerCheck = "";

    let subScriptionData = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])
    planQuery = subScriptionData && subScriptionData.length > 0 ? " and ss.status='active' " : ""

    let enable_supplier_in_special_offer = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["enable_supplier_in_special_offer", "1"])
    offerCheck = enable_supplier_in_special_offer && enable_supplier_in_special_offer.length > 0 ? "  " : ""



    let orderTypeCondition = ""

    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }



    if (parseInt(categoryId) > 0) {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"category_name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at,  '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from(select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.is_dine_in,s.country_code as supplier_country_code,ct.type,ct.id as category_id,ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating as rating_supplier,s.total_reviews, " +
            " s.offerValue, s.preparation_time,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
            " if((select count(pp.id) from supplier_branch_product sbp join supplier_branch sb on sb.supplier_id = sbp.supplier_branch_id " +
            " join supplier s on s.id = sb.supplier_id join product p on p.id = sbp.product_id " +
            " join product_pricing pp on pp.product_id = p.id where p.is_deleted =0 and pp.is_deleted=0 and  s.id = supplier_id)>0,1,0) as have_supplier_offer, " +
            " IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = " + languageId + " and sc.category_id=" + categoryId + "  " + orderTypeCondition + " and s.is_deleted = 0 and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =" + day + " " + offerCheck + " " + planQuery + " GROUP BY s.id " + radius_check_query + ") as temp";

    }
    else {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"category_name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at,  '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from(select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.is_dine_in,s.country_code as supplier_country_code,ct.type,ct.id as category_id, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating as rating_supplier,s.total_reviews, " +
            " s.offerValue, s.preparation_time,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +

            " if((select count(pp.id) from supplier_branch_product sbp join supplier_branch sb on sb.supplier_id = sbp.supplier_branch_id " +
            " join supplier s on s.id = sb.supplier_id join product p on p.id = sbp.product_id " +
            " join product_pricing pp on pp.product_id = p.id where p.is_deleted =0 and pp.is_deleted=0 and  s.id = supplier_id)>0,1,0) as have_supplier_offer, " +

            "IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = " + languageId + " and s.is_deleted = 0 " + orderTypeCondition + " and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =" + day + " " + offerCheck + " " + planQuery + " GROUP BY s.id " + radius_check_query + ") as temp";

    }


    let result = await ExecuteQ.QueryV1(req, dbName, sql, [])
    var data_length = result.length
    if (data_length > 0) {

        for (var i = 0; i < data_length; i++) {
            (async function (i) {
                logger.debug("=====result[i].categories==", result[i].categories)
                result[i].supplier_tags = result[i] && result[i].supplier_tags ? JSON.parse(result[i].supplier_tags) : []
                result[i].category = result[i] && result[i].categories ? JSON.parse(result[i].categories) : [];
                result[i].timing = result[i] && result[i].timings ? JSON.parse(result[i].timings) : [];
                if (i == result.length - 1) {
                    callback(null, result);
                }
            }(i));
        }


    }
    else {
        callback(null, result);
    }
}

var getOfferSuppliersV1 = async function (req, user_id, dbName,
    service_type, reply, languageId, latitude, longitude,
    categoryId, filter_by, callback) {
    var deleted = 0;
    var day = moment().isoWeekday();
    day = day - 1;
    let radius_check_query = "";
    // having distance<=s.delivery_radius
    // if(service_type==1 || service_type==8){

    radius_check_query = "having distance<=delivery_radius order by s.id desc"
    // }
    // else{
    //     radius_check_query="order by s.id desc"
    // }
    let mUnit = await Universal.getMeausringUnit(dbName)
    let planQuery = "";
    let subScriptionData = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])
    planQuery = subScriptionData && subScriptionData.length > 0 ? "and ss.status='active'" : ""

    let orderTypeCondition = ""

    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }



    if (parseInt(categoryId) > 0) {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"category_name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at,  '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from(select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.is_dine_in,s.country_code as supplier_country_code,ct.type,ct.id as category_id,ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating as rating_supplier,s.total_reviews, " +
            " s.offerValue, s.preparation_time,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +

            "IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone," +

            "IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = " + languageId + " and sc.category_id=" + categoryId + " and " + orderTypeCondition + " s.is_deleted = 0 and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =" + day + " and s.is_products_offer = 1 " + planQuery + " GROUP BY s.id " + radius_check_query + ") as temp";

    }
    else {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"category_name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at,  '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from(select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.is_dine_in,s.country_code as supplier_country_code,ct.type,ct.id as category_id, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating as rating_supplier,s.total_reviews, " +
            " s.offerValue, s.preparation_time,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +

            " IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone, " +

            "IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = " + languageId + " and s.is_deleted = 0 " + orderTypeCondition + " and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =" + day + " and s.is_products_offer = 1 " + planQuery + " GROUP BY s.id having is_under_zone>0) as temp";

    }


    let result = await ExecuteQ.QueryV1(req, dbName, sql, [])

    // var st= multiConnection[dbName].query(sql, [languageId,0,1,1,day,1], function (err, result) {
    // console.log(st.sql)
    // if (err) {
    //     console.log("eeeee",err);
    //     var msg = "some thing went wrong ";
    //     sendResponse.sendErrorMessage(msg, reply, 500);
    // } else {
    // logger.debug("18888888s",result);
    var data_length = result.length
    if (data_length > 0) {

        for (var i = 0; i < data_length; i++) {
            (async function (i) {
                logger.debug("=====result[i].categories==", result[i].categories)
                // result[i].timing = []
                // // result[i].Favourite = await SupplierFavourite(user_id,result[i].id,dbName);
                // result[i].category=[]
                result[i].supplier_tags = result[i] && result[i].supplier_tags ? JSON.parse(result[i].supplier_tags) : []
                result[i].category = result[i] && result[i].categories ? JSON.parse(result[i].categories) : [];
                result[i].timing = result[i] && result[i].timings ? JSON.parse(result[i].timings) : [];
                if (i == result.length - 1) {
                    callback(null, result);
                }
            }(i));
        }


    }
    else {
        callback(null, result);
    }
    //     }
    // })
}


const getSupTiming = (dbName, supId) => {
    return new Promise(async (resolve, reject) => {
        let sql = "select week_id,start_time,end_time,is_open,close_week_id from supplier_timings where supplier_id = ?";
        let data = await ExecuteQ.Query(dbName, sql, [supId])
        resolve(data);
    })
}
const SupplierFavourite = (userId, supplierId, dbName) => {
    return new Promise((resolve, reject) => {
        var sql = " select id from user_favourite where supplier_id = ? and user_id = ? and is_delete = 0";
        multiConnection[dbName].query(sql, [supplierId, userId], function (err, result) {
            if (err) {
                var msg = "some thing went wrong ";
                sendResponse.sendErrorMessage(msg, reply, 500);
            } else {
                //logger.debug("eeee",result);
                if (result.length) {
                    resolve(1);
                } else {
                    resolve(0);
                }
            }
        })

    })

}

const subscribedSupplier = (supplierId, dbName) => {
    return new Promise(async (resolve, reject) => {
        let sql = " select id from supplier_subscription where supplier_id = ? and status='active'";
        let data = await ExecuteQ.Query(dbName, sql, [supplierId]);
        if (data && data.length > 0) {
            resolve(1)
        } else {
            resolve(0)
        }
        // multiConnection[dbName].query(sql,[supplierId],function(err,result){

        //     if(err){
        //         var msg = "some thing went wrong ";
        //         sendResponse.sendErrorMessage(msg,reply,500);
        //     }else{
        //         //logger.debug("eeee",result);
        //         if(result.length){
        //             resolve(1);
        //         }else{
        //             resolve(0);
        //         }
        //     }
        // })

    })

}

exports.orderSerach = function (req, reply) {
    var serach;
    var limit;
    var offset;
    var data = [];
    var final;
    var count = 0;

    async.auto({
        getParameter: function (cb) {
            if (!(req.body.serach)) {
                var msg = "please enter serach text";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(req.body.offset)) {
                var msg = "please enter offset";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(req.body.limit)) {
                var msg = "please enter offset";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            serach = req.body.serach;
            offset = req.body.offset;
            limit = req.body.limit;

            cb(null);
        },
        serachOrder: ['getParameter', function (cb) {
            var sql = "select o.id,o.created_on,o.schedule_date,s.name as supplier,o.status,u.email As User_Name,u.mobile_no " +
                "from orders o join supplier_branch sb on sb.id=o.supplier_branch_id join supplier s on sb.supplier_id=s.id " +
                "join user u on o.user_id=u.id having o.id LIKE '%" + serach + "%' or  s.name LIKE '%" + serach + "%' or u.email LIKE '%" + serach + "%' order by o.id DESC";
            multiConnection[dbName].query(sql, [limit, offset], function (err, result) {
                if (err) {
                    console.log("eeeee", err);
                    var msg = "some thing went wrong ";
                    sendResponse.sendErrorMessage(msg, reply, 500);
                } else {
                    final = result;
                    cb(null);
                }
            })
        }],
        getProduct: ['serachOrder', function (cb) {
            var len = final.length;

            if (len == 0) {
                cb(null)
            }

            var temp_product = [];
            for (var i = 0; i < len; i++) {
                (function (i) {
                    var sql = " select product_name from order_prices where order_id = ?";
                    multiConnection[dbName].query(sql, [final[i].id], function (err, result) {
                        if (err) {
                            console.log("eeeee", err);
                            var msg = "some thing went wrong ";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            var len_pro = result.length;

                            if (len_pro == 0 && i == (len - 1)) {
                                cb(null);
                            }

                            for (var j = 0; j < len_pro; j++) {
                                (function (j) {
                                    temp_product.push(result[j].product_name);
                                    if (j == (len_pro - 1)) {
                                        final[i].product = temp_product
                                    }
                                    if (i == (len - 1) && j == (len_pro - 1)) {
                                        cb(null);
                                    }
                                }(j));
                            }
                        }
                    })
                }(i));
            }
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {

            console.log(".....................final....................", count);

            var temp = { orders: final, total_order: 1 };
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 4);
        }
    })
}


function getloyaltyOrders(dbName, reply, accessToken, deviceType, callback) {

    var sql = " select s.id,s.logo,o.supplier_branch_id ,o.delivery_address_id,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.total_points,o.id as order_id,o.service_date,o.remarks,o.delivered_on" +
        " ,op.product_name,op.product_desc,op.image_path from loyalty_order o join loyalty_order_product op " +
        " on o.id = op.loyalty_order_id join supplier_branch sb on sb.id = o.supplier_branch_id join supplier s on s.id = sb.supplier_id join user u on u.id=o.user_id join product p on p.id = op.product_id where u.access_token = ? GROUP BY o.id";
    // console.log(sql);
    // console.log(userId)

    var stmt = multiConnection[dbName].query(sql, [accessToken], function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            // logger.debug("============in the getloyaltyOrders==========",result,stmt.sql)
            if (result.length) {
                if (deviceType == 1) {
                    for (var i = 0; i < result.length; i++) {
                        (function (i) {
                            console.log("....2222222................", result[i].service_date)
                            var date1 = moment(result[i].service_date).utcOffset(0);
                            console.log("....2222222................", date1)
                            var date1234 = date1._d
                            console.log("...4..", date1234);
                            result[i].service_date = moment(date1234).format("YYYY-MM-DD HH:mm:ss");
                            console.log("................", result[i].service_date)
                        }(i))
                    }
                }
            }
            callback(null, result);
        }
    })
}


/*
exports.supplierCategoryList = function(req,reply){

    var supplierId;
    var area;
    var supplierCategory = [];
    async.auto({

        getValue:function(cb){
            if(!(req.body.supplierId)) {
                var msg = "please enter supplierId";
                return sendResponse.sendErrorMessage(msg,reply,400);
            }
            if(!(req.body.area)) {
                var msg = "please enter area";
                return sendResponse.sendErrorMessage(msg,reply,400);
            }
            supplierId = req.body.supplierId;
            area = req.body.area;
            cb(null);
        },
        getValue:['getValue',function(cb){
            supplierAreaCategory(supplierId,15,area,function(err,result){
                if(err){
                    cb(err);
                }else{
                    supplierCategory.push({arabic:result})l
                    cb(null)
                }
            })
        }],
        getEnglish:['getValue',function(cb){
            supplierAreaCategory(supplierId,14,area,function(err,result){
                if(err){
                    cb(err);
                }else{
                    supplierCategory.push({english:result});
                    cb(null)
                }
            })
        }],
    },function(err,result){
        if(err){
            var msg = err;
            return sendResponse.sendErrorMessage(msg,reply,500);
        }else{
            console.log(".............temp...............................",temp);
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}*/
exports.redis = function (res, callback) {
    categoryRadisArray = 0;
    supplierRadisArray = 0;
    productRadisArray = 0;
    supplierDetailsRadis = 0;
    subCategoryDetailsRadis = 0;
    callback(null)
}
function getAgentData(agentConnection, orderId) {
    // logger.debug(agentConnection);
    return new Promise((resolve, reject) => {
        var query = "select usr.country_code,usr.avg_rating,usr.total_rating,usr.total_review,usr.agent_created_id,usr.id,usr.longitude,usr.latitude,usr.name,usr.image,usr.experience,usr.occupation,usr.phone_number,usr.city,usr.country," +
            " usr.driver_license_number, ors.order_left_reason,ors.left_with_picture_url,usr.state,usr.phone_number,usr.email,usr.agent_bio_url " +
            " from cbl_user as usr inner join cbl_user_orders ors on ors.user_id=usr.id where ors.order_id=?"
        var st = agentConnection.query(query, [orderId], async function (err, agentData) {
            // logger.debug("===ST==SQL",st.sql);
            if (err) {
                reject(err)
            }
            else {
                if (agentData && agentData.length > 0) {
                    let reviewData = await ExecuteQ.QueryAgent(agentConnection, `select * from cbl_user_rating where user_id=?`, [agentData[0].id])
                    agentData[0].reviews = reviewData
                }
                // logger.debug("============AGENT=DATA!==",agentData);
                resolve(agentData)
            }
        })
    })

}
function orderStatus(a_connection, order_id) {
    return new Promise((resolve, reject) => {
        var b_query = "select status,id from cbl_user_orders where order_id=?"
        var st = a_connection.query(b_query, [order_id], function (err, data) {
            logger.debug(st.sql)
            if (err) {
                resolve(1)
            }
            else {
                // logger.debug("=========AGENT=ORDER=STATUS==========",data);
                if (data && data.length > 0) {
                    resolve(data[0].status);
                }
                else {
                    resolve(1)
                }
            }
        })
    })

}
/**
 * @description used for details of order from user side in app/web
 */
exports.orderDetails = function (request, reply) {

    var accessToken;

    var userId;
    var orderId;
    var languageId;
    var orderHistory;
    var final = [];
    var temp = {};
    var version = Universal.getVersioning(request.path);

    logger.debug("access=:version", request.body, version);

    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "please enter languageId";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.orderId)) {
                var msg = "please enter languageId";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            // if(!(request.body.area_id))
            // {
            //     var msg = "areaId missing ";
            //     return sendResponse.sendErrorMessage(msg,reply,400);
            // }
            accessToken = request.body.accessToken;
            languageId = request.body.languageId;
            orderId = request.body.orderId;
            callback(null);
        },
        // getCustomerId:['getValues',function(callback){
        //     checkUserAccessToken(reply,accessToken,function(err,result){
        //         if(err){

        //             callback(err);
        //         }else{
        //             userId = result.id;
        //             callback(null);
        //         }
        //     })
        // }],
        getScheduleOrder: ['getValues', function (callback) {

            orderDetails(request.dbName, reply, orderId, version, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    // console.log("res....",result);
                    orderHistory = result;
                    callback(null);
                }
            })
        }],
        getProductDetails: ['getScheduleOrder', async function (callback) {
            var leng = orderHistory.length, totalProductPrice = 0, agentConnection = {};
            var details = {};
            let shipStationData = await Universal.getShippingData(request.dbName);
            if (leng != 0) {
                for (const [index, i] of orderHistory.entries()) {
                    var result = await getProdcutDetailsV1(request.dbName, reply, i.order_id, i.is_package, i.pricing_type, languageId)
                    if (result.length) {
                        details.total_order_price = await totalOrderPrice(request.dbName, i.order_id)
                        let totalAddOnPrice = 0;

                        for (const [index, i] of result.entries()) {
                            logger.debug("========result.addon====", i.addon)
                            if (i.adds_on && i.adds_on.length > 0) {
                                let addonprice = await addonTotalPrice(i.adds_on, i.quantity)
                                totalAddOnPrice = totalAddOnPrice + addonprice
                                logger.debug("=======toatladdonprice========", totalAddOnPrice)
                            }
                        }
                        logger.debug("===================total_____addonprice========", totalAddOnPrice)
                        details.total_order_price = details.total_order_price + totalAddOnPrice
                        console.log("=i.is_agent==", i.is_agent)
                        // o.pres_description,o.pres_image1,o.pres_image2,o.pres_image3,o.pres_image4,o.pres_image5
                        details.pres_description = orderHistory[0].pres_description;
                        details.pres_image1 = orderHistory[0].pres_image1;
                        details.pres_image2 = orderHistory[0].pres_image2;
                        details.pres_image3 = orderHistory[0].pres_image3;
                        details.pres_image4 = orderHistory[0].pres_image4;
                        details.pres_image5 = orderHistory[0].pres_image5;
                        details.have_pet = orderHistory[0].have_pet;
                        details.is_schedule = orderHistory[0].is_schedule;
                        details.parking_instructions = orderHistory[0].parking_instructions;
                        details.cleaner_in = orderHistory[0].cleaner_in;
                        details.area_to_focus = orderHistory[0].area_to_focus;
                        details.delivery_charges = i.delivery_charges;
                        details.donate_to_someone = i.donate_to_someone;
                        details.is_supplier_rated = i.is_supplier_rated;
                        details.handling_admin = i.handling_admin
                        details.handling_supplier = i.handling_supplier
                        details.duration = i.duration;
                        // details.questions=(i.questions.length)==2?null:i.questions
                        if (i.questions && i.questions.length == 2) {
                            details.questions = null
                        } else {
                            details.questions = i.questions
                        }
                        details.type = result[0].type
                        details.terminology = result[0].terminology
                        details.service_type = result[0].type
                        details.remarks = i.remarks;
                        details.self_pickup = i.self_pickup
                        details.is_edit = i.is_edit
                        details.edit_by = i.edit_by
                        details.remaining_amount = i.remaining_amount
                        // o.edit_by,o.remaining_amount
                        details.category_flow = i.category_flow
                        details.shippingData = [];
                        // if(Object.keys(shipStationData).length>0){
                        //     details.shippingData=await Universal.getShippingOrderDetail(shipStationData,"JUSTCBD-"+i.order_id);
                        // }
                        details.payment_source = i.payment_source
                        // details.delivery_charges=orderHistory[i].delivery_charges
                        if (result && result.length > 0) {
                            _.each(result, function (j) {
                                totalProductPrice = totalProductPrice + parseFloat(j.net_amount)
                            })

                        }
                        details.order_price = parseFloat(i.net_amount);
                        details.gift_amount = i.gift_amount;
                        details.wallet_discount_amount = i.wallet_discount_amount
                        details.net_amount = parseFloat(i.net_amount) - (i.referral_amount) - (orderHistory[0].discountAmount) - (i.wallet_discount_amount);
                        details.created_by = i.created_by;

                        details.payment_status = i.payment_status
                        // details.type=i.type;
                        details.payment_after_confirmation = i.payment_after_confirmation;
                        details.approve_rejection_reason = i.approve_rejection_reason;
                        details.area_id = orderHistory[0].area_id;
                        details.tip_agent = orderHistory[0].tip_agent
                        details.discountAmount = orderHistory[0].discountAmount
                        details.promoCode = orderHistory[0].promoCode
                        details.preparation_time = orderHistory[0].preparation_time
                        details.refund_amount = orderHistory[0].refund_amount
                        details.zelle_receipt_url = orderHistory[0].zelle_receipt_url
                        details.user_service_charge = orderHistory[0].user_service_charge
                        details.is_edit = orderHistory[0].is_edit
                        details.schedule_end_date = orderHistory[0].schedule_end_date
                        details.order_id = i.order_id;
                        details.supplier_branch_id = i.supplier_branch_id;
                        details.referral_amount = i.referral_amount;
                        details.delivery_min_time = i.delivery_min_time;
                        details.delivery_max_time = i.delivery_max_time;
                        // s.delivery_min_time,s.delivery_max_time


                        details.pres_description = i.pres_description
                        details.pres_image1 = i.pres_image1
                        details.pres_image2 = i.pres_image2
                        details.pres_image3 = i.pres_image3
                        details.pres_image4 = i.pres_image4
                        details.pres_image5 = i.pres_image5

                        details.supplier_id = i.id;
                        details.logo = i.logo;
                        details.addOn = i.addOn;
                        details.service_date = moment(i.schedule_date).format();
                        details.status = i.status;
                        details.comment = i.comment;
                        details.rating = i.rating;
                        details.latitude = i.latitude;
                        details.longitude = i.longitude;
                        // sb.latitude,sb.longitude

                        // if(i.is_agent==1){
                        var getAgentDbData = await common.GetAgentDbInformation(request.dbName);
                        logger.debug("===AGENT==CONNECTION==>>==2=", Object.entries(agentConnection).length)
                        if (Object.entries(agentConnection).length === 0) {
                            agentConnection = await common.RunTimeAgentConnection(getAgentDbData);
                        }
                        var agentData = await getAgentData(agentConnection, i.order_id);
                        // details.status=await orderStatus(agentConnection,i.order_id);
                        // details.status=i.status>5 && i.status!=11?i.status:details.status;
                        // console.log("=====++CHANGE==STATUS==",details.status,await orderStatus(agentConnection,i.order_id))

                        details.agent = agentData;
                        // }
                        details.near_on = moment(i.near_on).format();
                        if (i.delivered_on == '0000-00-00 00:00:00') {
                            details.delivered_on = moment(i.schedule_date).format();
                        }
                        else {
                            details.delivered_on = moment(i.delivered_on).format();
                        }
                        details.shipped_on = moment(i.del).format();
                        details.schedule_order = i.schedule_order;
                        details.shipped_on = moment(i.shipped_on).format();
                        details.payment_type = i.payment_type;
                        details.created_on = moment(i.created_on).format();
                        details.progress_on = moment(i.progress_on).format();
                        details.confirmed_on = moment(i.confirmed_on).format();

                        details.product = result;
                        details.product_count = result.length;
                        details.measuring_unit = result.measuring_unit;
                        details.user_delivery_address = i.user_delivery_address;
                        details.schedule_order = i.schedule_order;
                        details.supplier_name = i.supplier_name,
                            details.supplier_address = i.address,

                            details.logo = i.logo
                        details.from_address = i.from_address != undefined && i.from_address != "" ? i.from_address : ""
                        details.to_address = i.to_address != undefined && i.to_address != "" ? i.to_address : ""

                        details.branch_address = result[0].branch_address != undefined && result[0].branch_address != "" ? result[0].branch_address : ""
                        // branch_address
                        details.from_latitude = i.from_latitude != undefined && i.from_latitude != "" ? i.from_latitude : 0.0
                        details.to_latitude = i.to_latitude != undefined && i.to_latitude != "" ? i.to_latitude : 0.0
                        details.to_longitude = i.to_longitude != undefined && i.to_longitude != "" ? i.to_longitude : 0.0
                        details.from_longitude = i.from_longitude != undefined && i.from_longitude != "" ? i.from_longitude : 0.0

                        // details.adds_on=await getOrderAddsOn(request.dbName,i.cart_id);

                        final.push(details);
                        details = {};
                        totalProductPrice = 0
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                    }
                    else {
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                    }
                }
                // async.each(orderHistory,function(i,callback1){


                //     // console.log("====order==detail==",i)
                //     getProdcutDetails(request.dbName,reply,i.order_id,i.is_package,i.pricing_type,languageId,async function(err,result)

                //     {
                //         if(err){
                //             callback1(err);
                //         }
                //         else{
                //             console.log("==orderHistory[i]=",result)
                //             details.agent=[];

                //             if(result.length){
                //                 details.total_order_price = await totalOrderPrice(request.dbName,i.order_id)
                //                 let totalAddOnPrice = 0;

                //                 for(const [index,i] of result.entries()){
                //                     logger.debug("========result.addon====",i.addon)
                //                     if(i.adds_on && i.adds_on.length>0){
                //                         let addonprice = await addonTotalPrice(i.adds_on,i.quantity)
                //                         totalAddOnPrice = totalAddOnPrice + addonprice
                //                         logger.debug("=======toatladdonprice========",totalAddOnPrice)
                //                     }
                //                 }
                //                 logger.debug("===================total_____addonprice========",totalAddOnPrice)
                //                 details.total_order_price = details.total_order_price+totalAddOnPrice
                //                 console.log("=i.is_agent==",i.is_agent)
                //                 // o.pres_description,o.pres_image1,o.pres_image2,o.pres_image3,o.pres_image4,o.pres_image5
                //                 details.pres_description = orderHistory[0].pres_description;
                //                 details.pres_image1 = orderHistory[0].pres_image1;
                //                 details.pres_image2 = orderHistory[0].pres_image2;
                //                 details.pres_image3 = orderHistory[0].pres_image3;
                //                 details.pres_image4 = orderHistory[0].pres_image4;
                //                 details.pres_image5 = orderHistory[0].pres_image5;
                //                 details.have_pet = orderHistory[0].have_pet;
                //                 details.is_schedule = orderHistory[0].is_schedule;
                //                 details.parking_instructions = orderHistory[0].parking_instructions;
                //                 details.cleaner_in = orderHistory[0].cleaner_in;
                //                 details.area_to_focus = orderHistory[0].area_to_focus;
                //                 details.delivery_charges=i.delivery_charges;
                //                 details.donate_to_someone=i.donate_to_someone;
                //                 details.is_supplier_rated=i.is_supplier_rated;
                //                 details.handling_admin=i.handling_admin
                //                 details.handling_supplier=i.handling_supplier
                //                 details.duration=i.duration;
                //                 // details.questions=(i.questions.length)==2?null:i.questions
                //                 if(i.questions && i.questions.length==2){
                //                     details.questions = null
                //                 }else{
                //                     details.questions = i.questions
                //                 }
                //                 details.type = result[0].type
                //                 details.terminology = result[0].terminology
                //                 details.service_type = service_type[0].app_type
                //                 details.remarks=i.remarks;
                //                 details.self_pickup=i.self_pickup
                //                 details.is_edit=i.is_edit
                //                 details.edit_by=i.edit_by
                //                 details.remaining_amount=i.remaining_amount
                //                 // o.edit_by,o.remaining_amount
                //                 details.category_flow=i.category_flow
                //                 details.shippingData=[];
                //                 if(Object.keys(shipStationData).length>0){
                //                     details.shippingData=await Universal.getShippingOrderDetail(shipStationData,"JUSTCBD-"+i.order_id);
                //                 }
                //                 details.payment_source=i.payment_source
                //                 // details.delivery_charges=orderHistory[i].delivery_charges
                //                 if(result && result.length>0){
                //                     _.each(result,function(j){
                //                         totalProductPrice=totalProductPrice+parseFloat(j.net_amount)
                //                     })

                //                 }
                //                 details.order_price=parseFloat(i.net_amount);
                //                 details.gift_amount=i.gift_amount;
                //                 details.wallet_discount_amount = i.wallet_discount_amount
                //                 details.net_amount = parseFloat(i.net_amount)-(i.referral_amount)-(orderHistory[0].discountAmount)-(i.wallet_discount_amount);
                //                 details.created_by=i.created_by;

                //                 details.payment_status=i.payment_status
                //                 // details.type=i.type;
                //                 details.payment_after_confirmation=i.payment_after_confirmation;
                //                 details.approve_rejection_reason=i.approve_rejection_reason;
                //                 details.area_id = orderHistory[0].area_id;
                //                 details.tip_agent = orderHistory[0].tip_agent
                //                 details.discountAmount = orderHistory[0].discountAmount
                //                 details.promoCode = orderHistory[0].promoCode
                //                 details.preparation_time = orderHistory[0].preparation_time
                //                 details.refund_amount = orderHistory[0].refund_amount
                //                 details.zelle_receipt_url = orderHistory[0].zelle_receipt_url
                //                 details.user_service_charge = orderHistory[0].user_service_charge
                //                 details.is_edit = orderHistory[0].is_edit
                //                 details.schedule_end_date = orderHistory[0].schedule_end_date
                //                 details.order_id = i.order_id;
                //                 details.supplier_branch_id = i.supplier_branch_id;
                //                 details.referral_amount=i.referral_amount;
                //                 details.delivery_min_time=i.delivery_min_time;
                //                 details.delivery_max_time=i.delivery_max_time;
                //                 // s.delivery_min_time,s.delivery_max_time


                //                 details.pres_description=i.pres_description
                //                 details.pres_image1=i.pres_image1
                //                 details.pres_image2=i.pres_image2
                //                 details.pres_image3=i.pres_image3
                //                 details.pres_image4=i.pres_image4
                //                 details.pres_image5=i.pres_image5

                //                 details.supplier_id = i.id;
                //                 details.logo =i.logo;
                //                 details.addOn=i.addOn;
                //                 details.service_date =moment( i.schedule_date).format();
                //                 details.status = i.status;
                //                 details.comment=i.comment;
                //                 details.rating=i.rating;
                //                 details.latitude=i.latitude;
                //                 details.longitude=i.longitude;
                //                 // sb.latitude,sb.longitude

                //                 // if(i.is_agent==1){
                //                     var getAgentDbData=await common.GetAgentDbInformation(request.dbName);                                                   
                //                     logger.debug("===AGENT==CONNECTION==>>==2=",Object.entries(agentConnection).length)
                //                     if(Object.entries(agentConnection).length===0){
                //                         agentConnection=await common.RunTimeAgentConnection(getAgentDbData);
                //                     } 
                //                     var agentData=await getAgentData(agentConnection,i.order_id);
                //                     // details.status=await orderStatus(agentConnection,i.order_id);
                //                     // details.status=i.status>5 && i.status!=11?i.status:details.status;
                //                     // console.log("=====++CHANGE==STATUS==",details.status,await orderStatus(agentConnection,i.order_id))

                //                     details.agent=agentData;
                //                 // }
                //                 details.near_on = moment(i.near_on).format();
                //                 if(i.delivered_on=='0000-00-00 00:00:00'){
                //                     details.delivered_on = moment(i.schedule_date).format();
                //                 }
                //                 else {
                //                     details.delivered_on = moment(i.delivered_on).format();
                //                 }
                //                 details.shipped_on =  moment(i.del).format();
                //                 details.schedule_order=i.schedule_order;
                //                 details.shipped_on = moment(i.shipped_on).format();
                //                 details.payment_type = i.payment_type;
                //                 details.created_on = moment(i.created_on).format();
                //                 details.progress_on = moment(i.progress_on).format();
                //                 details.confirmed_on = moment(i.confirmed_on).format();

                //                 details.product = result;
                //                 details.product_count = result.length;
                //                 details.measuring_unit = result.measuring_unit;
                //                 details.user_delivery_address =  i.user_delivery_address;
                //                 details.schedule_order = i.schedule_order;
                //                 details.supplier_name=i.supplier_name,
                //                 details.supplier_address = i.address,

                //                 details.logo=i.logo
                //                 details.from_address=i.from_address!=undefined && i.from_address!=""?i.from_address:""
                //                 details.to_address=i.to_address!=undefined && i.to_address!=""?i.to_address:""

                //                 details.branch_address=result[0].branch_address!=undefined && result[0].branch_address!=""?result[0].branch_address:""
                //                 // branch_address
                //                 details.from_latitude=i.from_latitude!=undefined && i.from_latitude!=""?i.from_latitude:0.0
                //                 details.to_latitude=i.to_latitude!=undefined && i.to_latitude!=""?i.to_latitude:0.0
                //                 details.to_longitude=i.to_longitude!=undefined && i.to_longitude!=""?i.to_longitude:0.0
                //                 details.from_longitude=i.from_longitude!=undefined && i.from_longitude!=""?i.from_longitude:0.0

                //                 // details.adds_on=await getOrderAddsOn(request.dbName,i.cart_id);

                //                 final.push(details);
                //                 details = {};
                //                 totalProductPrice=0
                //                 callback1(null)
                //             }
                //             else{
                //                 callback1(null)
                //             }
                //         }
                //     })
                // },function(err){
                //     if(err){
                //         callback(err)
                //     }
                //     else{
                //         callback(null)
                //     }
                // })

            }
            else {
                callback(null);
            }
        }],
        getAddress: ['getProductDetails', function (callback) {
            var len = final.length;
            console.log(final)
            var temp = {};
            if (len != 0) {
                async.each(final, function (i, callback1) {
                    getAddressAccordingId(request.dbName, reply, i.user_delivery_address, function (err, result) {
                        if (err) {
                            callback(err);
                        } else {
                            if (result.length) {
                                result = result[0];
                                temp.address_line_1 = result.address_line_1;
                                temp.address_line_2 = result.address_line_2;
                                temp.pincode = result.pincode;
                                temp.city = result.city;
                                temp.landmark = result.landmark;
                                temp.address_link = result.address_link;
                                temp.customer_address = result.customer_address;
                                final[final.indexOf(i)].delivery_address = temp;
                                temp = {};
                                callback1(null);
                            }
                            else {
                                // console.log(final[i])
                                final[final.indexOf(i)].delivery_address = {};
                                callback1(null);
                            }
                        }
                    })
                }, function (err) {
                    if (err) {
                        callback(err)
                    }
                    else {
                        callback(null)
                    }
                })

            }
            else {
                callback(null);
            }
        }],
        final: ['getAddress', function (callback) {
            temp.orderHistory = final;
            callback(null);
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

/**
 * @description used for getting an order detail from user
 */
exports.orderDetailsV2 = async function (request, reply) {

    var accessToken;
    var userId;
    var orderId;
    var languageId;
    var orderHistory;
    var final = [];
    var temp = {};
    var version = Universal.getVersioning(request.path);
    let service_type = await ExecuteQ.Query(request.dbName, "select app_type from screen_flow", []);

    logger.debug("access=:version", request.body, version);


    async.auto({
        getValues: function (callback) {
            if (!(request.body.accessToken)) {
                var msg = "access token Id not found";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.languageId)) {
                var msg = "please enter languageId";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            if (!(request.body.orderId)) {
                var msg = "please enter languageId";
                return sendResponse.sendErrorMessage(msg, reply, 400);
            }
            accessToken = request.body.accessToken;
            languageId = request.body.languageId;
            orderId = request.body.orderId;
            callback(null);
        },
        getScheduleOrder: ['getValues', function (callback) {

            orderDetails(request.dbName, reply, orderId, version, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    // console.log("res....",result);
                    orderHistory = result;
                    callback(null);
                }
            })
        }],
        getProductDetails: ['getScheduleOrder', async function (callback) {
            var leng = orderHistory.length, totalProductPrice = 0, agentConnection = {};
            var details = {};
            let shipStationData = await Universal.getShippingData(request.dbName);
            if (leng != 0) {
                for (const [index, i] of orderHistory.entries()) {
                    var result = await getProdcutDetailsV1(request.dbName, reply,
                        i.order_id, i.is_package,
                        i.pricing_type, languageId)



                    if (result.length) {

                        i.is_appointment = result[0].is_appointment

                        details.total_order_price = await totalOrderPrice(request.dbName, i.order_id)
                        let totalAddOnPrice = 0;

                        let table_details = await getUserTableDetails(request.dbName, i.table_id);

                        if (parseInt(orderHistory[0].is_dine_in) == 1) {
                            console.log("==============table_details==i=====", i)
                            table_details.schedule_date = i.schedule_date;
                            table_details.schedule_end_date = i.schedule_end_date
                            table_details.seating_capacity = i.seating_capacity
                        } else {
                            table_details = null;
                        }

                        let isSPLit = await isOrderSplit(request.dbName, i.order_id, i.cart_id)
                        // /cart_id

                        if (parseInt(orderHistory[0].is_dine_in) == 1) {
                            console.log("==============table_details==i=====", i)
                            table_details.schedule_date = i.schedule_date;
                            table_details.schedule_end_date = i.schedule_end_date
                            table_details.seating_capacity = i.seating_capacity
                        } else {
                            table_details = null;
                        }
                        details.table_details = table_details
                        for (const [index, i] of result.entries()) {
                            let isRatedData = await ExecuteQ.Query(request.dbName, "select count(*) as isRated from product_rating where user_id=" + request.users.id + " and product_id=" + parseInt(i.product_id) + "")
                            i.is_rated = isRatedData && isRatedData.length > 0 ? isRatedData[0].isRated : 0
                            logger.debug("========result.addon====", i.addon)
                            if (i.adds_on && i.adds_on.length > 0) {
                                let addonprice = await addonTotalPrice(i.adds_on, i.quantity)
                                totalAddOnPrice = totalAddOnPrice + addonprice
                                logger.debug("=======toatladdonprice========", totalAddOnPrice)
                            }
                        }
                        details.for_edit_order_table_booking_price = result[0].table_booking_price
                        details.for_edit_order_table_booking_discount = result[0].table_booking_discount
                        details.purchase_limit = result[0].purchase_limit
                        details.admin_price_update_receipt = orderHistory[0].admin_price_update_receipt;
                        details.admin_updated_charge = orderHistory[0].admin_updated_charge
                        logger.debug("===================total_____addonprice========", totalAddOnPrice)
                        if (orderHistory[0].offerValue) {
                            details.new_display_price = (details.total_order_price * 100) / (100 - orderHistory[0].offerValue)
                            details.total_order_price = (details.total_order_price * 100) / (100 - orderHistory[0].offerValue)
                        }
                        details.total_order_price = details.total_order_price + totalAddOnPrice

                        console.log("=i.is_agent==handling_adminhandling_admin", i)
                        details.is_dine_in = orderHistory[0].is_dine_in;
                        details.business_name = i.business_name
                        details.abn_number = i.abn_number

                        details.currency_exchange_rate = orderHistory[0].currency_exchange_rate
                        details.local_currency = orderHistory[0].local_currency
                        // o.pres_description,o.pres_image1,o.pres_image2,o.pres_image3,o.pres_image4,o.pres_image5
                        details.pres_description = orderHistory[0].pres_description;
                        details.pres_image1 = orderHistory[0].pres_image1;
                        details.pres_image2 = orderHistory[0].pres_image2;
                        details.liquor_bottle_deposit_tax = orderHistory[0].liquor_bottle_deposit_tax;
                        details.liquor_plt_deposit_tax = orderHistory[0].liquor_plt_deposit_tax;
                        details.seating_capacity = orderHistory[0].seating_capacity
                        details.pres_image3 = orderHistory[0].pres_image3;
                        details.offerValue = orderHistory[0].offerValue;
                        details.no_touch_delivery = orderHistory[0].no_touch_delivery
                        details.vehicle_number = orderHistory[0].vehicle_number;
                        details.drop_off_date = orderHistory[0].drop_off_date;
                        details.is_cutlery_required = orderHistory[0].is_cutlery_required
                        details.user_on_the_way = orderHistory[0].user_on_the_way
                        details.pres_image4 = orderHistory[0].pres_image4;
                        details.pres_image5 = orderHistory[0].pres_image5;
                        details.agent_verification_code = orderHistory[0].agent_verification_code;
                        details.have_pet = orderHistory[0].have_pet;
                        details.is_schedule = orderHistory[0].is_schedule;
                        details.parking_instructions = orderHistory[0].parking_instructions;

                        details.freeQuantity = result[0].freeQuantity

                        details.cleaner_in = orderHistory[0].cleaner_in;
                        details.zoom_call_url = orderHistory[0].zoom_call_url
                        details.zoom_call_start_url = orderHistory[0].zoom_call_start_url
                        details.area_to_focus = orderHistory[0].area_to_focus;
                        details.is_multi_branch = orderHistory[0].is_multi_branch;
                        details.branch_address = orderHistory[0].branch_address;
                        details.delivery_charges = i.delivery_charges;
                        details.donate_to_someone = i.donate_to_someone;
                        details.is_supplier_rated = i.is_supplier_rated;
                        details.handling_admin = i.handling_admin
                        details.supplier_user_created_id = i.supplier_user_created_id;
                        details.handling_supplier = i.handling_supplier
                        details.duration = i.duration;
                        details.proxy_phone_number = i.proxy_phone_number
                        //,o.admin_updated_charge,o.admin_price_update_receipt
                        // details.questions=(i.questions.length)==2?null:i.questions
                        if (i.questions && i.questions.length == 2) {
                            details.questions = null
                        } else {
                            details.questions = i.questions
                        }


                        details.slot_price = i.slot_price
                        details.type = result[0].type
                        details.terminology = result[0].terminology
                        details.service_type = service_type[0].app_type
                        details.remarks = i.remarks;
                        details.self_pickup = i.self_pickup
                        details.is_edit = i.is_edit
                        details.edit_by = i.edit_by
                        details.remaining_amount = i.remaining_amount
                        // o.edit_by,o.remaining_amount
                        details.category_flow = i.category_flow;
                        details.shippingData = [];
                        details.dhlData = await ExecuteQ.Query(request.dbName, `select order_id,bar_code,shipping_charge,package_charge,chargeabl_weight,airway_bill_number,base64_image from dhl_shipment where order_id=?`, [i.order_id]);
                        // if(Object.keys(shipStationData).length>0){
                        //     details.shippingData=await Universal.getShippingOrderDetail(shipStationData,"JUSTCBD-"+i.order_id);
                        // }
                        let shipooData = await Execute.Query(request.dbName, `select shippo_label_url,shippo_tracking_number from orders where  id=? `, [i.order_id]);
                        details.shippo_label_url = shipooData[0].shippo_label_url
                        details.shippo_tracking_number = shipooData[0].shippo_tracking_number
                        details.payment_source = i.payment_source
                        // details.delivery_charges=orderHistory[i].delivery_charges
                        if (result && result.length > 0) {
                            _.each(result, function (j) {
                                totalProductPrice = totalProductPrice + parseFloat(j.net_amount)
                                j.display_price = details.new_display_price;
                            })

                        }
                        details.order_price = (isSPLit == 1 ? parseFloat(i.net_amount) + parseFloat(totalAddOnPrice) : parseFloat(i.net_amount));
                        details.gift_amount = i.gift_amount;
                        details.wallet_discount_amount = i.wallet_discount_amount
                        details.net_amount = (isSPLit == 1 ? parseFloat(i.net_amount) + parseFloat(totalAddOnPrice) : parseFloat(i.net_amount)) - (i.referral_amount) - (i.discountAmount) - (i.wallet_discount_amount);
                        details.created_by = i.created_by;


                        details.payment_status = i.payment_status
                        // details.type=i.type;
                        details.payment_after_confirmation = i.payment_after_confirmation;
                        details.approve_rejection_reason = i.approve_rejection_reason;
                        details.area_id = orderHistory[0].area_id;
                        details.tip_agent = orderHistory[0].tip_agent;
                        details.order_delivery_type = orderHistory[0].order_delivery_type

                        details.discountAmount = i.discountAmount;

                        details.promoCode = i.promoCode
                        details.preparation_time = i.preparation_time
                        details.refund_amount = orderHistory[0].refund_amount
                        details.zelle_receipt_url = orderHistory[0].zelle_receipt_url
                        details.user_service_charge = i.user_service_charge
                        // details.user_service_charge = orderHistory[0].user_service_charge
                        details.is_edit = orderHistory[0].is_edit
                        details.schedule_end_date = orderHistory[0].schedule_end_date
                        details.schedule_date = orderHistory[0].schedule_date

                        details.order_id = i.order_id;
                        details.random_order_id = i.random_order_id;
                        details.supplier_branch_id = i.supplier_branch_id;
                        details.referral_amount = i.referral_amount;
                        details.delivery_min_time = i.delivery_min_time;
                        details.delivery_max_time = i.delivery_max_time;
                        // s.delivery_min_time,s.delivery_max_time


                        details.pres_description = i.pres_description
                        details.pres_image1 = i.pres_image1
                        details.pres_image2 = i.pres_image2
                        details.pres_image3 = i.pres_image3
                        details.pres_image4 = i.pres_image4
                        details.pres_image5 = i.pres_image5

                        details.supplier_id = i.id;
                        details.logo = i.logo;
                        details.addOn = i.addOn;
                        details.service_date = moment(i.schedule_date).format();
                        details.status = i.status;
                        details.comment = i.comment;
                        details.rating = i.rating;
                        details.latitude = i.latitude;
                        details.longitude = i.longitude;
                        // sb.latitude,sb.longitude

                        // if(i.is_agent==1){
                        var getAgentDbData = await common.GetAgentDbInformation(request.dbName);
                        logger.debug("===AGENT==CONNECTION==>>==2=", Object.entries(agentConnection).length)
                        if (Object.entries(agentConnection).length === 0) {
                            agentConnection = await common.RunTimeAgentConnection(getAgentDbData);
                        }
                        var agentData = await getAgentData(agentConnection, i.order_id);
                        // details.status=await orderStatus(agentConnection,i.order_id);
                        // details.status=i.status>5 && i.status!=11?i.status:details.status;
                        // console.log("=====++CHANGE==STATUS==",details.status,await orderStatus(agentConnection,i.order_id))

                        details.agent = agentData;
                        // }
                        details.near_on = moment(i.near_on).format();
                        if (i.delivered_on == '0000-00-00 00:00:00') {
                            details.delivered_on = moment(i.schedule_date).format();
                        }
                        else {
                            details.delivered_on = moment(i.delivered_on).format();
                        }
                        details.shipped_on = moment(i.del).format();
                        details.schedule_order = i.schedule_order;
                        details.shipped_on = moment(i.shipped_on).format();
                        details.payment_type = i.payment_type;
                        details.created_on = moment(i.created_on).format();
                        details.progress_on = moment(i.progress_on).format();
                        details.confirmed_on = moment(i.confirmed_on).format();

                        details.product = result;

                        details.product_count = result.length;
                        details.measuring_unit = result.measuring_unit;
                        // if(orderHistory[0].offerValue) {
                        //     details.display_price =  (details.total_order_price*100)/(100-orderHistory[0].offerValue)
                        // }
                        details.user_delivery_address = i.user_delivery_address;
                        details.schedule_order = i.schedule_order;
                        details.supplier_name = i.supplier_name,
                            details.supplier_address = i.address,
                            details.loyality_point_discount = i.loyality_point_discount;
                        details.have_coin_change = i.have_coin_change;
                        details.logo = i.logo
                        details.from_address = i.from_address != undefined && i.from_address != "" ? i.from_address : ""
                        details.to_address = i.to_address != undefined && i.to_address != "" ? i.to_address : ""

                        // details.branch_address=result[0].branch_address!=undefined && result[0].branch_address!=""?result[0].branch_address:""

                        details.branch_name = result[0].branch_name != undefined && result[0].branch_name != "" ? result[0].branch_name : ""
                        // branch_address
                        details.from_latitude = i.from_latitude != undefined && i.from_latitude != "" ? i.from_latitude : 0.0
                        details.to_latitude = i.to_latitude != undefined && i.to_latitude != "" ? i.to_latitude : 0.0
                        details.to_longitude = i.to_longitude != undefined && i.to_longitude != "" ? i.to_longitude : 0.0
                        details.from_longitude = i.from_longitude != undefined && i.from_longitude != "" ? i.from_longitude : 0.0

                        // details.adds_on=await getOrderAddsOn(request.dbName,i.cart_id);

                        final.push(details);
                        details = {};
                        totalProductPrice = 0
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                    }
                    else {
                        if (index == (leng - 1)) {
                            callback(null);
                        }
                    }
                }


            }
            else {
                callback(null);
            }
        }],
        getAddress: ['getProductDetails', function (callback) {
            var len = final.length;
            console.log(final)
            var temp = {};
            if (len != 0) {
                async.each(final, function (i, callback1) {
                    getAddressAccordingId(request.dbName, reply, i.user_delivery_address, function (err, result) {
                        if (err) {
                            callback(err);
                        } else {
                            if (result.length) {
                                result = result[0];
                                temp.address_line_1 = result.address_line_1;
                                temp.address_line_2 = result.address_line_2;
                                temp.pincode = result.pincode;
                                temp.city = result.city;
                                temp.landmark = result.landmark;
                                temp.address_link = result.address_link;
                                temp.customer_address = result.customer_address;
                                temp.user_name = result.name;
                                temp.phone_number = result.phone_number;
                                temp.country_code = result.country_code
                                temp.reference_address = result.reference_address
                                final[final.indexOf(i)].delivery_address = temp;
                                temp = {};
                                callback1(null);
                            }
                            else {
                                // console.log(final[i])
                                final[final.indexOf(i)].delivery_address = {};
                                callback1(null);
                            }
                        }
                    })
                }, function (err) {
                    if (err) {
                        callback(err)
                    }
                    else {
                        callback(null)
                    }
                })

            }
            else {
                callback(null);
            }
        }],
        final: ['getAddress', function (callback) {
            temp.orderHistory = final;
            callback(null);
        }]
    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(temp, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

const getUserTableDetails = (dbName, table_id) => {
    return new Promise(async (resolve, reject) => {
        try {
            let query = "select * from supplier_tables where id=?";
            let params = [table_id]
            let data = await ExecuteQ.Query(dbName, query, params);
            if (data && data.length > 0) {
                resolve(data[0]);
            } else {
                resolve({})
            }
        } catch (err) {
            logger.debug("errrrrrrrr========", err);
            resolve({})
        }
    })
}
const isOrderSplit = (dbName, orderId, cartId) => {
    return new Promise(async (resolve, reject) => {
        try {
            let query = "select id from orders where id!=? and cart_id=?";
            let params = [orderId, cartId]
            let data = await ExecuteQ.Query(dbName, query, params);
            if (data && data.length > 0) {
                resolve(1);
            } else {
                resolve(0)
            }
        } catch (err) {
            logger.debug("errrrrrrrr========", err);
            resolve(0)
        }
    })
}

const addonTotalPrice = (addOns, quantity) => {
    return new Promise(async (resolve, reject) => {
        try {
            let addonprice = 0
            if (addOns && addOns.length > 0) {
                for (const [index, i] of addOns.entries()) {
                    addonprice = addonprice + (i.price * parseInt(i.quantity))
                    // addonprice = addonprice + (i.price*i.quantity)
                }
            }
            resolve(addonprice)
        }
        catch (Err) {
            reject(Err)
        }
    })
}


const totalOrderPrice = (dbName, order_id) => {
    return new Promise(async (resolve, reject) => {
        let temp_price = 0
        logger.debug("=================result=======", order_id);
        let query = 'select op.price,op.order_id,op.freeQuantity,op.product_name,op.quantity,op.image_path as product_image from order_prices op';
        let params = []
        let product1 = await ExecuteQ.Query(dbName, query, params);
        let is_decimal_quantity_allowed_val = await Universal.is_decimal_quantity_allowed(dbName)
        var is_decimal_quantity_allowed = "0";
        if (is_decimal_quantity_allowed_val[0] && is_decimal_quantity_allowed_val[0].value) {
            is_decimal_quantity_allowed = is_decimal_quantity_allowed_val[0].value
        }
        logger.debug("========product1.len======", product1.length)
        for (var j = 0; j < product1.length; j++) {
            // logger.debug("=========product1[j].order_id == result.id==============",order_id,product1[j].order_id,product1[j].order_id == order_id);
            let id1 = parseInt(product1[j].order_id)
            let id2 = order_id
            // logger.debug("=============id1=====id2 ======",id1,id2)
            if (id1 == id2) {
                if (is_decimal_quantity_allowed == "1") {
                    temp_price = Number(product1[j].price) * parseFloat(product1[j].quantity) + temp_price
                } else {
                    temp_price = Number(product1[j].price) * Number(product1[j].quantity) + temp_price
                }
                // logger.debug("==============temppriee======1===",temp_price)
            }
        }
        logger.debug("========temp_price========", temp_price);
        resolve(temp_price);
    })
}


const getProductAddsOn = (dbName, cartId, productId) => {
    return new Promise(async (resolve, reject) => {
        try {
            var data = await ExecuteQ.Query(dbName, "select " +
                "cart_adds_on.*" +
                " from  product_adds_on padds join product_adds_on_tyoe ptype on ptype.adds_on_id=padds.id where padds.product_id=? and padds.=?", [parseInt(cartId), parseInt(productId)])
            resolve(data)
        }
        catch (Err) {
            reject(Err)
        }
    })
}

const getOrderAddsOn = (dbName, cartId, productId) => {
    return new Promise(async (resolve, reject) => {
        try {
            var data = await ExecuteQ.Query(dbName, "select " +
                "cart_adds_on.*" +
                " from cart_adds_on join product_adds_on padds on padds.id=cart_adds_on.adds_on_id where cart_id=? and padds.product_id=?", [parseInt(cartId), parseInt(productId)])
            resolve(data)
        }
        catch (Err) {
            reject(Err)
        }
    })
}

async function orderDetails(dbName, reply, orderId, version, callback) {
    var orderId = Array.isArray(orderId) == true ? orderId : [orderId]


    var sql;
    if (parseInt(version) >= 1) {
        sql = " select sb.address as branch_address,s.user_created_id as supplier_user_created_id,s.is_sponser as is_multi_branch,s.offerValue,o.zoom_call_url,o.zoom_call_start_url,o.agent_verification_code,o.is_dine_in,o.is_cutlery_required,s.local_currency,s.currency_exchange_rate,o.have_coin_change,o.schedule_date,o.user_on_the_way,o.loyality_point_discount,o.table_id,o.slot_price,o.wallet_discount_amount,o.is_schedule,o.schedule_end_date,s.delivery_min_time,s.delivery_max_time,IF((select count(*) from supplier_rating sr where sr.order_id=o.id)>0,1,0) as is_supplier_rated,o.donate_to_someone,o.edit_by,ua.latitude as to_latitude,ua.longitude as to_longitude,ua.latitude,ua.longitude,ua.landmark,u.business_name,u.abn_number,ua.address_line_1,ua.address_line_2,ua.address_link,ua.customer_address,ua.phone_number,o.remaining_amount,o.is_edit, o.gift_amount,o.have_pet,o.parking_instructions,o.cleaner_in,o.area_to_focus,o.approve_rejection_reason,o.payment_status,o.pres_description,o.type,o.payment_after_confirmation,o.created_by,o.pres_image1,o.pres_image2,o.pres_image3,o.pres_image4,o.pres_image5,cr.questions,sb.latitude,sb.longitude,IFNULL(odp.discountAmount,0) as discountAmount,odp.promoCode,o.referral_amount,o.user_service_charge,o.zelle_receipt_url,o.confirmed_on,o.preparation_time,o.tip_agent,o.from_address,o.to_address,o.from_latitude,from_longitude,o.cart_id,o.refund_amount,o.progress_on,o.self_pickup,o.duration,o.is_agent,op.price,s.name as supplier_name,s.address,s.logo,cr.area_id,p.pricing_type,o.net_amount,o.is_package,o.schedule_date,s.id,s.logo,o.supplier_branch_id,o.schedule_order ,o.payment_source,o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.service_date,o.remarks,o.delivered_on,o.created_on,o.handling_admin,o.handling_supplier,o.delivery_charges,op.price " +
            " ,o.random_order_id,o.no_touch_delivery,o.seating_capacity,o.proxy_phone_number,o.liquor_bottle_deposit_tax,o.liquor_plt_deposit_tax,o.vehicle_number,o.order_delivery_type,o.table_number,is_subtotal_add,o.is_shiprocket_assigned,o.admin_updated_charge,o.admin_price_update_receipt,o.drop_off_date,op.product_name,op.product_desc,op.image_path,cr.addOn from orders o join order_prices op " +
            " on o.id = op.order_id join supplier_branch sb on sb.id = o.supplier_branch_id join supplier s on s.id = sb.supplier_id join user u on u.id=o.user_id left join user_address ua on ua.id=o.user_delivery_address left join cart cr on cr.id=o.cart_id join product p on p.id = op.product_id left join order_promo odp on odp.orderId = o.id  where o.id IN (?) GROUP BY o.id";

    }
    else {
        sql = " select sb.address as branch_address,s.is_sponser as is_multi_branch,s.offerValue,o.zoom_call_url,o.zoom_call_start_url,o.agent_verification_code,o.is_dine_in,o.is_cutlery_required,s.local_currency,s.currency_exchange_rate,o.have_coin_change,o.schedule_date, o.user_on_the_way,o.loyality_point_discount,o.table_id,o.slot_price,o.wallet_discount_amount,o.is_schedule,o.schedule_end_date,s.delivery_min_time,s.delivery_max_time,IF((select count(*) from supplier_rating sr where sr.order_id=o.id)>0,1,0) as is_supplier_rated,o.donate_to_someone,o.is_edit,ua.latitude,ua.longitude,ua.landmark,ua.address_line_1,ua.address_line_2,ua.address_link,ua.customer_address,ua.phone_number,o.gift_amount,o.approve_rejection_reason,o.payment_status,o.created_by,o.type,o.payment_after_confirmation,o.pres_description,o.pres_image1,o.pres_image2,o.pres_image3,o.pres_image4,o.pres_image5,IFNULL(odp.discountAmount,0) as discountAmount,odp.promoCode,o.cart_id,o.zelle_receipt_url,o.user_service_charge,o.progress_on,o.self_pickup,o.duration,o.is_agent,op.price,s.name as supplier_name,s.address,s.logo,cr.area_id,p.pricing_type,o.net_amount,o.is_package,o.schedule_date,s.id,o.preparation_time,s.logo,o.supplier_branch_id,o.schedule_order ,o.payment_source,o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.service_date,o.remarks,o.delivered_on,o.created_on,o.handling_admin,o.handling_supplier,o.delivery_charges,op.price " +
            "  ,o.random_order_id,o.no_touch_delivery,o.seating_capacity,o.proxy_phone_number,o.liquor_bottle_deposit_tax,o.liquor_plt_deposit_tax,o.vehicle_number,o.order_delivery_type,o.table_number,is_subtotal_add,o.is_shiprocket_assigned,o.admin_updated_charge,o.admin_price_update_receipt,o.drop_off_date,op.product_name,o.refund_amount,op.product_desc,op.image_path from orders o join order_prices op " +
            " on o.id = op.order_id join supplier_branch sb on sb.id = o.supplier_branch_id join supplier s on s.id = sb.supplier_id join user u on u.id=o.user_id left join user_address ua on ua.id=o.user_delivery_address left join cart cr on cr.id=o.cart_id join product p on p.id = op.product_id left join order_promo odp on odp.orderId = o.id  where o.id IN (?) GROUP BY o.id";

    }

    try {
        var data = await ExecuteQ.Query(dbName, sql, [orderId])
        callback(null, data)
    }
    catch (Err) {
        callback(Err)
    }

}

exports.updateRegId = function (req, res) {
    var deviceToken;
    var deviceType;
    var languageId;
    var accessToken;
    async.auto({
        getValues: function (cb) {
            if (!(req.body.accessToken)) {
                var msg = "access token not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            if (!(req.body.deviceToken)) {
                var msg = "device token not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            if (!req.body.deviceType) {
                var msg = "device type not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            if (req.body && req.body.accessToken && req.body.deviceToken && req.body.deviceType) {
                accessToken = req.body.accessToken;
                deviceToken = req.body.deviceToken;
                deviceType = req.body.deviceType;
                cb(null);
            } else {
                var msg = "something went wrong";
                return sendResponse.sendErrorMessage(msg, res, 500);
            }
        },
        updateAccessToken: ['getValues', function (cb) {
            var sql = "update user set device_token = ?,device_type = ? where access_token = ? limit 1";
            multiConnection[req.dbName].query(sql, [deviceToken, deviceType, accessToken], function (err, result) {
                if (err) {
                    var msg = "db error :";
                    sendResponse.sendErrorMessage(msg, res, 500);
                }
                else {
                    cb(null);
                }
            })

        }],
    }, function (err, response) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, res, 200);
        }

    })

}


exports.testingIosPush = function (callback) {
    var data = {
        "status": 1,
        "message": "You Have Received A new Order",
        "sound": "vip_tone0",
        "title": "Order Generated",
        "data": "12345656"
        //"data": {"user_name": userName,"orderId":order.id,"Date":deliveryDate},
    };
    //data.message= userName + data.message;

    var deviceToken = "7c66f789dedcdba1375fed82a9a5ace5434cd065a916c15ae1f789e7a442de75";

    pushNotifications.sendIosPushNotification(deviceToken, data, function (err, result) {
        console.log(".........errrrrrr.......", err, result);
        if (err) {
            /*     console.log("err2",err);
                 callback(null)*/
        }
        else {
            //console.log("push sent");
            /*   callback(null);*/
        }
    });
}

exports.getPendingAndScheduleCount = function (req, res) {
    logger.debug("==========request of getPendingAndScheduleCount=================", req.headers)
    var accessToken;
    var data = {}
    if (req.headers.secretdbkey != undefined && req.headers.secretdbkey != "") {
        var decipher = crypto.createDecipher(algorithm, crypto_password)
        var decDbName = decipher.update(req.headers.secretdbkey, 'hex', 'utf8')
        decDbName += decipher.final('utf8');
        console.log("==DB_NAME==", decDbName)
        dbConnection = multiConnection[decDbName]
    }
    else {
        dbConnection = connection
    }

    async.auto({
        getValues: function (cb) {
            if (!(req.body.accessToken)) {
                var msg = "access token not found";
                return sendResponse.sendErrorMessage(msg, res, 400);
            }
            accessToken = req.body.accessToken;

            cb(null);
        },
        pendingOrderRating: ['getValues', async function (callback) {
            try {
                var query = " select op.price,cr.delivery_charges,ua.area_id,p.pricing_type,o.is_package,o.schedule_date,s.id,s.logo,o.supplier_branch_id,o.schedule_order ,o.payment_type,o.user_delivery_address,o.created_on,o.status,o.comment,o.rating,o.near_on,o.shipped_on,o.net_amount,o.id as order_id,o.service_date,o.remarks,o.delivered_on,o.created_on,o.handling_admin,o.handling_supplier,o.delivery_charges,o.delivery_charges,op.price " +
                    " ,op.product_name,op.product_desc,op.image_path,s.name as supplier_name,s.address as supplier_address from orders o join order_prices op " +
                    " on o.id = op.order_id join supplier_branch sb on sb.id = op.supplier_branch_id join supplier s on s.id = sb.supplier_id join cart cr on cr.id=o.cart_id  join user u on u.id=o.user_id join product p on p.id = op.product_id join user_address ua on ua.id =o.user_delivery_address where  u.access_token = ? and o.status = 5 and o.rating=0 and o.is_rating_skip=0  GROUP BY o.id";
                let result = await ExecuteQ.Query(req.dbName, query, [accessToken]);
                data.pendingRatingOrder = result;
                callback(null)
            }
            catch (Err) {
                callback(Err)
            }
        }],


        scheduleOrderCount: ['pendingOrderRating', function (callback) {
            logger.debug("==============in 1==========", req.dbName)


            getScheduleOrders(req.dbName, res, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                }
                else {
                    data.scheduleOrders = result.length;
                    callback(null)
                }
            })

        }],

        pendingRatingOrder: ['getValues', function (callback) {
            logger.debug("==============in 2==========", req.dbName)

            getPendingorder(req.dbName, res, accessToken, function (err, result) {
                if (err) {
                    callback(err);
                }
                else {
                    logger.debug("============in else of callback getPendingorder=========", req.dbName)
                    if (result) {
                        logger.debug("============in else of callback getPendingorder=======if===result=======")
                        data.pendingOrder = 1;
                        callback(null)
                    }
                    else {
                        data.pendingOrder = 0;
                        callback(null)
                    }
                }
            })


        }],
    }, function (err, response) {
        if (err) {
            logger.debug("====================error at the end=========================")
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            logger.debug("================not====error at the end=========================", data)
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
        }

    })

}
exports.getAllCategoryNew = async function (req, res) {

    console.log("******__START__**__GETALL CATEGORY__NEW__****", new Date());
    console.log("123==================---", req.query)
    var tempFlag = false
    var countryID;
    var areaId;
    var accessToken = req.query.accessToken == "" || req.query.accessToken == undefined ? "" : req.query.accessToken;
    logger.debug("======acdesstoken===========", accessToken)
    var languageId, categoryId;
    var latitude = req.query.latitude || 0.0;
    var longitude = req.query.longitude || 0.0;
    logger.debug("==latitude====longitude==>>", latitude, longitude)
    latitude = parseFloat(latitude).toFixed(config.get("server.fixedUpto"))
    longitude = parseFloat(longitude).toFixed(config.get("server.fixedUpto"))
    // logger.debug("==latitude====longitude==>>",latitude,longitude)
    var offset = req.body.offset != undefined && req.body.offset != "" ? req.body.offset : "+0530"
    if (req.query.languageId) {
        languageId = req.query.languageId;
    } else {
        languageId = 0;
    }

    if (req.query.areaId) {
        areaId = req.query.areaId;
    } else {
        areaId = 0;
    }
    if (req.query.categoryId) {
        categoryId = req.query.categoryId;
    } else {
        categoryId = 0;
    }
    var categoryArray = {};
    var dbConnection;
    if (req.headers.secretdbkey != undefined && req.headers.secretdbkey != "") {
        var decipher = crypto.createDecipher(algorithm, crypto_password)
        var decDbName = decipher.update(req.headers.secretdbkey, 'hex', 'utf8')
        decDbName += decipher.final('utf8');
        console.log("==DB_NAME==", decDbName)
        dbConnection = multiConnection[decDbName]
    }
    else {
        dbConnection = connection
    }
    let isCached = false, isDataCached = false;
    let userData = [];
    if (accessToken !== "") {
        logger.debug("===dbName=====dbName====", req.dbName)
        userData = await Universal.getUserData(req.dbName, accessToken);
        logger.debug("========userdata========", userData)

    }

    let allRequiredSettings = await ExecuteQ.Query(req.dbName, "select `key`,`value` from tbl_setting where `key` IN (?) and `value`=?", [["category_sequence", "is_main_category_sequence_wise", "enable_geofence_wise_categories", "delivery_distance_unit"], "1"]);

    //let allRequiredSettings = await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key` IN (?) and `value`=?",[["chat_enable", "referral_feature"],"1"]);
    //console.log("allRequiredSettings@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",allRequiredSettings);

    var requiredSettingArray = [];
    if (allRequiredSettings && allRequiredSettings.length > 0) {
        for (const [index, settingInfo] of allRequiredSettings.entries()) {
            requiredSettingArray[settingInfo.key] = [settingInfo];
        }
    }

    async.auto({
        getEnglishCategory: function (callback) {
            /// set static language id
            logger.debug("==isDataCached====>>", isDataCached)
            console.log("===========cate id========1=======", categoryId)

            categoryListingV1(req, req.dbName, res,
                languageId, dbConnection,
                latitude, longitude, categoryId, requiredSettingArray, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.english = result;
                        console.log("111");
                        callback(null, result);
                    }
                })


        },
        getLanguage: function (callback) {

            languageLists(req.dbName, res, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    categoryArray.languageList = result;
                    console.log("333");
                    callback(null, result);
                }
            })

        },
        top_banner: function (callback) {


            getFrontAd(req, req.dbName, res, dbConnection, latitude, longitude, offset, categoryId, requiredSettingArray, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    categoryArray.topBanner = result
                    console.log("555");
                    callback(null)
                }
            })

        },
        brandsList: function (callback) {

            getAllBrands(res, languageId, req.dbName, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    categoryArray.brands = result
                    // console.log("555");
                    callback(null)
                }
            })

        },
        productList: function (callback) {

            getAllDefaultCatProduct(req, res, languageId, req.dbName, categoryId, latitude, longitude, function (err, result) {
                logger.debug("==ERR!===", err);
                if (err) {
                    callback(err);
                } else {
                    categoryArray.product = result;
                    // console.log("555");
                    callback(null)
                }
            })

        },
        recentViewHistory: function (callback) {
            categoryArray.reventActivity = [];
            // console.log("555");
            callback(null)

        },
        suplierTags: async function (callback) {
            let query = "select * from supplier_tags";
            let result = await ExecuteQ.Query(req.dbName, query, []);
            categoryArray.supplier_tags = result;
            callback(null);
        },
        checkUserSubscribed: async function (callback) {
            categoryArray.is_subscribed = 0;
            if (userData && userData.length > 0) {
                let subscriptionData = await ExecuteQ.Query(req.dbName,
                    "select id from user_subscription where user_id=? and status=?", [userData[0].id, 1]);
                if (subscriptionData && subscriptionData.length > 0) {
                    categoryArray.is_subscribed = 1;
                } else {
                    categoryArray.is_subscribed = 0
                }
                callback(null);
            } else {
                callback(null);
            }

        }
    }, async function (err, result) {
        logger.debug("=========ERR!=========", err);

        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            let user_wallet_amount = 0;
            logger.debug("===dbNam====", req.dbName)

            if (userData && userData.length > 0) {
                user_wallet_amount = userData[0].wallet_amount
                categoryArray.user_wallet_amount = user_wallet_amount

            }

            sendResponse.sendSuccessData(categoryArray, constant.responseMessage.SUCCESS, res, 200);


        }
    })



}

// exports.getAllCategoryNew = async function(req,res){

//     console.log("******__START__**__GETALL CATEGORY__NEW__****",new Date());
//     console.log("123==================---",req.query)
//     var tempFlag= false
//     var countryID ;
//     var areaId;
//     var accessToken= req.query.accessToken=="" || req.query.accessToken==undefined?"":req.query.accessToken;
//    logger.debug("======acdesstoken===========",accessToken)
//     var languageId,categoryId;
//     var latitude = req.query.latitude || 0.0;
//     var longitude = req.query.longitude || 0.0;
//     logger.debug("==latitude====longitude==>>",latitude,longitude)
//     latitude=parseFloat(latitude).toFixed(config.get("server.fixedUpto"))
//     longitude=parseFloat(longitude).toFixed(config.get("server.fixedUpto"))
//     // logger.debug("==latitude====longitude==>>",latitude,longitude)
//     var offset = req.body.offset!=undefined && req.body.offset!=""?req.body.offset:"+0530"
//     if(req.query.languageId){
//         languageId = req.query.languageId;
//     }else{
//         languageId = 0;
//     }

//     if(req.query.areaId){
//         areaId = req.query.areaId;
//     }else{
//         areaId = 0;
//     }
//     if(req.query.categoryId){
//         categoryId = req.query.categoryId;
//     }else{
//         categoryId = 0;
//     }
//     var categoryArray = {};
//     var dbConnection;
//     if(req.headers.secretdbkey!=undefined && req.headers.secretdbkey!=""){
//         var decipher = crypto.createDecipher(algorithm,crypto_password)
//         var decDbName = decipher.update(req.headers.secretdbkey,'hex','utf8')
//         decDbName += decipher.final('utf8');
//         console.log("==DB_NAME==",decDbName)
//         dbConnection=multiConnection[decDbName]
//     }
//     else{
//         dbConnection=connection
//     }
//     let isCached=false,isDataCached=false;
//     let userData = [];
//     if(accessToken!==""){
//         logger.debug("===dbName=====dbName====",req.dbName)
//         userData=await Universal.getUserData(req.dbName,accessToken);
//         logger.debug("========userdata========",userData)

//     } 

//             async.auto({
//                 getEnglishCategory:function(callback){
//                       /// set static language id
//                       logger.debug("==isDataCached====>>",isDataCached)

//                     categoryListingV1(req,req.dbName,res,languageId,dbConnection,latitude,longitude,categoryId,function(err,result){
//                         if(err){
//                             callback(err);
//                         } else {
//                             categoryArray.english = result;
//                             console.log("111");
//                             callback(null,result);
//                         }
//                     })


//                 },
//                 getLanguage:function(callback){

//                     languageLists(req.dbName,res,function(err,result){
//                             if(err){
//                                 callback(err);
//                             }else{
//                                 categoryArray.languageList = result;
//                                 console.log("333");
//                                 callback(null,result);
//                             }
//                         })

//                 },
//                 top_banner:function(callback){


//                         getFrontAd(req,req.dbName,res,dbConnection,latitude,longitude,offset,categoryId,function(err,result){
//                             if(err){
//                                 callback(err);
//                             } else {
//                                 categoryArray.topBanner = result
//                                 console.log("555");
//                                 callback(null)
//                             }
//                         })

//                 },
//                 brandsList:function(callback){ 

//                         getAllBrands(res,languageId,req.dbName,function(err,result){
//                             if(err){
//                                 callback(err);
//                             } else {
//                                 categoryArray.brands = result
//                                 // console.log("555");
//                                 callback(null)
//                             }
//                         })

//                 },
//                 productList:function(callback){

//                     getAllDefaultCatProduct(req,res,languageId,req.dbName,categoryId,latitude,longitude,function(err,result){
//                          logger.debug("==ERR!===",err);
//                         if(err){
//                                 callback(err);
//                         } else {
//                             categoryArray.product = result;
//                             // console.log("555");
//                             callback(null)
//                         }
//                     })         

//              },
//              recentViewHistory:function(callback){
//                 categoryArray.reventActivity = [];
//                 // console.log("555");
//                 callback(null)

//             },
//             suplierTags:async function(callback){
//                 let query = "select * from supplier_tags";
//                 let result = await ExecuteQ.Query(req.dbName,query,[]);
//                 categoryArray.supplier_tags = result;
//                 callback(null);   
//             },
//             checkUserSubscribed:async function(callback){
//                 categoryArray.is_subscribed = 0;
//                 if(userData && userData.length>0){
//                     let subscriptionData = await ExecuteQ.Query(req.dbName,
//                         "select id from user_subscription where user_id=? and status=?",[userData[0].id,1]);
//                     if(subscriptionData && subscriptionData.length>0){
//                         categoryArray.is_subscribed=1;
//                     }else{
//                         categoryArray.is_subscribed=0
//                     }
//                     callback(null);   
//                 }else{
//                     callback(null);   
//                 }

//             }
//             },async function(err,result){
//                 logger.debug("=========ERR!=========",err);

//                 if(err) {
//                     var msg = "db error :";
//                     sendResponse.sendErrorMessage(msg,res,500);
//                 }else{
//                     let user_wallet_amount = 0;
//                     logger.debug("===dbNam====",req.dbName)

//                             if(userData && userData.length>0){
//                                 user_wallet_amount = userData[0].wallet_amount
//                                 categoryArray.user_wallet_amount = user_wallet_amount

//                             }

//                         sendResponse.sendSuccessData(categoryArray, constant.responseMessage.SUCCESS, res,200);


//                 }
//             })



// }



async function getAllDefaultCatProduct(req, res, languageId, dbName, categoryId, latitude, longitude, callback) {
    // logger.debug("====getAllDefaultCatProduct=====");
    try {

        let mUnit = await Universal.getMeausringUnit(dbName);

        var sql = "select p.avg_rating, IF((select count(*) from product where product.parent_id = p.id)> 0, 1, 0) as is_variant, p.id as product_id, IF((select count(*) from product_favourite "
        sql += "where product_favourite.product_id = p.id and product_favourite.user_id = 0 and product_favourite.status = 1)> 0, 1, 0) as is_favourite, p.is_product, p.duration, "
        sql += "price.display_price, s.id as supplier_id, s.logo as supplier_logo, quantity, purchased_quantity, c.is_quantity, c.is_agent,c.is_liquor, c.agent_list, c.menu_type, c.id as category_id, "
        sql += "c.category_flow, if(price.display_price = price.price, 0, 1) AS discount, s.name as supplier_name, s.delivery_radius, price.price as hourly_price, price.pricing_type, "
        sql += "price.urgent_type, price.urgent_value, price.can_urgent, bp.supplier_branch_id as supplier_branch_id, if(p.purchased_quantity >= p.quantity, 0, 1) AS availability, price.handling as handling_admin, "
        sql += "price.handling_supplier,price.house_cleaning_price, price.beauty_saloon_price, bp.detailed_sub_category_id, bar_code, sku, cml.name as detailed_name, pml.name, pml.product_desc, "
        sql += "price.price, pimage.image_path, pml.measuring_unit, price.price_type, price.price as fixed_price, price.price_type as price1, (" + mUnit + " * acos (cos (radians(" + latitude + ") "
        sql += ")* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + "))* sin(radians(s.latitude)))) AS distance from supplier_branch_product bp "
        sql += "join categories c on bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p on bp.product_id = p.id join product_ml pml on bp.product_id = pml.product_id "
        sql += "join product_image pimage on bp.product_id = pimage.product_id join product_pricing price on bp.product_id = price.product_id and price.price_type = IF ((SELECT COUNT(*) as counter "
        sql += "FROM product_pricing pc where pc.product_id = bp.product_id and pc.is_deleted = 0 having counter > 1), 1, 0) join supplier_branch sbb on sbb.id = bp.supplier_branch_id "
        sql += "join supplier s on s.id = sbb.supplier_id where bp.detailed_sub_category_id IN(" + categoryId + ") and bp.detailed_sub_category_id != 0 and p.is_live = 1 and p.parent_id = 0 and p.is_deleted = 0 "
        sql += "and bp.is_deleted = 0 and price.is_deleted = 0 and pml.language_id = " + languageId + " and sbb.is_deleted = 0 and s.is_deleted = 0 and s.is_active = 1 and cml.language_id = 14 "
        sql += "and (pimage.default_image = 1 or pimage.imageOrder = 1) and ((price.price_type = '1' and DATE(price.start_date) <= CURDATE() and DATE(price.end_date) >= CURDATE()) "
        sql += "or (price.price_type = 0)) and ((price.pricing_type = 1) or(price.pricing_type = 0 and price.price != 0)) GROUP BY product_id, sku having distance < s.delivery_radius"

        let result = await ExecuteQ.Query(dbName, sql, [])
        // var statement= multiConnection[dbName].query(sql,function (err, result) 
        // {
        // logger.debug("=SQL=ST==>>",statement.sql);
        //     if (err) {
        //         console.log("=============23weeerr========",err)
        //         callback(err)
        //         // var msg = "something went wrong";
        //         // sendResponse.sendErrorMessage(msg,res,500);
        //     }
        //     else {
        callback(null, result);
        //     }
        // })
    }
    catch (Err) {
        logger.debug("===Err!=")
        callback(Err)
    }
}

exports.checkSupplier = function (req, res) {
    var areaId;
    var supplierId;
    var supplierName = '';
    var langId;
    var find = false;

    console.log('.......................req...............', req.body);
    async.auto({
        getValues: function (cb) {
            if (!(req.body.supplierId)) {
                var msg = " supplierId not found";
                cb(msg)
            } else if (!(req.body.areaId)) {
                var msg = " area not found";
                cb(msg)
            } else if (!(req.body.langId)) {
                var msg = " langId not found";
                cb(msg)
            } else {
                supplierId = req.body.supplierId
                areaId = req.body.areaId;
                langId = req.body.langId;

                cb(null);
            }


        },
        getName: ['getValues', function (cb) {
            var sql = " select s.id,sml.name from supplier s join supplier_ml sml on sml.supplier_id = s.id  where s.id = ? and sml.language_id = ?";

            multiConnection[req.dbName].query(sql, [supplierId, langId], function (err, result) {
                console.log("...............................err.......getname............", err, result);

                if (err) {
                    var msg = "db error :";
                    sendResponse.sendErrorMessage(msg, res, 500);
                }
                else {
                    if (result && result.length) {
                        supplierName = result[0].name
                        cb(null);
                    } else {
                        cb(null);
                    }
                }
            })
        }],

        checkSupplier: ['getName', function (cb) {
            var sql = " select s.id from supplier s join supplier_branch sb " +
                " on s.id = sb.supplier_id  join supplier_branch_delivery_areas sbda on sbda.supplier_branch_id = sb.id where s.id = ? and sbda.area_id  = ?";

            multiConnection[req.dbName].query(sql, [supplierId, areaId], function (err, result) {
                console.log("...............................err..........check.........", err, result);

                if (err) {
                    var msg = "db error :";
                    sendResponse.sendErrorMessage(msg, res, 500);
                }
                else {
                    if (result && result.length) {

                        find = true
                        cb(null);
                    } else {
                        cb(null);
                    }
                }
            })
        }]
    }, function (err, result) {


        if (err) {
            sendResponse.sendErrorMessage(err, res, 500);
        }
        else {
            if (find == false) {
                if (langId == 14) {
                    var msg = supplierName + "is not covering Your selected Area ";
                    sendResponse.sendErrorMessage(msg, res, 500);

                } else {
                    var msg = supplierName + " لايخدم منطقتك في الوقت الحالي ";
                    sendResponse.sendErrorMessage(msg, res, 500);
                }
            } else {
                sendResponse.sendSuccessData({ find: find }, constant.responseMessage.SUCCESS, res, 200);
            }

        }
    })
}
exports.checkBranch = function (req, res) {
    var areaId;
    var supplierId;
    var supplierName = '';
    var langId;
    var find = false;
    var supplierBranchId = ''
    async.auto({
        getValues: function (cb) {
            if (!(req.body.supplierBranchId)) {
                var msg = " supplierId not found";
                cb(msg)
            } else if (!(req.body.areaId)) {
                var msg = " area not found";
                cb(msg)
            } else if (!(req.body.langId)) {
                var msg = " langId not found";
                cb(msg)
            } else {
                areaId = req.body.areaId;
                langId = req.body.langId;
                supplierBranchId = req.body.supplierBranchId
                cb(null);
            }


        },
        checkSupplier: ['getValues', function (cb) {
            var sql = " select sb.id from supplier_branch sb " +
                " join supplier_branch_delivery_areas sbda on sbda.supplier_branch_id = sb.id where sbda.area_id = ? and sb.id = ?";

            multiConnection[req.dbName].query(sql, [areaId, supplierBranchId], function (err, result) {
                console.log(".,...branch.....................", err, result);
                if (err) {
                    var msg = "db error :";
                    sendResponse.sendErrorMessage(msg, res, 500);
                }
                else {
                    if (result && result.length) {
                        find = true
                        cb(null);
                    } else {
                        cb(null);
                    }
                }
            })
        }]
    }, function (err, result) {


        if (err) {
            sendResponse.sendErrorMessage(err, res, 500);
        }
        else {
            if (find == false) {
                if (langId == 14) {
                    var msg = supplierName + "is not covering Your selected Area ";
                    sendResponse.sendErrorMessage(msg, res, 500);

                } else {
                    var msg = supplierName + " لايخدم منطقتك في الوقت الحالي ";
                    sendResponse.sendErrorMessage(msg, res, 500);
                }
            } else {
                sendResponse.sendSuccessData({ find: find }, constant.responseMessage.SUCCESS, res, 200);
            }

        }
    })
}
exports.getAllOffers = async function (req, res) {
    // console.log("******__START__**__GETALL CATEGORY__****",new Date());

    var tempFlag = false
    var countryID;
    var languageId;
    var accessToken;
    var dbConnection;
    var latitude = req.query.latitude != undefined && req.query.latitude != '' ? req.query.latitude : 30.7333;
    var longitude = req.query.longitude != undefined && req.query.longitude != '' ? req.query.longitude : 76.7794;
    logger.debug('=======latitude,longitude=========', latitude, longitude)
    latitude = parseFloat(latitude).toFixed(config.get("server.fixedUpto"));
    longitude = parseFloat(longitude).toFixed(config.get("server.fixedUpto"));
    logger.debug('=======latitude,longitude=========', latitude, longitude)
    let categoryId;
    if (req.query.languageId) {
        languageId = req.query.languageId;
    } else {
        languageId = 0;
    }
    if (req.query.categoryId) {
        categoryId = req.query.categoryId;
    } else {
        categoryId = 0;
    }
    var categoryArray = {};
    var supplierArabicList;
    // var service_type =await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);
    // HGET
    // if(isCacheOnData && isCacheOnData.length>0){
    // if(parseInt(isCacheOnData[0].onOff)==1){
    //     redisClient.get(dbName+"_offers" ,async function (err, redisData) {

    let user_type_check = await Universal.getUserPriceType(req.dbName);
    logger.debug("=======user_type_check=========", user_type_check, user_type_check.length)
    var user_id = await GetUserId(req.headers.authorization, req.dbName)
    logger.debug("=======userrrrrrrr iddddddd=========", user_id)
    let user_details = await ExecuteQ.Query(req.dbName, "select * from user where id= ?", [user_id])
    let user_type_id = user_details && user_details.length > 0 ? user_details[0].user_type_id : 0
    if (user_type_id == undefined || user_type_id == "" || user_type_id == null || user_type_id == 0) {
        let user_type_details = await ExecuteQ.Query(req.dbName, "select * from user_types limit 1", []);
        logger.debug("============user_type_details------", user_type_details)
        if (user_type_details && user_type_details.length > 0) {
            user_type_id = user_type_details[0].id
        } else {
            user_type_id = 0
        }
    }
    logger.debug("=================user_type_id===cacheOn===cacheTime======", req.isCacheOn, req.cacheTime, user_type_id)
    let mUnit = await Universal.getMeausringUnit(req.dbName)
    let planQuery = "";

    let subScriptionData = await ExecuteQ.Query(req.dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])

    planQuery = subScriptionData && subScriptionData.length > 0 ? " and ss.status='active' and ss.is_approved=1 " : " "

    let filter_by = req.query.filter_by !== undefined ? req.query.filter_by : 0


    async.auto({
        getUserId: function (callback) {
            if (req.headers.authorization != undefined && req.headers.authorization != "") {
                checkUserAccessToken(req.dbName, res, req.headers.authorization, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        user_id = result.id;

                        callback(null);
                    }
                })
            }
            else {
                callback(null);
            }
        },
        getOffer: ['getUserId', function (callback) {


            // categoryArray.offerEnglish = [];
            // callback(null);



            getOffer(req, planQuery, mUnit, req.dbName, req.service_type,
                res, languageId,
                user_id, latitude, longitude,
                categoryId, req.service_type, user_type_check,
                user_type_id, filter_by,
                async function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.offerEnglish = result;
                        categoryArray.suppliersTimmings = await getSuppliersWithTimmings(result, req.dbName)
                        // console.log("666=================",categoryArray.offerEnglish);

                        callback(null);
                    }
                })

        }],
        getOfferByCate: ['getOffer', function (callback) {

            // categoryArray.getOfferByCategory = [];
            // console.log("666");
            // callback(null);
            getOfferByCategory(req, req.dbName, req.service_type, res, languageId, user_id,
                latitude, longitude, user_type_check,
                user_type_id, filter_by, planQuery,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.getOfferByCategory = result;
                        console.log("666");
                        callback(null);
                    }
                })


        }],
        getSupplier: ['getOfferByCate', function (callback) {
            // categoryArray.SupplierInArabic = [];
            // callback(null);
            // req.isCacheOn,req.cacheTime
            getRecommended(req, user_id, req.dbName, req.service_type, res,
                languageId, latitude, longitude,
                categoryId, filter_by, planQuery,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        supplierArabicList = result;
                        categoryArray.SupplierInArabic = result;
                        // console.log("8888");
                        callback(null);
                    }
                })
        }],
        getOffersSupplier: ['getSupplier', async function (callback) {
            // categoryArray.SupplierInArabic = [];
            // callback(null);
            // req.isCacheOn,req.cacheTime
            let enableSupplierInSpecialOffer = await ExecuteQ.Query(req.dbName,
                "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ['enable_supplier_in_special_offer', '1']);
            if (enableSupplierInSpecialOffer && enableSupplierInSpecialOffer.length > 0) {
                getOfferSuppliers(req, user_id, req.dbName, req.service_type, res,
                    languageId, latitude, longitude,
                    categoryId, filter_by,
                    function (err, result) {
                        if (err) {
                            callback(err);
                        } else {

                            categoryArray.offersSuppliers = result;
                            // console.log("8888");
                            callback(null);
                        }
                    })
            } else {

                categoryArray.offersSuppliers = [];
                // console.log("8888");
                callback(null);
            }
        }],
        // getOfferSuppliers
        getSupplierBestSellers: ['getOffersSupplier', async function (callback) {
            // categoryArray.bestSellersSuppliers = [];
            // // console.log("8888");
            // callback(null);
            let bestSellerCheck = await ExecuteQ.Query(req.dbName,
                "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ['enable_best_sellers', '1']);

            if (bestSellerCheck && bestSellerCheck.length > 0) {
                getbestSellersSuppliers(req, user_id, req.dbName, req.service_type, res,
                    languageId, latitude,
                    longitude, categoryId, filter_by,
                    function (err, result) {
                        if (err) {
                            callback(err);
                        } else {
                            // supplierArabicList=result;
                            categoryArray.bestSellersSuppliers = result;
                            // console.log("8888");
                            callback(null);
                        }
                    })
            }
            else {
                categoryArray.bestSellersSuppliers = [];
                callback(null);
            }
        }]

    }, function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(categoryArray, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}

function getSuppliersWithTimmings(final_products, dbName) {
    return new Promise(async (resolve, reject) => {
        let suppliersTimmings = [];
        if (final_products && final_products.length > 0) {
            const uniqSupplierIds = final_products.map((rec) => rec.supplier_id);

            let suppliersTimmingsData = await Execute.Query(dbName, `select is_open,week_id,start_time,end_time,supplier_id from supplier_timings where supplier_id IN(${uniqSupplierIds.join(",")})`, []);

            if (suppliersTimmingsData && suppliersTimmingsData.length > 0) {
                let groupingSupplierData = _.groupBy(suppliersTimmingsData, "supplier_id");

                for (key in groupingSupplierData) {
                    let tempObj = {
                        supplierId: key,
                        supplierTimmings: groupingSupplierData[key]
                    }
                    suppliersTimmings.push(tempObj)
                    // console.log("----------",final[key])
                }
            }
            resolve(suppliersTimmings)
        } else {
            resolve(suppliersTimmings)
        }
    })
}
// exports.getAllOffers = async function(req,res){



//         // console.log("******__START__**__GETALL CATEGORY__****",new Date());
//         var tempFlag= false
//         var countryID ;
//         var languageId;
//         var accessToken;
//         var dbConnection;
//         var latitude = req.query.latitude!=undefined && req.query.latitude!=''?req.query.latitude:30.7333;
//         var longitude = req.query.longitude!=undefined && req.query.longitude!=''?req.query.longitude:76.7794;
//         logger.debug('=======latitude,longitude=========',latitude,longitude)
//         latitude=parseFloat(latitude).toFixed(config.get("server.fixedUpto"));
//         longitude=parseFloat(longitude).toFixed(config.get("server.fixedUpto"));
//         logger.debug('=======latitude,longitude=========',latitude,longitude)
//         let categoryId;
//         if(req.query.languageId){
//             languageId = req.query.languageId;
//         }else{
//             languageId = 0;
//         }
//         if(req.query.categoryId){
//             categoryId = req.query.categoryId;
//         }else{
//             categoryId = 0;
//         }        
//         var categoryArray = {};
//         var supplierArabicList;
//         // var service_type =await ExecuteQ.Query(req.dbName,"select app_type from screen_flow",[]);
//         // HGET
//         // if(isCacheOnData && isCacheOnData.length>0){
//         // if(parseInt(isCacheOnData[0].onOff)==1){
//         //     redisClient.get(dbName+"_offers" ,async function (err, redisData) {

//         let user_type_check = await  Universal.getUserPriceType(req.dbName);
//         logger.debug("=======user_type_check=========",user_type_check,user_type_check.length)
//         var user_id=await GetUserId(req.headers.authorization,req.dbName)
//         logger.debug("=======userrrrrrrr iddddddd=========",user_id)
//         let user_details = await ExecuteQ.Query(req.dbName,"select * from user where id= ?",[user_id])
//         let user_type_id = user_details && user_details.length>0?user_details[0].user_type_id:0
//         if(user_type_id==undefined || user_type_id=="" || user_type_id==null || user_type_id==0){
//             let user_type_details = await ExecuteQ.Query(req.dbName,"select * from user_types limit 1",[]);
//             logger.debug("============user_type_details------",user_type_details)            
//             if(user_type_details && user_type_details.length>0){
//                 user_type_id = user_type_details[0].id
//             }else{
//                 user_type_id = 0
//             }
//         }
//         logger.debug("=================user_type_id===cacheOn===cacheTime======",req.isCacheOn,req.cacheTime,user_type_id)
//         let mUnit=await Universal.getMeausringUnit(req.dbName)
//         let planQuery="";

//         let subScriptionData=await ExecuteQ.Query(req.dbName,"select `key`,`value` from tbl_setting where `key`=? and `value`=?",["is_subscription_plan","1"])

//         planQuery=subScriptionData && subScriptionData.length>0?"and ss.status='active'":""

//         let filter_by = req.query.filter_by!==undefined?req.query.filter_by:0


//         async.auto({
//             getUserId:function(callback){
//                 if(req.headers.authorization!=undefined && req.headers.authorization!=""){
//                     checkUserAccessToken(req.dbName,res,req.headers.authorization,function(err,result){
//                           if(err){
//                                  callback(err);
//                              }else{
//                                  user_id = result.id;

//                                  callback(null);
//                              }
//                          })
//                  }
//                  else{
//                      callback(null);
//                  }  
//             },    
//             getOffer:['getUserId',function(callback){


//                 // categoryArray.offerEnglish = [];
//                 // callback(null);



//                     getOffer(req,planQuery,mUnit,req.dbName,req.service_type,
//                         res,languageId,
//                         user_id,latitude,longitude,
//                         categoryId,req.service_type,user_type_check,
//                         user_type_id,filter_by,
//                         function(err,result){
//                         if(err) {
//                             callback(err);
//                         }else{
//                             categoryArray.offerEnglish = result;
//                             // console.log("666=================",categoryArray.offerEnglish);
//                             callback(null);
//                         }
//                     })

//             }],
//             getOfferByCate:['getOffer',function(callback){

//                         // categoryArray.getOfferByCategory = [];
//                         // console.log("666");
//                         // callback(null);
//                 getOfferByCategory(req,req.dbName,req.service_type,res,languageId,user_id,
//                     latitude,longitude,user_type_check,
//                     user_type_id,filter_by,
//                      function(err,result){
//                     if(err) {
//                         callback(err);
//                     }else{
//                         categoryArray.getOfferByCategory = result;
//                         console.log("666");
//                         callback(null);
//                     }
//                 })


//         }],
//         getSupplier:['getOfferByCate',function (callback) {
//             // categoryArray.SupplierInArabic = [];
//             // callback(null);
//             // req.isCacheOn,req.cacheTime
//                 getRecommended(req,user_id,req.dbName,req.service_type,res,
//                     languageId,latitude,longitude,
//                     categoryId,filter_by,
//                     function (err,result) {
//                         if(err) {
//                             callback(err);
//                         }else{
//                             supplierArabicList=result;
//                             categoryArray.SupplierInArabic = result;
//                             // console.log("8888");
//                             callback(null);
//                         }
//                     })
//             }],
//         getOffersSupplier:['getSupplier',async function (callback) {
//                 // categoryArray.SupplierInArabic = [];
//                 // callback(null);
//                 // req.isCacheOn,req.cacheTime
//                 let enableSupplierInSpecialOffer = await ExecuteQ.Query(req.dbName,
//                     "select `key`,`value` from tbl_setting where `key`=? and `value`=?",['enable_supplier_in_special_offer','1']);
//         if(enableSupplierInSpecialOffer && enableSupplierInSpecialOffer.length>0){
//                     getOfferSuppliers(req,user_id,req.dbName,req.service_type,res,
//                         languageId,latitude,longitude,
//                         categoryId,filter_by,
//                         function (err,result) {
//                             if(err) {
//                                 callback(err);
//                             }else{

//                                 categoryArray.offersSuppliers = result;
//                                 // console.log("8888");
//                                 callback(null);
//                             }
//                         })
//                   }else{

//                     categoryArray.offersSuppliers = [];
//                     // console.log("8888");
//                     callback(null);
//                   }
//                 }],
//             // getOfferSuppliers
//         getSupplierBestSellers:['getOffersSupplier',async function (callback) {
//                 // categoryArray.bestSellersSuppliers = [];
//                 // // console.log("8888");
//                 // callback(null);
//                 let bestSellerCheck = await ExecuteQ.Query(req.dbName,
//                     "select `key`,`value` from tbl_setting where `key`=? and `value`=?",['enable_best_sellers','1']);

//                     if(bestSellerCheck && bestSellerCheck.length>0){
//                         getbestSellersSuppliers(req,user_id,req.dbName,req.service_type,res,
//                             languageId,latitude,
//                             longitude,categoryId,filter_by,
//                             function (err,result) {
//                                 if(err) {
//                                     callback(err);
//                                 }else{
//                                     // supplierArabicList=result;
//                                     categoryArray.bestSellersSuppliers = result;
//                                     // console.log("8888");
//                                     callback(null);
//                                 }
//                             })
//                 }
//                 else{
//                     categoryArray.bestSellersSuppliers = [];
//                     callback(null);
//                 }
//               }]

//         },function(err,result){
//             if(err) {
//                 var msg = "db error :";
//                 sendResponse.sendErrorMessage(msg,res,500);
//             }else{
//                 sendResponse.sendSuccessData(categoryArray, constant.responseMessage.SUCCESS, res,200);
//             }
//         })
// }
exports.getAllOffersV1 = async function (req, res) {

    var tempFlag = false
    var countryID;
    var languageId;
    var accessToken;
    var dbConnection;
    var latitude = req.query.latitude != undefined && req.query.latitude != '' ? req.query.latitude : 30.7333;
    var longitude = req.query.longitude != undefined && req.query.longitude != '' ? req.query.longitude : 76.7794;
    logger.debug('=======latitude,longitude=========', latitude, longitude)
    let categoryId;
    let order_by = req.query.order_by !== undefined ? req.query.order_by : 0

    if (req.query.languageId) {
        languageId = req.query.languageId;
    } else {
        languageId = 0;
    }
    if (req.query.categoryId) {
        categoryId = req.query.categoryId;
    } else {
        categoryId = 0;
    }
    var categoryArray = {};
    var supplierArabicList;
    let offset = req.query.offset || "+05:30";
    var service_type = await ExecuteQ.Query(req.dbName, "select app_type from screen_flow", []);
    let user_type_check = await Universal.getUserPriceType(req.dbName);
    logger.debug("=======user_type_check=========", user_type_check, user_type_check.length)
    var user_id = await GetUserId(req.headers.authorization, req.dbName)
    logger.debug("=======userrrrrrrr iddddddd=========", user_id)
    let user_details = await ExecuteQ.Query(req.dbName, "select * from user where id= ?", [user_id])
    let user_type_id = user_details && user_details.length > 0 ? user_details[0].user_type_id : 0
    if (user_type_id == undefined || user_type_id == "" || user_type_id == null || user_type_id == 0) {
        let user_type_details = await ExecuteQ.Query(req.dbName, "select * from user_types limit 1", []);
        logger.debug("============user_type_details------", user_type_details)
        if (user_type_details && user_type_details.length > 0) {
            user_type_id = user_type_details[0].id
        } else {
            user_type_id = 0
        }
    }
    logger.debug("=================user_type_id============", user_type_id)
    let planQuery = "";
    let mUnit = await Universal.getMeausringUnit(req.dbName)

    let subScriptionData = await ExecuteQ.Query(req.dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])

    planQuery = subScriptionData && subScriptionData.length > 0 ? "and ss.status='active'" : ""

    let filter_by = req.query.filter_by !== undefined ? req.query.filter_by : 0


    async.auto({
        getUserId: function (callback) {
            if (req.headers.authorization != undefined && req.headers.authorization != "") {
                checkUserAccessToken(req.dbName, res, req.headers.authorization, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        user_id = result.id;

                        callback(null);
                    }
                })
            }
            else {
                callback(null);
            }
        },
        getOffer: ['getUserId', function (callback) {


            getOffer(req, planQuery, mUnit, req.dbName, service_type[0].app_type, res, languageId,
                user_id, latitude, longitude,
                categoryId, service_type[0].app_type, user_type_check,
                user_type_id, filter_by,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.offerEnglish = result;
                        // console.log("666=================",categoryArray.offerEnglish);
                        callback(null);
                    }
                })

        }],
        getOfferByCate: ['getOffer', function (callback) {


            getOfferByCategory(req, req.dbName, service_type[0].app_type,
                res, languageId, user_id,
                latitude, longitude, user_type_check,
                user_type_id, filter_by, planQuery,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.getOfferByCategory = result;
                        console.log("666");
                        callback(null);
                    }
                })

        }],
        getSupplier: ['getOfferByCate', function (callback) {

            getRecommendedV1(user_id, req.dbName, service_type[0].app_type, res,
                languageId, latitude, longitude, categoryId,
                order_by, filter_by,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        if (parseInt(order_by)) {
                            result = _.sortBy(result, 'rating').reverse()
                        }
                        supplierArabicList = result;
                        bestSellersSuppliers = result
                        categoryArray.SupplierInArabic = result;
                        categoryArray.bestSellersSuppliers = result;
                        // console.log("8888");
                        callback(null);
                    }
                })
        }],
        getOffersSupplier: ['getSupplier', function (callback) {
            // categoryArray.SupplierInArabic = [];
            // callback(null);
            // req.isCacheOn,req.cacheTime
            getOfferSuppliers(req, user_id, req.dbName, req.service_type, res,
                languageId, latitude, longitude,
                categoryId, filter_by,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {

                        categoryArray.offersSuppliers = result;
                        // console.log("8888");
                        callback(null);
                    }
                })
        }],
        getSupplierBestSellers: ['getOffersSupplier', function (callback) {

            getbestSellersSuppliersV1(user_id, req.dbName, service_type[0].app_type, res,
                languageId, latitude, longitude, categoryId,
                order_by, filter_by,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        if (parseInt(order_by)) {
                            result = _.sortBy(result, 'rating').reverse()
                        }
                        // supplierArabicList=result;
                        //categoryArray.bestSellersSuppliers = result;
                        // console.log("8888");
                        callback(null);
                    }
                })
        }],
        getFastestDeliverySuppliers: ['getSupplierBestSellers', async function (callback) {

            let supplier_data = await fastestDeliverySuppliers(latitude, longitude,
                languageId, req.dbName, offset, order_by);
            if (parseInt(order_by) == 1) {
                result = _.sortBy(supplier_data, 'rating').reverse()
            }
            let final_supplier_data = await SupplierWithTiming(req.dbName, supplier_data);
            categoryArray.fastestDeliverySuppliers = final_supplier_data;
            // console.log("8888");
            callback(null);
        }],
        getRecentlyViewedProducts: ['getFastestDeliverySuppliers', async function (callback) {

            let recentViewHistory = await mostViewAndLikedProductNew(req, res, languageId,
                req.dbName, 0, latitude, longitude);

            categoryArray.recentViewHistory = recentViewHistory;
            // console.log("8888");
            callback(null);
        }],

    }, function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(categoryArray, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}

// zone wise supplier or products
exports.getAllOffersV2 = async function (req, res) {

    var tempFlag = false
    var countryID;
    var languageId;
    var accessToken;
    var dbConnection;
    var latitude = req.query.latitude != undefined && req.query.latitude != '' ? req.query.latitude : 30.7333;
    var longitude = req.query.longitude != undefined && req.query.longitude != '' ? req.query.longitude : 76.7794;
    logger.debug('=======latitude,longitude=========', latitude, longitude)
    let categoryId;
    let order_by = req.query.order_by !== undefined ? req.query.order_by : 0

    if (req.query.languageId) {
        languageId = req.query.languageId;
    } else {
        languageId = 0;
    }
    if (req.query.categoryId) {
        categoryId = req.query.categoryId;
    } else {
        categoryId = 0;
    }
    var categoryArray = {};
    var supplierArabicList;
    let offset = req.query.offset || "+05:30";
    var service_type = await ExecuteQ.Query(req.dbName, "select app_type from screen_flow", []);
    let user_type_check = await Universal.getUserPriceType(req.dbName);
    logger.debug("=======user_type_check=========", user_type_check, user_type_check.length)
    var user_id = await GetUserId(req.headers.authorization, req.dbName)
    logger.debug("=======userrrrrrrr iddddddd=========", user_id)
    let user_details = await ExecuteQ.Query(req.dbName, "select * from user where id= ?", [user_id])
    let user_type_id = user_details && user_details.length > 0 ? user_details[0].user_type_id : 0
    if (user_type_id == undefined || user_type_id == "" || user_type_id == null || user_type_id == 0) {
        let user_type_details = await ExecuteQ.Query(req.dbName, "select * from user_types limit 1", []);
        logger.debug("============user_type_details------", user_type_details)
        if (user_type_details && user_type_details.length > 0) {
            user_type_id = user_type_details[0].id
        } else {
            user_type_id = 0
        }
    }
    logger.debug("=================user_type_id============", user_type_id)
    let planQuery = "";
    let mUnit = await Universal.getMeausringUnit(req.dbName)

    let subScriptionData = await ExecuteQ.Query(req.dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])

    planQuery = subScriptionData && subScriptionData.length > 0 ? "and ss.status='active'" : ""

    let filter_by = req.query.filter_by !== undefined ? req.query.filter_by : 0


    async.auto({
        getUserId: function (callback) {
            if (req.headers.authorization != undefined && req.headers.authorization != "") {
                checkUserAccessToken(req.dbName, res, req.headers.authorization, function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        user_id = result.id;

                        callback(null);
                    }
                })
            }
            else {
                callback(null);
            }
        },
        getOffer: ['getUserId', function (callback) {


            getOfferV1(req, planQuery, mUnit, req.dbName, service_type[0].app_type,
                res, languageId,
                user_id, latitude, longitude,
                categoryId, service_type[0].app_type, user_type_check,
                user_type_id, filter_by,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.offerEnglish = result;
                        // console.log("666=================",categoryArray.offerEnglish);
                        callback(null);
                    }
                })

        }],
        getOfferByCate: ['getOffer', function (callback) {


            getOfferByCategoryV1(req, req.dbName, service_type[0].app_type,
                res, languageId, user_id,
                latitude, longitude, user_type_check,
                user_type_id, filter_by, planQuery,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        categoryArray.getOfferByCategory = result;
                        console.log("666");
                        callback(null);
                    }
                })

        }],
        getSupplier: ['getOfferByCate', function (callback) {

            getRecommendedV2(req, user_id, req.dbName,
                service_type[0].app_type, res,
                languageId, latitude, longitude, categoryId,
                filter_by, planQuery,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        if (parseInt(order_by)) {
                            result = _.sortBy(result, 'rating').reverse()
                        }
                        supplierArabicList = result;
                        categoryArray.SupplierInArabic = result;
                        // console.log("8888");
                        callback(null);
                    }
                })
        }],
        getOffersSupplier: ['getSupplier', function (callback) {
            getOfferSuppliersV1(
                req, user_id, req.dbName,
                req.service_type, res,
                languageId, latitude, longitude,
                categoryId, filter_by,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {

                        categoryArray.offersSuppliers = result;
                        // console.log("8888");
                        callback(null);
                    }
                })
        }],
        getSupplierBestSellers: ['getOffersSupplier', function (callback) {

            getbestSellersSuppliersV2(req, user_id, req.dbName, service_type[0].app_type, res,
                languageId, latitude, longitude, categoryId,
                filter_by,
                function (err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        if (parseInt(order_by)) {
                            result = _.sortBy(result, 'rating').reverse()
                        }
                        // supplierArabicList=result;
                        categoryArray.bestSellersSuppliers = result;

                        callback(null);
                    }
                })
        }]
    }, function (err, result) {
        if (err) {
            var msg = "db error :";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(categoryArray, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}

async function mostViewAndLikedProductNew(req, res, languageId,
    dbName, categoryId, latitude, longitude) {
    // logger.debug("====getAllDefaultCatProduct=====");
    return new Promise(async (resolve, reject) => {
        try {
            let planQuery = "";
            let subScriptionData = await ExecuteQ.Query(req.dbName, "select `key`,`value` from tbl_setting where `key`=? and `value`=?", ["is_subscription_plan", "1"])
            planQuery = subScriptionData && subScriptionData.length > 0 ? "and ss.status='active'" : ""


            var zone_offset = req.body.offset != undefined && req.body.offset !== "" && req.body.offset != null ? req.query.offset : "+05:30"
            var current_date = moment().utcOffset(zone_offset).format("YYYY-MM-DD")
            let sort_by_query = "-tmp.fixed_price ASC,tmp.fixed_price ASC limit 100";
            let radius_check_query = "";
            let user_type_condition_one = ""
            let user_type_condition_two = ""
            let user_type_check = await Universal.getUserPriceType(dbName);
            logger.debug("====service_type=======check_user_type====", user_type_check)
            if (req.service_type == 1 || req.service_type == 2) {
                radius_check_query = "having tmp.distance<=tmp.delivery_radius"
                if (user_type_check && user_type_check.length > 0) {
                    user_type_condition_one = " and pc.user_type_id=" + +" "
                    user_type_condition_two = " and price.user_type_id=" + user_type_id + " "
                }
            }
            else {
                radius_check_query = "having tmp.distance<=5000000"
            }

            let mUnit = await Universal.getMeausringUnit(dbName);
            var user_id = await GetUserId(req.headers.authorization, req.dbName);

            sql = "SELECT * from (select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id limit 1),1,0 ) as is_question,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id=" + user_id + " and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite from (select rvh.id as r_view_id, p.category_id as categories_id,p.sub_category_id,p.id as product_id,p.avg_rating,0 as total_orders,(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + "))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration," +
                " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo," +
                " p.quantity,p.purchased_quantity," +
                " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name" +
                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id," +
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price," +
                " price.beauty_saloon_price," +
                " bp.detailed_sub_category_id," +
                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc" +
                " ,price.price,pimage.image_path," +
                " pml.measuring_unit,s.self_pickup,s.delivery_radius,price.price_type  ," +
                " price.price as fixed_price,price.price_type as price1" +
                " from" +
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p" +
                " on bp.product_id = p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = " +
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 " + user_type_condition_one + " having counter>1) , 1, 0) " +
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id  join recent_view_history rvh on rvh.product_id=p.id" +
                " where   rvh.user_id=" + user_id + "  and c.is_live=1 and c.is_deleted=0  and p.is_live = 1" +
                " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 " +
                "" + planQuery + "and pml.language_id = " + languageId + " and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= " + languageId + " and (" +
                " pimage.imageOrder =1) and is_supplier_product_approved=1  and ((price.price_type = '1' and DATE(price.start_date) <=  '" + current_date + "' " +
                " and DATE(price.end_date) >= '" + current_date + "' " + user_type_condition_two + ") or (price.price_type = 0 " + user_type_condition_two + ")) and ((price.pricing_type=1) or(price.pricing_type=0 and " +
                "  price.price !=0)) limit 50) as temp UNION ALL select temp.*,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=temp.product_id and pr.is_deleted=0      ) as adds_on,IF(EXISTS(select product_adds_on.id  from product_adds_on  where  product_adds_on.product_id = temp.product_id  and product_adds_on.is_deleted = 0 limit 1), 1, 0) as is_product_adds_on,IF(EXISTS(select product.id from product where product.parent_id = temp.product_id and product.is_deleted = 0 limit 1),1,0) as is_variant,IF(EXISTS(select questions.id  from questions where questions.category_id =temp.sub_category_id limit 1),1,0 ) as is_question,IF(EXISTS(select product_favourite.id from product_favourite where product_favourite.product_id=temp.product_id and product_favourite.user_id=" + user_id + " and product_favourite.status=1 limit 1 )>0,1,0) as is_favourite from (select  0 as r_view_id,p.category_id as categories_id,p.sub_category_id,p.id as product_id,p.avg_rating,(select count(*) from order_prices join product prd on prd.id=order_prices.product_id where  order_prices.product_id=p.id) as total_orders,(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + "))* sin(radians(s.latitude)))) AS distance,p.is_product,p.duration," +
                " price.display_price,s.id as supplier_id,s.delivery_max_time,s.delivery_min_time,s.logo as supplier_logo," +
                " p.quantity,p.purchased_quantity," +
                " p.payment_after_confirmation,c.is_quantity,c.is_agent,c.agent_list,c.is_dine,c.id as category_id,c.name as category_name,c.category_flow,if(price.display_price=price.price,0,1) AS discount,s.name as supplier_name" +
                " ,price.price as hourly_price,price.pricing_type,price.urgent_type,price.urgent_value,price.can_urgent, sbb.id as supplier_branch_id," +
                " if(p.purchased_quantity>=p.quantity,0,1) AS availability,price.delivery_charges,price.handling as handling_admin,price.handling_supplier,price.house_cleaning_price," +
                " price.beauty_saloon_price," +
                " bp.detailed_sub_category_id," +
                " bar_code,sku,cml.name as detailed_name,pml.name,pml.product_desc" +
                " ,price.price,pimage.image_path," +
                " pml.measuring_unit,s.self_pickup,s.delivery_radius,price.price_type  ," +
                " price.price as fixed_price,price.price_type as price1" +
                " from" +
                " supplier_branch_product bp join categories c on  bp.category_id = c.id join categories_ml cml on cml.category_id = c.id join product p" +
                " on bp.product_id = p.id left join order_prices ors on ors.product_id=p.id join product_ml pml  on bp.product_id = pml.product_id join product_image pimage on bp.product_id = " +
                " pimage.product_id join   product_pricing price on bp.product_id = price.product_id and price.price_type = IF ( (SELECT COUNT(*) as counter  FROM product_pricing pc where  pc.product_id=bp.product_id and pc.is_deleted=0 " + user_type_condition_one + " having counter>1) , 1, 0) " +
                "   join supplier_branch sbb on sbb.id = bp.supplier_branch_id join supplier s on s.id = sbb.supplier_id left join supplier_subscription ss on ss.supplier_id=s.id " +
                " where  c.is_live=1 and c.is_deleted=0  and p.is_live = 1" +
                " and p.parent_id=0 and p.is_deleted = 0 and bp.is_deleted=0 and price.is_deleted = 0 " +
                "" + planQuery + " and pml.language_id = " + languageId + " and sbb.is_deleted=0 and sbb.is_live=1 and s.is_deleted =0 and s.is_active=1 and cml.language_id= " + languageId + " and (" +
                " pimage.imageOrder =1) and is_supplier_product_approved=1  and ((price.price_type = '1' and DATE(price.start_date) <=  '" + current_date + "' " +
                " and DATE(price.end_date) >= '" + current_date + "' " + user_type_condition_two + ") or (price.price_type = 0 " + user_type_condition_two + ")) and ((price.pricing_type=1) or(price.pricing_type=0 and " +
                "  price.price !=0)) limit 50) as temp) as t GROUP BY t.product_id,t.sku having t.distance<=t.delivery_radius order by t.r_view_id DESC,t.is_favourite DESC,t.total_orders DESC limit 50";
            let result = await ExecuteQ.Query(dbName, sql, []);
            let modifyResult = await Universal.modifyProductResult(result, 0, 0, 0)
            resolve(modifyResult);
        }
        catch (Err) {
            logger.debug("===Err!=", Err)
            resolve([])
        }
    })
}

const fastestDeliverySuppliers = (latitude,
    longitude, languageId, dbName, offset, order_by) => {
    // 3-for A->Z 4-For Z->A
    // let dineInCheck = await ExecuteQ.Query(dbName,"select key,value from ")
    var day = moment().isoWeekday();
    day = day - 1;
    logger.debug("======day=====", day)


    let order_by_rating_check = " order by distance ";

    if (parseInt(order_by) == 1) {
        order_by_rating_check = " order by s.rating desc "
    }

    let open_close_filter = ""
    logger.debug("========offset======+", offset)
    let currentTime = moment().utcOffset(offset.toString());
    logger.debug("========currentTime======+", currentTime)
    currentTime = moment(currentTime).format('HH:mm:ss');
    logger.debug("========currentTime=====222=+", currentTime)

    console.log('==========openclosefilter======', open_close_filter)
    open_close_filter = "and st.is_open=1 and st.start_time<='" + currentTime + "' and st.end_time>='" + currentTime + "' "
    return new Promise(async (resolve, reject) => {

        let mUnit = await Universal.getMeausringUnit(dbName);

        var sql = "select *,if( count(*)>1,1,0) as is_multi_branch , s.self_pickup, si.image_path as supplier_image, sc.onOffComm,s.delivery_prior_total_time as delivery_prior_time, s.delivery_min_time, "
        sql += " s.preparation_time, s.delivery_type,sb.latitude,sb.longitude,s.delivery_max_time,s.urgent_delivery_time,s.is_scheduled,s.total_reviews, s.rating,sb.id as supplier_branch_id,sml.name,sml.description, "
        sql += "s.is_dine_in,s.delivery_radius,sml.uniqueness,sml.terms_and_conditions,sml.address, s.logo, s.id,st.is_open as status, st.start_time,st.end_time, "
        sql += " s.payment_method, sc.commission_package, "
        sql += "(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(sb.latitude))* cos(radians(sb.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + "))* sin(radians(sb.latitude)))) AS distance "
        sql += "from supplier_category sc join supplier s on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id join supplier_timings st on st.supplier_id = s.id join supplier_branch sb on s.id = sb.supplier_id "
        sql += " join supplier_delivery_types sdt on sdt.supplier_id = s.id join supplier_ml sml on s.id = sml.supplier_id left join supplier_image si on si.supplier_id = s.id "
        sql += "where sdt.type = 1 and s.is_live = 1      " + open_close_filter + "  and sml.language_id = 14 and sb.is_deleted = 0 and st.week_id = ? "
        sql += "GROUP BY s.id having distance<=sb.delivery_radius " + order_by_rating_check + "  "


        try {

            logger.debug("=====ERR!=============1234556=", sql);
            let result = await ExecuteQ.Query(dbName, sql, [day])
            resolve(result)
        }
        catch (Err) {
            logger.debug("==Err!==", Err)
            reject(Err)
        }
    })
}

const SupplierWithTiming = (dbName, data) => {
    let final_data = []
    return new Promise(async (resolve, reject) => {
        for (const [index, i] of data.entries()) {
            i.timing = await getSupTiming(dbName, i.id)
            final_data.push(i)
        }
        resolve(final_data)
    })
}

var getbestSellersSuppliers = async function (req, user_id, dbName, service_type, reply, languageId, latitude, longitude,
    categoryId, filter_by, callback) {
    var deleted = 0;
    var day = moment().isoWeekday();
    day = day - 1;
    let radius_check_query = "";
    // having distance<=s.delivery_radius
    // if(service_type==1 || service_type==8){

    radius_check_query = "having distance<=delivery_radius order by total_orders desc"
    // }
    // else{
    //     radius_check_query="order by s.id desc"
    // }



    let orderTypeCondition = ""

    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }



    let mUnit = await Universal.getMeausringUnit(dbName)
    if (parseInt(categoryId) > 0) {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at, '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from(select s.is_dine_in,s.is_scheduled,sum(vv.branch_order_count) AS total_orders,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type,ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
            " s.preparation_time,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
            "(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st join (SELECT count(id) as branch_order_count,supplier_branch_id FROM `orders` GROUP by supplier_branch_id) as vv on vv.supplier_branch_id=sbb.id" +
            " and st.supplier_id = s.id left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id where " +
            " sml.language_id = " + languageId + " and sc.category_id=" + categoryId + " and s.is_deleted = 0 and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 " + orderTypeCondition + " and sbb.is_deleted = 0 and st.week_id =" + day + " and s.is_recommended = 1 GROUP BY s.id " + radius_check_query + ") as temp";

    }
    else {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at, '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from (select s.is_dine_in,s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
            " s.preparation_time,sml.name,sum(vv.branch_order_count) as total_orders,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
            "(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st join (SELECT count(id) as branch_order_count,supplier_branch_id FROM `orders` GROUP by supplier_branch_id) as vv on vv.supplier_branch_id=sbb.id" +
            " and st.supplier_id = s.id left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id where " +
            " sml.language_id = " + languageId + " and s.is_deleted = 0 and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 " + orderTypeCondition + " and sbb.is_deleted = 0 and st.week_id =" + day + " and s.is_recommended = 1 GROUP BY s.id " + radius_check_query + ") as temp";

    }
    let result = await ExecuteQ.QueryV1(req, dbName, sql, [])
    // result=[]
    // var st= multiConnection[dbName].query(sql, [languageId,0,1,1,day,1], function (err, result) {
    // console.log(st.sql)
    // if (err) {
    //     console.log("eeeee",err);
    //     var msg = "some thing went wrong ";
    //     sendResponse.sendErrorMessage(msg, reply, 500);
    // } else {
    logger.debug("18888888s", result);
    var data_length = result.length
    if (data_length > 0) {

        for (var i = 0; i < data_length; i++) {
            (async function (i) {
                result[i].supplier_tags = result[i] && result[i].supplier_tags ? JSON.parse(result[i].supplier_tags) : []
                result[i].category = result[i] && result[i].categories ? JSON.parse(result[i].categories) : [];
                result[i].timing = result[i] && result[i].timings ? JSON.parse(result[i].timings) : [];
                if (i == result.length - 1) {
                    callback(null, result);
                }
            }(i));
        }


    }
    else {
        callback(null, result);
    }
    //     }
    // })
}

var getbestSellersSuppliersV2 = async function (req, user_id, dbName, service_type, reply, languageId, latitude, longitude,
    categoryId, filter_by, callback) {
    var deleted = 0;
    var day = moment().isoWeekday();
    day = day - 1;
    let radius_check_query = "";
    // having distance<=s.delivery_radius
    // if(service_type==1 || service_type==8){

    radius_check_query = "having is_under_zone>0"
    // }
    // else{
    //     radius_check_query="order by s.id desc"
    // }



    let orderTypeCondition = ""

    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }



    let mUnit = await Universal.getMeausringUnit(dbName)
    if (parseInt(categoryId) > 0) {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at, '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from(select s.is_dine_in,s.is_scheduled,sum(vv.branch_order_count) AS total_orders,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type,ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
            " s.preparation_time,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +

            "IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone," +

            "(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st join (SELECT count(id) as branch_order_count,supplier_branch_id FROM `orders` GROUP by supplier_branch_id) as vv on vv.supplier_branch_id=sbb.id" +
            " and st.supplier_id = s.id left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id where " +
            " sml.language_id = " + languageId + " and sc.category_id=" + categoryId + " and s.is_deleted = 0 and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 " + orderTypeCondition + " and sbb.is_deleted = 0 and st.week_id =" + day + " and s.is_recommended = 1 GROUP BY s.id " + radius_check_query + ") as temp";

    }
    else {
        var sql = "select temp.*,IF(EXISTS(select id from user_favourite where supplier_id = temp.id and user_id = " + user_id + " and is_delete = 0 ),1,0) as Favourite,(select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"image\": \"', c.image, '\", ','\"supplier_placement_level\": \"', c.supplier_placement_level,'\", ','\"category_id\": \"', c.id,'\",','\"name\": \"',REPLACE(cml.name,'\"','\\''),'\",','\"description\": \"', REPLACE(cml.name,'\"','\\''),'\",','\"order\": \"', c.order, '\"','}') SEPARATOR ','),''),']') AS bData from categories c  JOIN categories_ml cml on cml.category_id=c.id where c.id IN (select supplier_category.category_id from supplier_category WHERE supplier_category.supplier_id=temp.id ) and cml.language_id=14 and c.is_live=1 and c.is_deleted=0 )  as categories,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"is_open\": \"', st.is_open, '\", ','\"week_id\": \"', st.week_id,'\", ','\"start_time\": \"', st.start_time,'\",','\"end_time\": \"', st.end_time, '\"','}') SEPARATOR ','),''),']') AS bData from  supplier_timings  st where st.supplier_id = temp.id  )  as timings,( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"tag_image\": \"', st.tag_image, '\", ','\"id\": \"', st.id,'\", ','\"created_at\": \"', st.created_at, '\",','\"name\": \"', st.name, '\"','}') SEPARATOR ','),''),']') AS tData   from supplier_assigned_tags sa join supplier_tags st on st.id = sa.tag_id  where sa.supplier_id = temp.id )  as supplier_tags "
        sql += "from (select s.is_dine_in,s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
            " s.preparation_time,sml.name,sum(vv.branch_order_count) as total_orders,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +

            "IF((select st_contains(coordinates,point(" + latitude + "," + longitude + ")) as is_under from 	admin_geofence_areas aga join supplier_assigned_geofence_areas saga on saga.admin_geofence_id=aga.id where aga.is_live=1 and saga.supplier_id = s.id having is_under>0 limit 1)>0,1,0) as is_under_zone," +

            "(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st join (SELECT count(id) as branch_order_count,supplier_branch_id FROM `orders` GROUP by supplier_branch_id) as vv on vv.supplier_branch_id=sbb.id" +
            " and st.supplier_id = s.id left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id where " +
            " sml.language_id = " + languageId + " and s.is_deleted = 0 and s.is_live = 1 and s.is_active = 1 and " +
            " sbb.is_live = 1 " + orderTypeCondition + " and sbb.is_deleted = 0 and st.week_id =" + day + " and s.is_recommended = 1 GROUP BY s.id " + radius_check_query + ") as temp";

    }
    let result = await ExecuteQ.QueryV1(req, dbName, sql, [])
    // result=[]
    // var st= multiConnection[dbName].query(sql, [languageId,0,1,1,day,1], function (err, result) {
    // console.log(st.sql)
    // if (err) {
    //     console.log("eeeee",err);
    //     var msg = "some thing went wrong ";
    //     sendResponse.sendErrorMessage(msg, reply, 500);
    // } else {
    logger.debug("18888888s", result);
    var data_length = result.length
    if (data_length > 0) {

        for (var i = 0; i < data_length; i++) {
            (async function (i) {
                result[i].supplier_tags = result[i] && result[i].supplier_tags ? JSON.parse(result[i].supplier_tags) : []
                result[i].category = result[i] && result[i].categories ? JSON.parse(result[i].categories) : [];
                result[i].timing = result[i] && result[i].timings ? JSON.parse(result[i].timings) : [];
                if (i == result.length - 1) {
                    callback(null, result);
                }
            }(i));
        }


    }
    else {
        callback(null, result);
    }
    //     }
    // })
}

var getbestSellersSuppliersV1 = async function (user_id, dbName, service_type, reply, languageId, latitude, longitude,
    categoryId, order_by, filter_by, callback) {
    var deleted = 0;
    var day = moment().isoWeekday();
    day = day - 1;
    let radius_check_query = "";
    // having distance<=s.delivery_radius
    // if(service_type==1 || service_type==8){

    radius_check_query = "having distance<=delivery_radius order by total_orders desc"
    // }
    // else{
    //     radius_check_query="order by s.id desc"
    // }
    let mUnit = await Universal.getMeausringUnit(dbName)

    let order_by_rating_check1 = " order by rand() ";
    let order_by_rating_check2 = " order by total_orders desc ";
    if (parseInt(order_by) == 1) {
        order_by_rating_check1 = " order by s.rating desc "
        order_by_rating_check2 = " order by s.rating desc "

    }



    let orderTypeCondition = ""

    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }


    let sqlSubscribeSuppliers = " select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
        " s.preparation_time,sml.name,s.is_dine_in, count(o.id) as total_orders,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
        "(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))) AS distance  from supplier s " +
        " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
        " s.id join supplier_timings st  " +
        " on st.supplier_id = s.id join supplier_subscription ssn on ssn.supplier_id = s.id  JOIN orders o on o.supplier_branch_id = sbb.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id where " +
        " sml.language_id = ? and s.is_deleted = ? and s.is_live = ? and s.is_active = ? and " +
        " ssn.status = 'active' and sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =? " + orderTypeCondition + "  GROUP BY s.id having distance<=delivery_radius  " + order_by_rating_check1 + " limit 5 ";

    let resultSubscribeSuppliers = await ExecuteQ.Query(dbName, sqlSubscribeSuppliers,
        [languageId, 0, 1, 1, day])




    var sql = " select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
        " s.preparation_time,sml.name,s.is_dine_in, count(o.id) as total_orders,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
        "(" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))) AS distance  from supplier s " +
        " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
        " s.id join supplier_timings st " +
        " on st.supplier_id = s.id JOIN orders o on o.supplier_branch_id = sbb.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id where " +
        " sml.language_id = ? and s.is_deleted = ? and s.is_live = ? and s.is_active = ? and " +
        " sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =? " + orderTypeCondition + " GROUP BY s.id having distance<=delivery_radius " + order_by_rating_check2 + "";


    let resultBestSellers = await ExecuteQ.Query(dbName, sql, [languageId, 0, 1, 1, day]);

    let result = []

    if (resultSubscribeSuppliers && resultSubscribeSuppliers.length > 0) {
        for (const [index, i] of resultSubscribeSuppliers.entries()) {
            i.is_subscribed = 1;
            result.push(i)
        }
    }

    if (resultBestSellers && resultBestSellers.length > 0) {
        for (const [index, i] of resultBestSellers.entries()) {
            if (resultSubscribeSuppliers && resultSubscribeSuppliers.length > 0) {

                let isSupplierExist = resultSubscribeSuppliers.find(x => x.id === parseInt(i.id))
                if (isSupplierExist == undefined) {
                    i.is_subscribed = 0;
                    result.push(i)
                }
            }

        }
    }
    // var st= multiConnection[dbName].query(sql, [languageId,0,1,1,day,1], function (err, result) {
    // console.log(st.sql)
    // if (err) {
    //     console.log("eeeee",err);
    //     var msg = "some thing went wrong ";
    //     sendResponse.sendErrorMessage(msg, reply, 500);
    // } else {
    logger.debug("18888888s", result);
    var data_length = result.length
    if (data_length > 0) {

        for (var i = 0; i < data_length; i++) {
            (async function (i) {
                result[i].timing = []
                result[i].Favourite = await SupplierFavourite(user_id, result[i].id, dbName);
                supplierCategory(dbName, reply, result[i].id, languageId, async function (err, catData) {
                    if (err) {
                        callback(err);
                    } else {
                        result[i].category = [];
                        var leng = catData.length;
                        for (var j = 0; j < leng; j++) {
                            (function (j) {
                                result[i].category.push(catData[j]);
                            }(j));
                        }
                        result[i].timing = []
                        let timing = await getSupTiming(dbName, result[i].id)

                        result[i].timing.push(timing)
                        logger.debug("======result[i].timing.push(timing)====", result[i].timing)
                        //temp.push({supplier:supplierList[i],category:result});
                        if (i == (data_length - 1)) {
                            callback(null, result);
                        }
                    }
                })
            }(i));
        }


    }
    else {
        callback(null, result);
    }
    //     }
    // })
}

// var getbestSellersSuppliersV1 = async function(user_id,dbName,service_type,reply,languageId,latitude,longitude,
//         categoryId,callback){
//         var deleted = 0;
//         var day = moment().isoWeekday();
//         day=day-1;
//         let radius_check_query="";
//         let radius_check_query_first = "";
//         // having distance<=s.delivery_radius
//         // if(service_type==1 || service_type==8){
//             radius_check_query_first="having distance<=delivery_radius"
//             radius_check_query="having distance<=delivery_radius order by total_orders desc"
//         // }
//         // else{
//         //     radius_check_query="order by s.id desc"
//         // }
//         let mUnit=await Universal.getMeausringUnit(dbName)

//         let supplier_subscription_check = "ss.supplier_id=s.id and ss.status='active' and "

//         let sqlUnion = "";
//         if(parseInt(categoryId)>0){
//         sqlUnion = " select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type,ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id as id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
//         "sml.name, count(o.id) as total_orders,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address,"+
//         "("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+")) * sin(radians(s.latitude)))) AS distance  from supplier s " +
//         " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
//         " s.id join supplier_timings st on st.supplier_id = s.id left join supplier_subscription ss on ss.supplier_id=s.id " +
//         "  JOIN orders o on o.supplier_branch_id = sbb.id left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id where " +
//         " sml.language_id = ? and sc.category_id="+categoryId+" and s.is_deleted = ? and s.is_live = ? and s.is_active = ? and " +
//         " sbb.is_live = 1 and "+supplier_subscription_check+" sbb.is_deleted = 0 and st.week_id =? and s.is_recommended = ? GROUP BY id "+radius_check_query_first+""+
//         " UNION "+
//         " select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type,ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id as id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
//         "sml.name, count(o.id) as total_orders,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address,"+
//         "("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+")) * sin(radians(s.latitude)))) AS distance  from supplier s " +
//         " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
//         " s.id join supplier_timings st on st.supplier_id = s.id left join supplier_subscription ss on ss.supplier_id=s.id" +
//         "  JOIN orders o on o.supplier_branch_id = sbb.id left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id where " +
//         " sml.language_id = ? and sc.category_id="+categoryId+" and s.is_deleted = ? and s.is_live = ? and s.is_active = ? and " +
//         " sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =? and s.is_recommended = ? GROUP BY id "+radius_check_query+"";

//         }
//         else{
//         sqlUnion = " select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id as id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
//             "sml.name, count(o.id) as total_orders,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address,"+
//             "("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+")) * sin(radians(s.latitude)))) AS distance  from supplier s " +
//             " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
//             " s.id join supplier_timings st on st.supplier_id = s.id  left join supplier_subscription ss on ss.supplier_id=s.id" +
//             " JOIN orders o on o.supplier_branch_id = sbb.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id where " +
//             " sml.language_id = ? and s.is_deleted = ? and s.is_live = ? and s.is_active = ? and " +
//             " sbb.is_live = 1 and "+supplier_subscription_check+" sbb.is_deleted = 0 and st.week_id =? and s.is_recommended = ? GROUP BY id "+radius_check_query_first+""+
//             " UNION "+
//             " select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.id as id,s.country_code as supplier_country_code,ct.type, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,s.rating,s.total_reviews, " +
//             "sml.name, count(o.id) as total_orders,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address,"+
//             "("+mUnit+" * acos (cos (radians("+latitude+"))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians("+longitude+")) + sin (radians("+latitude+")) * sin(radians(s.latitude)))) AS distance  from supplier s " +
//             " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
//             " s.id join supplier_timings st on st.supplier_id = s.id left join supplier_subscription ss on ss.supplier_id=s.id" +
//             "  JOIN orders o on o.supplier_branch_id = sbb.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id where " +
//             " sml.language_id = ? and s.is_deleted = ? and s.is_live = ? and s.is_active = ? and " +
//             " sbb.is_live = 1 and sbb.is_deleted = 0 and st.week_id =? and s.is_recommended = ? GROUP BY id "+radius_check_query+"";

//         }
//         let result=await ExecuteQ.Query(dbName,sqlUnion,[languageId,0,1,1,day,1,languageId,0,1,1,day,1])
//             // var st= multiConnection[dbName].query(sql, [languageId,0,1,1,day,1], function (err, result) {
//             // console.log(st.sql)
//             // if (err) {
//             //     console.log("eeeee",err);
//             //     var msg = "some thing went wrong ";
//             //     sendResponse.sendErrorMessage(msg, reply, 500);
//             // } else {
//                 logger.debug("18888888s",result);
//                 var data_length=result.length
//                 if(data_length>0){

//                 for(var i =0;i<data_length;i++){
//                     (async function(i){        
//                         result[i].timing = []
//                         result[i].Favourite = await SupplierFavourite(user_id,result[i].id,dbName);
//                         supplierCategory(dbName,reply,result[i].id,languageId,async function(err,catData){
//                             if(err){
//                                 callback(err);
//                             }else{
//                                 result[i].category = [];
//                                 var leng = catData.length;
//                                 for(var j = 0;j < leng;j++){
//                                     (function(j){
//                                         result[i].category.push(catData[j]);
//                                     }(j));
//                                 }
//                                 result[i].timing = []
//                                 let timing = await getSupTiming(dbName,result[i].id)

//                                 result[i].timing.push(timing)
//                                 logger.debug("======result[i].timing.push(timing)====",result[i].timing)
//                                 //temp.push({supplier:supplierList[i],category:result});
//                                 if(i == (data_length -1)){                                               
//                                     callback(null, result);
//                                 }
//                             }
//                         })
//                     }(i));
//                 }


//             }
//             else{
//                 callback(null, result);
//             }
//         //     }
//         // })
//       }

const GetUserId = (token, dbName) => {

    return new Promise((resolve, reject) => {

        if (token != undefined && token != "") {
            var sql = " select id from user where access_token = ? ";
            multiConnection[dbName].query(sql, [token], function (err, result) {
                if (err) {
                    var msg = "db error :";
                    return sendResponse.sendErrorMessage(msg, reply, 500);
                }
                else {
                    if (result.length) {
                        id = result[0].id;
                        //logger.debug("ddddd",id,result);
                        resolve(id);
                    } else {
                        resolve(0);
                    }
                }
            })
        }
        else {
            resolve(0)
        }
    })

}

// var  getProductsList = function(dbName,res,product_ids,callback){
//         var ids = 0;

//         // if(typeof product_ids==String){
//         //     ids = JSON.parse(product_ids)
//         // }else{
//         //     ids = JSON.parse(product_ids)
//         // }
//         // var Ids = ids.toString()
// console.log("=======================list=========",product_ids)

//         var sql = "select ( select CONCAT('[',COALESCE(GROUP_CONCAT(CONCAT('{','\"type_name\": \"', pdt.name, '\", ','\"name\": \"', pr.name,'\", ','\"type_id\": \"', pdt.id,'\",','\"is_multiple\": \"', pr.is_multiple,'\",','\"min_adds_on\": \"', pr.min_adds_on,'\",','\"max_adds_on\": \"', pr.max_adds_on,'\",','\"id\": \"', pr.id, '\",','\"price\": \"', price, '\",','\"is_default\": \"', pdt.is_default, '\",','\"quantity\": \"', pdt.quantity,  '\"','}') SEPARATOR ','),''),']') AS bData from product_adds_on pr left join product_adds_on_type pdt on pdt.adds_on_id=pr.id and pdt.is_deleted=0 where pr.product_id=p.id and pr.is_deleted=0      ) as adds_on,if(pp.display_price=pp.price,0,1) AS discount,pi.image_path,p.id as product_id,p.name as product_name,p.product_desc,p.category_id,p.quantity,p.purchased_quantity,"
//             sql += "p.avg_rating,p.created_at,p.price_unit,"
//             sql +="pp.price as fixed_price,pp.display_price as display_price,pp.gst_price as gst_price from product_pricing pp join "; 
//             sql += "product p on pp.product_id = p.id join product_image pi on p.id=pi.product_id where p.id IN (?) and  pp.is_deleted=0 and p.is_deleted=0"
//        var stmt = multiConnection[dbName].query(sql, [product_ids], function (err, result) {
//         console.log("=======================",err,stmt.sql,result)
//             if (err) {
//                 console.log("=======================",err,stmt.sql)
//                 var msg = "db error :";
//                 sendResponse.sendErrorMessage(msg,res,500);
//             }
//             else {
//                 if(result.length){
//                     callback(null, result);
//                 }else{

//                     callback(null,[])
//                 }
//             }
//         })
// }


// exports.checkProductList = function(req,res){
//     var product_ids = req.body.product_ids;

//     var productList = {};
//     async.auto({

//         getProductDetails:function(callback){
//             if(product_ids){
//                 getProductsList(req.dbName,res,product_ids,function(err,result){
//                       if(err){
//                              callback(err);
//                          }else{
//                             productList.products = result;
//                              callback(null);
//                          }
//                      })
//              }
//              else{
//                  callback(null);
//              }  
//         }, 
//     },function(err,result){
//         logger.debug("=========ERR!=========",err);

//         if(err) {
//             var msg = "db error :";
//             sendResponse.sendErrorMessage(msg,res,500);
//         }else{
//             sendResponse.sendSuccessData(productList, constant.responseMessage.SUCCESS, res,200);
//         }
//     })  

// }

exports.commonSecretKey = function (req, res) {
    let data = {
        "data": [
            {
                "total_days": 87,
                "uniqueId": "zipeats",
                "business_name": "ZipEats",
                "is_subscribed": 0,
                "app_type": 1,
                "email": "Zip@yopmail.com",
                "phone_number": "+1 213-546-8790",
                "country": "United States",
                "id": 497,
                "cbl_customer_domains": [
                    {
                        "db_secret_key": "4aa6114820b1f242cee23600898183cd",
                        "agent_db_secret_key": "676a1fa5c8e93d8eb4ce0862d7469bcc",
                        "admin_domain": "https://admin.zipeats.ca",
                        "supplier_domain": "https://admin.zipeats.ca",
                        "site_domain": "https://zipeats.ca",
                        "bn_image": "",
                        "bn_thumb": "",
                        "logo_image": "https://zipeats-api.royoapps.com/clikat-buckettest/AllLogos-10ZFfeYP.png",
                        "logo_thumb": "https://zipeats-api.royoapps.com/clikat-buckettest/AllLogos-10ZFfeYP.png"
                    }
                ]
            }
        ],
        "currency": [
            {
                "id": 1,
                "conversion_rate": 1,
                "currency_name": "CAD",
                "currency_symbol": "$",
                "currency_description": "USD"
            }
        ],
        "flowData": [],
        "pData": [],
        "featureData": [
            {
                "customer_feature_id": 77,
                "key_value_front": [],
                "id": 22,
                "name": "Google maps",
                "is_active": 0,
                "type_id": 19,
                "type_name": "map",
                "key_value": [
                    {
                        "key": "google_map_key",
                        "value": config.get("google_keys.google_map_key"),
                        "for_front": 1
                    }
                ]
            },
            {
                "customer_feature_id": 78,
                "key_value_front": [],
                "id": 20,
                "name": "Facebook",
                "is_active": 0,
                "type_id": 17,
                "type_name": "social_login",
                "key_value": [
                    {
                        "key": "app_id",
                        "value": "",
                        "for_front": 1
                    }
                ]
            },
            {
                "customer_feature_id": 82,
                "key_value_front": [
                    {
                        "id": 41,
                        "key": "stripe_publish_key",
                        "value": config.get("payment.strip.publish_key"),
                        "for_front": 1,
                        "customer_feature_id": 82,
                        "created_at": "2020-02-26T11:20:41.000Z",
                        "updated_at": "2020-02-26T11:20:41.000Z"
                    },
                    {
                        "id": 43,
                        "key": "stripe_publish_key",
                        "value": config.get("payment.strip.publish_key"),
                        "for_front": 1,
                        "customer_feature_id": 82,
                        "created_at": "2020-02-26T11:21:18.000Z",
                        "updated_at": "2020-02-26T11:21:18.000Z"
                    }
                ],
                "id": 1,
                "name": "Stripe",
                "is_active": 1,
                "type_id": 1,
                "type_name": "payment_gateway",
                "key_value": [
                    {
                        "key": "stripe_secret_key",
                        "value": config.get("payment.strip.secret_key"),
                        "for_front": 0
                    },
                    {
                        "key": "stripe_publish_key",
                        "value": config.get("payment.strip.publish_key"),
                        "for_front": 1
                    }
                ]
            },
            {
                "customer_feature_id": 83,
                "key_value_front": [
                    {
                        "id": 44,
                        "key": "site_id",
                        "value": "5e4bdafda89cda5a18869c5d",
                        "for_front": 1,
                        "customer_feature_id": 83,
                        "created_at": "2020-02-27T06:05:55.000Z",
                        "updated_at": "2020-02-27T06:05:55.000Z"
                    }
                ],
                "id": 25,
                "name": "Tawk",
                "is_active": 0,
                "type_id": 21,
                "type_name": "chat_service",
                "key_value": [
                    {
                        "key": "site_id",
                        "value": "",
                        "for_front": 1
                    }
                ]
            }
        ],
        "subscriptionData": [],
        "settingsData": {
            "agent_android_app_url": "https://royoapp.page.link/9iNAo844Xw9ioxuQ8",
            "agent_ios_app_url": "https://royoapp.page.link/yY19trLjZRWK8nAv7",
            "android_app_url": "https://royoapp.page.link/8JcePFC2D7mrrcMh6",
            "app_color": "",
            "banner_four": "https://codebrew.royoapps.com/nutanix-bucket/profilePic_1578407126089.png",
            "banner_four_thumb": "https://codebrew.royoapps.com/nutanix-bucket/profileThumb_1578407126089.png",
            "banner_one": "https://codebrew.royoapps.com/nutanix-bucket/profilePic_1578406254341.png",
            "banner_one_thumb": "https://codebrew.royoapps.com/nutanix-bucket/profileThumb_1578406254341.png",
            "banner_three": "https://codebrew.royoapps.com/nutanix-bucket/profilePic_1578407126089.png",
            "banner_three_thumb": "https://codebrew.royoapps.com/nutanix-bucket/profileThumb_1578407126089.png",
            "banner_thumb_url": "",
            "banner_two": "https://codebrew.royoapps.com/nutanix-bucket/profilePic_1578406865371.png",
            "banner_two_thumb": "https://codebrew.royoapps.com/nutanix-bucket/profileThumb_1578406865371.png",
            "banner_url": "",
            "domain_name": "zipeats",
            "element_color": "#401385",
            "favicon_url": "",
            "font_family": "Skia",
            "header_color": "#ffffff",
            "ios_app_url": "https://royoapp.page.link/XPVtnUFept7T9Mrr6",
            "logo_background": "#191919",
            "logo_thumb_url": "https://zipeats-api.royoapps.com/clikat-buckettest/AllLogos-10ZFfeYP.png",
            "logo_url": "https://zipeats-api.royoapps.com/clikat-buckettest/AllLogos-10ZFfeYP.png",
            "terminology": `{"english": {"product": "","products": "","supplier": "","suppliers": "","order": "","orders": "","agent": "","agents": "", "brand": "","brands": "","category": "","categories": "","catalogue": "","status": {"0": "","1": "","2": "","3": "","4": "","5": "","6": "","7": "","8": "","9": "","10": "","11": ""}},"other": {"product": "","products": "","supplier": "","suppliers": "","order": "","orders": "","agent": "","agents": "", "brand": "","brands": "","category": "","categories": "","catalogue": "","status": {"0": "","1": "","2": "","3": "","4": "","5": "","6": "","7": "","8": "","9": "","10": "","11": ""}}}`,
            "theme_color": "#401385",
            "waiting_charges": "5"
        }
    }
    sendResponse.sendSuccessDataStatusCode(data, constant.responseMessage.SUCCESS, res, 200);
}

exports.myFatoorahPayment = function (req, res) {


    var data = {};
    var success_url = config.get("payment.myfatoorah.success_url")
    var cancel_url = config.get("payment.myfatoorah.cancel_url")
    let email = req.body.email == undefined ? 'a@b.com' : req.body.email
    if (req.body.success_url) { success_url = req.body.success_url; }
    if (req.body.failure_url) { cancel_url = req.body.failure_url; }

    data = {
        PaymentMethodId: 2,
        DisplayCurrencyIso: req.body.currency,//'USD',
        CustomerEmail: email,
        InvoiceValue: parseFloat(req.body.amount),//100,
        CallBackUrl: success_url,//'https://google.com',
        ErrorUrl: cancel_url,//'https://google.com'
    }
    // var languageId = req.body.languageId;
    async.auto({
        getPaymentUrl: function (callback) {
            getPaymentUrl(req.dbName, res, data, function (err, result) {
                if (err) {
                    var msg = "db error :";
                    sendResponse.sendErrorMessage(msg, res, 500);
                } else {
                    data = result;
                    callback(null, result);
                }
            })
        }
    }, function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}
exports.myConvergePayment = async function (req, res) {
    var data = {};
    let converge_key_data = await Universal.getConvergeData(req.dbName); //myfatoorah_secret_key
    var merchantID = converge_key_data[config.get("payment.converge.merchantID")]
    var merchantUserID = converge_key_data[config.get("payment.converge.merchantUserID")]
    var merchantPIN = converge_key_data[config.get("payment.converge.merchantPIN")]
    var transaction_type = "ccsale";
    var transactionAmount = req.body.amount//"100";


    data = {
        ssl_merchant_id: merchantID,
        ssl_user_id: merchantUserID,
        ssl_pin: merchantPIN,
        ssl_transaction_type: transaction_type,
        ssl_amount: transactionAmount
    }
    console.log("data ------------- ", data)
    // var languageId = req.body.languageId;
    async.auto({
        getPaymentToken: function (callback) {
            getPaymentToken(req.dbName, res, data, function (err, result) {
                console.log("666666666666666666666666", err, result)
                if (err) {
                    var msg = "db error :";
                    sendResponse.sendErrorMessage(msg, res, 500);
                } else {
                    data = result;
                    callback(null, result);
                }
            })
        }
    }, function (err, result) {
        console.log("777777777777777777777")
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}

exports.checkPayherePaymentStatus = async function (req, res) {
    var payload = req.body;
    var order_id = payload.order_id;
    var sql = " select `value` from tbl_setting where `key` = ? ";
    multiConnection[req.dbName].query(sql, [order_id], function (err, result) {
        if (err) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            var data = {};
            if (result[0] && result[0].value) {
                var data = JSON.parse(result[0].value)
            }
            var sql = " delete from tbl_setting where `key` = ? ";
            multiConnection[req.dbName].query(sql, [order_id], function (err1, result1) { });
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
        }
    })

}

exports.payhereNotifiyUrl = async function (req, res) {

    var decipher = crypto.createDecipher(algorithm, crypto_password)

    var DbName = decipher.update(req.query.secretdbkey, 'hex', 'utf8');
    DbName += decipher.final('utf8');



    var payload = req.body;

    let payhere_key_data = await Universal.getPayhereData(DbName); //"merchant_id":"payhere_merchant_id",
    var merchantID = payhere_key_data[config.get("payment.payhere.merchantID")]

    var order_id = payload.order_id;

    if (merchantID == payload.merchant_id) {
        var dbData = {
            payment_id: payload.payment_id,
            status_message: payload.status_message,
            status_code: payload.status_code
        }
        dbData = JSON.stringify(dbData)
        var sql = "insert into tbl_setting (`key`,`for_front_end`,`value`)values(?,?,'" + dbData + "')";
        var sts = multiConnection[DbName].query(sql, [order_id, 0], function (err, result) {
            if (err) {
                var msg = "db error"
                sendResponse.sendErrorMessage(msg, res, 500);
            }
            else {
                var data = {};
                sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
            }
        })
    }
}

async function getPaymentUrl(dbName, res, data, callback) {

    let myfatoorah_token = await Universal.getMyFatoorahToken(dbName); //myfatoorah_secret_key
    //var token = myfatoorah_token;
    myfatoorah_token = myfatoorah_token[0].value ? myfatoorah_token[0].value : '7Fs7eBv21F5xAocdPvvJ-sCqEyNHq4cygJrQUFvFiWEexBUPs4AkeLQxH4pzsUrY3Rays7GVA6SojFCz2DMLXSJVqk8NG-plK-cZJetwWjgwLPub_9tQQohWLgJ0q2invJ5C5Imt2ket_-JAlBYLLcnqp_WmOfZkBEWuURsBVirpNQecvpedgeCx4VaFae4qWDI_uKRV1829KCBEH84u6LYUxh8W_BYqkzXJYt99OlHTXHegd91PLT-tawBwuIly46nwbAs5Nt7HFOozxkyPp8BW9URlQW1fE4R_40BXzEuVkzK3WAOdpR92IkV94K_rDZCPltGSvWXtqJbnCpUB6iUIn1V-Ki15FAwh_nsfSmt_NQZ3rQuvyQ9B3yLCQ1ZO_MGSYDYVO26dyXbElspKxQwuNRot9hi3FIbXylV3iN40-nCPH4YQzKjo5p_fuaKhvRh7H8oFjRXtPtLQQUIDxk-jMbOp7gXIsdz02DrCfQIihT4evZuWA6YShl6g8fnAqCy8qRBf_eLDnA9w-nBh4Bq53b1kdhnExz0CMyUjQ43UO3uhMkBomJTXbmfAAHP8dZZao6W8a34OktNQmPTbOHXrtxf6DS-oKOu3l79uX_ihbL8ELT40VjIW3MJeZ_-auCPOjpE3Ax4dzUkSDLCljitmzMagH2X8jN8-AYLl46KcfkBV' //token value to be placed here;
    data.PaymentMethodId = dbName == "tophandscleaningservices_0661" ? 6 : data.PaymentMethodId;
    let baseURL = (process.env.NODE_ENV == 'prod') ? 'https://api.myfatoorah.com' : 'https://apitest.myfatoorah.com';
    console.log("process.env.NODE_ENV ----------------baseURL--------- ", process.env.NODE_ENV, ' == prod', baseURL)
    // let baseURL =  'https://api.myfatoorah.com';
    //  baseURL = 'https://apitest.myfatoorah.com';
    console.log("process.env.NODE_ENV ----------------baseURL--------- ", process.env.NODE_ENV, ' == prod', baseURL)
    var options = {
        method: 'POST',
        url: baseURL + '/v2/ExecutePayment',
        headers: {
            Accept: 'application/json',
            Authorization: 'bearer ' + myfatoorah_token,
            'Content-Type': 'application/json'
        },
        body: data,
        json: true
    };
    console.log("options ----------- ", JSON.stringify(options))

    web_request(options, function (error, response, body) {
        console.log("===error====>>", error, body)
        if (error) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            var resp = {};
            console.log("====body=>>", body);
            if (body && Object.keys(body).length > 0) {
                let PaymentURL = body['Data'] && Object.keys(body['Data']).length > 0 ? body['Data']['PaymentURL'] : ""
                let InvoiceId = body['Data'] && Object.keys(body['Data']).length > 0 ? body['Data']['InvoiceId'] : ""
                resp = {
                    "IsSuccess": body['IsSuccess'],
                    "PaymentURL": PaymentURL,
                    "InvoiceId": InvoiceId
                }
            }
            callback(null, resp);
        }
    });
}
async function getPaymentToken(dbName, res, data, callback) {


    //let baseURL = (process.env.NODE_ENV == 'prod') ? 'https://api.convergepay.com/hosted-payments/transaction_token' : 'https://api.demo.convergepay.com/hosted-payments/transaction_token';
    let baseURL = (process.env.NODE_ENV == 'prod') ? 'https://api.covergepay.com/VirtualMerchant/process.do' : 'https://api.demo.convergepay.com/hosted-payments/transaction_token';

    //REDIRECT URLS WITH TOKEN
    //demo - https://api.demo.convergepay.com/hosted-payments?ssl_txn_auth_token=$sessiontoken
    //prod - https://api.convergepay.com/hosted-payments?ssl_txn_auth_token=$sessiontoken


    var options = {
        method: 'POST',
        url: baseURL,
        headers: {
            //'Content-Type': 'application/x-www-form-urlencoded' 
        },
        form: data,
        //json: true 
    };
    console.log("1111111111111options ----------- ", JSON.stringify(options))

    web_request(options, function (error, response, body) {
        console.log("222222222222222222222222222")
        if (error) {
            console.log("33333333333333333333333333333", error)
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            console.log("44444444444444444444444444444444444", body)
            callback(null, body);
        }
    });
}

exports.getUserSubscriptionsList = async function (request, reply) {
    console.log("11111111111111")
    var userId;
    var subList = {}
    let limit = request.query.limit == undefined ? 1000 : request.query.limit
    let skip = request.query.skip == undefined ? 0 : request.query.skip

    let userData = await Universal.getUserData(request.dbName, request.headers.authorization);
    var userId = userData && userData.length > 0 ? userData[0].id : 0;

    async.auto({
        getSubList: function (callback) {
            console.log("333333333333")
            getSubList(request.dbName, reply, userId, limit, skip, function (err, result) {
                console.log("222222222222")
                if (err) {
                    callback(err);
                } else {
                    subList = result;
                    callback(null);
                }
            })
        }
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(subList, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

var getSubList = async function (dbName, reply, userId, limit, skip, callback) {
    limit = parseInt(limit)
    skip = parseInt(skip)

    var sql = "SELECT if((SELECT count(id) cnt from user_subscription where `status`='1' and is_deleted='0' and is_cancelled='0' and user_id=? and subscription_plan_id=usp.id )>0, 1, 0) is_subscribed, (SELECT count(id) from user_subscription_plan_benefits where plan_id=usp.id) benefits_count, usp.* FROM `user_subscription_plans` usp where usp.is_blocked='0' having benefits_count > 0 limit ? offset ? "
    var sql2 = "SELECT (SELECT count(id) from user_subscription_plan_benefits where plan_id=usp.id) benefits_count,usp.id FROM `user_subscription_plans` usp where usp.is_blocked='0'  having benefits_count > 0 "
    multiConnection[dbName].query(sql, [userId, limit, skip], async function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            let count = 0;
            let total = await ExecuteQ.Query(dbName, sql2)
            if (total && total.length > 0) {
                count = total.length
            }
            if (result.length > 0) {
                for await (const [index, i] of result.entries()) {
                    // for(var i=0;i<result.length;i++){
                    var benefitResult = await ExecuteQ.Query(dbName, "SELECT * FROM user_subscription_plan_benefits uspb join user_subscription_benefits usb on uspb.benefit_id=usb.id where usb.is_blocked='0' and uspb.plan_id='" + result[index].id + "'")
                    result[index].benefits = benefitResult;
                    result[index].benefitCount = benefitResult.length;
                    // }
                }
                // let x = result.findIndex(o=> o.is_subscribed==1);
                // if(x>-1){
                //     let z = result.splice(x, 1);
                //     result.unshift(z)
                // }
            }

            let final = {
                list: result,
                count: count
            }
            callback(null, final);
        }
    })
}


exports.getMySubscriptionsList = async function (request, reply) {
    var userId;
    var mySubList = {}
    let limit = request.query.limit == undefined ? 1000 : request.query.limit
    let skip = request.query.skip == undefined ? 0 : request.query.skip
    let userData = await Universal.getUserData(request.dbName, request.headers.authorization);
    var userId = userData[0].id;

    async.auto({
        getMySubList: function (callback) {
            getMySubList(request.dbName, reply, userId, limit, skip, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    mySubList = result;
                    callback(null);
                }
            })
        }
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(mySubList, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

var getMySubList = async function (dbName, reply, userId, limit, skip, callback) {
    limit = parseInt(limit)
    skip = parseInt(skip)

    var sql = "SELECT (SELECT title from user_subscription_plans where id=us.`subscription_plan_id`) title,(SELECT min_order_amount from user_subscription_plans where id=us.`subscription_plan_id`) min_order_amount, (SELECT description from user_subscription_plans where id=us.`subscription_plan_id`) description, (SELECT image from user_subscription_plans where id=us.`subscription_plan_id`) image, us.* FROM `user_subscription` us where user_id=? and is_deleted='0' and is_cancelled='0' limit ? offset ? "
    var sql2 = "SELECT id FROM `user_subscription` where user_id='" + userId + "'"
    multiConnection[dbName].query(sql, [userId, limit, skip], async function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            let count = 0;
            let total = await ExecuteQ.Query(dbName, sql2)
            if (total && total.length > 0) {
                count = total.length
            }
            for (var i = 0; i < result.length; i++) {
                var benifitTypes = result[i].benefit_type;
                if (benifitTypes != "") {
                    benifitTypes = benifitTypes.replace(/\s/g, '')
                    var benifitTypes_ar = benifitTypes.split(",")
                    var benifitTypes_ar_str = "('" + benifitTypes_ar.join("','") + "')";
                }
                var benefitResult = await ExecuteQ.Query(dbName, "SELECT * FROM `user_subscription_benefits` WHERE `benefit_type` in " + benifitTypes_ar_str)
                result[i].benefits = benefitResult;
                result[i].benefitCount = benefitResult.length;
            }

            let final = {
                list: result,
                count: count
            }
            callback(null, final);
        }
    })
}


exports.cancelDeleteUserSubscription = async function (request, reply) {
    var payload = request.body
    var subscription_plan_id = payload.subscription_plan_id;
    var action = payload.action; //1 - cancel, 2 - delete
    let userData = await Universal.getUserData(request.dbName, request.headers.authorization);
    var userId = userData[0].id;


    async.auto({
        cancelDeleteUserSubscription: function (callback) {
            cancelDeleteUserSubscription(request.dbName, reply, subscription_plan_id, userId, action, function (err, result) {
                if (err) {
                    callback(err);
                } else {
                    callback(null);
                }
            })
        }
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}
var cancelDeleteUserSubscription = async function (dbName, reply, subscription_plan_id, userId, action, callback) {
    var result1 = await ExecuteQ.Query(dbName, "select subscription_id from user_subscription where status='1' and subscription_plan_id=? and user_id=? limit 1", [subscription_plan_id, userId])
    var query = "is_cancelled='1', status='3'"
    if (action == "2") {
        query = "is_deleted='1'"
    }
    var sql = "update `user_subscription` set " + query + " where status='1' and subscription_plan_id=? and user_id=?"
    multiConnection[dbName].query(sql, [subscription_plan_id, userId], async function (err, result) {
        if (err) {
            var msg = "db error";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            console.log("result1 =-]============", result1)
            if (result1[0] && result1[0].subscription_id != "") {
                console.log("1111111111111111111111111")
                let strip_secret_key_data = await Universal.getStripSecretKey(dbName);
                if (strip_secret_key_data && strip_secret_key_data.length > 0) {
                    console.log("2222222222222222222")
                    const stripe = require('stripe')(strip_secret_key_data[0].value);
                    console.log("333333333333333333333")
                    var dataS = await stripe.subscriptions.del(
                        result1[0].subscription_id//'sub_HerUmaP72KDeqD'
                    );
                    console.log(dataS, "444444444444444444444444444444444")
                }
            }
            callback(null);
        }
    })
}


exports.addFeedback = async function (request, reply) {
    var payload = request.body
    var name = payload.name;
    var email_id = payload.email_id;
    var phone = payload.phone;
    var description = payload.description;
    var from_user_id = payload.from_user_id;//0 - for GUEST
    var from_user_type = payload.from_user_type;//'USER','SUPPLIER','AGENT','GUEST'
    var suggestions_assigned = payload.suggestions_assigned//comma separated
    var new_suggestions = payload.new_suggestions//comma separated - to be confirmed from admin
    var new_suggestion_description = payload.new_suggestion_description//comma separated - to be confirmed from admin
    let quanity = payload.quanity || 0
    async.auto({
        addFeedback: async function (callback) {
            let query = "INSERT INTO `feedback` (`name`, `email_id`, `phone`, `description`, `from_user_id`, `from_user_type`, `suggestions_assigned`, `new_suggestions`,`new_suggestion_description`,`quantity`) VALUES (?,?,?,?,?,?,?,?,?,?);"
            let params = [name, email_id, phone, description, from_user_id, from_user_type, suggestions_assigned, new_suggestions, new_suggestion_description, quanity];
            await ExecuteQ.Query(request.dbName, query, params);
            callback(null);
        }
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.getUserSuggestions = async function (req, reply) {
    var offset = req.query.offset;
    var limit = req.query.limit;
    var data = {};

    async.auto({
        addFeedback: async function (callback) {
            var sql = "select * from suggestions_list where status='1' order by id desc LIMIT " + offset + "," + limit;
            var result = await ExecuteQ.Query(req.dbName, sql, [])
            var sql1 = "select count(id) cnt from suggestions_list where status='1'";
            var result1 = await ExecuteQ.Query(req.dbName, sql1, [])
            data = {
                count: result1[0].cnt,
                data: result
            };
            callback(null);
        }
    }, function (err, result) {
        if (err) {
            var msg = "some thing went wrong ";
            sendResponse.sendErrorMessage(msg, reply, 500);
        } else {
            return sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, reply, 200);
        }
    })
}

exports.zoomAuth = async function (req, reply) {
    try {
        var jwt = require('jsonwebtoken');
        let zoom_keys = await Universal.getZoomKeys(req.dbName); //myfatoorah_secret_key
        var data = {};
        console.log("=========zoom_keys====", zoom_keys)
        if (Object.keys(zoom_keys).length > 0) {
            var payload = {
                iss: zoom_keys["zoom_api_key"],//"RdYBVy89SAyOtGbXis8E7g",//config.APIKey,
                exp: ((new Date()).getTime() + 5000)
            };
            var token = jwt.sign(payload, zoom_keys["zoom_api_secret"]);
            data = {
                "token": token,
                "zoom_email": zoom_keys["zoom_email"]
            }
        }
        return sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, reply, 200);
    }
    catch (Err) {

    } return sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, reply, 200);

}

exports.createZoomMeeting = async function (req, res) {
    var payload = req.body;
    var order_id = payload.order_id;
    var data = {};
    let resultSql = await ExecuteQ.Query(req.dbName, "select zoom_call_url,zoom_call_start_url from orders where id=?", [order_id]);
    if (resultSql[0] && resultSql[0].zoom_call_url && resultSql[0].zoom_call_url != "" && resultSql[0].zoom_call_url != "undefined") {
        data = {
            "join_url": resultSql[0].zoom_call_url,
            "start_url": resultSql[0].zoom_call_start_url
        }
        sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
    } else {
        var user_id = payload.zoom_email;
        var zoom_token = payload.token;
        data = {
            "topic": payload.topic,
            "type": payload.type,//5,
            "start_time": payload.start_time,//"2020-10-01T11:59:00Z",
            "duration": payload.duration,//60,
            "password": "",
            "agenda": payload.topic,//"Test Topic 1",
            "recurrence": {
                "type": 1,
                "repeat_interval": 1,
                "end_date_time": payload.end_date_time//"2020-10-02T11:59:00Z"
            },
            "settings": {
                "host_video": true,
                "participant_video": true,
                "approval_type": 0,
                "registration_type": 1,
                "audio": "both",
                "auto_recording": "none",
                "enforce_login": "false",
                "enforce_login_domains": "",
                "alternative_hosts": ""
            }
        }
        async.auto({
            createZoomMeeting: function (callback) {
                createZoomMeeting(req.dbName, res, zoom_token, user_id, data, function (err, result) {
                    if (err) {
                        var msg = "db error :";
                        sendResponse.sendErrorMessage(msg, res, 500);
                    } else {
                        data = result;
                        callback(null, result);
                    }
                })
            }
        }, async function (err, result) {
            if (err) {
                var msg = "something went wrong";
                sendResponse.sendErrorMessage(msg, res, 500);
            } else {
                var zoom_call_url = data.join_url;
                var zoom_call_start_url = data.start_url;
                await ExecuteQ.Query(req.dbName, "update orders set zoom_call_url=?,zoom_call_start_url=? where id=?", [zoom_call_url, zoom_call_start_url, order_id]);
                var getAgentDbData = await common.GetAgentDbInformation(req.dbName);
                var agentConnection = await common.RunTimeAgentConnection(getAgentDbData);
                var sqlQuery = "update cbl_user_orders set zoom_call_url=?, zoom_call_start_url=? where order_id=?";
                await ExecuteQ.QueryAgent(agentConnection, sqlQuery, [zoom_call_url, zoom_call_start_url, order_id]);

                var sqlQueryAgentDetails = `select cbu.id,cbu.device_token from cbl_user_orders cuo join cbl_user cbu on cbu.id = cuo.user_id where cuo.order_id=?`
                let agentDetails = await ExecuteQ.QueryAgent(agentConnection, sqlQueryAgentDetails, [order_id]);

                data = {
                    "message": " User try to contact you via video call ",
                    "type": "zoom_call",
                    "order_id": order_id
                }
                await lib.sendFcmPushNotification(agentDetails[0].device_token, data, req.dbName);


                sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
            }
        })
    }
}

async function createZoomMeeting(dbName, res, zoom_token, user_id, data, callback) {

    let baseURL = "https://api.zoom.us/v2/users/" + user_id + "/meetings";
    var options = {
        method: 'POST',
        url: baseURL,
        headers: {
            "User-Agent": "Zoom-Jwt-Request",
            "Content-type": "application/json",
            "Authorization": 'bearer ' + zoom_token
        },
        body: data,
        json: true
    };
    console.log("data =================== ", JSON.stringify(options))
    web_request(options, function (error, response, body) {
        if (error) {
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else {
            callback(null, body);
        }
    });
}

exports.buyUserSubscription = async function (req, res) {
    var data = {};
    var card_payment_id = "";
    var dbName = req.dbName
    var sid = (new Date().getTime()).toString(36) + new Date().getUTCMilliseconds();
    var customer_payment_id = req.body.customer_payment_id == undefined ? "" : req.body.customer_payment_id;
    var unique_id = req.body.gateway_unique_id != undefined ? (req.body.gateway_unique_id).toLowerCase() : "";
    var payment_status = 0, payment_type;
    console.log("buy paramse----- ", req.body, req.headers)
    let userData = await Universal.getUserData(dbName, req.headers.authorization);
    //console.log("userData ----- ",userData)

    var endDate = ""
    var subscription_type = req.body.type;
    let payment_token = req.body.payment_token;
    let card_id = req.body.card_id == undefined ? "" : req.body.card_id;
    var plan_price = req.body.price;
    var paymentType = 3;
    if (req.body.paymentType == 0 || req.body.paymentType == 1 || req.body.paymentType == 2 || req.body.paymentType == 3 || req.body.paymentType == 4) {
        paymentType = req.body.paymentType;
    } else {
        var msg = "Enter Payment Type"
        return sendResponse.sendErrorMessage(msg, res, 400);
    }
    var currency = req.body.currency ? req.body.currency : 'usd'
    var languageId = req.body.languageId ? req.body.languageId : '14'
    let myFatoorahInvoiceId = req.body.invoiceId;
    let zelle_receipt_url = req.body.payment_token !== undefined && req.body.payment_token !== null ? req.body.payment_token : ""

    var action = req.body.action == undefined ? "" : req.body.action; //1 - buy, 2 - renew
    var renew_id = req.body.renew_id == undefined ? "" : req.body.renew_id; //id of user subscription to renew, required only in case of renew


    var startDate = moment().format("YYYY-MM-DD HH:mm:ss")
    if (subscription_type == "1") {
        endDate = moment().add(7, 'days').format("YYYY-MM-DD HH:mm:ss")
    } else if (subscription_type == "2") {
        endDate = moment().add(30, 'days').format("YYYY-MM-DD HH:mm:ss")
    } else if (subscription_type == "3") {
        endDate = moment().add(365, 'days').format("YYYY-MM-DD HH:mm:ss")
    }

    if (action == "2") {

        // in case of renew

        var current_plan_end_date = req.body.end_date == undefined ? "" : req.body.end_date; // required in case of renew to add renew dates according to current or previous plan dates

        console.log(new Date(current_plan_end_date), "current_plan_end_date", current_plan_end_date)
        current_plan_end_date = moment(current_plan_end_date).format("YYYY-MM-DD HH:mm:ss")
        current_date = moment().format("YYYY-MM-DD HH:mm:ss")
        if (current_plan_end_date > current_date) {
            startDate = moment(new Date(current_plan_end_date)).add(1, 'days').format("YYYY-MM-DD HH:mm:ss")
        }
        console.log("startDate", startDate)
        if (subscription_type == "1") {
            endDate = moment(new Date(startDate)).add(7, 'days').format("YYYY-MM-DD HH:mm:ss")
        } else if (subscription_type == "2") {
            endDate = moment(new Date(startDate)).add(30, 'days').format("YYYY-MM-DD HH:mm:ss")
        } else if (subscription_type == "3") {
            endDate = moment(new Date(startDate)).add(365, 'days').format("YYYY-MM-DD HH:mm:ss")
        }
    }

    let wallet_amount = 0;
    let walletLeftAmount = 0;
    let wallet_module = 0;

    let walletQuery = "select `key`,`value` from tbl_setting where `key`=? ";
    let walletData = await ExecuteQ.Query(req.dbName, walletQuery, ["wallet_module"]);

    if (walletData && walletData.length > 0) {
        if (parseInt(walletData[0].value) === 1) {
            wallet_module = 1;
        }
    }

    let userWalletDetails = await ExecuteQ.Query(req.dbName, "select wallet_amount from user where id = ?", [userData[0].id]);


    data = {
        user_id: userData[0].id,
        subscription_plan_id: req.body.subscription_plan_id,
        benefit_type: req.body.benefit_type,//comma separated benefit type codes like FDW, B1G1W,etc
        start_date: startDate,
        end_date: endDate,
        subscription_id: "sub_" + sid,
        type: subscription_type,//1-weekly, 2-monthly, 3-yearly
        price: plan_price,
        action: action, //1 - buy, 2 - renew
        renew_id: renew_id,//id of user subscription to renew, required only in case of renew
        current_plan_end_date: current_plan_end_date
    }
    var transaction_id = "";
    let payment_source = ""
    async.auto({
        checkUserSubscription: async function (callback) {
            console.log("111111111111111122222222222222")
            // checkUserSubscription(req.dbName,res,data,function(err,result){
            //     if(err){
            //         var msg = "db error :";
            //         sendResponse.sendErrorMessage(msg,res,500);
            //     }else{
            //         data = result;
            //         callback(null,result);
            //     }
            // })
            callback(null);
        },
        makePayment: ['checkUserSubscription', async function (callback) {
            try {
                var orderNetAmount = plan_price;
                if (parseInt(paymentType) == 1/* && payment_after_confirmation==0*/) {
                    console.log("222222222222222222")

                    if ((unique_id) == config.get("payment.mumybene.unique_id")) {
                        let mumybene_key_data = await Universal.getMumybeneKeyData(dbName);
                        if (mumybene_key_data) {
                            var mumybene_username = mumybene_key_data[config.get("payment.mumybene.mumybene_username")]
                            var mumybene_password = mumybene_key_data[config.get("payment.mumybene.mumybene_password")]
                            var phoneNumber = req.body.mobile_no;// ? req.body.mobile_no : "0954755348";
                            var service_provider = req.body.service_provider;// ? req.body.mobile_no : "0954755348";
                            var paymentReference = "sub_" + (+ new Date()); //"Testabc0112";

                            var transactionAmount = orderNetAmount//"100";
                            var baseUrl = "http://test.543.cgrate.co.zm:55555/Konik/KonikWs"

                            let xml = `<soapenv:Envelope
                                xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                                xmlns:kon="http://konik.cgrate.com">
                                <soapenv:Header xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                                    <wsse:Security xmlns:mustUnderstand="1">
                                        <wsse:UsernameToken xmlns:Id="UsernameToken-1" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
                                            <wsse:Username xmlns="http://konik.cgrate.com">`+ mumybene_username + `</wsse:Username>
                                            <wsse:Password xmlns:Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">`+ mumybene_password + `</wsse:Password>
                                        </wsse:UsernameToken>
                                    </wsse:Security>
                                </soapenv:Header>
                                <soapenv:Body>
                                <kon:processCustomerPayment>
                                <transactionAmount>`+ transactionAmount + `</transactionAmount>
                                <customerMobile>`+ phoneNumber + `</customerMobile>
                                <paymentReference>`+ paymentReference + `</paymentReference>
                                </kon:processCustomerPayment>
                                </soapenv:Body>
                                </soapenv:Envelope>`;
                            var options = {
                                method: 'POST',
                                url: baseUrl,
                                headers: {
                                    'Content-Type': 'text/xml;charset=utf-8',
                                    'Accept-Encoding': 'gzip,deflate',
                                    'Content-Length': xml.length
                                },
                                body: xml,
                                timeout: 55000
                            };

                            web_request(options, async function (error, response, body) { //0,1,6,7,48,62,63,75,565

                                if (error) {
                                    if (error.code == "ESOCKETTIMEDOUT") {


                                        let xml1 = `<soapenv:Envelope
                                            xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                                            xmlns:kon="http://konik.cgrate.com">
                                            <soapenv:Header xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
                                                <wsse:Security xmlns:mustUnderstand="1">
                                                    <wsse:UsernameToken xmlns:Id="UsernameToken-1" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
                                                        <wsse:Username xmlns="http://konik.cgrate.com">`+ mumybene_username + `</wsse:Username>
                                                        <wsse:Password xmlns:Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">`+ mumybene_password + `</wsse:Password>
                                                    </wsse:UsernameToken>
                                                </wsse:Security>
                                            </soapenv:Header>
                                            <soapenv:Body>
                                            <kon:queryCustomerPayment>
                                            <paymentReference>`+ paymentReference + `</paymentReference>
                                            </kon:queryCustomerPayment>
                                            </soapenv:Body>
                                            </soapenv:Envelope>`;
                                        var options1 = {
                                            method: 'POST',
                                            url: "http://test.543.cgrate.co.zm:55555/Konik/KonikWs",
                                            headers: {
                                                'Content-Type': 'text/xml;charset=utf-8',
                                                'Accept-Encoding': 'gzip,deflate',
                                                'Content-Length': xml1.length
                                            },
                                            body: xml1
                                        };

                                        web_request(options1, async function (error1, response1, body1) {

                                            if (error1) {

                                                return sendResponse.sendErrorMessage(
                                                    await Universal.getMsgText(
                                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                    res, 400);
                                            } else if (!error1 && response1.statusCode == 200) {

                                                var xml2js1 = require('xml2js');
                                                var parser1 = new xml2js1.Parser({ explicitArray: false, trim: true });
                                                parser1.parseString(body1, (err1, result1) => {

                                                    var responseCode1 = result1['env:Envelope']['env:Body']['ns2:queryCustomerPaymentResponse']['return']['responseCode']
                                                    if (responseCode1 == "0") {
                                                        var paymentID1 = result1['env:Envelope']['env:Body']['ns2:queryCustomerPaymentResponse']['return']['paymentID']
                                                        card_payment_id = paymentID1
                                                        transaction_id = paymentReference
                                                        payment_source = "543 (" + service_provider + ")"
                                                        payment_status = 1
                                                        callback(null)
                                                    } else {
                                                        return sendResponse.sendErrorMessage("Timeout: You did not respond to the prompt on your phone in time, please try again.", res, 400);
                                                    }
                                                });
                                            } else {
                                                return sendResponse.sendErrorMessage(
                                                    await Universal.getMsgText(
                                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                                    res, 400);
                                            }
                                        });
                                    } else {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                            res, 400);
                                    }
                                } else if (!error && response.statusCode == 200) {
                                    var xml2js = require('xml2js');
                                    var parser = new xml2js.Parser({ explicitArray: false, trim: true });
                                    console.log("parser -- ", JSON.stringify(parser))
                                    parser.parseString(body, (err, result) => {
                                        var responseCode = result['env:Envelope']['env:Body']['ns2:processCustomerPaymentResponse']['return']['responseCode']
                                        console.log("responseCode ==== ", responseCode)
                                        if (responseCode == "0") {
                                            var paymentID = result['env:Envelope']['env:Body']['ns2:processCustomerPaymentResponse']['return']['paymentID']
                                            card_payment_id = paymentID
                                            transaction_id = paymentReference
                                            payment_source = "543"
                                            payment_status = 1
                                            console.log("11111111111111111111111111111", paymentReference)
                                            callback(null)
                                        } else {
                                            //var responseMessage = result['env:Envelope']['env:Body']['ns2:processCustomerPaymentResponse']['return']['responseMessage']
                                            var responseMessage = "";
                                            if (responseCode == "17") {
                                                responseMessage = "Timeout: You did not respond to the prompt on your phone in time, please try again.";
                                            } else if (responseCode == "1") {
                                                responseMessage = "Insufficient funds: It appears your account has insufficient funds, please choose a different payment method"
                                            }
                                            else if (responseCode == "79") {
                                                responseMessage = "You're not currently registered to make payments. To register follow the instructions below:1. Add +260211840008 as a WhatsApp contact 2. Send “Hello” and follow the instructions "
                                            }
                                            else if (responseCode == "6") {
                                                responseMessage = "You're not currently registered to make payments. To register follow the instructions below:1. Add +260211840008 as a WhatsApp contact 2. Send “Hello” and follow the instructions "
                                            }
                                            else {
                                                responseMessage = "Sorry, an error occurred. Please try again"
                                            }
                                            console.log(responseCode, "---------responseMessage ------------------- ", responseMessage)

                                            return sendResponse.sendErrorMessage(responseMessage, res, 400);
                                        }
                                    });
                                } else {
                                    console.log("0101010101010101010101010101010101010101")
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                        res, 400);
                                }
                            });
                        } else {
                            console.log("1212121212121212121212121212121212121212")
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }
                    }
                    else if ((unique_id) == config.get("payment.strip.unique_id")) {
                        payment_source = "stripe";
                        let strip_secret_key_data = await Universal.getStripSecretKey(dbName);

                        if (strip_secret_key_data && strip_secret_key_data.length > 0) {
                            const stripe = require('stripe')(strip_secret_key_data[0].value);
                            let payment_object = {};
                            // if(customer_payment_id !=="" && card_id!==""){
                            //     payment_object = {
                            //         amount: Math.round(parseFloat(orderNetAmount*100)),
                            //         currency: currency,
                            //         source: card_id,
                            //         customer:customer_payment_id,
                            //         capture:true,
                            //         description: '('+userData[0].email+') Purchased Subscription Plan',
                            //     }
                            // }else{
                            //     payment_object = {
                            //         amount: Math.round(parseFloat(orderNetAmount*100)),
                            //         currency: currency,
                            //         source: payment_token,
                            //         capture:true,
                            //         description: '('+userData[0].email+') Purchased Subscription Plan',
                            //     }
                            // }
                            // stripe.charges.create(payment_object,async function(err, charge) {
                            //     if(err){
                            //         return  sendResponse.sendErrorMessage(
                            //             await Universal.getMsgText(
                            //         languageId,{service_type:0,dbName:dbName},config.get("error_msg.payment.error")),
                            //         res,400);
                            //     }
                            //     else{


                            if (action == "1") {
                                var result1 = await ExecuteQ.Query(dbName, "select stripe_plan_id from user_subscription_plans where id=? limit 1", [data.subscription_plan_id])
                                const subscription = await stripe.subscriptions.create({
                                    customer: customer_payment_id,//'cus_HwQ0HJpEwjvZAT',
                                    items: [
                                        { price: result1[0].stripe_plan_id/*'price_1HMXAtLyOfejzWzoLY9qVJFw'*/ },
                                    ],
                                });
                                data.subscription_id = subscription.id
                                //card_payment_id=charge.id
                            }
                            card_payment_id = "123_stripe"
                            payment_status = 1
                            callback(null)
                            //     }
                            // });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.conekta.unique_id")) {
                        let conekta_data = await Universal.getConektaSecretKey(req.dbName);
                        let userData = await Universal.getUserData(req.dbName, req.headers.authorization);
                        payment_source = "conekta";

                        if (conekta_data && conekta_data.length > 0) {
                            let conekta = require('conekta');
                            conekta.api_key = conekta_data[0].value;
                            conekta.locale = 'es';
                            conekta.Order.create({
                                "currency": "MXN",
                                "customer_info": {
                                    "name": userData[0].name,
                                    "phone": userData[0].mobile_no,
                                    "email": userData[0].email
                                },
                                "line_items": [{
                                    "name": userData[0].name,
                                    "unit_price": Math.round(parseFloat(orderNetAmount * 100)),
                                    "quantity": 1
                                }],
                                "shipping_lines": [
                                    {
                                        "amount": 0
                                    }
                                ],
                                "shipping_contact": {
                                    "address": {
                                        street1: userData[0].customer_address,
                                        city: userData[0].customer_address,
                                        state: userData[0].address_line_2,
                                        postal_code: "78215",
                                        country: userData[0].customer_address,
                                        residential: true,
                                        object: "shipping_address"
                                    }
                                },
                                "charges": [
                                    {
                                        "payment_method": {
                                            "type": "card",
                                            "token_id": payment_token
                                        }
                                    }]
                            }).then(function (result) {
                                logger.debug("JSON==Object==>", result.toObject());
                                card_payment_id = result.toObject().id;
                                payment_status = 1
                                callback(null)
                            }, async function (error) {
                                logger.debug("=======ERR!=====", error);
                                return sendResponse.sendErrorMessage(
                                    await Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.error")),
                                    res, 400);
                            })
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }
                    }
                    else if ((unique_id) == config.get("payment.razorpay.unique_id")) {
                        payment_source = "razorpay";
                        let razor_pay_data = await Universal.getRazorPayData(req.dbName);
                        logger.debug("======razor_pay_data=net_amount====>>", razor_pay_data, productList[0].net_amount * 100)
                        if (Object.keys(razor_pay_data).length > 0) {
                            web_request({
                                method: 'POST',
                                url: "https://" + razor_pay_data[config.get("payment.razorpay.publish_key")] + ":" + razor_pay_data[config.get("payment.razorpay.secret_key")] + "@api.razorpay.com/v1/payments/" + payment_token + "/capture",
                                form: {
                                    amount: (orderNetAmount) * 100,
                                    currency: "INR"
                                }
                            }, async function (error, response, body) {
                                logger.debug("===RazorPayError====", error)
                                // console.log('Status:', response.statusCode);
                                // console.log('Headers:', JSON.stringify(response.headers));
                                // console.log('Response:', body);
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.error")),
                                        res, 400);
                                }
                                else {
                                    payment_status = 1
                                    callback(null)
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.authorize_net.unique_id")) {
                        payment_source = "authorize_net";
                        let authorize_net_key_data = await Universal.getAuthorizeNetKeys(dbName)
                        let base_url = process.env.NODE_ENV == 'prod' ? 'https://api.authorize.net/xml/v1/request.api' : 'https://apitest.authorize.net/xml/v1/request.api'
                        let expirationDate = req.body.expirationDate
                        let ref_id = "ref_id_" + randomstring.generate({
                            length: 5,
                            charset: 'alphanumeric'
                        }).toUpperCase();
                        if (Object.keys(authorize_net_key_data).length > 0) {
                            let body = {};
                            let authnet_profile_id = req.body.authnet_profile_id !== undefined ? req.body.authnet_profile_id : "";
                            let authnet_payment_profile_id = req.body.authnet_payment_profile_id !== undefined ? req.body.authnet_payment_profile_id : "";
                            if (authnet_profile_id !== "" && authnet_profile_id !== "") {
                                body = {
                                    "createTransactionRequest": {
                                        "merchantAuthentication": {
                                            "name": authorize_net_key_data[config.get("payment.authorize_net.api_login_id")],
                                            "transactionKey": authorize_net_key_data[config.get("payment.authorize_net.transaction_key")]
                                        },
                                        "refId": ref_id,
                                        "transactionRequest": {
                                            "transactionType": "authCaptureTransaction",
                                            "amount": orderNetAmount,
                                            "profile": {
                                                "customerProfileId": authnet_profile_id,
                                                "paymentProfile": { "paymentProfileId": authnet_payment_profile_id }
                                            }
                                        }
                                    }
                                }
                            } else {
                                body = {
                                    "createTransactionRequest": {
                                        "merchantAuthentication": {
                                            "name": authorize_net_key_data[config.get("payment.authorize_net.api_login_id")],
                                            "transactionKey": authorize_net_key_data[config.get("payment.authorize_net.transaction_key")]

                                        },
                                        "refId": ref_id,
                                        "transactionRequest": {
                                            "transactionType": "authCaptureTransaction",
                                            "amount": orderNetAmount,
                                            "payment": {
                                                "creditCard": {
                                                    "cardNumber": paymentToken,
                                                    "expirationDate": expirationDate
                                                }
                                            },
                                            "billTo": {
                                                "firstName": userData[0].name,
                                            }
                                        }
                                    }
                                }
                            }


                            var options = {
                                'method': 'POST',
                                'url': base_url,
                                'headers': {
                                    'Content-Type': 'application/json'
                                },
                                body: body,
                                json: true
                            };
                            web_request(options, async function (error, response, body) {
                                logger.debug("====Body=====", error, body)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1;
                                    let result = body.trim();
                                    result = JSON.parse(result)
                                    logger.debug(result)
                                    payment_source = "authorize_net";

                                    card_payment_id = ref_id;


                                    if (result.messages.resultCode == "Error") {
                                        let errorMsg = result.messages.message[0].text
                                        sendResponse.sendErrorMessage(errorMsg, res, 400);
                                    } else if (result.messages.resultCode == "Ok") {
                                        callback(null);
                                    } else {
                                        let errorMsg = "something went wrong while getting cards"
                                        sendResponse.sendErrorMessage(errorMsg, res, 400);
                                    }
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }
                    }
                    else if ((unique_id) == config.get("payment.razorpay.unique_id")) {
                        payment_source = "razorpay";
                        let razor_pay_data = await Universal.getRazorPayData(req.dbName);
                        logger.debug("======razor_pay_data=net_amount====>>", razor_pay_data, productList[0].net_amount * 100)
                        if (Object.keys(razor_pay_data).length > 0) {
                            web_request({
                                method: 'POST',
                                url: "https://" + razor_pay_data[config.get("payment.razorpay.publish_key")] + ":" + razor_pay_data[config.get("payment.razorpay.secret_key")] + "@api.razorpay.com/v1/payments/" + payment_token + "/capture",
                                form: {
                                    amount: (orderNetAmount) * 100,
                                    currency: "INR"
                                }
                            }, async function (error, response, body) {
                                logger.debug("===RazorPayError====", error)
                                // console.log('Status:', response.statusCode);
                                // console.log('Headers:', JSON.stringify(response.headers));
                                // console.log('Response:', body);
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.error")),
                                        v, 400);
                                }
                                else {
                                    payment_status = 1
                                    callback(null)
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, {
                                    service_type: 0,
                                    dbName: req.dbName
                                }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }

                    }


                    else if ((unique_id) == config.get("payment.myfatoorah.unique_id")) {

                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "myfatoorah"
                        transaction_id = myFatoorahInvoiceId

                        callback(null)

                    }
                    else if ((unique_id) == "telr") {

                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "telr"
                        callback(null)

                    } else if ((unique_id) == "hyperpay") {

                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "hyperpay"
                        callback(null)

                    }
                    else if ((unique_id) == "thawani") {

                        payment_source = "thawani";
                        card_payment_id = payment_token;
                        payment_status = 1

                        callback(null)
                    }

                    else if ((unique_id) == "sadadqa") {
                        console.log("333333333333sadadqa33333333sadadqa33333333")
                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "sadadqa"
                        callback(null)
                    }
                    else if ((unique_id) == "transbank") {
                        console.log("3333333333transbank333333transbank333333333333")
                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "transbank"
                        callback(null)
                    }
                    else if ((unique_id) == config.get("payment.payhere.unique_id")) {
                        console.log("3333333333333333333333333333")
                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "payhere"
                        callback(null)

                    }

                    else if ((unique_id) == "paymaya") {
                        console.log("33333333333paymaya33333paymaya33333333333")
                        payment_source = "paymaya";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null)
                    }
                    else if ((unique_id) == "pago_facil") {
                        logger.debug("======dbname=======", req.dbName);
                        let pago_facil_key_data = await Universal.getPagofacilKeys(req.dbName);
                        logger.debug("=========pago data=======", pago_facil_key_data)
                        let base_url = process.env.NODE_ENV == 'prod' ? 'https://api.pagofacil.tech/Wsrtransaccion/index/format/json' : 'https://sandbox.pagofacil.tech/Wsrtransaccion/index/format/json'
                        let tran_id = "tran_id_" + randomstring.generate({
                            length: 5,
                            charset: 'alphanumeric'
                        }).toUpperCase();

                        let cvt = req.body.cvt;
                        let cp = req.body.cp;
                        let expMonth = req.body.expMonth;
                        let expYear = req.body.expYear;

                        logger.debug("==========pagofacil key data====", pago_facil_key_data)
                        if (Object.keys(pago_facil_key_data).length > 0) {
                            let headers = {
                                'Content-Type': 'multipart/form-data',
                            }

                            formData = {
                                "method": "transaccion",
                                "data[nombre]": userData[0].firstname,
                                "data[apellidos]": userData[0].firstname,
                                "data[numeroTarjeta]": payment_token,
                                "data[cvt]": cvt,
                                "data[cp]": cp,
                                "data[mesExpiracion]": expMonth,
                                "data[anyoExpiracion]": expYear,
                                "data[monto]": parseFloat(orderNetAmount).toString(),
                                "data[idSucursal]": pago_facil_key_data.idSucursa,
                                "data[idUsuario]": pago_facil_key_data.idUsuario,
                                "data[idServicio]": "3",
                                "data[email]": userData[0].email,
                                "data[telefono]": userData[0].mobile_no,
                                "data[celular]": userData[0].mobile_no,
                                "data[calleyNumero]": userData[0].customer_address,
                                "data[colonia]": userData[0].customer_address,
                                "data[municipio]": userData[0].customer_address,
                                "data[status]": "Sonora",
                                "data[estado]": "México",
                                "data[pais]": "México"
                            }
                            logger.debug("========formData to send==========", formData)

                            logger.debug("=======JSON.stringify(formData)==========", JSON.stringify(formData))

                            var options = {
                                method: 'POST',
                                url: base_url,
                                headers: headers,
                                form: formData,
                                json: true
                            };
                            web_request(options, async function (error, response, body) {
                                logger.debug("====Body=====", error, body)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_source = "pago_facil"
                                    if (body.WebServices_Transacciones.transaccion.autorizado == "0") {
                                        return sendResponse.sendErrorMessage(body.WebServices_Transacciones.transaccion.texto,
                                            res, 400)
                                    } else {
                                        card_payment_id = body.WebServices_Transacciones.transaccion.idTransaccion
                                        payment_status = 1;
                                        callback(null);
                                    }
                                }
                            });

                        }
                        else {

                            return sendResponse.sendErrorMessage("keys not added", reply, 400)
                        }

                    }
                    else if ((unique_id) == "safe2pay") {

                        payment_source = "safe2pay";

                        let safe2pay_keydata = await Universal.getSafe2Paykey(request.dbName);

                        let base_url = "https://payment.safe2pay.com.br/v2/Payment";

                        let IsSandbox = process.env.NODE_ENV == 'prod' ? false : true

                        // let expirationDate = request.body.expirationDate
                        let cvv = "123";

                        cvv = request.body.cvt !== undefined ? request.body.cvt : request.body.cvv;

                        let expMonth = request.body.expMonth;
                        let expYear = request.body.expYear;

                        let ref_id = "ref_id_" + randomstring.generate({
                            length: 5,
                            charset: 'alphanumeric'
                        }).toUpperCase();


                        if (Object.keys(safe2pay_keydata).length > 0) {
                            let body = {};
                            body = {
                                "IsSandbox": IsSandbox,
                                "Application": "Aplicação de teste",
                                "Vendor": userData[0].firstname,
                                "CallbackUrl": "https://callbacks.exemplo.com.br/api/Notify",
                                "PaymentMethod": "2",
                                "Customer": {
                                    "Name": userData[0].firstname,
                                    "Identity": ref_id,
                                    "Phone": userData[0].mobile_no,
                                    "Email": userData[0].email
                                },
                                "Products": [
                                    {
                                        "Code": ref_id,
                                        "Description": "wallet money add",
                                        "UnitPrice": amount,
                                        "Quantity": 1
                                    }
                                ],
                                "PaymentObject": {
                                    "Holder": userData[0].firstname,
                                    "CardNumber": payment_token,
                                    "ExpirationDate": expMonth + "/" + expYear,//"12/2021",
                                    "SecurityCode": cvv
                                }
                            }

                            logger.debug("=======JSON.stringify(body)==========", JSON.stringify(body))
                            var options = {
                                'method': 'POST',
                                'url': base_url,
                                'headers': {
                                    'Content-Type': 'application/json',
                                    'x-api-key': safe2pay_keydata.safe2pay_apikey
                                },
                                body: body,
                                json: true
                            };
                            web_request(options, async function (error, response, body) {
                                logger.debug("====Body=====", error, body)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.error")),
                                        reply, 400);
                                }
                                else {
                                    payment_status = 1;
                                    callback(null);
                                }
                            })


                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: request.dbName }, config.get("error_msg.payment.no_gate_way")),
                                reply, 400);
                        }
                    }
                    else if ((unique_id) == config.get("payment.converge.unique_id")) {

                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "converge"
                        callback(null)

                    }
                    else if ((unique_id) == config.get("payment.tap.unique_id")) {
                        payment_source = "tap";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null);
                    }
                    else if ((unique_id) == config.get("payment.mPaisa.unique_id")) {
                        payment_source = "mPaisa";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null);
                    }
                    else if ((unique_id) == config.get("payment.windcave.unique_id")) {
                        payment_source = "windcave";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null);
                    }
                    else if ((unique_id) == "aamarpay") {

                        payment_source = "aamarpay";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null)

                    }
                    else if ((unique_id) == "datatrans") {

                        payment_source = "datatrans";
                        card_payment_id = payment_token;
                        payment_status = 1
                        callback(null)

                    }

                    else if ((unique_id) == config.get("payment.paypal.unique_id")) {
                        payment_source = "paypal";
                        let paypal_api = process.env.NODE_ENV == 'prod' ? 'https://api.paypal.com' : 'https://api.sandbox.paypal.com'
                        let paypal_data = await Universal.getPaypalData(req.dbName);
                        logger.debug("========paypal==API==", paypal_api, paypal_data)
                        if (Object.keys(paypal_data).length > 0) {
                            let tokenData = await Universal.getAuthTokeOfPayPal(paypal_data[config.get("payment.paypal.client_key")], paypal_data[config.get("payment.paypal.secret_key")]);
                            var options = {
                                'method': 'POST',
                                'url': paypal_api + '/v2/checkout/orders/' + payment_token + '/capture',
                                'headers': {
                                    'Authorization': 'Bearer ' + tokenData.access_token,
                                    // 'PayPal-Request-Id': '7b92603e-77ed-4896-8e78-5dea2050476a',
                                    'Content-Type': 'application/json'
                                }
                            };
                            web_request(options, async function (error, response, body) {
                                logger.debug("====Body=====", error, body)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.error")),
                                        res, 400);
                                }
                                else {
                                    payment_status = 1
                                    card_payment_id = payment_token;
                                    callback(null)
                                }
                            });

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }
                    }

                    else if ((unique_id) == "pipolpay") {
                        logger.debug("===============zelle==========", zelle_receipt_url)
                        if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                            logger.debug("=======node zelle url============", zelle_receipt_url)
                            let msg = "please provide receipt for PipolPay";
                            sendResponse.sendErrorMessage(msg, reply, 500);
                        } else {
                            payment_source = "PipolPay";
                            card_payment_id = payment_token;
                            payment_status = 1
                            callback(null)
                        }
                    }
                    else if ((unique_id) == config.get("payment.checkout.unique_id")) {
                        payment_source = "checkout";

                        let checkout_data = await Universal.getCheckoutSecretKey(req.dbName);
                        logger.debug("======razor_pay_data=net_amount====>>", checkout_data)
                        if (Object.keys(checkout_data).length > 0) {
                            var headers = {
                                'Accept': 'application/json',
                                'Authorization': checkout_data[config.get("payment.checkout.secret_key")]//'sk_test_a7d262c3-15fd-4564-8aca-9e45ed879f57'
                            };

                            //console.log("headers ============= ",headers)

                            var dataString = {
                                "source": {
                                    "type": "token",
                                    "token": payment_token//"tok_4gzeau5o2uqubbk6fufs3m7p54"
                                },
                                //"amount": amount,//6500,
                                "amount": parseFloat(orderNetAmount),
                                "currency": currency,//"USD",
                                "reference": req.body.cartId ? req.body.cartId : '',//"ORD-5023-4E89",
                                "metadata": {
                                    "card_id": card_id,
                                    "customer_payment_id": customer_payment_id
                                }
                            };
                            console.log("dataString ============= ", dataString)
                            let checkout_api_url = (process.env.NODE_ENV == 'prod') ? 'https://api.checkout.com/payments' : 'https://api.sandbox.checkout.com/payments';
                            console.log("options ------- ------ ------ ", {
                                method: 'POST',
                                //url: "https://api.sandbox.checkout.com/payments",
                                url: checkout_api_url,
                                headers: headers,
                                form: dataString
                            })
                            web_request({
                                method: 'POST',
                                //url: "https://api.sandbox.checkout.com/payments",
                                url: checkout_api_url,
                                headers: headers,
                                form: dataString
                            }, async function (error, response, body) {
                                // console.log("1#########################################################")
                                // logger.debug("=== Checkout ====",error)
                                // console.log("2#########################################################")
                                // console.log(error)
                                // console.log("3#########################################################")
                                // console.log(response)
                                // console.log("4#########################################################")
                                // console.log(body)
                                // console.log("5#########################################################")
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.error")),
                                        res, 400);
                                }
                                else {
                                    card_payment_id = body.id;
                                    payment_status = 1
                                    callback(null)
                                }
                            });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }
                    }

                    else if ((unique_id) == config.get("payment.venmo.unique_id")) {
                        payment_source = "venmo";
                        let braintree_data = await Universal.getBraintreeData(req.dbName);
                        logger.debug("========braintree_data==API==", braintree_data);

                        if (Object.keys(braintree_data).length > 0) {
                            var braintree = require("braintree");
                            var gateway = braintree.connect({
                                environment: process.env.NODE_ENV == 'prod' ? braintree.Environment.Production : braintree.Environment.Sandbox,
                                merchantId: braintree_data[config.get("payment.venmo.merchant_id")],
                                publicKey: braintree_data[config.get("payment.venmo.public_key")],
                                privateKey: braintree_data[config.get("payment.venmo.private_key")]
                            });

                            gateway.transaction.sale({
                                amount: orderNetAmount,
                                paymentMethodNonce: payment_token,
                                options: {
                                    submitForSettlement: true
                                },
                                deviceData: {}
                            }, async function (err, result) {
                                if (err) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.error")),
                                        res, 400);
                                }
                                else {
                                    if (result.success) {
                                        logger.debug("===braintree===response Id==>>>", result)
                                        card_payment_id = result.transaction.id;
                                        payment_status = 1
                                        callback(null)
                                    }
                                    else {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.error")),
                                            res, 400);
                                    }

                                }

                            });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }
                    }
                    else if ((unique_id).toLowerCase() == config.get("payment.braintree.unique_id")) {
                        payment_source = "braintree";
                        let braintree_data = await Universal.getBraintreeData(req.dbName);
                        logger.debug("========braintree_data==API==", braintree_data);

                        if (Object.keys(braintree_data).length > 0) {
                            var braintree = require("braintree");
                            var gateway = braintree.connect({
                                //environment:process.env.NODE_ENV == 'prod'? braintree.Environment.Production:braintree.Environment.Sandbox,
                                environment: braintree.Environment.Production,
                                merchantId: braintree_data[config.get("payment.braintree.merchant_id")],
                                publicKey: braintree_data[config.get("payment.braintree.public_key")],
                                privateKey: braintree_data[config.get("payment.braintree.private_key")]
                            });

                            gateway.transaction.sale({
                                amount: orderNetAmount,
                                paymentMethodNonce: payment_token,
                                options: {
                                    submitForSettlement: true
                                },
                                deviceData: {}
                            }, async function (err, result) {
                                if (err) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.error")),
                                        res, 400);
                                }
                                else {
                                    if (result.success) {
                                        logger.debug("===braintree===response Id==>>>", result)
                                        card_payment_id = result.transaction.id;
                                        payment_status = 1
                                        callback(null)
                                    }
                                    else {
                                        return sendResponse.sendErrorMessage(
                                            await Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.error")),
                                            res, 400);
                                    }

                                }

                            });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }
                    }
                    else if ((unique_id) == "zelle") {
                        logger.debug("===============zelle==========", zelle_receipt_url)
                        if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                            logger.debug("=======node zelle url============", zelle_receipt_url)
                            let msg = "please provide receipt for zelle";
                            sendResponse.sendErrorMessage(msg, res, 500);
                        } else {
                            payment_source = "zelle"
                            callback(null)
                        }
                    }
                    else if ((unique_id) == config.get("payment.squareup.unique_id")) {
                        payment_source = "squareup";
                        let squareData = await Universal.getSquareupSecretKey(dbName)

                        if (Object.keys(squareData).length > 0) {
                            var SquareConnect = require('square-connect');
                            // Set Square Connect credentials and environment
                            var defaultClient = SquareConnect.ApiClient.instance;
                            // Configure OAuth2 access token for authorization: oauth2
                            var oauth2 = defaultClient.authentications['oauth2'];
                            oauth2.accessToken = squareData.square_token;
                            // Set 'basePath' to switch between sandbox env and production env
                            // sandbox: https://connect.squareupsandbox.com
                            // production: https://connect.squareup.com
                            let basePathOfSequare = process.env.NODE_ENV == 'prod' ? 'https://connect.squareup.com' : 'https://connect.squareupsandbox.com';
                            logger.debug("=basePathOfSequare===", basePathOfSequare);
                            defaultClient.basePath = process.env.NODE_ENV == 'prod' ? 'https://connect.squareup.com' : 'https://connect.squareupsandbox.com'

                            let payment_object = {};
                            const idempotency_key = crypto.randomBytes(22).toString('hex');
                            var apiInstance = new SquareConnect.PaymentsApi();
                            // you cand Add some Optional params acc. to the requirements in the PaymentObj
                            //https://developer.squareup.com/reference/square/payments-api/create-payment/explorer
                            logger.debug("==withou,with=", parseInt(Math.round(parseFloat((orderNetAmount - referralAmount) * 100))), typeof parseInt(Math.round(parseFloat((orderNetAmount - referralAmount) * 100))), typeof Math.round(parseFloat((orderNetAmount - referralAmount) * 100)))
                            if (customer_payment_id !== "" && card_id !== "") {
                                payment_object = {
                                    amount_money: {
                                        amount: parseInt(Math.round(parseFloat((orderNetAmount) * 100))),    // 100 Cent == $1.00 charge
                                        currency: "USD"
                                    },
                                    // currency: currency,
                                    source_id: card_id,
                                    customer_id: customer_payment_id,
                                    idempotency_key: idempotency_key,
                                    note: 'Made an booking'
                                }
                            } else {
                                payment_object = {
                                    source_id: payment_token,
                                    amount_money: {
                                        amount: parseInt(Math.round(parseFloat((orderNetAmount) * 100))),    // 100 Cent == $1.00 charge
                                        currency: "USD"
                                    },
                                    idempotency_key: idempotency_key,
                                    note: 'Made an booking'

                                };
                            }
                            logger.debug("===payment_object=", payment_object);
                            apiInstance.createPayment(payment_object).then(function (data) {
                                console.log('API called successfully. Returned data: ' + JSON.stringify(data));
                                card_payment_id = data.payment.id;
                                transaction_id = idempotency_key
                                payment_status = 1
                                callback(null);
                            }, function (error) {
                                console.error(error);
                                return sendResponse.sendErrorMessage(
                                    Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                    res, 400);
                            });
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }


                    }
                    else if ((unique_id) == config.get("payment.cybersource.unique_id")) {
                        payment_source = "cybersource";
                        let cyberSourceData = await Universal.getCyberSourceData(dbName);
                        logger.debug("==cyberSourceData====", cyberSourceData);
                        if (Object.keys(cyberSourceData).length > 0) {
                            var cybersourceRestApi = require('cybersource-rest-client');
                            try {
                                var instance = new cybersourceRestApi.PaymentsApi({
                                    'authenticationType': process.env.NODE_ENV == 'prod' ? 'https_signature' : 'http_signature',
                                    'runEnvironment': process.env.NODE_ENV == 'prod' ? 'cybersource.environment.production' : 'cybersource.environment.SANDBOX',
                                    'merchantID': cyberSourceData.cybersource_merchant_id,
                                    'merchantKeyId': cyberSourceData.cybersource_merchant_key_id,
                                    'merchantsecretKey': cyberSourceData.cybersource_merchant_secret_key
                                });
                                var processingInformation = new cybersourceRestApi.Ptsv2paymentsProcessingInformation();
                                processingInformation.commerceIndicator = 'internet';
                                // var aggregatorInformation = new cybersourceRestApi.Ptsv2paymentsAggregatorInformation();


                                var amountDetails = new cybersourceRestApi.Ptsv2paymentsOrderInformationAmountDetails();
                                amountDetails.totalAmount = parseFloat(parseFloat(orderNetAmount));
                                amountDetails.currency = 'AED';
                                var orderInformation = new cybersourceRestApi.Ptsv2paymentsOrderInformation();
                                orderInformation.amountDetails = amountDetails;

                                // var billTo = new cybersourceRestApi.Ptsv2paymentsOrderInformationBillTo();
                                //     billTo.country = userData[0].customer_address;
                                //     billTo.firstName = userData[0].name;
                                //     billTo.lastName = userData[0].name
                                //     billTo.phoneNumber = userData[0].mobile_no
                                //     billTo.address1 = userData[0].address_line_2
                                //     billTo.locality = userData[0].customer_address;
                                //     billTo.email = userData[0].email;
                                //     billTo.address2 = userData[0].address_line_2;

                                // orderInformation.billTo = billTo;
                                var paymentInformation = new cybersourceRestApi.Ptsv2paymentsPaymentInformation();
                                // var card = new cybersourceRestApi.Ptsv2paymentsPaymentInformationCard(); 
                                var customer = new cybersourceRestApi.Ptsv2paymentsPaymentInformationCustomer();
                                customer.customerId = payment_token;
                                // card.expirationYear = cardData[0].exp_year
                                // card.number = cardData[0].card_number;
                                // card.expirationMonth = cardData[0].exp_month;
                                // card.securityCode = await Universal.getDecryptData(cardData[0].cvc);
                                // // customer.customer_payment_id
                                // card.type = cardData[0].card_type;
                                // paymentInformation.card = card;
                                paymentInformation.customer = customer
                                var cbrequest = new cybersourceRestApi.CreatePaymentRequest();
                                // request.clientReferenceInformation = clientReferenceInformation;
                                cbrequest.processingInformation = processingInformation;
                                // request.aggregatorInformation = aggregatorInformation;
                                cbrequest.orderInformation = orderInformation;
                                cbrequest.paymentInformation = paymentInformation;
                                cbrequest.processingInformation.capture = true;
                                console.log('\n*************** Process Payment ********************* ');

                                instance.createPayment(cbrequest, function (error, data, response) {
                                    if (error) {

                                        console.log('\nError in process a payment : ' + JSON.stringify(error));
                                        return sendResponse.sendErrorMessage(
                                            Universal.getMsgText(
                                                languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                            res, 400);
                                    }
                                    else {
                                        console.log('\nData of process a payment : ' + JSON.stringify(response['status']), JSON.stringify(response['id']))
                                        card_payment_id = data.id;
                                        payment_status = 1
                                        callback(null);
                                    }
                                    // console.log('\nResponse of process a payment : ' + JSON.stringify(response));
                                    // console.log('\nResponse Code of process a payment : ' + JSON.stringify(response['status']));
                                    // callback(error, data);
                                });
                            } catch (error) {
                                logger.debug("======ERR!===>>", error)
                                return sendResponse.sendErrorMessage(
                                    Universal.getMsgText(
                                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                                    res, 400);
                            }

                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }

                    }
                    else if ((unique_id) == config.get("payment.paytab.unique_id")) {
                        let payTabData = await Universal.getPayTabData(dbName);

                        payment_source = "paytab";
                        if (Object.keys(payTabData).length > 0) {
                            web_request.post({
                                url: "https://www.paytabs.com/apiv2/verify_payment_transaction",
                                method: "POST",
                                form: {
                                    "merchant_email": payTabData.paytab_secret_key,
                                    "secret_key": payTabData.paytab_merchant_email,
                                    // "merchant_email":"Kiran.girija@afoc.mil.ae", //payTabData.paytab_merchant_email,
                                    // "secret_key":"QGj2hCvxNdFnoA9QZe9jm8QSr2S44FcUmvWD7sbUFRh4rrUrG4L2cCUEENJJsVDPqAsy3EtIvLNXdHoTM9WYLRDqEm97hNWIophr",//payTabData.paytab_secret_key,
                                    "transaction_id": customer_payment_id
                                }

                            }, async function (error, response, body) {
                                logger.debug("===paytabErr!===", error)
                                if (error) {
                                    return sendResponse.sendErrorMessage(
                                        await Universal.getMsgText(
                                            languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.error")),
                                        res, 400);
                                }
                                else {
                                    card_payment_id = JSON.parse(body).transaction_id;
                                    payment_status = 1
                                    callback(null);
                                }

                            })
                        }
                        else {
                            return sendResponse.sendErrorMessage(
                                await Universal.getMsgText(
                                    languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.no_gate_way")),
                                res, 400);
                        }

                    }
                    else if ((unique_id) == "urway") {

                        card_payment_id = payment_token;
                        payment_status = 1
                        payment_source = "urway"

                        callback(null)

                    }
                    else if ((unique_id) == "oxxo") {
                        logger.debug("===============oxxo==========", zelle_receipt_url)
                        if (zelle_receipt_url == "" || zelle_receipt_url == null) {
                            logger.debug("=======node oxxo url============",
                                zelle_receipt_url)
                            let msg = "please provide receipt for oxxo";
                            sendResponse.sendErrorMessage(msg, res, 500);
                        } else {
                            payment_status = 1;
                            payment_source = "oxxo"
                            callback(null)
                        }
                    }

                    else {
                        return sendResponse.sendErrorMessage(
                            await Universal.getMsgText(
                                languageId, { service_type: 0, dbName: req.dbName }, config.get("error_msg.payment.no_gate_way")),
                            res, 400);
                    }
                } else if (parseInt(wallet_module) === 1 && parseInt(paymentType) === 4) {
                    var id = userData[0].id;
                    wallet_amount = userWalletDetails[0].wallet_amount
                    if (wallet_amount < orderNetAmount) {
                        return sendResponse.sendErrorMessage("Not enough wallet money", res, 400);
                    }
                    walletLeftAmount = parseFloat(wallet_amount) - parseFloat(orderNetAmount)
                    logger.debug("---walletLeftAmount--------", walletLeftAmount, wallet_amount, orderNetAmount);
                    let updateWalletQuery = "update user set wallet_amount=? where id=?"
                    await ExecuteQ.Query(req.dbName, updateWalletQuery, [walletLeftAmount, id]);
                    let query = "insert into user_wallet_transactions(user_id,amount,card_payment_id,by_admin,added_deduct_through,is_add) values(?,?,?,?,?,?)"
                    let params = [id, orderNetAmount, "", 0, 3, 0];
                    await ExecuteQ.Query(req.dbName, query, params);
                    payment_source = "wallet";
                    payment_status = 1
                    callback(null)
                }
                else {
                    callback(null)
                }
            }
            catch (Err) {
                console.log("===BUY=SUB===ERR!===?", Err)
                return sendResponse.sendErrorMessage(
                    await Universal.getMsgText(
                        languageId, { service_type: 0, dbName: dbName }, config.get("error_msg.payment.error")),
                    res, 400);
            }
        }],
        enableUserSubscription: ['makePayment', function (callback) {

            //enableUserSubscription:function(callback){
            if (payment_status == "0") {
                console.log("aaaa")
                var msg = "Payment was not successfull";
                sendResponse.sendErrorMessage(msg, res, 400);
            } else {
                console.log("bbbbb")
                data.payment_source = payment_source
                data.payment_id = card_payment_id
                data.payment_status = "1"
                data.transaction_id = transaction_id ? transaction_id : '';
                data.status = "1"
            }

            enableUserSubscription(req.dbName, res, data, function (err, result) {
                console.log("cccccc")
                if (err) {
                    console.log("err 111111 ", err)
                    var msg = "db error :";
                    sendResponse.sendErrorMessage(msg, res, 500);
                } else {
                    data = result;
                    callback(null, result);
                }
            })
        }]
    }, function (err, result) {
        console.log("dddddd")
        if (err) {
            console.log(err)
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            sendResponse.sendSuccessData(data, constant.responseMessage.SUCCESS, res, 200);
        }
    })
}

async function enableUserSubscription(dbName, res, data, callback) {

    var sql = "insert into user_subscription (user_id,subscription_plan_id,benefit_type,start_date,end_date,status,subscription_id,payment_source,payment_id,transaction_id,payment_status,price,type) values (?,?,?,?,?,?,?,?,?,?,?,?,?)";
    var params = [data.user_id, data.subscription_plan_id, data.benefit_type, data.start_date, data.end_date, data.status, data.subscription_id, data.payment_source, data.payment_id, data.transaction_id, data.payment_status, data.price, data.type]

    if (data.action && data.action == "2") {
        sql = "update user_subscription set end_date='" + data.end_date + "', status='" + data.status + "', payment_source='" + data.payment_source + "', payment_id='" + data.payment_id + "', payment_status='" + data.payment_status + "' where user_id='" + data.user_id + "' and subscription_plan_id='" + data.subscription_plan_id + "'  and is_deleted='0'"
        params = [data.end_date, data.status, data.payment_source, data.payment_id, data.payment_status, data.user_id, data.subscription_plan_id]
    }

    multiConnection[dbName].query(sql, params, async function (err, result) {

        if (err) {
            console.log("err =========== ", err)
            var msg = "something went wrong";
            sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            var result1 = await ExecuteQ.Query(dbName, "select id from  user_subscription where user_id=? and subscription_plan_id=? and is_deleted='0' limit 1", [data.user_id, data.subscription_plan_id])

            if (result1[0]) {
                await ExecuteQ.Query(dbName, "insert into user_subscription_logs (user_subscription_id,start_date,end_date,user_id,subscription_plan_id,benefit_type,payment_source,payment_id,payment_status) values (?,?,?,?,?,?,?,?,?)", [result1[0].id, data.start_date, data.end_date, data.user_id, data.subscription_plan_id, data.benefit_type, data.payment_source, data.payment_id, data.payment_status])
            }
            callback(null, result);
        }
    })
}

exports.uploadChatImage = async function (request, reply) {
    var image = request.files != undefined ? request.files.image : undefined;
    console.log("request.files ---- ", request.files)
    console.log("request.files.image ---- ", request.files.image)
    let imageUrl = ""
    if (image) {
        imageUrl = await uploadMgr.uploadImageFileToS3BucketNew(image)
        console.log("imageUrl ---- ", imageUrl)
    }
    return sendResponse.sendSuccessData({ image: imageUrl }, constant.responseMessage.SUCCESS, reply, 200);
}
exports.featureData = async function (req, res) {
    let data = await ExecuteQ.Query(req.dbName,'select `key`,`value` from tbl_setting where `key`=?',["featureData"])
    let json={"featureData":JSON.parse(data[0].value)}
    sendResponse.sendSuccessDataStatusCode(json, constant.responseMessage.SUCCESS, res,200);
}
exports.setFeatureData = async function (req, res) {
    let keyData=req.body.key_value;
    for (let [index, i] of keyData.entries()) {
        logger.debug("==key==val==loop======>>",i);
        await Universal.updateInsertSetting(req.dbName,i.key,i.value,i.for_front);
    }
    sendResponse.sendSuccessDataStatusCode({}, constant.responseMessage.SUCCESS, res,200);
}

var getRecommendedV1 = async function(user_id,dbName,service_type,
    reply,languageId,latitude,longitude,
    categoryId,order_by,filter_by,callback){
    var deleted = 0;
    var day = moment().isoWeekday();
    day = day - 1;
    let radius_check_query = "";
    // having distance<=s.delivery_radius
    // if(service_type==1 || service_type==8){
    radius_check_query = "having distance<=delivery_radius "
    // }
    // else{
    //     radius_check_query="order by s.id desc"
    // }
    let supplier_subscription_check = "ss.supplier_id=s.id and ss.status='active' and "

    let order_by_rating_check = " order by rand() ";

    if (parseInt(order_by) == 1) {
        order_by_rating_check = " order by s.rating desc "
    }



    let mUnit = await Universal.getMeausringUnit(dbName)
    let planQuery = "";
    let subScriptionData = await ExecuteQ.Query(dbName, "select `key`,`value` from tbl_setting where `key`=? and value=?", ["is_subscription_plan", "1"])
    planQuery = subScriptionData && subScriptionData.length > 0 ? "and ss.status='active'" : ""
    let sqlUnion = "";




    let orderTypeCondition = ""

    if (parseInt(filter_by) == 1) {
        orderTypeCondition = " and (s.self_pickup=0 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 2) {
        orderTypeCondition = " and (s.self_pickup=1 or s.self_pickup=2) "
    } else if (parseInt(filter_by) == 3) {
        orderTypeCondition = " and s.is_dine_in=1 and s.is_scheduled=1 "
    }


    if (parseInt(categoryId) > 0) {
        sqlUnion = " select * from(select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type,ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id as id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,(SELECT avg(rating) from supplier_rating where supplier_id=s.id and is_approved=0 order by id desc limit 50) as rating,(SELECT count(id)  from supplier_rating where supplier_id=s.id and is_approved=0 order by id desc limit 50) as total_reviews, " +
            " s.preparation_time, s.is_dine_in,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
            "IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = ? and sc.category_id=" + categoryId + " and s.is_deleted = ? and s.is_live = ? and s.is_active = ? and " +
            " sbb.is_live = 1 " + orderTypeCondition + " and " + supplier_subscription_check + " sbb.is_deleted = 0 and st.week_id =? and s.is_recommended = ? " + planQuery + " GROUP BY id " + radius_check_query + " order by rand()) result1 " +
            " UNION " +
            " select * from(select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type,ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id as id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,(SELECT avg(rating) from supplier_rating where supplier_id=s.id and is_approved=0 order by id desc limit 50) as rating,(SELECT count(id)  from supplier_rating where supplier_id=s.id and is_approved=0 order by id desc limit 50) as total_reviews, " +
            " s.preparation_time,s.is_dine_in,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
            "IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = ? and sc.category_id=" + categoryId + " and s.is_deleted = ? and s.is_live = ? and s.is_active = ? and " +
            " sbb.is_live = 1 " + orderTypeCondition + " and sbb.is_deleted = 0 and st.week_id =? and s.is_recommended = ? " + planQuery + " GROUP BY id " + radius_check_query + " " + order_by_rating_check + ") result1";
    }
    else {
        sqlUnion = " select * from(select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id as id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,(SELECT avg(rating) from supplier_rating where supplier_id=s.id and is_approved=0 order by id desc limit 50) as rating,(SELECT count(id)  from supplier_rating where supplier_id=s.id and is_approved=0 order by id desc limit 50) as total_reviews, " +
            "  s.preparation_time,s.is_dine_in,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
            "IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = ? and s.is_deleted = ? and s.is_live = ? and s.is_active = ? and " +
            " sbb.is_live = 1 " + orderTypeCondition + " and " + supplier_subscription_check + " sbb.is_deleted = 0 and st.week_id =? and s.is_recommended = ? " + planQuery + " GROUP BY id " + radius_check_query + " order by rand()) result1" +
            " UNION " +
            " select * from(select s.is_scheduled,s.mobile_number_1 as supplierPhoneNumber,s.country_code as supplier_country_code,ct.type, ct.menu_type,s.delivery_radius,si.image_path as supplier_image,s.id as id,sbb.id as supplier_branch_id,s.logo,s.status,s.payment_method,(SELECT avg(rating) from supplier_rating where supplier_id=s.id and is_approved=0 order by id desc limit 50) as rating,(SELECT count(id)  from supplier_rating where supplier_id=s.id and is_approved=0 order by id desc limit 50) as total_reviews, " +
            "  s.preparation_time,s.is_dine_in,sml.name,sml.description,sml.uniqueness,sml.terms_and_conditions,sml.address," +
            "IFNULL((" + mUnit + " * acos (cos (radians(" + latitude + "))* cos(radians(s.latitude))* cos(radians(s.longitude) - radians(" + longitude + ")) + sin (radians(" + latitude + ")) * sin(radians(s.latitude)))),0) AS distance  from supplier s " +
            " join supplier_ml sml on sml.supplier_id = s.id join supplier_branch sbb on sbb.supplier_id = " +
            " s.id join supplier_timings st " +
            " on st.supplier_id = s.id  left join supplier_image si on si.supplier_id=s.id left join supplier_category sc on s.id = sc.supplier_id join categories ct on ct.id=sc.category_id left join supplier_subscription ss on ss.supplier_id=s.id where " +
            " sml.language_id = ? and s.is_deleted = ? and s.is_live = ? and s.is_active = ? and " +
            " sbb.is_live = 1 " + orderTypeCondition + " and sbb.is_deleted = 0 and st.week_id =? and s.is_recommended = ? " + planQuery + " GROUP BY id " + radius_check_query + " " + order_by_rating_check + ") result2";
    }
    let result = await ExecuteQ.Query(dbName, sqlUnion, [languageId, 0, 1, 1, day, 1, languageId, 0, 1, 1, day, 1])
    // var st= multiConnection[dbName].query(sql, [languageId,0,1,1,day,1], function (err, result) {
    // console.log(st.sql)
    // if (err) {
    //     console.log("eeeee",err);
    //     var msg = "some thing went wrong ";
    //     sendResponse.sendErrorMessage(msg, reply, 500);
    // } else {
    logger.debug("18888888s", result);
    var data_length = result.length
    if (data_length > 0) {
        for (var i = 0; i < data_length; i++) {
            (async function (i) {
                result[i].timing = []
                result[i].Favourite = await SupplierFavourite(user_id, result[i].id, dbName);
                result[i].is_subscribed = await subscribedSupplier(result[i].id, dbName)
                supplierCategory(dbName, reply, result[i].id, languageId, async function (err, catData) {
                    if (err) {
                        callback(err);
                    } else {
                        result[i].category = [];
                        var leng = catData.length;
                        for (var j = 0; j < leng; j++) {
                            (function (j) {
                                result[i].category.push(catData[j]);
                            }(j));
                        }
                        result[i].timing = []
                        let timing = await getSupTiming(dbName, result[i].id)
                        result[i].timing.push(timing)
                        logger.debug("======result[i].timing.push(timing)====", result[i].timing)
                        //temp.push({supplier:supplierList[i],category:result});
                        if (i == (data_length - 1)) {
                            callback(null, result);
                        }
                    }
                })
            }(i));
        }

    }
    else {
        callback(null, result);
    }
    //     }
    // })
}

// exports.createPeachCustomer = function(request,reply){    
//     var payload = request.body;    
//     async.auto({
//         createCustomer:async function(callback){

//             let peach_secret_key_data=await Universal.getPeachSecretKey(request.dbName);
//             if(peach_secret_key_data && peach_secret_key_data.length>0){

//                 let url = 'https://test.oppwa.com/v1/registrations';
//                 let headers= {
//                     'Content-Type': 'application/x-www-form-urlencoded',
//                     //'Authorization':'Bearer OGFjN2E0Yzk3MTEyOWYyMjAxNzExNjI2YWYxYjA4N2J8SlpSeFljNnRtbg=='
//                     'Authorization':'Bearer '+peach_secret_key_data[config.get("payment.peach.peach_auth_token")]
//                 };
//                 let obj ={
//                     //'entityId':'8ac7a4c771129f2401711626cae30c42',
//                     'entityId':peach_secret_key_data[config.get("payment.peach.peach_entityid")],
//                     'paymentBrand':payload.card_brand,
//                     'card.number':payload.card_number,
//                     'card.holder':payload.card_holder_name,
//                     'card.expiryMonth':payload.exp_month,
//                     'card.expiryYear':payload.exp_year,
//                     'card.cvv':payload.cvv,
//                     'recurringType':'INITIAL',
//                 };

//                 var options = {
//                     method: 'POST',
//                     url: url,
//                     headers:headers,
//                     form: obj,
//                     json: true 
//                 };

//                 web_request(options,function (error, response, body) {
//                     if(error){
//                         callback(error);
//                     }else{
//                         callback(null, body);
//                     }
//                 });
//             }
//             else{
//                 return sendResponse.sendErrorMessage(
//                     await Universal.getMsgText(
//                         languageId,{service_type:0,dbName:request.dbName},config.get("error_msg.payment.no_gate_way")),
//                     reply,400);
//             }

//         },async function(err,result){
//             if(err){
//                 var msg = "some thing went wrong ";
//                 sendResponse.sendErrorMessage(msg, reply, 500);
//             }else{            
//                 await ExecuteQ.Query(req.dbName,"update user set peach_customer_id=? where id=?",[result.id,req.users.id]);
//                 return sendResponse.sendSuccessData(result, constant.responseMessage.SUCCESS, reply, 200);
//             }
//         }
//     })
// }

const requestApi = (options) => {
    return new Promise((resolve, reject) => {
        request(options,
            function (error, response, body) {
                console.log("==urway==error=body===", error, body);
                if (error) {
                    reject(error);
                }
                else {
                    resolve(body);
                }
            });

    })
}

const authorizeAndCapturePayment = async (data, payuLatam_api_login_key, payu_latam_api_key, payuLatam_api_merchant_id, payuLatam_api_account_id, basic_auth) => {

    let md5 = require('md5');
    let ref = 'TestPayU' + new Date();

    data.currency_symbol = data.currency.substring(0, 2);
    let signatureSource = md5(`${payu_latam_api_key}~${payuLatam_api_merchant_id}~${ref}~${data.amount}~${data.currency}`);

    let Obj = {
        "language": "en",
        "command": "SUBMIT_TRANSACTION",
        "merchant": {
            "apiLogin": payuLatam_api_login_key,
            "apiKey": payu_latam_api_key
        },
        "transaction": {
            "order": {
                "accountId": payuLatam_api_account_id,
                "referenceCode": ref,
                "description": "Make a  order payment",
                "language": "en",
                "notifyUrl": "http://pruebaslap.xtrweb.com/lap/pruebconf.php",
                "signature": signatureSource,
                "buyer": {
                    "fullName": data.firstName + data.lastName,
                    "emailAddress": data.email,
                    "dniNumber": "-",
                    "shippingAddress": {
                        "street1": "-", //"Avenida de la poesia",
                        "street2": "-",
                        "city": "-",
                        "state": "-",
                        "country": data.currency_symbol,  //MX
                        "postalCode": "-",
                        "phone": "-"
                    }
                },
                "additionalValues": {
                    "TX_VALUE": {
                        "value": data.amount,
                        "currency": data.currency  // MXN
                    }
                }
            },
            "creditCardTokenId": data.customer_token,
            //    "creditCard": {
            // 	  "securityCode": data.cvv
            //    },
            "type": "AUTHORIZATION_AND_CAPTURE",
            "paymentMethod": data.payment_method,
            "paymentCountry": data.currency_symbol, //MX
            "payer": {
                "fullName": data.firstName + data.lastName,
                "emailAddress": data.email
            },
            "ipAddress": data.ip_address,
            "cookie": "cookie_52278879710130",
            "userAgent": "Firefox",
            "extraParameters": {
                "INSTALLMENTS_NUMBER": 1,
                "RESPONSE_URL": "http://www.misitioweb.com/respuesta.php"
            }
        },
        "test": false
    };
    // encode basic_auth method : Buffer.from("${payu_latam_api_login}: ${payu_latam_api_key}").toString('base64')

    let header = {
        Authorization: `Basic ${basic_auth}`,
        'Content-Type': `application/json`
    };

    console.log("*******************Obj", JSON.stringify(Obj), Obj.transaction.order.buyer.shippingAddress);
    let baseURL = (process.env.NODE_ENV == 'prod') ? 'https://api.payulatam.com' : 'https://sandbox.api.payulatam.com';
    let options = {
        method: 'POST',
        url: `${baseURL}/payments-api/4.0/service.cgi`,
        body: Obj,
        headers: header,
        json: true
    };

    let result = await requestApi(options);
    return result;

}

exports.sendSuplierNotifcation = async (req, res) => {
    try {
        let { accessToken, suplierId, orderId } = req.body;
        let device_token = [];
        let orderData = await ExecuteQ.Query(req.dbName, "select `status` from orders where id=?", [orderId]);
        if (orderData[0].status == 0) {
            var msg = "Your Order Is Not Prepaired Yet";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
        else if (orderData[0].status == 1 || orderData[0].status == 11 || orderData[0].status == 10) {

            let userDetail = await ExecuteQ.Query(req.dbName, "select `firstname`,`id` from user where access_token=?", [accessToken]);

            let suplierDetail = await ExecuteQ.Query(req.dbName, "select `device_token`,`id` from supplier where id=?", [suplierId]);

            device_token.push(suplierDetail[0].device_token)
            var data = {
                "message": `${userDetail[0].firstname} Arrived For Order Id ${orderId}`,
            }

            await lib.sendFcmPushNotification(device_token, data, req.dbName);

            sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, res, 200);
        } else {
            var msg = "Order already picked up";
            sendResponse.sendErrorMessage(msg, res, 500);
        }
    }
    catch (err) {
        logger.error(err)
        console.log("===========err=========", err);
        sendResponse.somethingWentWrongError(res)
    }
}



exports.invoiceEmail = async (req, res) => {

    let order_id = req.body.order_id;
    let subject = "Invoice " + req.body.order_id;

    let payment_source = req.body.payment_source;
    let product_cost = req.body.Product_cost;
    let delivery_charges = req.body.delivery_charges;
    let commission = req.body.commission;
    let payment_id = req.body.payment_id;

    let firstname = req.body.firstname;
    let delivery_mode = req.body.delivery_mode;

    let total_amount = req.body.total_amount;

    let net_amount = req.body.total_amount;


    let currency = req.body.currency
    async.auto({
        getOrderDetail: function (cb) {
            orderFunction.orderDescriptionV3(req.dbName, res, req.body.order_id, function (err, result) {
                if (err) {
                    sendResponse.somethingWentWrongError(res);
                }
                else {
                    // data.productList = result;
                    orderDetail = result
                    cb(null);
                }
            });
        },
        generateInv: ['getOrderDetail', async function (callback) {

            let date = new Date()
            let day = date.getDate();
            let month = date.getMonth() + 1;
            let year = date.getFullYear();

            let fullDate = day + "/" + month + "/" + year;


            let address = orderDetail[0].address_line_1;
            let supplier_address = orderDetail[0].branch_address;

            let order_amount = orderDetail[0].order_cost;

            let total_order_price = orderDetail[0].total_order_price;


            let name = orderDetail[0].user_name;
            let supplier_name = orderDetail[0].branch_name;
            let receiverEmail = orderDetail[0].email;

            total_amount = +(Math.round(total_amount + "e+2") + "e-2");
            net_amount = +(Math.round(net_amount + "e+2") + "e-2");
            commission = +(Math.round(commission + "e+2") + "e-2");

            let orderList = ``;
            orderDetail.forEach(ele => {
                product_costs = +(Math.round(ele.Product_cost + "e+2") + "e-2");
                orderList += `<tr>
                    <td style="max-width:40%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"><strong style="color:#222;">${ele.product}</strong></td>
                     <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"> ${ele.quantity}</td>
                     <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"> ${currency} ${product_costs}</td>
                     <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${currency} ${product_costs * ele.quantity} </td>
    
                                     
                                </tr>`;
            });

            let htmlContent = `<!DOCTYPE>
<html>
<head>
    <title>Email Tamplate</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body style="font-family: Segoe UI, Roboto, Helvetica Neue,Helvetica, Arial,sans-serif; background: #fff;margin:40px 10px; padding:0px; border-radius: 15px; display:table; margin: 15px auto;">

      <table  cellspacing="0" cellpanding="0" style="max-width:700px;  border-collapse: collapse; border-radius: 15px; border: 1px solid #444;">
       <tr>
       <td style="padding: 0px;"> 
                
                <table style="width: 100%; ">
                    <tbody>  
                        <tr>
                             <td style="text-align: left;padding: 0px 15px;width: 100%;font-size:20px;font-weight:bold;color: #26348e;font-family: sans-serif;">
                                <h1 style="margin:10px 0 0;">Invoice</h1>
                            </td>
                        </tr>  
                        <tr>
                             <td style="text-align: left;padding: 10px 15px;width: 100%;font-size: 20px;font-weight:bold;color: #ca2e81;font-family: sans-serif;">
                                <span>Submitted on ${fullDate}</span>
                            </td>
                        </tr> 
                    </tbody>
               </table>


                <table style="width: 100%; margin:0px 0px 0px;  color: #4E5457; background: #fff; font-size: 14px; overflow: hidden;padding:15px 0;">
                        <tbody>
                            <thead>
                                <tr>
                                     <th style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;">Payable to</th>
                                    <th style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;">Invoice ID</th>
                                    <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;">Delivery Mode</h1></td>

                                </tr>
                            </thead>
                           <tbody>
                                <tr>
                                     <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${supplier_name}</td>
                                    <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${order_id}</td>
                                    <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${delivery_mode}</td>

                                    </tr>
                                
                                <tr>
                                   <td style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;"> Commission	</h1></td>
                                   <td style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;">
                                   Delivery Charges</h1></td>
                                   <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;">Payment Source</h1></td>

                                   </tr>
                                 
                                 <tr>
                                     <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${commission}</td>
                                    <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"> ${delivery_charges}</td>
                                    <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${payment_source}</td>

                                 </tr>


                                 <tr>
                                   <td style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;">Payment ID	</h1></td>
                                   <td style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;">
                                   Balance Amount</h1></td>
                                   </tr>
                                 
                                 <tr>
                                    <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${payment_id}</td>
                                    <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"> ${total_amount}</td>

                                 </tr>
 
                           </tbody>
                        </tbody>
                   </table>
                    <table style="width: 100%;margin: 20px 0px 0px;color: #4E5457;background: #fff;font-size: 14px;padding: 0px;overflow: hidden;border-top: 1px solid#ccc;border-bottom: 1px solid#ccc;">
                        <thead>
                            <tr>
                               <th style="color: #26348e;max-width:40%;text-align: left;padding: 10px 15px;width: 100%;font-size: 20px;font-weight: bold;font-family: sans-serif;">Product Name</th>
                                <th style="color: #26348e;max-width:20%;text-align: right;padding: 10px 15px;width: 100%;font-size: 20px;font-weight: bold;font-family: sans-serif;">Qty</th>
                               <th style="color: #26348e;max-width:20%;text-align: right;padding: 10px 15px;width: 100%;font-size: 20px;font-weight: bold;font-family: sans-serif;">Product price</th>
                                <th style="color: #26348e;max-width:20%;text-align: right;padding: 10px 15px;width: 100%;font-size: 20px;font-weight: bold;font-family: sans-serif;">Total price</th>
                            </tr>
                        </thead>
                        <tbody>
                         ${orderList}
                        </tbody>
                   </table>
                    <table style="width: 100%;margin: 20px 0px 0px;color: #4E5457;background: #fff;font-size: 14px;padding: 0px;overflow: hidden;">
                        <tbody>
                           <tr>
                               <td style="max-width:40%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">Notes:</td>
                               <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #26348e;font-family: sans-serif;">Subtotal</td>
                              <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #222;font-weight:bold;font-family: sans-serif;"><strong>${currency}${total_amount}</strong></td>
                           </tr>
                            
                           <tr>
                               <td style="max-width:40%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"></td>
                               <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #26348e;font-family: sans-serif;"></td>
                               <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;color: #ca2e81;font-family: sans-serif;"><h1 style="margin:0;font-size: 30px;">${currency}${net_amount}</h1></td>
                           </tr>
                      </tbody>
                  </table>
                   </td>
                   </tr>
                 </table>       
</body></html>`;


            const func = require('../routes/commonfunction');
            let smtpSqlSata = await Universal.smtpData(req.dbName);
            console.log(htmlContent)
            func.sendMailthroughSMTP(smtpSqlSata, res, subject, receiverEmail, htmlContent, 0, function (err, result) {
                if (err) {

                    return sendResponse.somethingWentWrongError(res);
                } else {
                    return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, res, 200);
                }
            });
        }]

    }, function (err, result) {
        if (err) {
            var msg = err;
            return sendResponse.sendErrorMessage(msg, res, 500);
        } else {
            return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, res, 200);
        }
    })

}

exports.invoiceEmailMultiple = async (req, res) => {


    let order_ids = req.body.order_ids;
    let currency = req.body.currency;
    let product_cost = req.body.product_cost;


    let orderDetails = await orderFunction.orderDescriptionV4(req.dbName, order_ids);

    let date = new Date()
    let day = date.getDate();
    let month = date.getMonth() + 1;
    let year = date.getFullYear();

    let fullDate = day + "/" + month + "/" + year;


    orderDetails.forEach(async (orderDetail, i) => {


        let order_id = orderDetail.id;
        let subject = "Invoice " + order_id;

        let payment_source = orderDetail.payment_source;
        let Product_cost = orderDetail.Product_cost;
        let delivery_charges = orderDetail.delivery_charges;
        let commission = orderDetail.commission;
        let payment_id = orderDetail.payment_id;

        let firstname = orderDetail.firstname;
        let delivery_mode = (orderDetail.self_pickup == 0) ? "Delivery" : "Self Pickup";

        let total_amount = orderDetail.total_amount;

        let net_amount = orderDetail.total_amount;


        let supplier_address = orderDetail.address;

        //let order_amount = orderDetail[0].order_cost;

        let total_order_price = orderDetail.total_order_price;



        let supplier_name = orderDetail.name;
        let receiverEmail = orderDetail.email;

        console.log(orderDetail, "orderDetailorderDetailorderDetail")
        let orderList = ``;

        orderList += `<tr>
                <td style="max-width:40%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"><strong style="color:#222;">${orderDetail.product}</strong></td>
                <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"> ${orderDetail.quantity}</td>

                <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"> ${currency} ${product_cost[i]}</td>
                 <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${currency} ${product_cost[i] * orderDetail.quantity} </td>

                                 
                            </tr>`;


        let htmlContent = `<!DOCTYPE>
<html>
<head>
<title>Email Tamplate</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body style="font-family: Segoe UI, Roboto, Helvetica Neue,Helvetica, Arial,sans-serif; background: #fff;margin:40px 10px; padding:0px; border-radius: 15px; display:table; margin: 15px auto;">

  <table  cellspacing="0" cellpanding="0" style="max-width:700px;  border-collapse: collapse; border-radius: 15px; border: 1px solid #444;">
   <tr>
   <td style="padding: 0px;"> 
            
            <table style="width: 100%; ">
                <tbody>  
                    <tr>
                         <td style="text-align: left;padding: 0px 15px;width: 100%;font-size:20px;font-weight:bold;color: #26348e;font-family: sans-serif;">
                            <h1 style="margin:10px 0 0;">Invoice</h1>
                        </td>
                    </tr>  
                    <tr>
                         <td style="text-align: left;padding: 10px 15px;width: 100%;font-size: 20px;font-weight:bold;color: #ca2e81;font-family: sans-serif;">
                            <span>Submitted on ${fullDate}</span>
                        </td>
                    </tr> 
                </tbody>
           </table>


            <table style="width: 100%; margin:0px 0px 0px;  color: #4E5457; background: #fff; font-size: 14px; overflow: hidden;padding:15px 0;">
                    <tbody>
                        <thead>
                            <tr>
                                 <th style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;">Payable to</th>
                                <th style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;">Invoice ID</th>
                                <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;">Delivery Mode</h1></td>

                            </tr>
                        </thead>
                       <tbody>
                            <tr>
                                 <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${supplier_name}</td>
                                <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${order_id}</td>
                                <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${delivery_mode}</td>

                                </tr>
                            
                            <tr>
                               <td style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;"> Commission	</h1></td>
                               <td style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;">
                               Delivery Charges</h1></td>
                               <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;">Payment Source</h1></td>

                               </tr>
                             
                             <tr>
                                 <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${commission}</td>
                                <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"> ${delivery_charges}</td>
                                <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${payment_source}</td>

                             </tr>


                             <tr>
                               <td style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;">Payment ID	</h1></td>
                               <td style="max-width: 33.333333%;text-align: left;padding: 0px 15px;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;"><h1 style="text-align: left;width: 100%;font-size: 20px;font-weight: bold;color: #444;font-family: sans-serif;margin:0;">
                               Balance Amount</h1></td>
                               </tr>
                             
                             <tr>
                                <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">${payment_id}</td>
                                <td style="max-width: 33.333333%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"> ${total_amount}</td>

                             </tr>

                       </tbody>
                    </tbody>
               </table>
                <table style="width: 100%;margin: 20px 0px 0px;color: #4E5457;background: #fff;font-size: 14px;padding: 0px;overflow: hidden;border-top: 1px solid#ccc;border-bottom: 1px solid#ccc;">
                    <thead>
                        <tr>
                           <th style="color: #26348e;max-width:40%;text-align: left;padding: 10px 15px;width: 100%;font-size: 20px;font-weight: bold;font-family: sans-serif;">Product Name</th>
                            <th style="color: #26348e;max-width:20%;text-align: right;padding: 10px 15px;width: 100%;font-size: 20px;font-weight: bold;font-family: sans-serif;">Qty</th>
                           <th style="color: #26348e;max-width:20%;text-align: right;padding: 10px 15px;width: 100%;font-size: 20px;font-weight: bold;font-family: sans-serif;">Product price</th>
                            <th style="color: #26348e;max-width:20%;text-align: right;padding: 10px 15px;width: 100%;font-size: 20px;font-weight: bold;font-family: sans-serif;">Total price</th>
                        </tr>
                    </thead>
                    <tbody>
                     ${orderList}
                    </tbody>
               </table>
                <table style="width: 100%;margin: 20px 0px 0px;color: #4E5457;background: #fff;font-size: 14px;padding: 0px;overflow: hidden;">
                    <tbody>
                       <tr>
                           <td style="max-width:40%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;">Notes:</td>
                           <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #26348e;font-family: sans-serif;">Subtotal</td>
                          <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #222;font-weight:bold;font-family: sans-serif;"><strong>${currency}${total_amount}</strong></td>
                       </tr>
                        
                       <tr>
                           <td style="max-width:40%;text-align: left;padding: 5px 15px;width: 100%;font-size: 16px;color: #848484;font-family: sans-serif;"></td>
                           <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;font-size: 16px;color: #26348e;font-family: sans-serif;"></td>
                           <td style="max-width:20%;text-align: right;padding: 5px 15px;width: 100%;color: #ca2e81;font-family: sans-serif;"><h1 style="margin:0;font-size: 30px;">${currency}${net_amount}</h1></td>
                       </tr>
                  </tbody>
              </table>
               </td>
               </tr>
             </table>       
</body></html>`;


        const func = require('../routes/commonfunction');
        let smtpSqlSata = await Universal.smtpData(req.dbName);

        await func.sendMailthroughSMTPV3(smtpSqlSata, res, subject, receiverEmail, htmlContent, 0);

    });

    return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, res, 200);


}


function twodecimle(n) {
    n = n.toString();
    if (n.indexOf('.') > 0) {
        let number = n.slice(0, n.indexOf('.')) + n.slice(n.indexOf('.'), n.indexOf('.') + 3);
        var res = number.split(".");
        console.log(res, Number(number).toFixed(2), "Number(number).toFixed(2)")
        if (res.length == 1 || res[1].length < 3) {
            number = Number(number).toFixed(2);
        }
        return parseFloat(number);

    } else {
        return parseFloat(n)
    }

}

function addZeroes(num) {
    console.log(num, "num=>>>>>>>>>")
    var value = num.toString();
    var res = value.split(".");
    if (res.length == 1 || res[1].length < 2) {
        if (res[1]) {
            value = res[0] + "." + res[1] + "0";
        } else {
            value = res[0] + ".00";
        }

    }
    return value;
}

exports.invoiceEmailMultiple1 = async (req, res) => {

    let order_ids = req.body.order_ids;
    let currency = req.body.currency;
    let product_cost = req.body.product_cost;

    let vat_value = req.body.vat_value;

    let supplier_name = req.body.supplier_name || "";
    let receiverEmail = req.body.email;

    let start_date = req.body.start_date || "";
    let end_date = req.body.end_date || "";


    let total_total_amount = 0, vat_charge = 0, total_net_amount = 0, total_delivery_charges = 0, total_commission = 0, total_quantity = 0, user_service_charge = 0, total_count = 0, total_service_charge = 0, total_vat_charge = 0, orderList = '';


    let orderDetails = await orderFunction.statementEmailData(req.dbName, order_ids);

    let data = [];

    let cashorderDetails = await orderFunction.statementEmailData(req.dbName, order_ids, "cash");

    orderDetails.forEach(async (orderDetail, i) => {


        let delivery_charges = orderDetail.delivery_charges;
        let commission = orderDetail.commission;


        user_service_charge += orderDetail.user_service_charge;


        total_vat_charge += orderDetail.supplier_vat_value;


        let total_amount = orderDetail.total_amount;

        let net_amount = orderDetail.net_amount;



        let delivered_on = orderDetail.delivered_on;

        let count = orderDetail.count;
        total_count += parseInt(count);


        total_total_amount += total_amount;

        total_net_amount += net_amount;

        total_commission += commission;

        let date = new Date(delivered_on);

        let day = date.getDate();
        let month = date.getMonth() + 1;
        let year = date.getFullYear()

        let delivered_on_date = day + "/" + month + "/" + year;

        net_amount = addZeroes(net_amount);

        console.log(i, orderDetails.length, "orderDetails.length")

        if (i == orderDetails.length - 1) {
            orderList += `<tr>                                
            <td style="padding: 15px 0 15px;font-size: 18px;text-align:left;">${delivered_on_date}</td>
            <td style="padding:15px 0 15px;font-size: 18px;text-align:center;">${count}</td>
            <td style="padding: 15px 0 15px;font-size: 18px;text-align:right;">${currency}${net_amount}</td>
            </tr>
        `;
        } else {
            orderList += `<tr>                                
            <td style="padding: 15px 0 0px;font-size: 18px;text-align:left;">${delivered_on_date}</td>
            <td style="padding:15px 0 0px;font-size: 18px;text-align:center;">${count}</td>
            <td style="padding: 15px 0 0px;font-size: 18px;text-align:right;">${currency}${net_amount}</td>
            </tr>
        `;
        }



    });



    var sub_total = eval(product_cost.join("+"));

    console.log(total_net_amount, "total_net_amounttotal_net_amount", user_service_charge)

    let net_without_service = (total_net_amount - user_service_charge);
    let commsion_per = orderDetails[0].commission;

    total_commission = net_without_service * (commsion_per / 100);
    total_commission = twodecimle(total_commission);

    let cash_total = cashorderDetails[0].net_amount;
    let total_vat = (user_service_charge + total_commission) * (vat_value / 100);

    total_vat = twodecimle(total_vat);

    let sub_total_vat = total_vat + user_service_charge + total_commission;
    sub_total_vat = twodecimle(sub_total_vat)


    let will_pay = total_net_amount - (sub_total_vat + cash_total);

    console.log(total_commission, "total_commissiontotal_commission", sub_total_vat, total_vat)

    net_without_service = twodecimle(net_without_service);


    total_net_amount = twodecimle(total_net_amount);

    total_total_amount = twodecimle(total_total_amount);


    total_service_charge = twodecimle(user_service_charge);


    will_pay = twodecimle(will_pay);

    total_commission = addZeroes(total_commission);

    will_pay = addZeroes(will_pay);

    total_service_charge = addZeroes(total_service_charge);
    sub_total_vat = addZeroes(sub_total_vat);
    total_vat = addZeroes(total_vat);


    let htmlContent = `<!DOCTYPE>
    <html>
    <head>
    <title>Email Tamplate</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
       <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    </head>
    <body style="font-family: Segoe UI, Roboto, Helvetica Neue,Helvetica, Arial,sans-serif; background: #fff;  max-width:900px;  margin:40px 10px; padding: 0px; border-radius: 15px; display:table; margin: 15px auto;">
    

    

    <table  cellspacing="0" cellpanding="0" style="max-width:100%; Width:100%;  border-collapse: collapse; border-radius: 15px; border: 1px solid #444;">
    <tr>
    <td style="padding: 0px;">
   
        <table style="width:100%; border-collapse: collapse;text-align:center;" cellspacing="0" cellpanding="0">
            <tbody>
                <tr>
                    <td style="padding: 10px 10px;"> 
                        <h1 style="margin: 0;font-size: 38px;font-style: italic;color: #000;" >Your invoice</h1>
                        <p style="font-style: italic;margin: 0;font-size: 10px;color: #6e6d6d;font-weight: bold;">${start_date} - ${end_date}</p>
                    </td>
                    
                </tr>
            </tbody>
        </table>        

        
    <h2 style="margin: 0;font-size: 20px;font-weight: bold;margin:0 4%;    color: #000;">${supplier_name}</h2>
        <h2 style="margin: 0;font-size: 20px;font-weight: bold;margin:1% 0 0 4%;    color: #000;">Payment Calculation</h2>
        <table style="width: 92%; color: #4E5457;margin:3% 4%; background: #fff; font-size: 14px; border-collapse: collapse; padding:20px; overflow: hidden;">
                  
            <thead>
                <tr style="border-bottom: 1px solid #444;">
                    <th style="width: 50%;text-align: left;font-size: 18px;padding:0 0 20px 0px">Day/ Pick-up orders time</th>
                    <th></th>
                    <th style="text-align:right;font-size: 18px;padding:0 0 20px 0px;">Sales (incl. VAT)</th>
                </tr>
            </thead>
                            <tbody> 
                                ${orderList}
                            </tbody>
                            <tfoot>
                                <tr style="border-top: 1px solid #444;">
                                    <td style="padding: 15px 0 0px;font-size: 20px;text-align:left;">Total</td>
                                    <td style="padding:15px 0 0px;font-size: 20px;text-align:center;">${total_count}</td>
                                    <td style="padding: 15px 0 0px;font-size: 20px;text-align:right;">${currency}${total_net_amount}</td>
                            </tfoot>
                        </table>
  </td>
</tr>
</table> 

<table style="width: 100%;margin-top: 20px;border-collapse: collapse;border-radius: 15px;border: 1px solid #444;">
<tbody>
    <!--<tr>
         <td style="text-align: left; padding:0px 15px 8px; width: 100%; ">
            <h2 style="margin: 0;font-size: 20px;font-weight: bold;color: #000;">${supplier_name}</h2>
        </td>
    </tr> --> 
    <tr>
         <td style="text-align: left;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom: 1px solid #444;">
           Your total order value
        </td>
        <td style="text-align: right;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom:1px solid #444;">${currency}${total_net_amount}</td>
    </tr> 

    <tr>
                 <td style="text-align: left;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom: 1px solid #444;">
                   Total Commissionable Value (does not include service charge)
                </td>
                <td style="text-align: right;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom:1px solid #444;">${currency}${net_without_service}</td>
            </tr> 
     
     <tr>
         <td style="text-align: left;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom: 1px solid #444;">
           Commission charged (@ ${commsion_per} %)
        </td>
        <td style="text-align: right;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom:1px solid #444;">${currency}${total_commission}</td>
    </tr> 

    <tr>
    <td style="text-align: left;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom: 1px solid #444;">
      Total value of service charge paid by customer @50p per order
   </td>
   <td style="text-align: right;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom:1px solid #444;">${currency}${total_service_charge}</td>
</tr>
      <tr >
         <td style="text-align: left;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom: 1px solid #444;">
           VAT (@ ${vat_value} %)
        </td>
        <td style="text-align: right;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom:1px solid #444;">${currency}${total_vat}</td>
    </tr> 
    

    <tr >
         <td style="text-align: left;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom: 1px solid #444;">
            Subtotal (incl. VAT)
        </td>
        <td style="text-align: right;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom:1px solid #444;">${currency}${sub_total_vat}</td>
    </tr> 

    <tr >
    <td style="text-align: left;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom: 1px solid #444;">
       Cash order value collected by you
   </td>
   <td style="text-align: right;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom:1px solid #444;">${currency}${cash_total}</td>
</tr>
      
    <tr>
         <td style="text-align: left;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom: 1px solid #444;">
          You will be paid 
        </td>
        <td style="text-align: right;padding: 10px 20px;width: 100%;margin: 0;font-size: 16px;color: #6e6d6d;font-weight: 400;border-bottom:1px solid #444;">${currency}${will_pay}</td>
    </tr> 
               
</tbody>
</table>
        </body></html>`;

    console.log(htmlContent);
    const func = require('../routes/commonfunction');
    let smtpSqlSata = await Universal.smtpData(req.dbName);
    let subject = "Invoice ";

    await func.sendMailthroughSMTPV3(smtpSqlSata, res, subject, receiverEmail, htmlContent, 0);

    return sendResponse.sendSuccessData({}, constant.responseMessage.SUCCESS, res, 200);

}




